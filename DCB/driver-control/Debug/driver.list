
driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c7c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f4c  08004f4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f54  08004f54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004180  20000010  08004f6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004190  08004f6c  00024190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001461e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec3  00000000  00000000  0003465e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00037528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024712  00000000  00000000  00039338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d90  00000000  00000000  0005da4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd84b  00000000  00000000  000707da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ffc  00000000  00000000  0014e078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004e44 	.word	0x08004e44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08004e44 	.word	0x08004e44

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <vApplicationGetIdleTaskMemory+0x2c>)
 8000528:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <vApplicationGetIdleTaskMemory+0x30>)
 800052e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	2000002c 	.word	0x2000002c
 8000548:	20000080 	.word	0x20000080

0800054c <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4603      	mov	r3, r0
 800055c:	70fb      	strb	r3, [r7, #3]
 800055e:	460b      	mov	r3, r1
 8000560:	70bb      	strb	r3, [r7, #2]
 8000562:	4613      	mov	r3, r2
 8000564:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8000566:	2300      	movs	r3, #0
 8000568:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 800056a:	4a4f      	ldr	r2, [pc, #316]	; (80006a8 <lcdInit+0x15c>)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b4c      	ldr	r3, [pc, #304]	; (80006a8 <lcdInit+0x15c>)
 8000578:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 800057a:	4a4b      	ldr	r2, [pc, #300]	; (80006a8 <lcdInit+0x15c>)
 800057c:	78bb      	ldrb	r3, [r7, #2]
 800057e:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8000580:	4a49      	ldr	r2, [pc, #292]	; (80006a8 <lcdInit+0x15c>)
 8000582:	787b      	ldrb	r3, [r7, #1]
 8000584:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8000586:	4b48      	ldr	r3, [pc, #288]	; (80006a8 <lcdInit+0x15c>)
 8000588:	2208      	movs	r2, #8
 800058a:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 800058c:	4b47      	ldr	r3, [pc, #284]	; (80006ac <lcdInit+0x160>)
 800058e:	2234      	movs	r2, #52	; 0x34
 8000590:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000592:	4b46      	ldr	r3, [pc, #280]	; (80006ac <lcdInit+0x160>)
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	4b45      	ldr	r3, [pc, #276]	; (80006ac <lcdInit+0x160>)
 8000598:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 800059a:	4b44      	ldr	r3, [pc, #272]	; (80006ac <lcdInit+0x160>)
 800059c:	2230      	movs	r2, #48	; 0x30
 800059e:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	75fb      	strb	r3, [r7, #23]
 80005a4:	e030      	b.n	8000608 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80005a6:	4b40      	ldr	r3, [pc, #256]	; (80006a8 <lcdInit+0x15c>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	4b3f      	ldr	r3, [pc, #252]	; (80006a8 <lcdInit+0x15c>)
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	b299      	uxth	r1, r3
 80005b0:	2303      	movs	r3, #3
 80005b2:	4a3e      	ldr	r2, [pc, #248]	; (80006ac <lcdInit+0x160>)
 80005b4:	f002 fa5c 	bl	8002a70 <HAL_I2C_Master_Transmit_DMA>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <lcdInit+0x76>
            return false;
 80005be:	2300      	movs	r3, #0
 80005c0:	e06d      	b.n	800069e <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 80005c2:	f003 fd99 	bl	80040f8 <xTaskGetTickCount>
 80005c6:	4603      	mov	r3, r0
 80005c8:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80005ca:	e002      	b.n	80005d2 <lcdInit+0x86>
            vTaskDelay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f003 fc55 	bl	8003e7c <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80005d2:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <lcdInit+0x15c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fbac 	bl	8002d34 <HAL_I2C_GetState>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b20      	cmp	r3, #32
 80005e0:	d1f4      	bne.n	80005cc <lcdInit+0x80>
        }

        if (i == 2) {
 80005e2:	7dfb      	ldrb	r3, [r7, #23]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d106      	bne.n	80005f6 <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fbc6 	bl	8003d80 <vTaskDelayUntil>
 80005f4:	e005      	b.n	8000602 <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fbbf 	bl	8003d80 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	3301      	adds	r3, #1
 8000606:	75fb      	strb	r3, [r7, #23]
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d9cb      	bls.n	80005a6 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 800060e:	4b27      	ldr	r3, [pc, #156]	; (80006ac <lcdInit+0x160>)
 8000610:	222c      	movs	r2, #44	; 0x2c
 8000612:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <lcdInit+0x160>)
 8000616:	781a      	ldrb	r2, [r3, #0]
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <lcdInit+0x160>)
 800061a:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <lcdInit+0x160>)
 800061e:	2228      	movs	r2, #40	; 0x28
 8000620:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <lcdInit+0x15c>)
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <lcdInit+0x15c>)
 8000628:	799b      	ldrb	r3, [r3, #6]
 800062a:	b299      	uxth	r1, r3
 800062c:	2303      	movs	r3, #3
 800062e:	4a1f      	ldr	r2, [pc, #124]	; (80006ac <lcdInit+0x160>)
 8000630:	f002 fa1e 	bl	8002a70 <HAL_I2C_Master_Transmit_DMA>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d004      	beq.n	8000644 <lcdInit+0xf8>
        return false;
 800063a:	2300      	movs	r3, #0
 800063c:	e02f      	b.n	800069e <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f003 fc1c 	bl	8003e7c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <lcdInit+0x15c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fb73 	bl	8002d34 <HAL_I2C_GetState>
 800064e:	4603      	mov	r3, r0
 8000650:	2b20      	cmp	r3, #32
 8000652:	d1f4      	bne.n	800063e <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	b2db      	uxtb	r3, r3
 800065c:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <lcdInit+0x15c>)
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d904      	bls.n	8000670 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	f043 0308 	orr.w	r3, r3, #8
 800066c:	b2db      	uxtb	r3, r3
 800066e:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	4619      	mov	r1, r3
 8000676:	2000      	movs	r0, #0
 8000678:	f000 f980 	bl	800097c <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 800067c:	2101      	movs	r1, #1
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f816 	bl	80006b0 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8000684:	2101      	movs	r1, #1
 8000686:	2007      	movs	r0, #7
 8000688:	f000 f812 	bl	80006b0 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 800068c:	2101      	movs	r1, #1
 800068e:	2002      	movs	r0, #2
 8000690:	f000 f80e 	bl	80006b0 <lcdCommand>
    lcdCursorHome();
 8000694:	2101      	movs	r1, #1
 8000696:	2005      	movs	r0, #5
 8000698:	f000 f80a 	bl	80006b0 <lcdCommand>

    return true;
 800069c:	2301      	movs	r3, #1
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000288 	.word	0x20000288
 80006ac:	20000280 	.word	0x20000280

080006b0 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d06e      	beq.n	80007a8 <lcdCommand+0xf8>
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	f040 80b4 	bne.w	8000838 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	d864      	bhi.n	80007a2 <lcdCommand+0xf2>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <lcdCommand+0x30>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	08000701 	.word	0x08000701
 80006e4:	08000731 	.word	0x08000731
 80006e8:	08000711 	.word	0x08000711
 80006ec:	08000721 	.word	0x08000721
 80006f0:	08000755 	.word	0x08000755
 80006f4:	08000789 	.word	0x08000789
 80006f8:	08000779 	.word	0x08000779
 80006fc:	08000793 	.word	0x08000793
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8000700:	4b61      	ldr	r3, [pc, #388]	; (8000888 <lcdCommand+0x1d8>)
 8000702:	7a1b      	ldrb	r3, [r3, #8]
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b5f      	ldr	r3, [pc, #380]	; (8000888 <lcdCommand+0x1d8>)
 800070c:	721a      	strb	r2, [r3, #8]
                    break;
 800070e:	e04a      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8000710:	4b5d      	ldr	r3, [pc, #372]	; (8000888 <lcdCommand+0x1d8>)
 8000712:	7a1b      	ldrb	r3, [r3, #8]
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b5b      	ldr	r3, [pc, #364]	; (8000888 <lcdCommand+0x1d8>)
 800071c:	721a      	strb	r2, [r3, #8]
                    break;
 800071e:	e042      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8000720:	4b59      	ldr	r3, [pc, #356]	; (8000888 <lcdCommand+0x1d8>)
 8000722:	7a1b      	ldrb	r3, [r3, #8]
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b57      	ldr	r3, [pc, #348]	; (8000888 <lcdCommand+0x1d8>)
 800072c:	721a      	strb	r2, [r3, #8]
                    break;
 800072e:	e03a      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8000730:	2301      	movs	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000734:	f107 030f 	add.w	r3, r7, #15
 8000738:	4619      	mov	r1, r3
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f91e 	bl	800097c <lcdWriteByte>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d101      	bne.n	800074a <lcdCommand+0x9a>
                        return false;
 8000746:	2300      	movs	r3, #0
 8000748:	e09a      	b.n	8000880 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 800074a:	2002      	movs	r0, #2
 800074c:	f003 fb96 	bl	8003e7c <vTaskDelay>
                        return true;
 8000750:	2301      	movs	r3, #1
 8000752:	e095      	b.n	8000880 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8000754:	2302      	movs	r3, #2
 8000756:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000758:	f107 030f 	add.w	r3, r7, #15
 800075c:	4619      	mov	r1, r3
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f90c 	bl	800097c <lcdWriteByte>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <lcdCommand+0xbe>
                        return false;
 800076a:	2300      	movs	r3, #0
 800076c:	e088      	b.n	8000880 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 800076e:	2002      	movs	r0, #2
 8000770:	f003 fb84 	bl	8003e7c <vTaskDelay>
                        return true;
 8000774:	2301      	movs	r3, #1
 8000776:	e083      	b.n	8000880 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8000778:	4b43      	ldr	r3, [pc, #268]	; (8000888 <lcdCommand+0x1d8>)
 800077a:	7a5b      	ldrb	r3, [r3, #9]
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b41      	ldr	r3, [pc, #260]	; (8000888 <lcdCommand+0x1d8>)
 8000784:	725a      	strb	r2, [r3, #9]
                    break;
 8000786:	e00e      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8000788:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <lcdCommand+0x1d8>)
 800078a:	7a5a      	ldrb	r2, [r3, #9]
 800078c:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <lcdCommand+0x1d8>)
 800078e:	725a      	strb	r2, [r3, #9]
                    break;
 8000790:	e009      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8000792:	4b3d      	ldr	r3, [pc, #244]	; (8000888 <lcdCommand+0x1d8>)
 8000794:	7a5b      	ldrb	r3, [r3, #9]
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <lcdCommand+0x1d8>)
 800079e:	725a      	strb	r2, [r3, #9]
                    break;
 80007a0:	e001      	b.n	80007a6 <lcdCommand+0xf6>

                default:
                    return false;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e06c      	b.n	8000880 <lcdCommand+0x1d0>
            }

            break;
 80007a6:	e049      	b.n	800083c <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	2b07      	cmp	r3, #7
 80007ae:	d840      	bhi.n	8000832 <lcdCommand+0x182>
 80007b0:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <lcdCommand+0x108>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007d9 	.word	0x080007d9
 80007bc:	08000833 	.word	0x08000833
 80007c0:	080007e9 	.word	0x080007e9
 80007c4:	080007f9 	.word	0x080007f9
 80007c8:	08000833 	.word	0x08000833
 80007cc:	08000819 	.word	0x08000819
 80007d0:	08000809 	.word	0x08000809
 80007d4:	08000823 	.word	0x08000823
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <lcdCommand+0x1d8>)
 80007da:	7a1b      	ldrb	r3, [r3, #8]
 80007dc:	f023 0304 	bic.w	r3, r3, #4
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <lcdCommand+0x1d8>)
 80007e4:	721a      	strb	r2, [r3, #8]
                    break;
 80007e6:	e026      	b.n	8000836 <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <lcdCommand+0x1d8>)
 80007ea:	7a1b      	ldrb	r3, [r3, #8]
 80007ec:	f023 0302 	bic.w	r3, r3, #2
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <lcdCommand+0x1d8>)
 80007f4:	721a      	strb	r2, [r3, #8]
                    break;
 80007f6:	e01e      	b.n	8000836 <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <lcdCommand+0x1d8>)
 80007fa:	7a1b      	ldrb	r3, [r3, #8]
 80007fc:	f023 0301 	bic.w	r3, r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <lcdCommand+0x1d8>)
 8000804:	721a      	strb	r2, [r3, #8]
                    break;
 8000806:	e016      	b.n	8000836 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <lcdCommand+0x1d8>)
 800080a:	7a5b      	ldrb	r3, [r3, #9]
 800080c:	f023 0302 	bic.w	r3, r3, #2
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <lcdCommand+0x1d8>)
 8000814:	725a      	strb	r2, [r3, #9]
                    break;
 8000816:	e00e      	b.n	8000836 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <lcdCommand+0x1d8>)
 800081a:	7a5a      	ldrb	r2, [r3, #9]
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <lcdCommand+0x1d8>)
 800081e:	725a      	strb	r2, [r3, #9]
                    break;
 8000820:	e009      	b.n	8000836 <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <lcdCommand+0x1d8>)
 8000824:	7a5b      	ldrb	r3, [r3, #9]
 8000826:	f023 0301 	bic.w	r3, r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <lcdCommand+0x1d8>)
 800082e:	725a      	strb	r2, [r3, #9]
                    break;
 8000830:	e001      	b.n	8000836 <lcdCommand+0x186>

                default:
                    return false;
 8000832:	2300      	movs	r3, #0
 8000834:	e024      	b.n	8000880 <lcdCommand+0x1d0>
            }

            break;
 8000836:	e001      	b.n	800083c <lcdCommand+0x18c>

        default:
            return false;
 8000838:	2300      	movs	r3, #0
 800083a:	e021      	b.n	8000880 <lcdCommand+0x1d0>
    }

    /* Now lets send the command */
    switch (command) {
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b08      	cmp	r3, #8
 8000840:	dc16      	bgt.n	8000870 <lcdCommand+0x1c0>
 8000842:	2b06      	cmp	r3, #6
 8000844:	da0d      	bge.n	8000862 <lcdCommand+0x1b2>
 8000846:	2b01      	cmp	r3, #1
 8000848:	d004      	beq.n	8000854 <lcdCommand+0x1a4>
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd10      	ble.n	8000870 <lcdCommand+0x1c0>
 800084e:	3b03      	subs	r3, #3
 8000850:	2b01      	cmp	r3, #1
 8000852:	d80d      	bhi.n	8000870 <lcdCommand+0x1c0>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <lcdCommand+0x1d8>)
 8000856:	7a1b      	ldrb	r3, [r3, #8]
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73fb      	strb	r3, [r7, #15]
            break;
 8000860:	e007      	b.n	8000872 <lcdCommand+0x1c2>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <lcdCommand+0x1d8>)
 8000864:	7a5b      	ldrb	r3, [r3, #9]
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]
            break;
 800086e:	e000      	b.n	8000872 <lcdCommand+0x1c2>

        default:
            break;
 8000870:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8000872:	f107 030f 	add.w	r3, r7, #15
 8000876:	4619      	mov	r1, r3
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f87f 	bl	800097c <lcdWriteByte>
 800087e:	4603      	mov	r3, r0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000288 	.word	0x20000288

0800088c <lcdBacklight>:
 * @brief  Turn display's Backlight On or Off
 * @param  command LCD_BIT_BACKIGHT_ON to turn display On
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display Off
 * @return         true if success
 */
bool lcdBacklight(uint8_t command) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
    lcdParams.backlight = command;
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <lcdBacklight+0x4c>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, &lcdParams.backlight, 1) != HAL_OK) {
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <lcdBacklight+0x4c>)
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <lcdBacklight+0x4c>)
 80008a2:	799b      	ldrb	r3, [r3, #6]
 80008a4:	b299      	uxth	r1, r3
 80008a6:	2301      	movs	r3, #1
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <lcdBacklight+0x50>)
 80008aa:	f002 f8e1 	bl	8002a70 <HAL_I2C_Master_Transmit_DMA>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d004      	beq.n	80008be <lcdBacklight+0x32>
        return false;
 80008b4:	2300      	movs	r3, #0
 80008b6:	e00b      	b.n	80008d0 <lcdBacklight+0x44>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f003 fadf 	bl	8003e7c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <lcdBacklight+0x4c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fa36 	bl	8002d34 <HAL_I2C_GetState>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b20      	cmp	r3, #32
 80008cc:	d1f4      	bne.n	80008b8 <lcdBacklight+0x2c>
    }

    return true;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000288 	.word	0x20000288
 80008dc:	2000028f 	.word	0x2000028f

080008e0 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <lcdSetCursorPosition+0x50>)
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	79ba      	ldrb	r2, [r7, #6]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d303      	bcc.n	8000902 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <lcdSetCursorPosition+0x50>)
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <lcdSetCursorPosition+0x54>)
 8000906:	5cd2      	ldrb	r2, [r2, r3]
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4413      	add	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	b25b      	sxtb	r3, r3
 8000910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000914:	b25b      	sxtb	r3, r3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 800091a:	f107 030f 	add.w	r3, r7, #15
 800091e:	4619      	mov	r1, r3
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f82b 	bl	800097c <lcdWriteByte>
 8000926:	4603      	mov	r3, r0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000288 	.word	0x20000288
 8000934:	08004f30 	.word	0x08004f30

08000938 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e00e      	b.n	8000968 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	2001      	movs	r0, #1
 8000954:	f000 f812 	bl	800097c <lcdWriteByte>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <lcdPrintStr+0x2a>
            return false;
 800095e:	2300      	movs	r3, #0
 8000960:	e007      	b.n	8000972 <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	3301      	adds	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	429a      	cmp	r2, r3
 800096e:	d3ec      	bcc.n	800094a <lcdPrintStr+0x12>
        }
    }

    return true;
 8000970:	2301      	movs	r3, #1
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <lcdWriteByte+0xdc>)
 800098a:	79da      	ldrb	r2, [r3, #7]
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4313      	orrs	r3, r2
 8000990:	b2da      	uxtb	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	f023 030f 	bic.w	r3, r3, #15
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <lcdWriteByte+0xe0>)
 80009a8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <lcdWriteByte+0xe0>)
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <lcdWriteByte+0xe0>)
 80009b0:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <lcdWriteByte+0xdc>)
 80009b4:	79da      	ldrb	r2, [r3, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	f023 030f 	bic.w	r3, r3, #15
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <lcdWriteByte+0xe0>)
 80009d2:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 80009d4:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <lcdWriteByte+0xdc>)
 80009d6:	79da      	ldrb	r2, [r3, #7]
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	4313      	orrs	r3, r2
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	011b      	lsls	r3, r3, #4
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <lcdWriteByte+0xe0>)
 80009f2:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <lcdWriteByte+0xe0>)
 80009f6:	78da      	ldrb	r2, [r3, #3]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <lcdWriteByte+0xe0>)
 80009fa:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <lcdWriteByte+0xdc>)
 80009fe:	79da      	ldrb	r2, [r3, #7]
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	b25a      	sxtb	r2, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <lcdWriteByte+0xe0>)
 8000a18:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <lcdWriteByte+0xdc>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <lcdWriteByte+0xdc>)
 8000a20:	799b      	ldrb	r3, [r3, #6]
 8000a22:	b299      	uxth	r1, r3
 8000a24:	2306      	movs	r3, #6
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <lcdWriteByte+0xe0>)
 8000a28:	f002 f822 	bl	8002a70 <HAL_I2C_Master_Transmit_DMA>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d004      	beq.n	8000a3c <lcdWriteByte+0xc0>
        return false;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e00b      	b.n	8000a4e <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f003 fa20 	bl	8003e7c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <lcdWriteByte+0xdc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f977 	bl	8002d34 <HAL_I2C_GetState>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b20      	cmp	r3, #32
 8000a4a:	d1f4      	bne.n	8000a36 <lcdWriteByte+0xba>
    }

    return true;
 8000a4c:	2301      	movs	r3, #1
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000288 	.word	0x20000288
 8000a5c:	20000280 	.word	0x20000280

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b5b0      	push	{r4, r5, r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// init the CAN filter
	canFilter.FilterBank = 0;
 8000a66:	4b49      	ldr	r3, [pc, #292]	; (8000b8c <main+0x12c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a6c:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <main+0x12c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
	canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a72:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <main+0x12c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
	canFilter.FilterIdHigh = 0;
 8000a78:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <main+0x12c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	canFilter.FilterIdLow = 0;
 8000a7e:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <main+0x12c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
	canFilter.FilterMaskIdHigh = 0;
 8000a84:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <main+0x12c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
	canFilter.FilterMaskIdLow = 0;
 8000a8a:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <main+0x12c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a90:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <main+0x12c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	61da      	str	r2, [r3, #28]
	canFilter.FilterActivation = ENABLE;
 8000a96:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <main+0x12c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	621a      	str	r2, [r3, #32]
	canFilter.SlaveStartFilterBank = 14;
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <main+0x12c>)
 8000a9e:	220e      	movs	r2, #14
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24

	// init the CAN mailbox for BASE
	txHeader0.DLC = 8; // Number of bites to be transmitted max- 8
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <main+0x130>)
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	611a      	str	r2, [r3, #16]
	txHeader0.IDE = CAN_ID_STD;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <main+0x130>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
	txHeader0.RTR = CAN_RTR_DATA;
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <main+0x130>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
	txHeader0.StdId = 0x90;
 8000ab4:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <main+0x130>)
 8000ab6:	2290      	movs	r2, #144	; 0x90
 8000ab8:	601a      	str	r2, [r3, #0]
	txHeader0.ExtId = 0x02;
 8000aba:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <main+0x130>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
	txHeader0.TransmitGlobalTime = DISABLE;
 8000ac0:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <main+0x130>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for Torque Setting 
	txHeader1.DLC = 8; // Number of bites to be transmitted max- 8
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <main+0x134>)
 8000ac8:	2208      	movs	r2, #8
 8000aca:	611a      	str	r2, [r3, #16]
	txHeader1.IDE = CAN_ID_STD;
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <main+0x134>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
	txHeader1.RTR = CAN_RTR_DATA;
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <main+0x134>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
	txHeader1.StdId = 0x91;
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <main+0x134>)
 8000ada:	2291      	movs	r2, #145	; 0x91
 8000adc:	601a      	str	r2, [r3, #0]
	txHeader1.ExtId = 0x03;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <main+0x134>)
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	605a      	str	r2, [r3, #4]
	txHeader1.TransmitGlobalTime = DISABLE;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <main+0x134>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for DAQ Data
	txHeader2.DLC = 8; // Number of bites to be transmitted max- 8
 8000aea:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <main+0x138>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	611a      	str	r2, [r3, #16]
	txHeader2.IDE = CAN_ID_STD;
 8000af0:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <main+0x138>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
	txHeader2.RTR = CAN_RTR_DATA;
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <main+0x138>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
	txHeader2.StdId = 0x92;
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <main+0x138>)
 8000afe:	2292      	movs	r2, #146	; 0x92
 8000b00:	601a      	str	r2, [r3, #0]
	txHeader2.ExtId = 0x04;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <main+0x138>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	605a      	str	r2, [r3, #4]
	txHeader2.TransmitGlobalTime = DISABLE;
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <main+0x138>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for Control Data
	txHeader3.DLC = 8; // Number of bites to be transmitted max- 8
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <main+0x13c>)
 8000b10:	2208      	movs	r2, #8
 8000b12:	611a      	str	r2, [r3, #16]
	txHeader3.IDE = CAN_ID_STD;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <main+0x13c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
	txHeader3.RTR = CAN_RTR_DATA;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <main+0x13c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
	txHeader3.StdId = 0x93;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <main+0x13c>)
 8000b22:	2293      	movs	r2, #147	; 0x93
 8000b24:	601a      	str	r2, [r3, #0]
	txHeader3.ExtId = 0x05;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <main+0x13c>)
 8000b28:	2205      	movs	r2, #5
 8000b2a:	605a      	str	r2, [r3, #4]
	txHeader3.TransmitGlobalTime = DISABLE;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <main+0x13c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	751a      	strb	r2, [r3, #20]

	HAL_CAN_ConfigFilter(&hcan1, &canFilter); // Initialize CAN Filter
 8000b32:	4916      	ldr	r1, [pc, #88]	; (8000b8c <main+0x12c>)
 8000b34:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <main+0x140>)
 8000b36:	f000 fe6d 	bl	8001814 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1); // Initialize CAN Bus
 8000b3a:	4819      	ldr	r0, [pc, #100]	; (8000ba0 <main+0x140>)
 8000b3c:	f000 ff56 	bl	80019ec <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Interrupt
 8000b40:	2102      	movs	r1, #2
 8000b42:	4817      	ldr	r0, [pc, #92]	; (8000ba0 <main+0x140>)
 8000b44:	f001 f8a8 	bl	8001c98 <HAL_CAN_ActivateNotification>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fb92 	bl	8001270 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f82e 	bl	8000bac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b50:	f000 f924 	bl	8000d9c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b54:	f000 f888 	bl	8000c68 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000b58:	f000 f8be 	bl	8000cd8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000b5c:	f000 f8f0 	bl	8000d40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	// start up LCD display
	welcomeScreen();
 8000b60:	f000 f9a4 	bl	8000eac <welcomeScreen>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <main+0x144>)
 8000b66:	1d3c      	adds	r4, r7, #4
 8000b68:	461d      	mov	r5, r3
 8000b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fe59 	bl	8003832 <osThreadCreate>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <main+0x148>)
 8000b84:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b86:	f002 fe4d 	bl	8003824 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <main+0x12a>
 8000b8c:	2000414c 	.word	0x2000414c
 8000b90:	200040dc 	.word	0x200040dc
 8000b94:	20004174 	.word	0x20004174
 8000b98:	20004108 	.word	0x20004108
 8000b9c:	20004018 	.word	0x20004018
 8000ba0:	20004120 	.word	0x20004120
 8000ba4:	08004e68 	.word	0x08004e68
 8000ba8:	20003ff4 	.word	0x20003ff4

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2234      	movs	r2, #52	; 0x34
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 f93a 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <SystemClock_Config+0xb4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <SystemClock_Config+0xb4>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <SystemClock_Config+0xb4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <SystemClock_Config+0xb8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <SystemClock_Config+0xb8>)
 8000bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <SystemClock_Config+0xb8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c10:	2310      	movs	r3, #16
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 fb65 	bl	80032ec <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c28:	f000 f97c 	bl	8000f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 f994 	bl	8002f74 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c52:	f000 f967 	bl	8000f24 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	; 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <MX_ADC1_Init+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <MX_ADC1_Init+0x6c>)
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_ADC1_Init+0x64>)
 8000cba:	f000 fb6f 	bl	800139c <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8000cc4:	f000 f92e 	bl	8000f24 <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20004094 	.word	0x20004094
 8000cd0:	40012000 	.word	0x40012000
 8000cd4:	0f000001 	.word	0x0f000001

08000cd8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <MX_CAN1_Init+0x64>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000ce4:	2210      	movs	r2, #16
 8000ce6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_CAN1_Init+0x60>)
 8000d26:	f000 fc79 	bl	800161c <HAL_CAN_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f000 f8f8 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20004120 	.word	0x20004120
 8000d3c:	40006400 	.word	0x40006400

08000d40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d46:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <MX_I2C1_Init+0x54>)
 8000d48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d4c:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <MX_I2C1_Init+0x58>)
 8000d4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_I2C1_Init+0x50>)
 8000d7e:	f001 fd33 	bl	80027e8 <HAL_I2C_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d88:	f000 f8cc 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20004030 	.word	0x20004030
 8000d94:	40005400 	.word	0x40005400
 8000d98:	000186a0 	.word	0x000186a0

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <MX_GPIO_Init+0xe0>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <MX_GPIO_Init+0xe0>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <MX_GPIO_Init+0xe0>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <MX_GPIO_Init+0xe0>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <MX_GPIO_Init+0xe0>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_GPIO_Init+0xe0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f240 4104 	movw	r1, #1028	; 0x404
 8000df0:	4823      	ldr	r0, [pc, #140]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000df2:	f001 fcdf 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfc:	4821      	ldr	r0, [pc, #132]	; (8000e84 <MX_GPIO_Init+0xe8>)
 8000dfe:	f001 fcd9 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000e02:	f240 4304 	movw	r3, #1028	; 0x404
 8000e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4819      	ldr	r0, [pc, #100]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000e1c:	f001 fb36 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e20:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000e36:	f001 fb29 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480c      	ldr	r0, [pc, #48]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000e50:	f001 fb1c 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_GPIO_Init+0xe8>)
 8000e6e:	f001 fb0d 	bl	800248c <HAL_GPIO_Init>

}
 8000e72:	bf00      	nop
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief CAN read message function
 * 
 * @param hcan1
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	// receive CAN bus message to canRX buffer
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX); 
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 fdec 	bl	8001a74 <HAL_CAN_GetRxMessage>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000294 	.word	0x20000294
 8000ea8:	20003ffc 	.word	0x20003ffc

08000eac <welcomeScreen>:
/**
 * @brief welcome & boot screen
 * 
 */
void welcomeScreen()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	lcdInit(&hi2c1, 0x27, 2, 16);       			// init lcd (i2c reference, LCD address, lines, rows)
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	2127      	movs	r1, #39	; 0x27
 8000eb6:	4814      	ldr	r0, [pc, #80]	; (8000f08 <welcomeScreen+0x5c>)
 8000eb8:	f7ff fb48 	bl	800054c <lcdInit>
	lcdAutoscrollOff();								// turn off autoscroll
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2008      	movs	r0, #8
 8000ec0:	f7ff fbf6 	bl	80006b0 <lcdCommand>
	lcdBacklightOn();								// turn on backlight
 8000ec4:	2008      	movs	r0, #8
 8000ec6:	f7ff fce1 	bl	800088c <lcdBacklight>
	lcdDisplayClear();                  			// clear the screen
 8000eca:	2101      	movs	r1, #1
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f7ff fbef 	bl	80006b0 <lcdCommand>
	lcdSetCursorPosition(2, 0);         			// set the cursor
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f7ff fd03 	bl	80008e0 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"welcome AERO!", 13);   	// print
 8000eda:	210d      	movs	r1, #13
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <welcomeScreen+0x60>)
 8000ede:	f7ff fd2b 	bl	8000938 <lcdPrintStr>
	lcdSetCursorPosition(2, 1);         			// next line
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f7ff fcfb 	bl	80008e0 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"booting up...", 13);   	// print
 8000eea:	210d      	movs	r1, #13
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <welcomeScreen+0x64>)
 8000eee:	f7ff fd23 	bl	8000938 <lcdPrintStr>
	HAL_Delay(3000);								// delay 3 seconds so the screen can be read
 8000ef2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ef6:	f000 fa2d 	bl	8001354 <HAL_Delay>
	lcdDisplayClear();								// clear the display so the other screens can be printed
 8000efa:	2101      	movs	r1, #1
 8000efc:	2002      	movs	r0, #2
 8000efe:	f7ff fbd7 	bl	80006b0 <lcdCommand>
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20004030 	.word	0x20004030
 8000f0c:	08004e84 	.word	0x08004e84
 8000f10:	08004e94 	.word	0x08004e94

08000f14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f002 fcd4 	bl	80038ca <osDelay>
 8000f22:	e7fb      	b.n	8000f1c <StartDefaultTask+0x8>

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>
	...

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_MspInit+0x54>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_MspInit+0x54>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_MspInit+0x54>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_MspInit+0x54>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_MspInit+0x54>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_MspInit+0x54>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	210f      	movs	r1, #15
 8000f72:	f06f 0001 	mvn.w	r0, #1
 8000f76:	f001 f9c0 	bl	80022fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a24      	ldr	r2, [pc, #144]	; (8001038 <HAL_ADC_MspInit+0xb0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d141      	bne.n	800102e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a22      	ldr	r2, [pc, #136]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ffe:	23ff      	movs	r3, #255	; 0xff
 8001000:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <HAL_ADC_MspInit+0xb8>)
 8001012:	f001 fa3b 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001016:	2303      	movs	r3, #3
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101a:	2303      	movs	r3, #3
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <HAL_ADC_MspInit+0xbc>)
 800102a:	f001 fa2f 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40012000 	.word	0x40012000
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400

08001048 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <HAL_CAN_MspInit+0xa4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d13c      	bne.n	80010e4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <HAL_CAN_MspInit+0xa8>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <HAL_CAN_MspInit+0xa8>)
 8001074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_CAN_MspInit+0xa8>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_CAN_MspInit+0xa8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <HAL_CAN_MspInit+0xa8>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_CAN_MspInit+0xa8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010b4:	2309      	movs	r3, #9
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <HAL_CAN_MspInit+0xac>)
 80010c0:	f001 f9e4 	bl	800248c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2105      	movs	r1, #5
 80010c8:	2013      	movs	r0, #19
 80010ca:	f001 f916 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80010ce:	2013      	movs	r0, #19
 80010d0:	f001 f92f 	bl	8002332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2105      	movs	r1, #5
 80010d8:	2014      	movs	r0, #20
 80010da:	f001 f90e 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010de:	2014      	movs	r0, #20
 80010e0:	f001 f927 	bl	8002332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40006400 	.word	0x40006400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000

080010f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <HAL_I2C_MspInit+0x84>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12b      	bne.n	8001172 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001136:	23c0      	movs	r3, #192	; 0xc0
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113a:	2312      	movs	r3, #18
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001146:	2304      	movs	r3, #4
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <HAL_I2C_MspInit+0x8c>)
 8001152:	f001 f99b 	bl	800248c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40005400 	.word	0x40005400
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 f8ac 	bl	8001314 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011bc:	f003 f996 	bl	80044ec <xTaskGetSchedulerState>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d001      	beq.n	80011ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011c6:	f003 fbd7 	bl	8004978 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <CAN1_TX_IRQHandler+0x10>)
 80011d6:	f000 fd85 	bl	8001ce4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20004120 	.word	0x20004120

080011e4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <CAN1_RX0_IRQHandler+0x10>)
 80011ea:	f000 fd7b 	bl	8001ce4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20004120 	.word	0x20004120

080011f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <SystemInit+0x20>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <SystemInit+0x20>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001222:	490e      	ldr	r1, [pc, #56]	; (800125c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001238:	4c0b      	ldr	r4, [pc, #44]	; (8001268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001246:	f7ff ffd7 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f003 fdcf 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff fc07 	bl	8000a60 <main>
  bx  lr    
 8001252:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001254:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001260:	08004f5c 	.word	0x08004f5c
  ldr r2, =_sbss
 8001264:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001268:	20004190 	.word	0x20004190

0800126c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_Init+0x40>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_Init+0x40>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x40>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f001 f823 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	200f      	movs	r0, #15
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fe44 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 f83b 	bl	800234e <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f001 f803 	bl	80022fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000
 800130c:	20000008 	.word	0x20000008
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008
 8001338:	2000418c 	.word	0x2000418c

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2000418c 	.word	0x2000418c

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e033      	b.n	800141a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fde4 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d118      	bne.n	800140c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013e2:	f023 0302 	bic.w	r3, r3, #2
 80013e6:	f043 0202 	orr.w	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f818 	bl	8001424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f023 0303 	bic.w	r3, r3, #3
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	; 0x40
 800140a:	e001      	b.n	8001410 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142c:	4b79      	ldr	r3, [pc, #484]	; (8001614 <ADC_Init+0x1f0>)
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	021a      	lsls	r2, r3, #8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800147c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6899      	ldr	r1, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	4a58      	ldr	r2, [pc, #352]	; (8001618 <ADC_Init+0x1f4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d022      	beq.n	8001502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6899      	ldr	r1, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	e00f      	b.n	8001522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0202 	bic.w	r2, r2, #2
 8001530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6899      	ldr	r1, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e1b      	ldrb	r3, [r3, #24]
 800153c:	005a      	lsls	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01b      	beq.n	8001588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800155e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800156e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	3b01      	subs	r3, #1
 800157c:	035a      	lsls	r2, r3, #13
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	e007      	b.n	8001598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	051a      	lsls	r2, r3, #20
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6899      	ldr	r1, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015da:	025a      	lsls	r2, r3, #9
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6899      	ldr	r1, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	029a      	lsls	r2, r3, #10
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	609a      	str	r2, [r3, #8]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40012300 	.word	0x40012300
 8001618:	0f000001 	.word	0x0f000001

0800161c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0ed      	b.n	800180a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fd04 	bl	8001048 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001650:	f7ff fe74 	bl	800133c <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001656:	e012      	b.n	800167e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001658:	f7ff fe70 	bl	800133c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b0a      	cmp	r3, #10
 8001664:	d90b      	bls.n	800167e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2205      	movs	r2, #5
 8001676:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0c5      	b.n	800180a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0e5      	beq.n	8001658 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0202 	bic.w	r2, r2, #2
 800169a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800169c:	f7ff fe4e 	bl	800133c <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a2:	e012      	b.n	80016ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a4:	f7ff fe4a 	bl	800133c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d90b      	bls.n	80016ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2205      	movs	r2, #5
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e09f      	b.n	800180a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e5      	bne.n	80016a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7e1b      	ldrb	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e007      	b.n	8001702 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7e5b      	ldrb	r3, [r3, #25]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e007      	b.n	800172c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800172a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e9b      	ldrb	r3, [r3, #26]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e007      	b.n	8001756 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0220 	bic.w	r2, r2, #32
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7edb      	ldrb	r3, [r3, #27]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d108      	bne.n	8001770 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0210 	bic.w	r2, r2, #16
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e007      	b.n	8001780 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0210 	orr.w	r2, r2, #16
 800177e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7f1b      	ldrb	r3, [r3, #28]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0208 	orr.w	r2, r2, #8
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e007      	b.n	80017aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0208 	bic.w	r2, r2, #8
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7f5b      	ldrb	r3, [r3, #29]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0204 	orr.w	r2, r2, #4
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e007      	b.n	80017d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0204 	bic.w	r2, r2, #4
 80017d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	ea42 0103 	orr.w	r1, r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	1e5a      	subs	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800182c:	7cfb      	ldrb	r3, [r7, #19]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d003      	beq.n	800183a <HAL_CAN_ConfigFilter+0x26>
 8001832:	7cfb      	ldrb	r3, [r7, #19]
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 80c7 	bne.w	80019c8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a69      	ldr	r2, [pc, #420]	; (80019e4 <HAL_CAN_ConfigFilter+0x1d0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d001      	beq.n	8001848 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_CAN_ConfigFilter+0x1d4>)
 8001846:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800184e:	f043 0201 	orr.w	r2, r3, #1
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4a63      	ldr	r2, [pc, #396]	; (80019e8 <HAL_CAN_ConfigFilter+0x1d4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d111      	bne.n	8001884 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001866:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d123      	bne.n	80018f6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	401a      	ands	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3248      	adds	r2, #72	; 0x48
 80018d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	3348      	adds	r3, #72	; 0x48
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d122      	bne.n	8001944 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	431a      	orrs	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800191e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3248      	adds	r2, #72	; 0x48
 8001924:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001938:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800193a:	6979      	ldr	r1, [r7, #20]
 800193c:	3348      	adds	r3, #72	; 0x48
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d109      	bne.n	8001960 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800195e:	e007      	b.n	8001970 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	431a      	orrs	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800198a:	e007      	b.n	800199c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	431a      	orrs	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ba:	f023 0201 	bic.w	r2, r3, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e006      	b.n	80019d6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
  }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40006c00 	.word	0x40006c00
 80019e8:	40006400 	.word	0x40006400

080019ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d12e      	bne.n	8001a5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a18:	f7ff fc90 	bl	800133c <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a1e:	e012      	b.n	8001a46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a20:	f7ff fc8c 	bl	800133c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d90b      	bls.n	8001a46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e012      	b.n	8001a6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1e5      	bne.n	8001a20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e006      	b.n	8001a6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
  }
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a88:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d003      	beq.n	8001a98 <HAL_CAN_GetRxMessage+0x24>
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	f040 80f3 	bne.w	8001c7e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10e      	bne.n	8001abc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d116      	bne.n	8001ada <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0e7      	b.n	8001c8c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d107      	bne.n	8001ada <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0d8      	b.n	8001c8c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	331b      	adds	r3, #27
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	4413      	add	r3, r2
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0204 	and.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	331b      	adds	r3, #27
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0d5b      	lsrs	r3, r3, #21
 8001b08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e00b      	b.n	8001b2a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	331b      	adds	r3, #27
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	331b      	adds	r3, #27
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0202 	and.w	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	331b      	adds	r3, #27
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 020f 	and.w	r2, r3, #15
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	331b      	adds	r3, #27
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	3304      	adds	r3, #4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	331b      	adds	r3, #27
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0c1b      	lsrs	r3, r3, #16
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0a1a      	lsrs	r2, r3, #8
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0c1a      	lsrs	r2, r3, #16
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	3302      	adds	r3, #2
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0e1a      	lsrs	r2, r3, #24
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3303      	adds	r3, #3
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0a1a      	lsrs	r2, r3, #8
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	3305      	adds	r3, #5
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0c1a      	lsrs	r2, r3, #16
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	3306      	adds	r3, #6
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0e1a      	lsrs	r2, r3, #24
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	3307      	adds	r3, #7
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d108      	bne.n	8001c6a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	e007      	b.n	8001c7a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0220 	orr.w	r2, r2, #32
 8001c78:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e006      	b.n	8001c8c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
  }
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d002      	beq.n	8001cb6 <HAL_CAN_ActivateNotification+0x1e>
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d109      	bne.n	8001cca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6959      	ldr	r1, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e006      	b.n	8001cd8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
  }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d07c      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d023      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f983 	bl	8002052 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d4c:	e016      	b.n	8001d7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	e00c      	b.n	8001d7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	e002      	b.n	8001d7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f989 	bl	800208e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d024      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f963 	bl	8002066 <HAL_CAN_TxMailbox1CompleteCallback>
 8001da0:	e016      	b.n	8001dd0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
 8001db4:	e00c      	b.n	8001dd0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc8:	e002      	b.n	8001dd0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f969 	bl	80020a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d024      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001de2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f943 	bl	800207a <HAL_CAN_TxMailbox2CompleteCallback>
 8001df4:	e016      	b.n	8001e24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
 8001e08:	e00c      	b.n	8001e24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	e002      	b.n	8001e24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f949 	bl	80020b6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2210      	movs	r2, #16
 8001e46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2208      	movs	r2, #8
 8001e62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f930 	bl	80020ca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d009      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff f800 	bl	8000e88 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f912 	bl	80020f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8f9 	bl	80020de <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2210      	movs	r2, #16
 8001f06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8fc 	bl	8002106 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2208      	movs	r2, #8
 8001f28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8f5 	bl	800211a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d07b      	beq.n	8002032 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d072      	beq.n	800202a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d043      	beq.n	800202a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03e      	beq.n	800202a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb2:	2b60      	cmp	r3, #96	; 0x60
 8001fb4:	d02b      	beq.n	800200e <HAL_CAN_IRQHandler+0x32a>
 8001fb6:	2b60      	cmp	r3, #96	; 0x60
 8001fb8:	d82e      	bhi.n	8002018 <HAL_CAN_IRQHandler+0x334>
 8001fba:	2b50      	cmp	r3, #80	; 0x50
 8001fbc:	d022      	beq.n	8002004 <HAL_CAN_IRQHandler+0x320>
 8001fbe:	2b50      	cmp	r3, #80	; 0x50
 8001fc0:	d82a      	bhi.n	8002018 <HAL_CAN_IRQHandler+0x334>
 8001fc2:	2b40      	cmp	r3, #64	; 0x40
 8001fc4:	d019      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x316>
 8001fc6:	2b40      	cmp	r3, #64	; 0x40
 8001fc8:	d826      	bhi.n	8002018 <HAL_CAN_IRQHandler+0x334>
 8001fca:	2b30      	cmp	r3, #48	; 0x30
 8001fcc:	d010      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x30c>
 8001fce:	2b30      	cmp	r3, #48	; 0x30
 8001fd0:	d822      	bhi.n	8002018 <HAL_CAN_IRQHandler+0x334>
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d002      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x2f8>
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d005      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fda:	e01d      	b.n	8002018 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fe4:	e019      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fee:	e014      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	f043 0320 	orr.w	r3, r3, #32
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ff8:	e00f      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002002:	e00a      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800200c:	e005      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002016:	e000      	b.n	800201a <HAL_CAN_IRQHandler+0x336>
            break;
 8002018:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002028:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2204      	movs	r2, #4
 8002030:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f872 	bl	800212e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	; 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff29 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230c:	f7ff ff3e 	bl	800218c <__NVIC_GetPriorityGrouping>
 8002310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7ff ff8e 	bl	8002238 <NVIC_EncodePriority>
 800231c:	4602      	mov	r2, r0
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff5d 	bl	80021e4 <__NVIC_SetPriority>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff31 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffa2 	bl	80022a0 <SysTick_Config>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_DMA_Start_IT+0x26>
 8002388:	2302      	movs	r3, #2
 800238a:	e040      	b.n	800240e <HAL_DMA_Start_IT+0xa8>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d12f      	bne.n	8002400 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f83a 	bl	800242e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	223f      	movs	r2, #63	; 0x3f
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0216 	orr.w	r2, r2, #22
 80023d4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0208 	orr.w	r2, r2, #8
 80023ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e005      	b.n	800240c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002408:	2302      	movs	r3, #2
 800240a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800240c:	7dfb      	ldrb	r3, [r7, #23]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800244a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d108      	bne.n	800246e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800246c:	e007      	b.n	800247e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	60da      	str	r2, [r3, #12]
}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e165      	b.n	8002774 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8154 	bne.w	800276e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d005      	beq.n	80024de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d130      	bne.n	8002540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 0201 	and.w	r2, r3, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d017      	beq.n	800257c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d123      	bne.n	80025d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	08da      	lsrs	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3208      	adds	r2, #8
 8002590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80ae 	beq.w	800276e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b5d      	ldr	r3, [pc, #372]	; (800278c <HAL_GPIO_Init+0x300>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	4a5c      	ldr	r2, [pc, #368]	; (800278c <HAL_GPIO_Init+0x300>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6453      	str	r3, [r2, #68]	; 0x44
 8002622:	4b5a      	ldr	r3, [pc, #360]	; (800278c <HAL_GPIO_Init+0x300>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262e:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_GPIO_Init+0x304>)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4f      	ldr	r2, [pc, #316]	; (8002794 <HAL_GPIO_Init+0x308>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d025      	beq.n	80026a6 <HAL_GPIO_Init+0x21a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_GPIO_Init+0x30c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01f      	beq.n	80026a2 <HAL_GPIO_Init+0x216>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4d      	ldr	r2, [pc, #308]	; (800279c <HAL_GPIO_Init+0x310>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d019      	beq.n	800269e <HAL_GPIO_Init+0x212>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_GPIO_Init+0x314>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0x20e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4b      	ldr	r2, [pc, #300]	; (80027a4 <HAL_GPIO_Init+0x318>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00d      	beq.n	8002696 <HAL_GPIO_Init+0x20a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <HAL_GPIO_Init+0x31c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x206>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a49      	ldr	r2, [pc, #292]	; (80027ac <HAL_GPIO_Init+0x320>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_GPIO_Init+0x202>
 800268a:	2306      	movs	r3, #6
 800268c:	e00c      	b.n	80026a8 <HAL_GPIO_Init+0x21c>
 800268e:	2307      	movs	r3, #7
 8002690:	e00a      	b.n	80026a8 <HAL_GPIO_Init+0x21c>
 8002692:	2305      	movs	r3, #5
 8002694:	e008      	b.n	80026a8 <HAL_GPIO_Init+0x21c>
 8002696:	2304      	movs	r3, #4
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x21c>
 800269a:	2303      	movs	r3, #3
 800269c:	e004      	b.n	80026a8 <HAL_GPIO_Init+0x21c>
 800269e:	2302      	movs	r3, #2
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_Init+0x21c>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x21c>
 80026a6:	2300      	movs	r3, #0
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	f002 0203 	and.w	r2, r2, #3
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	4093      	lsls	r3, r2
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b8:	4935      	ldr	r1, [pc, #212]	; (8002790 <HAL_GPIO_Init+0x304>)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c6:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <HAL_GPIO_Init+0x324>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ea:	4a31      	ldr	r2, [pc, #196]	; (80027b0 <HAL_GPIO_Init+0x324>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026f0:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <HAL_GPIO_Init+0x324>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <HAL_GPIO_Init+0x324>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_GPIO_Init+0x324>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273e:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <HAL_GPIO_Init+0x324>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_GPIO_Init+0x324>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002768:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_GPIO_Init+0x324>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3301      	adds	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b0f      	cmp	r3, #15
 8002778:	f67f ae96 	bls.w	80024a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	40013800 	.word	0x40013800
 8002794:	40020000 	.word	0x40020000
 8002798:	40020400 	.word	0x40020400
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40021800 	.word	0x40021800
 80027b0:	40013c00 	.word	0x40013c00

080027b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
 80027c0:	4613      	mov	r3, r2
 80027c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c4:	787b      	ldrb	r3, [r7, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027d0:	e003      	b.n	80027da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	041a      	lsls	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	619a      	str	r2, [r3, #24]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e12b      	b.n	8002a52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fc72 	bl	80010f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2224      	movs	r2, #36	; 0x24
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800283a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800284a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800284c:	f000 fd3a 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8002850:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a81      	ldr	r2, [pc, #516]	; (8002a5c <HAL_I2C_Init+0x274>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d807      	bhi.n	800286c <HAL_I2C_Init+0x84>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a80      	ldr	r2, [pc, #512]	; (8002a60 <HAL_I2C_Init+0x278>)
 8002860:	4293      	cmp	r3, r2
 8002862:	bf94      	ite	ls
 8002864:	2301      	movls	r3, #1
 8002866:	2300      	movhi	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e006      	b.n	800287a <HAL_I2C_Init+0x92>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a7d      	ldr	r2, [pc, #500]	; (8002a64 <HAL_I2C_Init+0x27c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	bf94      	ite	ls
 8002874:	2301      	movls	r3, #1
 8002876:	2300      	movhi	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0e7      	b.n	8002a52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a78      	ldr	r2, [pc, #480]	; (8002a68 <HAL_I2C_Init+0x280>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a6a      	ldr	r2, [pc, #424]	; (8002a5c <HAL_I2C_Init+0x274>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d802      	bhi.n	80028bc <HAL_I2C_Init+0xd4>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	3301      	adds	r3, #1
 80028ba:	e009      	b.n	80028d0 <HAL_I2C_Init+0xe8>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	4a69      	ldr	r2, [pc, #420]	; (8002a6c <HAL_I2C_Init+0x284>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	3301      	adds	r3, #1
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	495c      	ldr	r1, [pc, #368]	; (8002a5c <HAL_I2C_Init+0x274>)
 80028ec:	428b      	cmp	r3, r1
 80028ee:	d819      	bhi.n	8002924 <HAL_I2C_Init+0x13c>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1e59      	subs	r1, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80028fe:	1c59      	adds	r1, r3, #1
 8002900:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002904:	400b      	ands	r3, r1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_I2C_Init+0x138>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1e59      	subs	r1, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fbb1 f3f3 	udiv	r3, r1, r3
 8002918:	3301      	adds	r3, #1
 800291a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291e:	e051      	b.n	80029c4 <HAL_I2C_Init+0x1dc>
 8002920:	2304      	movs	r3, #4
 8002922:	e04f      	b.n	80029c4 <HAL_I2C_Init+0x1dc>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d111      	bne.n	8002950 <HAL_I2C_Init+0x168>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	440b      	add	r3, r1
 800293a:	fbb0 f3f3 	udiv	r3, r0, r3
 800293e:	3301      	adds	r3, #1
 8002940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e012      	b.n	8002976 <HAL_I2C_Init+0x18e>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e58      	subs	r0, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	0099      	lsls	r1, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	fbb0 f3f3 	udiv	r3, r0, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Init+0x196>
 800297a:	2301      	movs	r3, #1
 800297c:	e022      	b.n	80029c4 <HAL_I2C_Init+0x1dc>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10e      	bne.n	80029a4 <HAL_I2C_Init+0x1bc>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1e58      	subs	r0, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6859      	ldr	r1, [r3, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	440b      	add	r3, r1
 8002994:	fbb0 f3f3 	udiv	r3, r0, r3
 8002998:	3301      	adds	r3, #1
 800299a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Init+0x1dc>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1e58      	subs	r0, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	0099      	lsls	r1, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6809      	ldr	r1, [r1, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6911      	ldr	r1, [r2, #16]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68d2      	ldr	r2, [r2, #12]
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	000186a0 	.word	0x000186a0
 8002a60:	001e847f 	.word	0x001e847f
 8002a64:	003d08ff 	.word	0x003d08ff
 8002a68:	431bde83 	.word	0x431bde83
 8002a6c:	10624dd3 	.word	0x10624dd3

08002a70 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	817b      	strh	r3, [r7, #10]
 8002a80:	4613      	mov	r3, r2
 8002a82:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	f040 810d 	bne.w	8002cb0 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a96:	4b89      	ldr	r3, [pc, #548]	; (8002cbc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	08db      	lsrs	r3, r3, #3
 8002a9c:	4a88      	ldr	r2, [pc, #544]	; (8002cc0 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0a1a      	lsrs	r2, r3, #8
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d116      	bne.n	8002aea <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0e3      	b.n	8002cb2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d0db      	beq.n	8002ab0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Master_Transmit_DMA+0x96>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e0d5      	b.n	8002cb2 <HAL_I2C_Master_Transmit_DMA+0x242>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d007      	beq.n	8002b2c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2221      	movs	r2, #33	; 0x21
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2210      	movs	r2, #16
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	893a      	ldrh	r2, [r7, #8]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a56      	ldr	r2, [pc, #344]	; (8002cc4 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002b6e:	897a      	ldrh	r2, [r7, #10]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d07b      	beq.n	8002c74 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02a      	beq.n	8002bda <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	4a4f      	ldr	r2, [pc, #316]	; (8002cc8 <HAL_I2C_Master_Transmit_DMA+0x258>)
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b90:	4a4e      	ldr	r2, [pc, #312]	; (8002ccc <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8002b92:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	2200      	movs	r2, #0
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	2200      	movs	r2, #0
 8002baa:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3310      	adds	r3, #16
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	f7ff fbcc 	bl	8002366 <HAL_DMA_Start_IT>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d139      	bne.n	8002c4c <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8002bd8:	e013      	b.n	8002c02 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e057      	b.n	8002cb2 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c18:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c28:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c38:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e02f      	b.n	8002cac <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e01e      	b.n	8002cb2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c82:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c92:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002caa:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	14f8b589 	.word	0x14f8b589
 8002cc4:	ffff0000 	.word	0xffff0000
 8002cc8:	08002d51 	.word	0x08002d51
 8002ccc:	08002efb 	.word	0x08002efb

08002cd0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d6c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d82:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	2200      	movs	r2, #0
 8002d92:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	2200      	movs	r2, #0
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002daa:	2b21      	cmp	r3, #33	; 0x21
 8002dac:	d007      	beq.n	8002dbe <I2C_DMAXferCplt+0x6e>
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8002db4:	2b22      	cmp	r3, #34	; 0x22
 8002db6:	d131      	bne.n	8002e1c <I2C_DMAXferCplt+0xcc>
 8002db8:	7cbb      	ldrb	r3, [r7, #18]
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d12e      	bne.n	8002e1c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dcc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b29      	cmp	r3, #41	; 0x29
 8002dd8:	d10a      	bne.n	8002df0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2221      	movs	r2, #33	; 0x21
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2228      	movs	r2, #40	; 0x28
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f7ff ff7b 	bl	8002ce4 <HAL_I2C_SlaveTxCpltCallback>
 8002dee:	e00c      	b.n	8002e0a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b2a      	cmp	r3, #42	; 0x2a
 8002df4:	d109      	bne.n	8002e0a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2222      	movs	r2, #34	; 0x22
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2228      	movs	r2, #40	; 0x28
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e04:	6978      	ldr	r0, [r7, #20]
 8002e06:	f7ff ff77 	bl	8002cf8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e18:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e1a:	e06a      	b.n	8002ef2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d064      	beq.n	8002ef2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d107      	bne.n	8002e42 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e40:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e58:	d009      	beq.n	8002e6e <I2C_DMAXferCplt+0x11e>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d006      	beq.n	8002e6e <I2C_DMAXferCplt+0x11e>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e66:	d002      	beq.n	8002e6e <I2C_DMAXferCplt+0x11e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d107      	bne.n	8002e7e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e8c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8002eac:	6978      	ldr	r0, [r7, #20]
 8002eae:	f7ff ff37 	bl	8002d20 <HAL_I2C_ErrorCallback>
}
 8002eb2:	e01e      	b.n	8002ef2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d10a      	bne.n	8002ede <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff18 	bl	8002d0c <HAL_I2C_MemRxCpltCallback>
}
 8002edc:	e009      	b.n	8002ef2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2212      	movs	r2, #18
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002eec:	6978      	ldr	r0, [r7, #20]
 8002eee:	f7ff feef 	bl	8002cd0 <HAL_I2C_MasterRxCpltCallback>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	2200      	movs	r2, #0
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	2200      	movs	r2, #0
 8002f26:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff fa74 	bl	8002416 <HAL_DMA_GetError>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d01b      	beq.n	8002f6c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f42:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0210 	orr.w	r2, r3, #16
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff feda 	bl	8002d20 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0cc      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b68      	ldr	r3, [pc, #416]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d90c      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b63      	ldr	r3, [pc, #396]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0b8      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc8:	4b59      	ldr	r3, [pc, #356]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a58      	ldr	r2, [pc, #352]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe0:	4b53      	ldr	r3, [pc, #332]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a52      	ldr	r2, [pc, #328]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b50      	ldr	r3, [pc, #320]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	494d      	ldr	r1, [pc, #308]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d044      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d119      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e07f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d003      	beq.n	8003032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302e:	2b03      	cmp	r3, #3
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e067      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b37      	ldr	r3, [pc, #220]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4934      	ldr	r1, [pc, #208]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	4313      	orrs	r3, r2
 8003062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fe f96a 	bl	800133c <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe f966 	bl	800133c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e04f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b25      	ldr	r3, [pc, #148]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d20c      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b22      	ldr	r3, [pc, #136]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e032      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4916      	ldr	r1, [pc, #88]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	490e      	ldr	r1, [pc, #56]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030fa:	f000 f821 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030fe:	4602      	mov	r2, r0
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	490a      	ldr	r1, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	5ccb      	ldrb	r3, [r1, r3]
 800310e:	fa22 f303 	lsr.w	r3, r2, r3
 8003112:	4a09      	ldr	r2, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe f8ca 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023c00 	.word	0x40023c00
 8003130:	40023800 	.word	0x40023800
 8003134:	08004f34 	.word	0x08004f34
 8003138:	20000000 	.word	0x20000000
 800313c:	20000004 	.word	0x20000004

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003146:	2100      	movs	r1, #0
 8003148:	6079      	str	r1, [r7, #4]
 800314a:	2100      	movs	r1, #0
 800314c:	60f9      	str	r1, [r7, #12]
 800314e:	2100      	movs	r1, #0
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003152:	2100      	movs	r1, #0
 8003154:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003156:	4952      	ldr	r1, [pc, #328]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003158:	6889      	ldr	r1, [r1, #8]
 800315a:	f001 010c 	and.w	r1, r1, #12
 800315e:	2908      	cmp	r1, #8
 8003160:	d00d      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x3e>
 8003162:	2908      	cmp	r1, #8
 8003164:	f200 8094 	bhi.w	8003290 <HAL_RCC_GetSysClockFreq+0x150>
 8003168:	2900      	cmp	r1, #0
 800316a:	d002      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x32>
 800316c:	2904      	cmp	r1, #4
 800316e:	d003      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x38>
 8003170:	e08e      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003172:	4b4c      	ldr	r3, [pc, #304]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003174:	60bb      	str	r3, [r7, #8]
       break;
 8003176:	e08e      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003178:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800317a:	60bb      	str	r3, [r7, #8]
      break;
 800317c:	e08b      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800317e:	4948      	ldr	r1, [pc, #288]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003180:	6849      	ldr	r1, [r1, #4]
 8003182:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003186:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003188:	4945      	ldr	r1, [pc, #276]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800318a:	6849      	ldr	r1, [r1, #4]
 800318c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003190:	2900      	cmp	r1, #0
 8003192:	d024      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003194:	4942      	ldr	r1, [pc, #264]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003196:	6849      	ldr	r1, [r1, #4]
 8003198:	0989      	lsrs	r1, r1, #6
 800319a:	4608      	mov	r0, r1
 800319c:	f04f 0100 	mov.w	r1, #0
 80031a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80031a4:	f04f 0500 	mov.w	r5, #0
 80031a8:	ea00 0204 	and.w	r2, r0, r4
 80031ac:	ea01 0305 	and.w	r3, r1, r5
 80031b0:	493d      	ldr	r1, [pc, #244]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80031b2:	fb01 f003 	mul.w	r0, r1, r3
 80031b6:	2100      	movs	r1, #0
 80031b8:	fb01 f102 	mul.w	r1, r1, r2
 80031bc:	1844      	adds	r4, r0, r1
 80031be:	493a      	ldr	r1, [pc, #232]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80031c0:	fba2 0101 	umull	r0, r1, r2, r1
 80031c4:	1863      	adds	r3, r4, r1
 80031c6:	4619      	mov	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	f7fd f826 	bl	8000220 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e04a      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	461a      	mov	r2, r3
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	ea02 0400 	and.w	r4, r2, r0
 80031f6:	ea03 0501 	and.w	r5, r3, r1
 80031fa:	4620      	mov	r0, r4
 80031fc:	4629      	mov	r1, r5
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	014b      	lsls	r3, r1, #5
 8003208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800320c:	0142      	lsls	r2, r0, #5
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	1b00      	subs	r0, r0, r4
 8003214:	eb61 0105 	sbc.w	r1, r1, r5
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	018b      	lsls	r3, r1, #6
 8003222:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003226:	0182      	lsls	r2, r0, #6
 8003228:	1a12      	subs	r2, r2, r0
 800322a:	eb63 0301 	sbc.w	r3, r3, r1
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	00d9      	lsls	r1, r3, #3
 8003238:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800323c:	00d0      	lsls	r0, r2, #3
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	1912      	adds	r2, r2, r4
 8003244:	eb45 0303 	adc.w	r3, r5, r3
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	0299      	lsls	r1, r3, #10
 8003252:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003256:	0290      	lsls	r0, r2, #10
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	461a      	mov	r2, r3
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	f7fc ffda 	bl	8000220 <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4613      	mov	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	60bb      	str	r3, [r7, #8]
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003292:	60bb      	str	r3, [r7, #8]
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	68bb      	ldr	r3, [r7, #8]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bdb0      	pop	{r4, r5, r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	00f42400 	.word	0x00f42400
 80032a8:	017d7840 	.word	0x017d7840

080032ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000000 	.word	0x20000000

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032c8:	f7ff fff0 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0a9b      	lsrs	r3, r3, #10
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	08004f44 	.word	0x08004f44

080032ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e270      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d075      	beq.n	80033f6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800330a:	4ba3      	ldr	r3, [pc, #652]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b04      	cmp	r3, #4
 8003314:	d00c      	beq.n	8003330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003316:	4ba0      	ldr	r3, [pc, #640]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800331e:	2b08      	cmp	r3, #8
 8003320:	d112      	bne.n	8003348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003322:	4b9d      	ldr	r3, [pc, #628]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800332e:	d10b      	bne.n	8003348 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	4b99      	ldr	r3, [pc, #612]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d05b      	beq.n	80033f4 <HAL_RCC_OscConfig+0x108>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d157      	bne.n	80033f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e24b      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003350:	d106      	bne.n	8003360 <HAL_RCC_OscConfig+0x74>
 8003352:	4b91      	ldr	r3, [pc, #580]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a90      	ldr	r2, [pc, #576]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01d      	b.n	800339c <HAL_RCC_OscConfig+0xb0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0x98>
 800336a:	4b8b      	ldr	r3, [pc, #556]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a8a      	ldr	r2, [pc, #552]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b88      	ldr	r3, [pc, #544]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a87      	ldr	r2, [pc, #540]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0xb0>
 8003384:	4b84      	ldr	r3, [pc, #528]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a83      	ldr	r2, [pc, #524]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b81      	ldr	r3, [pc, #516]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a80      	ldr	r2, [pc, #512]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fd ffca 	bl	800133c <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fd ffc6 	bl	800133c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e210      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b76      	ldr	r3, [pc, #472]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0xc0>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd ffb6 	bl	800133c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fd ffb2 	bl	800133c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1fc      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	4b6c      	ldr	r3, [pc, #432]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0xe8>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003402:	4b65      	ldr	r3, [pc, #404]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340e:	4b62      	ldr	r3, [pc, #392]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003416:	2b08      	cmp	r3, #8
 8003418:	d11c      	bne.n	8003454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341a:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x152>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e1d0      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b56      	ldr	r3, [pc, #344]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4952      	ldr	r1, [pc, #328]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	e03a      	b.n	80034ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345c:	4b4f      	ldr	r3, [pc, #316]	; (800359c <HAL_RCC_OscConfig+0x2b0>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fd ff6b 	bl	800133c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800346a:	f7fd ff67 	bl	800133c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1b1      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	4b46      	ldr	r3, [pc, #280]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b43      	ldr	r3, [pc, #268]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4940      	ldr	r1, [pc, #256]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b3f      	ldr	r3, [pc, #252]	; (800359c <HAL_RCC_OscConfig+0x2b0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd ff4a 	bl	800133c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fd ff46 	bl	800133c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e190      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	4b36      	ldr	r3, [pc, #216]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d030      	beq.n	8003538 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034de:	4b30      	ldr	r3, [pc, #192]	; (80035a0 <HAL_RCC_OscConfig+0x2b4>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fd ff2a 	bl	800133c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fd ff26 	bl	800133c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e170      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x200>
 800350a:	e015      	b.n	8003538 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350c:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x2b4>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7fd ff13 	bl	800133c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351a:	f7fd ff0f 	bl	800133c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e159      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800352e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a0 	beq.w	8003686 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003564:	6413      	str	r3, [r2, #64]	; 0x40
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_OscConfig+0x2b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d121      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_RCC_OscConfig+0x2b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <HAL_RCC_OscConfig+0x2b8>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7fd fed5 	bl	800133c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003594:	e011      	b.n	80035ba <HAL_RCC_OscConfig+0x2ce>
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	42470000 	.word	0x42470000
 80035a0:	42470e80 	.word	0x42470e80
 80035a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a8:	f7fd fec8 	bl	800133c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e112      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b8b      	ldr	r3, [pc, #556]	; (80037e8 <HAL_RCC_OscConfig+0x4fc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d106      	bne.n	80035dc <HAL_RCC_OscConfig+0x2f0>
 80035ce:	4b87      	ldr	r3, [pc, #540]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a86      	ldr	r2, [pc, #536]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
 80035da:	e01c      	b.n	8003616 <HAL_RCC_OscConfig+0x32a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d10c      	bne.n	80035fe <HAL_RCC_OscConfig+0x312>
 80035e4:	4b81      	ldr	r3, [pc, #516]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a80      	ldr	r2, [pc, #512]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	4b7e      	ldr	r3, [pc, #504]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a7d      	ldr	r2, [pc, #500]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
 80035fc:	e00b      	b.n	8003616 <HAL_RCC_OscConfig+0x32a>
 80035fe:	4b7b      	ldr	r3, [pc, #492]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a7a      	ldr	r2, [pc, #488]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	4b78      	ldr	r3, [pc, #480]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a77      	ldr	r2, [pc, #476]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d015      	beq.n	800364a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361e:	f7fd fe8d 	bl	800133c <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fd fe89 	bl	800133c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0d1      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363c:	4b6b      	ldr	r3, [pc, #428]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0ee      	beq.n	8003626 <HAL_RCC_OscConfig+0x33a>
 8003648:	e014      	b.n	8003674 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364a:	f7fd fe77 	bl	800133c <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd fe73 	bl	800133c <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0bb      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003668:	4b60      	ldr	r3, [pc, #384]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ee      	bne.n	8003652 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367a:	4b5c      	ldr	r3, [pc, #368]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4a5b      	ldr	r2, [pc, #364]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003684:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80a7 	beq.w	80037de <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003690:	4b56      	ldr	r3, [pc, #344]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d060      	beq.n	800375e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d145      	bne.n	8003730 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b52      	ldr	r3, [pc, #328]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fd fe47 	bl	800133c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fd fe43 	bl	800133c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e08d      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c4:	4b49      	ldr	r3, [pc, #292]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	019b      	lsls	r3, r3, #6
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	3b01      	subs	r3, #1
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	071b      	lsls	r3, r3, #28
 80036fc:	493b      	ldr	r1, [pc, #236]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd fe18 	bl	800133c <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fd fe14 	bl	800133c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e05e      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	4b32      	ldr	r3, [pc, #200]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x424>
 800372e:	e056      	b.n	80037de <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003730:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <HAL_RCC_OscConfig+0x504>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fd fe01 	bl	800133c <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373e:	f7fd fdfd 	bl	800133c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e047      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003750:	4b26      	ldr	r3, [pc, #152]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <HAL_RCC_OscConfig+0x452>
 800375c:	e03f      	b.n	80037de <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e03a      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_OscConfig+0x500>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d030      	beq.n	80037da <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d129      	bne.n	80037da <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d122      	bne.n	80037da <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800379a:	4013      	ands	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d119      	bne.n	80037da <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	3b01      	subs	r3, #1
 80037b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10f      	bne.n	80037da <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d107      	bne.n	80037da <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d001      	beq.n	80037de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40007000 	.word	0x40007000
 80037ec:	40023800 	.word	0x40023800
 80037f0:	42470060 	.word	0x42470060

080037f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003806:	2b84      	cmp	r3, #132	; 0x84
 8003808:	d005      	beq.n	8003816 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800380a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4413      	add	r3, r2
 8003812:	3303      	adds	r3, #3
 8003814:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003816:	68fb      	ldr	r3, [r7, #12]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003828:	f000 fb5c 	bl	8003ee4 <vTaskStartScheduler>
  
  return osOK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	bd80      	pop	{r7, pc}

08003832 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003834:	b089      	sub	sp, #36	; 0x24
 8003836:	af04      	add	r7, sp, #16
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <osThreadCreate+0x54>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01c      	beq.n	8003886 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685c      	ldr	r4, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681d      	ldr	r5, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691e      	ldr	r6, [r3, #16]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff ffc8 	bl	80037f4 <makeFreeRtosPriority>
 8003864:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800386e:	9202      	str	r2, [sp, #8]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	9100      	str	r1, [sp, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4632      	mov	r2, r6
 8003878:	4629      	mov	r1, r5
 800387a:	4620      	mov	r0, r4
 800387c:	f000 f8ed 	bl	8003a5a <xTaskCreateStatic>
 8003880:	4603      	mov	r3, r0
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e01c      	b.n	80038c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685c      	ldr	r4, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003892:	b29e      	uxth	r6, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ffaa 	bl	80037f4 <makeFreeRtosPriority>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f107 030c 	add.w	r3, r7, #12
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	9200      	str	r2, [sp, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	4632      	mov	r2, r6
 80038ae:	4629      	mov	r1, r5
 80038b0:	4620      	mov	r0, r4
 80038b2:	f000 f92f 	bl	8003b14 <xTaskCreate>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d001      	beq.n	80038c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80038c0:	68fb      	ldr	r3, [r7, #12]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <osDelay+0x16>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	e000      	b.n	80038e2 <osDelay+0x18>
 80038e0:	2301      	movs	r3, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 faca 	bl	8003e7c <vTaskDelay>
  
  return osOK;
 80038e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f103 0208 	add.w	r2, r3, #8
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f04f 32ff 	mov.w	r2, #4294967295
 800390a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f103 0208 	add.w	r2, r3, #8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f103 0208 	add.w	r2, r3, #8
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	601a      	str	r2, [r3, #0]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039aa:	d103      	bne.n	80039b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e00c      	b.n	80039ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3308      	adds	r3, #8
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	e002      	b.n	80039c2 <vListInsert+0x2e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d2f6      	bcs.n	80039bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a06:	b480      	push	{r7}
 8003a08:	b085      	sub	sp, #20
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6892      	ldr	r2, [r2, #8]
 8003a1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6852      	ldr	r2, [r2, #4]
 8003a26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d103      	bne.n	8003a3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08e      	sub	sp, #56	; 0x38
 8003a5e:	af04      	add	r7, sp, #16
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	61fb      	str	r3, [r7, #28]
}
 8003a9c:	bf00      	nop
 8003a9e:	e7fe      	b.n	8003a9e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003aa0:	2354      	movs	r3, #84	; 0x54
 8003aa2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b54      	cmp	r3, #84	; 0x54
 8003aa8:	d00a      	beq.n	8003ac0 <xTaskCreateStatic+0x66>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	61bb      	str	r3, [r7, #24]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ac0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01e      	beq.n	8003b06 <xTaskCreateStatic+0xac>
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01b      	beq.n	8003b06 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	9302      	str	r3, [sp, #8]
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f850 	bl	8003b9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003afe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b00:	f000 f8d4 	bl	8003cac <prvAddNewTaskToReadyList>
 8003b04:	e001      	b.n	8003b0a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b0a:	697b      	ldr	r3, [r7, #20]
	}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3728      	adds	r7, #40	; 0x28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08c      	sub	sp, #48	; 0x30
 8003b18:	af04      	add	r7, sp, #16
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 ff75 	bl	8004a18 <pvPortMalloc>
 8003b2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b36:	2054      	movs	r0, #84	; 0x54
 8003b38:	f000 ff6e 	bl	8004a18 <pvPortMalloc>
 8003b3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
 8003b4a:	e005      	b.n	8003b58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b4c:	6978      	ldr	r0, [r7, #20]
 8003b4e:	f001 f82f 	bl	8004bb0 <vPortFree>
 8003b52:	e001      	b.n	8003b58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d017      	beq.n	8003b8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9303      	str	r3, [sp, #12]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	9302      	str	r3, [sp, #8]
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f80e 	bl	8003b9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b82:	69f8      	ldr	r0, [r7, #28]
 8003b84:	f000 f892 	bl	8003cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	e002      	b.n	8003b94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b94:	69bb      	ldr	r3, [r7, #24]
	}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b088      	sub	sp, #32
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f023 0307 	bic.w	r3, r3, #7
 8003bc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	617b      	str	r3, [r7, #20]
}
 8003be2:	bf00      	nop
 8003be4:	e7fe      	b.n	8003be4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01f      	beq.n	8003c2c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	e012      	b.n	8003c18 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	7819      	ldrb	r1, [r3, #0]
 8003bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	3334      	adds	r3, #52	; 0x34
 8003c02:	460a      	mov	r2, r1
 8003c04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d006      	beq.n	8003c20 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3301      	adds	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	d9e9      	bls.n	8003bf2 <prvInitialiseNewTask+0x54>
 8003c1e:	e000      	b.n	8003c22 <prvInitialiseNewTask+0x84>
			{
				break;
 8003c20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c2a:	e003      	b.n	8003c34 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d901      	bls.n	8003c3e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c3a:	2306      	movs	r3, #6
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	3304      	adds	r3, #4
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fe6c 	bl	8003932 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	3318      	adds	r3, #24
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fe67 	bl	8003932 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	f1c3 0207 	rsb	r2, r3, #7
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	69b8      	ldr	r0, [r7, #24]
 8003c8e:	f000 fcb1 	bl	80045f4 <pxPortInitialiseStack>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca4:	bf00      	nop
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cb4:	f000 fdce 	bl	8004854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <prvAddNewTaskToReadyList+0xb8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <prvAddNewTaskToReadyList+0xb8>)
 8003cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cca:	4a27      	ldr	r2, [pc, #156]	; (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cd0:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <prvAddNewTaskToReadyList+0xb8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d110      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cd8:	f000 fb4a 	bl	8004370 <prvInitialiseTaskLists>
 8003cdc:	e00d      	b.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cde:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <prvAddNewTaskToReadyList+0xc0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d802      	bhi.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003d02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	2201      	movs	r2, #1
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <prvAddNewTaskToReadyList+0xcc>)
 8003d24:	441a      	add	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7ff fe0d 	bl	800394c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d32:	f000 fdbf 	bl	80048b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <prvAddNewTaskToReadyList+0xc0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00e      	beq.n	8003d5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <prvAddNewTaskToReadyList+0xbc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d207      	bcs.n	8003d5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <prvAddNewTaskToReadyList+0xd0>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	2000039c 	.word	0x2000039c
 8003d68:	2000029c 	.word	0x2000029c
 8003d6c:	200003a8 	.word	0x200003a8
 8003d70:	200003b8 	.word	0x200003b8
 8003d74:	200003a4 	.word	0x200003a4
 8003d78:	200002a0 	.word	0x200002a0
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	; 0x28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <vTaskDelayUntil+0x2a>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	617b      	str	r3, [r7, #20]
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <vTaskDelayUntil+0x46>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	613b      	str	r3, [r7, #16]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <vTaskDelayUntil+0xf0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <vTaskDelayUntil+0x64>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	60fb      	str	r3, [r7, #12]
}
 8003de0:	bf00      	nop
 8003de2:	e7fe      	b.n	8003de2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003de4:	f000 f8de 	bl	8003fa4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003de8:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <vTaskDelayUntil+0xf4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d20b      	bcs.n	8003e1a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d211      	bcs.n	8003e30 <vTaskDelayUntil+0xb0>
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d90d      	bls.n	8003e30 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
 8003e18:	e00a      	b.n	8003e30 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d303      	bcc.n	8003e2c <vTaskDelayUntil+0xac>
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d901      	bls.n	8003e30 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d006      	beq.n	8003e4a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fb6f 	bl	8004528 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003e4a:	f000 f8b9 	bl	8003fc0 <xTaskResumeAll>
 8003e4e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <vTaskDelayUntil+0xf8>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e66:	bf00      	nop
 8003e68:	3728      	adds	r7, #40	; 0x28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200003c4 	.word	0x200003c4
 8003e74:	200003a0 	.word	0x200003a0
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d017      	beq.n	8003ebe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <vTaskDelay+0x60>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <vTaskDelay+0x30>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60bb      	str	r3, [r7, #8]
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003eac:	f000 f87a 	bl	8003fa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fb38 	bl	8004528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003eb8:	f000 f882 	bl	8003fc0 <xTaskResumeAll>
 8003ebc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <vTaskDelay+0x64>)
 8003ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200003c4 	.word	0x200003c4
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ef2:	463a      	mov	r2, r7
 8003ef4:	1d39      	adds	r1, r7, #4
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fb0c 	bl	8000518 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	9202      	str	r2, [sp, #8]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	460a      	mov	r2, r1
 8003f12:	491e      	ldr	r1, [pc, #120]	; (8003f8c <vTaskStartScheduler+0xa8>)
 8003f14:	481e      	ldr	r0, [pc, #120]	; (8003f90 <vTaskStartScheduler+0xac>)
 8003f16:	f7ff fda0 	bl	8003a5a <xTaskCreateStatic>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <vTaskStartScheduler+0xb0>)
 8003f1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f20:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <vTaskStartScheduler+0xb0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e001      	b.n	8003f32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d116      	bne.n	8003f66 <vTaskStartScheduler+0x82>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	613b      	str	r3, [r7, #16]
}
 8003f4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <vTaskStartScheduler+0xb4>)
 8003f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <vTaskStartScheduler+0xb8>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <vTaskStartScheduler+0xbc>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f60:	f000 fbd6 	bl	8004710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f64:	e00e      	b.n	8003f84 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d10a      	bne.n	8003f84 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	60fb      	str	r3, [r7, #12]
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <vTaskStartScheduler+0x9e>
}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	08004f28 	.word	0x08004f28
 8003f90:	08004341 	.word	0x08004341
 8003f94:	200003c0 	.word	0x200003c0
 8003f98:	200003bc 	.word	0x200003bc
 8003f9c:	200003a8 	.word	0x200003a8
 8003fa0:	200003a0 	.word	0x200003a0

08003fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <vTaskSuspendAll+0x18>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	4a03      	ldr	r2, [pc, #12]	; (8003fbc <vTaskSuspendAll+0x18>)
 8003fb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	200003c4 	.word	0x200003c4

08003fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fce:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <xTaskResumeAll+0x114>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <xTaskResumeAll+0x2c>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	603b      	str	r3, [r7, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fec:	f000 fc32 	bl	8004854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ff0:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <xTaskResumeAll+0x114>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	4a37      	ldr	r2, [pc, #220]	; (80040d4 <xTaskResumeAll+0x114>)
 8003ff8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ffa:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <xTaskResumeAll+0x114>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d161      	bne.n	80040c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004002:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <xTaskResumeAll+0x118>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d05d      	beq.n	80040c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800400a:	e02e      	b.n	800406a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400c:	4b33      	ldr	r3, [pc, #204]	; (80040dc <xTaskResumeAll+0x11c>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3318      	adds	r3, #24
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fcf4 	bl	8003a06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3304      	adds	r3, #4
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fcef 	bl	8003a06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	2201      	movs	r2, #1
 800402e:	409a      	lsls	r2, r3
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <xTaskResumeAll+0x120>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4313      	orrs	r3, r2
 8004036:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <xTaskResumeAll+0x120>)
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4a27      	ldr	r2, [pc, #156]	; (80040e4 <xTaskResumeAll+0x124>)
 8004048:	441a      	add	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7ff fc7b 	bl	800394c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <xTaskResumeAll+0x128>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	429a      	cmp	r2, r3
 8004062:	d302      	bcc.n	800406a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004064:	4b21      	ldr	r3, [pc, #132]	; (80040ec <xTaskResumeAll+0x12c>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <xTaskResumeAll+0x11c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1cc      	bne.n	800400c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004078:	f000 fa18 	bl	80044ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800407c:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <xTaskResumeAll+0x130>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004088:	f000 f846 	bl	8004118 <xTaskIncrementTick>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004092:	4b16      	ldr	r3, [pc, #88]	; (80040ec <xTaskResumeAll+0x12c>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f1      	bne.n	8004088 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80040a4:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <xTaskResumeAll+0x130>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <xTaskResumeAll+0x12c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040b2:	2301      	movs	r3, #1
 80040b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <xTaskResumeAll+0x134>)
 80040b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040c6:	f000 fbf5 	bl	80048b4 <vPortExitCritical>

	return xAlreadyYielded;
 80040ca:	68bb      	ldr	r3, [r7, #8]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200003c4 	.word	0x200003c4
 80040d8:	2000039c 	.word	0x2000039c
 80040dc:	2000035c 	.word	0x2000035c
 80040e0:	200003a4 	.word	0x200003a4
 80040e4:	200002a0 	.word	0x200002a0
 80040e8:	2000029c 	.word	0x2000029c
 80040ec:	200003b0 	.word	0x200003b0
 80040f0:	200003ac 	.word	0x200003ac
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040fe:	4b05      	ldr	r3, [pc, #20]	; (8004114 <xTaskGetTickCount+0x1c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004104:	687b      	ldr	r3, [r7, #4]
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	200003a0 	.word	0x200003a0

08004118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004122:	4b4e      	ldr	r3, [pc, #312]	; (800425c <xTaskIncrementTick+0x144>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 808e 	bne.w	8004248 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800412c:	4b4c      	ldr	r3, [pc, #304]	; (8004260 <xTaskIncrementTick+0x148>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004134:	4a4a      	ldr	r2, [pc, #296]	; (8004260 <xTaskIncrementTick+0x148>)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d120      	bne.n	8004182 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004140:	4b48      	ldr	r3, [pc, #288]	; (8004264 <xTaskIncrementTick+0x14c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <xTaskIncrementTick+0x48>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	603b      	str	r3, [r7, #0]
}
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <xTaskIncrementTick+0x46>
 8004160:	4b40      	ldr	r3, [pc, #256]	; (8004264 <xTaskIncrementTick+0x14c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	4b40      	ldr	r3, [pc, #256]	; (8004268 <xTaskIncrementTick+0x150>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a3e      	ldr	r2, [pc, #248]	; (8004264 <xTaskIncrementTick+0x14c>)
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	4a3e      	ldr	r2, [pc, #248]	; (8004268 <xTaskIncrementTick+0x150>)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b3d      	ldr	r3, [pc, #244]	; (800426c <xTaskIncrementTick+0x154>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	4a3c      	ldr	r2, [pc, #240]	; (800426c <xTaskIncrementTick+0x154>)
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	f000 f995 	bl	80044ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004182:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <xTaskIncrementTick+0x158>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	429a      	cmp	r2, r3
 800418a:	d348      	bcc.n	800421e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800418c:	4b35      	ldr	r3, [pc, #212]	; (8004264 <xTaskIncrementTick+0x14c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004196:	4b36      	ldr	r3, [pc, #216]	; (8004270 <xTaskIncrementTick+0x158>)
 8004198:	f04f 32ff 	mov.w	r2, #4294967295
 800419c:	601a      	str	r2, [r3, #0]
					break;
 800419e:	e03e      	b.n	800421e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <xTaskIncrementTick+0x14c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d203      	bcs.n	80041c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041b8:	4a2d      	ldr	r2, [pc, #180]	; (8004270 <xTaskIncrementTick+0x158>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041be:	e02e      	b.n	800421e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fc1e 	bl	8003a06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3318      	adds	r3, #24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fc15 	bl	8003a06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	2201      	movs	r2, #1
 80041e2:	409a      	lsls	r2, r3
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <xTaskIncrementTick+0x15c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	4a22      	ldr	r2, [pc, #136]	; (8004274 <xTaskIncrementTick+0x15c>)
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <xTaskIncrementTick+0x160>)
 80041fc:	441a      	add	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	3304      	adds	r3, #4
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f7ff fba1 	bl	800394c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <xTaskIncrementTick+0x164>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	429a      	cmp	r2, r3
 8004216:	d3b9      	bcc.n	800418c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800421c:	e7b6      	b.n	800418c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800421e:	4b17      	ldr	r3, [pc, #92]	; (800427c <xTaskIncrementTick+0x164>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	4914      	ldr	r1, [pc, #80]	; (8004278 <xTaskIncrementTick+0x160>)
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d901      	bls.n	800423a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004236:	2301      	movs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <xTaskIncrementTick+0x168>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004242:	2301      	movs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e004      	b.n	8004252 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <xTaskIncrementTick+0x16c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <xTaskIncrementTick+0x16c>)
 8004250:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004252:	697b      	ldr	r3, [r7, #20]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	200003c4 	.word	0x200003c4
 8004260:	200003a0 	.word	0x200003a0
 8004264:	20000354 	.word	0x20000354
 8004268:	20000358 	.word	0x20000358
 800426c:	200003b4 	.word	0x200003b4
 8004270:	200003bc 	.word	0x200003bc
 8004274:	200003a4 	.word	0x200003a4
 8004278:	200002a0 	.word	0x200002a0
 800427c:	2000029c 	.word	0x2000029c
 8004280:	200003b0 	.word	0x200003b0
 8004284:	200003ac 	.word	0x200003ac

08004288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800428e:	4b27      	ldr	r3, [pc, #156]	; (800432c <vTaskSwitchContext+0xa4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004296:	4b26      	ldr	r3, [pc, #152]	; (8004330 <vTaskSwitchContext+0xa8>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800429c:	e03f      	b.n	800431e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800429e:	4b24      	ldr	r3, [pc, #144]	; (8004330 <vTaskSwitchContext+0xa8>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a4:	4b23      	ldr	r3, [pc, #140]	; (8004334 <vTaskSwitchContext+0xac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	fab3 f383 	clz	r3, r3
 80042b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042b2:	7afb      	ldrb	r3, [r7, #11]
 80042b4:	f1c3 031f 	rsb	r3, r3, #31
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	491f      	ldr	r1, [pc, #124]	; (8004338 <vTaskSwitchContext+0xb0>)
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <vTaskSwitchContext+0x5a>
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4a12      	ldr	r2, [pc, #72]	; (8004338 <vTaskSwitchContext+0xb0>)
 80042f0:	4413      	add	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3308      	adds	r3, #8
 8004306:	429a      	cmp	r2, r3
 8004308:	d104      	bne.n	8004314 <vTaskSwitchContext+0x8c>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <vTaskSwitchContext+0xb4>)
 800431c:	6013      	str	r3, [r2, #0]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	200003c4 	.word	0x200003c4
 8004330:	200003b0 	.word	0x200003b0
 8004334:	200003a4 	.word	0x200003a4
 8004338:	200002a0 	.word	0x200002a0
 800433c:	2000029c 	.word	0x2000029c

08004340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004348:	f000 f852 	bl	80043f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <prvIdleTask+0x28>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d9f9      	bls.n	8004348 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <prvIdleTask+0x2c>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004364:	e7f0      	b.n	8004348 <prvIdleTask+0x8>
 8004366:	bf00      	nop
 8004368:	200002a0 	.word	0x200002a0
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	e00c      	b.n	8004396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <prvInitialiseTaskLists+0x60>)
 8004388:	4413      	add	r3, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fab1 	bl	80038f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3301      	adds	r3, #1
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b06      	cmp	r3, #6
 800439a:	d9ef      	bls.n	800437c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800439c:	480d      	ldr	r0, [pc, #52]	; (80043d4 <prvInitialiseTaskLists+0x64>)
 800439e:	f7ff faa8 	bl	80038f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043a2:	480d      	ldr	r0, [pc, #52]	; (80043d8 <prvInitialiseTaskLists+0x68>)
 80043a4:	f7ff faa5 	bl	80038f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043a8:	480c      	ldr	r0, [pc, #48]	; (80043dc <prvInitialiseTaskLists+0x6c>)
 80043aa:	f7ff faa2 	bl	80038f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043ae:	480c      	ldr	r0, [pc, #48]	; (80043e0 <prvInitialiseTaskLists+0x70>)
 80043b0:	f7ff fa9f 	bl	80038f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043b4:	480b      	ldr	r0, [pc, #44]	; (80043e4 <prvInitialiseTaskLists+0x74>)
 80043b6:	f7ff fa9c 	bl	80038f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <prvInitialiseTaskLists+0x78>)
 80043bc:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <prvInitialiseTaskLists+0x64>)
 80043be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <prvInitialiseTaskLists+0x7c>)
 80043c2:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <prvInitialiseTaskLists+0x68>)
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	200002a0 	.word	0x200002a0
 80043d4:	2000032c 	.word	0x2000032c
 80043d8:	20000340 	.word	0x20000340
 80043dc:	2000035c 	.word	0x2000035c
 80043e0:	20000370 	.word	0x20000370
 80043e4:	20000388 	.word	0x20000388
 80043e8:	20000354 	.word	0x20000354
 80043ec:	20000358 	.word	0x20000358

080043f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043f6:	e019      	b.n	800442c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043f8:	f000 fa2c 	bl	8004854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <prvCheckTasksWaitingTermination+0x50>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fafc 	bl	8003a06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <prvCheckTasksWaitingTermination+0x54>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3b01      	subs	r3, #1
 8004414:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <prvCheckTasksWaitingTermination+0x54>)
 8004416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <prvCheckTasksWaitingTermination+0x58>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3b01      	subs	r3, #1
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <prvCheckTasksWaitingTermination+0x58>)
 8004420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004422:	f000 fa47 	bl	80048b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f810 	bl	800444c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <prvCheckTasksWaitingTermination+0x58>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e1      	bne.n	80043f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000370 	.word	0x20000370
 8004444:	2000039c 	.word	0x2000039c
 8004448:	20000384 	.word	0x20000384

0800444c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800445a:	2b00      	cmp	r3, #0
 800445c:	d108      	bne.n	8004470 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fba4 	bl	8004bb0 <vPortFree>
				vPortFree( pxTCB );
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fba1 	bl	8004bb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800446e:	e018      	b.n	80044a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004476:	2b01      	cmp	r3, #1
 8004478:	d103      	bne.n	8004482 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fb98 	bl	8004bb0 <vPortFree>
	}
 8004480:	e00f      	b.n	80044a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004488:	2b02      	cmp	r3, #2
 800448a:	d00a      	beq.n	80044a2 <prvDeleteTCB+0x56>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	60fb      	str	r3, [r7, #12]
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <prvDeleteTCB+0x54>
	}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <prvResetNextTaskUnblockTime+0x38>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <prvResetNextTaskUnblockTime+0x3c>)
 80044be:	f04f 32ff 	mov.w	r2, #4294967295
 80044c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044c4:	e008      	b.n	80044d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <prvResetNextTaskUnblockTime+0x38>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <prvResetNextTaskUnblockTime+0x3c>)
 80044d6:	6013      	str	r3, [r2, #0]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	20000354 	.word	0x20000354
 80044e8:	200003bc 	.word	0x200003bc

080044ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <xTaskGetSchedulerState+0x34>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044fa:	2301      	movs	r3, #1
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e008      	b.n	8004512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <xTaskGetSchedulerState+0x38>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004508:	2302      	movs	r3, #2
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	e001      	b.n	8004512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004512:	687b      	ldr	r3, [r7, #4]
	}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	200003a8 	.word	0x200003a8
 8004524:	200003c4 	.word	0x200003c4

08004528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004532:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004538:	4b28      	ldr	r3, [pc, #160]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fa61 	bl	8003a06 <uxListRemove>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	2201      	movs	r2, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43da      	mvns	r2, r3
 8004558:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4013      	ands	r3, r2
 800455e:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004560:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d10a      	bne.n	8004580 <prvAddCurrentTaskToDelayedList+0x58>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3304      	adds	r3, #4
 8004576:	4619      	mov	r1, r3
 8004578:	481a      	ldr	r0, [pc, #104]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800457a:	f7ff f9e7 	bl	800394c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800457e:	e026      	b.n	80045ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	429a      	cmp	r2, r3
 8004596:	d209      	bcs.n	80045ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3304      	adds	r3, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7ff f9f5 	bl	8003994 <vListInsert>
}
 80045aa:	e010      	b.n	80045ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f7ff f9eb 	bl	8003994 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d202      	bcs.n	80045ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045c8:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6013      	str	r3, [r2, #0]
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200003a0 	.word	0x200003a0
 80045dc:	2000029c 	.word	0x2000029c
 80045e0:	200003a4 	.word	0x200003a4
 80045e4:	20000388 	.word	0x20000388
 80045e8:	20000358 	.word	0x20000358
 80045ec:	20000354 	.word	0x20000354
 80045f0:	200003bc 	.word	0x200003bc

080045f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b04      	subs	r3, #4
 8004604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800460c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3b04      	subs	r3, #4
 8004612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b04      	subs	r3, #4
 8004622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004624:	4a0c      	ldr	r2, [pc, #48]	; (8004658 <pxPortInitialiseStack+0x64>)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b14      	subs	r3, #20
 800462e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b04      	subs	r3, #4
 800463a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f06f 0202 	mvn.w	r2, #2
 8004642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3b20      	subs	r3, #32
 8004648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	0800465d 	.word	0x0800465d

0800465c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <prvTaskExitError+0x54>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466e:	d00a      	beq.n	8004686 <prvTaskExitError+0x2a>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60fb      	str	r3, [r7, #12]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <prvTaskExitError+0x28>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	60bb      	str	r3, [r7, #8]
}
 8004698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800469a:	bf00      	nop
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0fc      	beq.n	800469c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	2000000c 	.word	0x2000000c
	...

080046c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <pxCurrentTCBConst2>)
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	6808      	ldr	r0, [r1, #0]
 80046c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ca:	f380 8809 	msr	PSP, r0
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f380 8811 	msr	BASEPRI, r0
 80046da:	4770      	bx	lr
 80046dc:	f3af 8000 	nop.w

080046e0 <pxCurrentTCBConst2>:
 80046e0:	2000029c 	.word	0x2000029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop

080046e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046e8:	4808      	ldr	r0, [pc, #32]	; (800470c <prvPortStartFirstTask+0x24>)
 80046ea:	6800      	ldr	r0, [r0, #0]
 80046ec:	6800      	ldr	r0, [r0, #0]
 80046ee:	f380 8808 	msr	MSP, r0
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8814 	msr	CONTROL, r0
 80046fa:	b662      	cpsie	i
 80046fc:	b661      	cpsie	f
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	df00      	svc	0
 8004708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800470a:	bf00      	nop
 800470c:	e000ed08 	.word	0xe000ed08

08004710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004716:	4b46      	ldr	r3, [pc, #280]	; (8004830 <xPortStartScheduler+0x120>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a46      	ldr	r2, [pc, #280]	; (8004834 <xPortStartScheduler+0x124>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10a      	bne.n	8004736 <xPortStartScheduler+0x26>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	613b      	str	r3, [r7, #16]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004736:	4b3e      	ldr	r3, [pc, #248]	; (8004830 <xPortStartScheduler+0x120>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3f      	ldr	r2, [pc, #252]	; (8004838 <xPortStartScheduler+0x128>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10a      	bne.n	8004756 <xPortStartScheduler+0x46>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60fb      	str	r3, [r7, #12]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004756:	4b39      	ldr	r3, [pc, #228]	; (800483c <xPortStartScheduler+0x12c>)
 8004758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	22ff      	movs	r2, #255	; 0xff
 8004766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b31      	ldr	r3, [pc, #196]	; (8004840 <xPortStartScheduler+0x130>)
 800477c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800477e:	4b31      	ldr	r3, [pc, #196]	; (8004844 <xPortStartScheduler+0x134>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004784:	e009      	b.n	800479a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004786:	4b2f      	ldr	r3, [pc, #188]	; (8004844 <xPortStartScheduler+0x134>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3b01      	subs	r3, #1
 800478c:	4a2d      	ldr	r2, [pc, #180]	; (8004844 <xPortStartScheduler+0x134>)
 800478e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	b2db      	uxtb	r3, r3
 8004798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	d0ef      	beq.n	8004786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047a6:	4b27      	ldr	r3, [pc, #156]	; (8004844 <xPortStartScheduler+0x134>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1c3 0307 	rsb	r3, r3, #7
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d00a      	beq.n	80047c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60bb      	str	r3, [r7, #8]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047c8:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <xPortStartScheduler+0x134>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <xPortStartScheduler+0x134>)
 80047d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <xPortStartScheduler+0x134>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047da:	4a1a      	ldr	r2, [pc, #104]	; (8004844 <xPortStartScheduler+0x134>)
 80047dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047e6:	4b18      	ldr	r3, [pc, #96]	; (8004848 <xPortStartScheduler+0x138>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a17      	ldr	r2, [pc, #92]	; (8004848 <xPortStartScheduler+0x138>)
 80047ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <xPortStartScheduler+0x138>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a14      	ldr	r2, [pc, #80]	; (8004848 <xPortStartScheduler+0x138>)
 80047f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047fe:	f000 f8dd 	bl	80049bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <xPortStartScheduler+0x13c>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004808:	f000 f8fc 	bl	8004a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <xPortStartScheduler+0x140>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <xPortStartScheduler+0x140>)
 8004812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004818:	f7ff ff66 	bl	80046e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800481c:	f7ff fd34 	bl	8004288 <vTaskSwitchContext>
	prvTaskExitError();
 8004820:	f7ff ff1c 	bl	800465c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	e000ed00 	.word	0xe000ed00
 8004834:	410fc271 	.word	0x410fc271
 8004838:	410fc270 	.word	0x410fc270
 800483c:	e000e400 	.word	0xe000e400
 8004840:	200003c8 	.word	0x200003c8
 8004844:	200003cc 	.word	0x200003cc
 8004848:	e000ed20 	.word	0xe000ed20
 800484c:	2000000c 	.word	0x2000000c
 8004850:	e000ef34 	.word	0xe000ef34

08004854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
}
 800486c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <vPortEnterCritical+0x58>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <vPortEnterCritical+0x58>)
 8004876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <vPortEnterCritical+0x58>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10f      	bne.n	80048a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <vPortEnterCritical+0x5c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	603b      	str	r3, [r7, #0]
}
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <vPortEnterCritical+0x4a>
	}
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	2000000c 	.word	0x2000000c
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <vPortExitCritical+0x50>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <vPortExitCritical+0x24>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <vPortExitCritical+0x50>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3b01      	subs	r3, #1
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <vPortExitCritical+0x50>)
 80048e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <vPortExitCritical+0x50>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <vPortExitCritical+0x42>
 80048ea:	2300      	movs	r3, #0
 80048ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	2000000c 	.word	0x2000000c
	...

08004910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004910:	f3ef 8009 	mrs	r0, PSP
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4b15      	ldr	r3, [pc, #84]	; (8004970 <pxCurrentTCBConst>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f01e 0f10 	tst.w	lr, #16
 8004920:	bf08      	it	eq
 8004922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004934:	f380 8811 	msr	BASEPRI, r0
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f7ff fca2 	bl	8004288 <vTaskSwitchContext>
 8004944:	f04f 0000 	mov.w	r0, #0
 8004948:	f380 8811 	msr	BASEPRI, r0
 800494c:	bc09      	pop	{r0, r3}
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6808      	ldr	r0, [r1, #0]
 8004952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004956:	f01e 0f10 	tst.w	lr, #16
 800495a:	bf08      	it	eq
 800495c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004960:	f380 8809 	msr	PSP, r0
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst>:
 8004970:	2000029c 	.word	0x2000029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
}
 8004990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004992:	f7ff fbc1 	bl	8004118 <xTaskIncrementTick>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <xPortSysTickHandler+0x40>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f383 8811 	msr	BASEPRI, r3
}
 80049ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <vPortSetupTimerInterrupt+0x34>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <vPortSetupTimerInterrupt+0x38>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <vPortSetupTimerInterrupt+0x3c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <vPortSetupTimerInterrupt+0x40>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <vPortSetupTimerInterrupt+0x44>)
 80049da:	3b01      	subs	r3, #1
 80049dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <vPortSetupTimerInterrupt+0x34>)
 80049e0:	2207      	movs	r2, #7
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	e000e010 	.word	0xe000e010
 80049f4:	e000e018 	.word	0xe000e018
 80049f8:	20000000 	.word	0x20000000
 80049fc:	10624dd3 	.word	0x10624dd3
 8004a00:	e000e014 	.word	0xe000e014

08004a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a14 <vPortEnableVFP+0x10>
 8004a08:	6801      	ldr	r1, [r0, #0]
 8004a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a0e:	6001      	str	r1, [r0, #0]
 8004a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a12:	bf00      	nop
 8004a14:	e000ed88 	.word	0xe000ed88

08004a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a24:	f7ff fabe 	bl	8003fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a28:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <pvPortMalloc+0x180>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a30:	f000 f920 	bl	8004c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a34:	4b59      	ldr	r3, [pc, #356]	; (8004b9c <pvPortMalloc+0x184>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f040 8093 	bne.w	8004b68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01d      	beq.n	8004a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a48:	2208      	movs	r2, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d014      	beq.n	8004a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f023 0307 	bic.w	r3, r3, #7
 8004a60:	3308      	adds	r3, #8
 8004a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <pvPortMalloc+0x6c>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	617b      	str	r3, [r7, #20]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d06e      	beq.n	8004b68 <pvPortMalloc+0x150>
 8004a8a:	4b45      	ldr	r3, [pc, #276]	; (8004ba0 <pvPortMalloc+0x188>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d869      	bhi.n	8004b68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a94:	4b43      	ldr	r3, [pc, #268]	; (8004ba4 <pvPortMalloc+0x18c>)
 8004a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <pvPortMalloc+0x18c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a9e:	e004      	b.n	8004aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d903      	bls.n	8004abc <pvPortMalloc+0xa4>
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f1      	bne.n	8004aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <pvPortMalloc+0x180>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d050      	beq.n	8004b68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2208      	movs	r2, #8
 8004acc:	4413      	add	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d91f      	bls.n	8004b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <pvPortMalloc+0xf8>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	613b      	str	r3, [r7, #16]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b22:	69b8      	ldr	r0, [r7, #24]
 8004b24:	f000 f908 	bl	8004d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b28:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b36:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <pvPortMalloc+0x190>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d203      	bcs.n	8004b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b42:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <pvPortMalloc+0x190>)
 8004b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <pvPortMalloc+0x184>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <pvPortMalloc+0x194>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a11      	ldr	r2, [pc, #68]	; (8004bac <pvPortMalloc+0x194>)
 8004b66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b68:	f7ff fa2a 	bl	8003fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <pvPortMalloc+0x174>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60fb      	str	r3, [r7, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <pvPortMalloc+0x172>
	return pvReturn;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20003fd8 	.word	0x20003fd8
 8004b9c:	20003fec 	.word	0x20003fec
 8004ba0:	20003fdc 	.word	0x20003fdc
 8004ba4:	20003fd0 	.word	0x20003fd0
 8004ba8:	20003fe0 	.word	0x20003fe0
 8004bac:	20003fe4 	.word	0x20003fe4

08004bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04d      	beq.n	8004c5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4413      	add	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <vPortFree+0xb8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <vPortFree+0x44>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60fb      	str	r3, [r7, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <vPortFree+0x62>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	60bb      	str	r3, [r7, #8]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <vPortFree+0xb8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01e      	beq.n	8004c5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d11a      	bne.n	8004c5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <vPortFree+0xb8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	401a      	ands	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c38:	f7ff f9b4 	bl	8003fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <vPortFree+0xbc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <vPortFree+0xbc>)
 8004c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c4a:	6938      	ldr	r0, [r7, #16]
 8004c4c:	f000 f874 	bl	8004d38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <vPortFree+0xc0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3301      	adds	r3, #1
 8004c56:	4a06      	ldr	r2, [pc, #24]	; (8004c70 <vPortFree+0xc0>)
 8004c58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c5a:	f7ff f9b1 	bl	8003fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c5e:	bf00      	nop
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20003fec 	.word	0x20003fec
 8004c6c:	20003fdc 	.word	0x20003fdc
 8004c70:	20003fe8 	.word	0x20003fe8

08004c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <prvHeapInit+0xac>)
 8004c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00c      	beq.n	8004ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3307      	adds	r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <prvHeapInit+0xac>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <prvHeapInit+0xb0>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <prvHeapInit+0xb0>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <prvHeapInit+0xb4>)
 8004cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <prvHeapInit+0xb4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <prvHeapInit+0xb4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	1ad2      	subs	r2, r2, r3
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <prvHeapInit+0xb4>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <prvHeapInit+0xb8>)
 8004d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <prvHeapInit+0xbc>)
 8004d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <prvHeapInit+0xc0>)
 8004d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	200003d0 	.word	0x200003d0
 8004d24:	20003fd0 	.word	0x20003fd0
 8004d28:	20003fd8 	.word	0x20003fd8
 8004d2c:	20003fe0 	.word	0x20003fe0
 8004d30:	20003fdc 	.word	0x20003fdc
 8004d34:	20003fec 	.word	0x20003fec

08004d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d40:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <prvInsertBlockIntoFreeList+0xac>)
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e002      	b.n	8004d4c <prvInsertBlockIntoFreeList+0x14>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d8f7      	bhi.n	8004d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	4413      	add	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d108      	bne.n	8004d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	441a      	add	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	441a      	add	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d118      	bne.n	8004dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d00d      	beq.n	8004db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	441a      	add	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e008      	b.n	8004dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <prvInsertBlockIntoFreeList+0xb0>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e003      	b.n	8004dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d002      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20003fd0 	.word	0x20003fd0
 8004de8:	20003fd8 	.word	0x20003fd8

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4d0d      	ldr	r5, [pc, #52]	; (8004e24 <__libc_init_array+0x38>)
 8004df0:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df2:	1b64      	subs	r4, r4, r5
 8004df4:	10a4      	asrs	r4, r4, #2
 8004df6:	2600      	movs	r6, #0
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	4d0b      	ldr	r5, [pc, #44]	; (8004e2c <__libc_init_array+0x40>)
 8004dfe:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <__libc_init_array+0x44>)
 8004e00:	f000 f820 	bl	8004e44 <_init>
 8004e04:	1b64      	subs	r4, r4, r5
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	2600      	movs	r6, #0
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08004f54 	.word	0x08004f54
 8004e28:	08004f54 	.word	0x08004f54
 8004e2c:	08004f54 	.word	0x08004f54
 8004e30:	08004f58 	.word	0x08004f58

08004e34 <memset>:
 8004e34:	4402      	add	r2, r0
 8004e36:	4603      	mov	r3, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>

08004e44 <_init>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr

08004e50 <_fini>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr
