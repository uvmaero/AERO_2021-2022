
driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f0c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e4  080051e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004180  20000010  080051fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004190  080051fc  00024190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014633  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec3  00000000  00000000  00034673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00037538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000384d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024712  00000000  00000000  00039348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012da1  00000000  00000000  0005da5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd84b  00000000  00000000  000707fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004004  00000000  00000000  0014e09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080050d4 	.word	0x080050d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080050d4 	.word	0x080050d4

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <vApplicationGetIdleTaskMemory+0x2c>)
 8000528:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <vApplicationGetIdleTaskMemory+0x30>)
 800052e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	2000002c 	.word	0x2000002c
 8000548:	20000080 	.word	0x20000080

0800054c <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4603      	mov	r3, r0
 800055c:	70fb      	strb	r3, [r7, #3]
 800055e:	460b      	mov	r3, r1
 8000560:	70bb      	strb	r3, [r7, #2]
 8000562:	4613      	mov	r3, r2
 8000564:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8000566:	2300      	movs	r3, #0
 8000568:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 800056a:	4a4f      	ldr	r2, [pc, #316]	; (80006a8 <lcdInit+0x15c>)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b4c      	ldr	r3, [pc, #304]	; (80006a8 <lcdInit+0x15c>)
 8000578:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 800057a:	4a4b      	ldr	r2, [pc, #300]	; (80006a8 <lcdInit+0x15c>)
 800057c:	78bb      	ldrb	r3, [r7, #2]
 800057e:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8000580:	4a49      	ldr	r2, [pc, #292]	; (80006a8 <lcdInit+0x15c>)
 8000582:	787b      	ldrb	r3, [r7, #1]
 8000584:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8000586:	4b48      	ldr	r3, [pc, #288]	; (80006a8 <lcdInit+0x15c>)
 8000588:	2208      	movs	r2, #8
 800058a:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 800058c:	4b47      	ldr	r3, [pc, #284]	; (80006ac <lcdInit+0x160>)
 800058e:	2234      	movs	r2, #52	; 0x34
 8000590:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000592:	4b46      	ldr	r3, [pc, #280]	; (80006ac <lcdInit+0x160>)
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	4b45      	ldr	r3, [pc, #276]	; (80006ac <lcdInit+0x160>)
 8000598:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 800059a:	4b44      	ldr	r3, [pc, #272]	; (80006ac <lcdInit+0x160>)
 800059c:	2230      	movs	r2, #48	; 0x30
 800059e:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	75fb      	strb	r3, [r7, #23]
 80005a4:	e030      	b.n	8000608 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80005a6:	4b40      	ldr	r3, [pc, #256]	; (80006a8 <lcdInit+0x15c>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	4b3f      	ldr	r3, [pc, #252]	; (80006a8 <lcdInit+0x15c>)
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	b299      	uxth	r1, r3
 80005b0:	2303      	movs	r3, #3
 80005b2:	4a3e      	ldr	r2, [pc, #248]	; (80006ac <lcdInit+0x160>)
 80005b4:	f002 fba8 	bl	8002d08 <HAL_I2C_Master_Transmit_DMA>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <lcdInit+0x76>
            return false;
 80005be:	2300      	movs	r3, #0
 80005c0:	e06d      	b.n	800069e <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 80005c2:	f003 fee5 	bl	8004390 <xTaskGetTickCount>
 80005c6:	4603      	mov	r3, r0
 80005c8:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80005ca:	e002      	b.n	80005d2 <lcdInit+0x86>
            vTaskDelay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f003 fda1 	bl	8004114 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80005d2:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <lcdInit+0x15c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fcf8 	bl	8002fcc <HAL_I2C_GetState>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b20      	cmp	r3, #32
 80005e0:	d1f4      	bne.n	80005cc <lcdInit+0x80>
        }

        if (i == 2) {
 80005e2:	7dfb      	ldrb	r3, [r7, #23]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d106      	bne.n	80005f6 <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fd12 	bl	8004018 <vTaskDelayUntil>
 80005f4:	e005      	b.n	8000602 <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fd0b 	bl	8004018 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	3301      	adds	r3, #1
 8000606:	75fb      	strb	r3, [r7, #23]
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d9cb      	bls.n	80005a6 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 800060e:	4b27      	ldr	r3, [pc, #156]	; (80006ac <lcdInit+0x160>)
 8000610:	222c      	movs	r2, #44	; 0x2c
 8000612:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <lcdInit+0x160>)
 8000616:	781a      	ldrb	r2, [r3, #0]
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <lcdInit+0x160>)
 800061a:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <lcdInit+0x160>)
 800061e:	2228      	movs	r2, #40	; 0x28
 8000620:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <lcdInit+0x15c>)
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <lcdInit+0x15c>)
 8000628:	799b      	ldrb	r3, [r3, #6]
 800062a:	b299      	uxth	r1, r3
 800062c:	2303      	movs	r3, #3
 800062e:	4a1f      	ldr	r2, [pc, #124]	; (80006ac <lcdInit+0x160>)
 8000630:	f002 fb6a 	bl	8002d08 <HAL_I2C_Master_Transmit_DMA>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d004      	beq.n	8000644 <lcdInit+0xf8>
        return false;
 800063a:	2300      	movs	r3, #0
 800063c:	e02f      	b.n	800069e <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f003 fd68 	bl	8004114 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <lcdInit+0x15c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fcbf 	bl	8002fcc <HAL_I2C_GetState>
 800064e:	4603      	mov	r3, r0
 8000650:	2b20      	cmp	r3, #32
 8000652:	d1f4      	bne.n	800063e <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	b2db      	uxtb	r3, r3
 800065c:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <lcdInit+0x15c>)
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d904      	bls.n	8000670 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	f043 0308 	orr.w	r3, r3, #8
 800066c:	b2db      	uxtb	r3, r3
 800066e:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	4619      	mov	r1, r3
 8000676:	2000      	movs	r0, #0
 8000678:	f000 f980 	bl	800097c <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 800067c:	2101      	movs	r1, #1
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f816 	bl	80006b0 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8000684:	2101      	movs	r1, #1
 8000686:	2007      	movs	r0, #7
 8000688:	f000 f812 	bl	80006b0 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 800068c:	2101      	movs	r1, #1
 800068e:	2002      	movs	r0, #2
 8000690:	f000 f80e 	bl	80006b0 <lcdCommand>
    lcdCursorHome();
 8000694:	2101      	movs	r1, #1
 8000696:	2005      	movs	r0, #5
 8000698:	f000 f80a 	bl	80006b0 <lcdCommand>

    return true;
 800069c:	2301      	movs	r3, #1
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000288 	.word	0x20000288
 80006ac:	20000280 	.word	0x20000280

080006b0 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d06e      	beq.n	80007a8 <lcdCommand+0xf8>
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	f040 80b4 	bne.w	8000838 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	d864      	bhi.n	80007a2 <lcdCommand+0xf2>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <lcdCommand+0x30>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	08000701 	.word	0x08000701
 80006e4:	08000731 	.word	0x08000731
 80006e8:	08000711 	.word	0x08000711
 80006ec:	08000721 	.word	0x08000721
 80006f0:	08000755 	.word	0x08000755
 80006f4:	08000789 	.word	0x08000789
 80006f8:	08000779 	.word	0x08000779
 80006fc:	08000793 	.word	0x08000793
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8000700:	4b61      	ldr	r3, [pc, #388]	; (8000888 <lcdCommand+0x1d8>)
 8000702:	7a1b      	ldrb	r3, [r3, #8]
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b5f      	ldr	r3, [pc, #380]	; (8000888 <lcdCommand+0x1d8>)
 800070c:	721a      	strb	r2, [r3, #8]
                    break;
 800070e:	e04a      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8000710:	4b5d      	ldr	r3, [pc, #372]	; (8000888 <lcdCommand+0x1d8>)
 8000712:	7a1b      	ldrb	r3, [r3, #8]
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b5b      	ldr	r3, [pc, #364]	; (8000888 <lcdCommand+0x1d8>)
 800071c:	721a      	strb	r2, [r3, #8]
                    break;
 800071e:	e042      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8000720:	4b59      	ldr	r3, [pc, #356]	; (8000888 <lcdCommand+0x1d8>)
 8000722:	7a1b      	ldrb	r3, [r3, #8]
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b57      	ldr	r3, [pc, #348]	; (8000888 <lcdCommand+0x1d8>)
 800072c:	721a      	strb	r2, [r3, #8]
                    break;
 800072e:	e03a      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8000730:	2301      	movs	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000734:	f107 030f 	add.w	r3, r7, #15
 8000738:	4619      	mov	r1, r3
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f91e 	bl	800097c <lcdWriteByte>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d101      	bne.n	800074a <lcdCommand+0x9a>
                        return false;
 8000746:	2300      	movs	r3, #0
 8000748:	e09a      	b.n	8000880 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 800074a:	2002      	movs	r0, #2
 800074c:	f003 fce2 	bl	8004114 <vTaskDelay>
                        return true;
 8000750:	2301      	movs	r3, #1
 8000752:	e095      	b.n	8000880 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8000754:	2302      	movs	r3, #2
 8000756:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000758:	f107 030f 	add.w	r3, r7, #15
 800075c:	4619      	mov	r1, r3
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f90c 	bl	800097c <lcdWriteByte>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <lcdCommand+0xbe>
                        return false;
 800076a:	2300      	movs	r3, #0
 800076c:	e088      	b.n	8000880 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 800076e:	2002      	movs	r0, #2
 8000770:	f003 fcd0 	bl	8004114 <vTaskDelay>
                        return true;
 8000774:	2301      	movs	r3, #1
 8000776:	e083      	b.n	8000880 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8000778:	4b43      	ldr	r3, [pc, #268]	; (8000888 <lcdCommand+0x1d8>)
 800077a:	7a5b      	ldrb	r3, [r3, #9]
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b41      	ldr	r3, [pc, #260]	; (8000888 <lcdCommand+0x1d8>)
 8000784:	725a      	strb	r2, [r3, #9]
                    break;
 8000786:	e00e      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8000788:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <lcdCommand+0x1d8>)
 800078a:	7a5a      	ldrb	r2, [r3, #9]
 800078c:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <lcdCommand+0x1d8>)
 800078e:	725a      	strb	r2, [r3, #9]
                    break;
 8000790:	e009      	b.n	80007a6 <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8000792:	4b3d      	ldr	r3, [pc, #244]	; (8000888 <lcdCommand+0x1d8>)
 8000794:	7a5b      	ldrb	r3, [r3, #9]
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <lcdCommand+0x1d8>)
 800079e:	725a      	strb	r2, [r3, #9]
                    break;
 80007a0:	e001      	b.n	80007a6 <lcdCommand+0xf6>

                default:
                    return false;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e06c      	b.n	8000880 <lcdCommand+0x1d0>
            }

            break;
 80007a6:	e049      	b.n	800083c <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	2b07      	cmp	r3, #7
 80007ae:	d840      	bhi.n	8000832 <lcdCommand+0x182>
 80007b0:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <lcdCommand+0x108>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007d9 	.word	0x080007d9
 80007bc:	08000833 	.word	0x08000833
 80007c0:	080007e9 	.word	0x080007e9
 80007c4:	080007f9 	.word	0x080007f9
 80007c8:	08000833 	.word	0x08000833
 80007cc:	08000819 	.word	0x08000819
 80007d0:	08000809 	.word	0x08000809
 80007d4:	08000823 	.word	0x08000823
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <lcdCommand+0x1d8>)
 80007da:	7a1b      	ldrb	r3, [r3, #8]
 80007dc:	f023 0304 	bic.w	r3, r3, #4
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <lcdCommand+0x1d8>)
 80007e4:	721a      	strb	r2, [r3, #8]
                    break;
 80007e6:	e026      	b.n	8000836 <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <lcdCommand+0x1d8>)
 80007ea:	7a1b      	ldrb	r3, [r3, #8]
 80007ec:	f023 0302 	bic.w	r3, r3, #2
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <lcdCommand+0x1d8>)
 80007f4:	721a      	strb	r2, [r3, #8]
                    break;
 80007f6:	e01e      	b.n	8000836 <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <lcdCommand+0x1d8>)
 80007fa:	7a1b      	ldrb	r3, [r3, #8]
 80007fc:	f023 0301 	bic.w	r3, r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <lcdCommand+0x1d8>)
 8000804:	721a      	strb	r2, [r3, #8]
                    break;
 8000806:	e016      	b.n	8000836 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <lcdCommand+0x1d8>)
 800080a:	7a5b      	ldrb	r3, [r3, #9]
 800080c:	f023 0302 	bic.w	r3, r3, #2
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <lcdCommand+0x1d8>)
 8000814:	725a      	strb	r2, [r3, #9]
                    break;
 8000816:	e00e      	b.n	8000836 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <lcdCommand+0x1d8>)
 800081a:	7a5a      	ldrb	r2, [r3, #9]
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <lcdCommand+0x1d8>)
 800081e:	725a      	strb	r2, [r3, #9]
                    break;
 8000820:	e009      	b.n	8000836 <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <lcdCommand+0x1d8>)
 8000824:	7a5b      	ldrb	r3, [r3, #9]
 8000826:	f023 0301 	bic.w	r3, r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <lcdCommand+0x1d8>)
 800082e:	725a      	strb	r2, [r3, #9]
                    break;
 8000830:	e001      	b.n	8000836 <lcdCommand+0x186>

                default:
                    return false;
 8000832:	2300      	movs	r3, #0
 8000834:	e024      	b.n	8000880 <lcdCommand+0x1d0>
            }

            break;
 8000836:	e001      	b.n	800083c <lcdCommand+0x18c>

        default:
            return false;
 8000838:	2300      	movs	r3, #0
 800083a:	e021      	b.n	8000880 <lcdCommand+0x1d0>
    }

    /* Now lets send the command */
    switch (command) {
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b08      	cmp	r3, #8
 8000840:	dc16      	bgt.n	8000870 <lcdCommand+0x1c0>
 8000842:	2b06      	cmp	r3, #6
 8000844:	da0d      	bge.n	8000862 <lcdCommand+0x1b2>
 8000846:	2b01      	cmp	r3, #1
 8000848:	d004      	beq.n	8000854 <lcdCommand+0x1a4>
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd10      	ble.n	8000870 <lcdCommand+0x1c0>
 800084e:	3b03      	subs	r3, #3
 8000850:	2b01      	cmp	r3, #1
 8000852:	d80d      	bhi.n	8000870 <lcdCommand+0x1c0>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <lcdCommand+0x1d8>)
 8000856:	7a1b      	ldrb	r3, [r3, #8]
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73fb      	strb	r3, [r7, #15]
            break;
 8000860:	e007      	b.n	8000872 <lcdCommand+0x1c2>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <lcdCommand+0x1d8>)
 8000864:	7a5b      	ldrb	r3, [r3, #9]
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]
            break;
 800086e:	e000      	b.n	8000872 <lcdCommand+0x1c2>

        default:
            break;
 8000870:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8000872:	f107 030f 	add.w	r3, r7, #15
 8000876:	4619      	mov	r1, r3
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f87f 	bl	800097c <lcdWriteByte>
 800087e:	4603      	mov	r3, r0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000288 	.word	0x20000288

0800088c <lcdBacklight>:
 * @brief  Turn display's Backlight On or Off
 * @param  command LCD_BIT_BACKIGHT_ON to turn display On
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display Off
 * @return         true if success
 */
bool lcdBacklight(uint8_t command) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
    lcdParams.backlight = command;
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <lcdBacklight+0x4c>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, &lcdParams.backlight, 1) != HAL_OK) {
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <lcdBacklight+0x4c>)
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <lcdBacklight+0x4c>)
 80008a2:	799b      	ldrb	r3, [r3, #6]
 80008a4:	b299      	uxth	r1, r3
 80008a6:	2301      	movs	r3, #1
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <lcdBacklight+0x50>)
 80008aa:	f002 fa2d 	bl	8002d08 <HAL_I2C_Master_Transmit_DMA>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d004      	beq.n	80008be <lcdBacklight+0x32>
        return false;
 80008b4:	2300      	movs	r3, #0
 80008b6:	e00b      	b.n	80008d0 <lcdBacklight+0x44>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f003 fc2b 	bl	8004114 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <lcdBacklight+0x4c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fb82 	bl	8002fcc <HAL_I2C_GetState>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b20      	cmp	r3, #32
 80008cc:	d1f4      	bne.n	80008b8 <lcdBacklight+0x2c>
    }

    return true;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000288 	.word	0x20000288
 80008dc:	2000028f 	.word	0x2000028f

080008e0 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <lcdSetCursorPosition+0x50>)
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	79ba      	ldrb	r2, [r7, #6]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d303      	bcc.n	8000902 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <lcdSetCursorPosition+0x50>)
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <lcdSetCursorPosition+0x54>)
 8000906:	5cd2      	ldrb	r2, [r2, r3]
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4413      	add	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	b25b      	sxtb	r3, r3
 8000910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000914:	b25b      	sxtb	r3, r3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 800091a:	f107 030f 	add.w	r3, r7, #15
 800091e:	4619      	mov	r1, r3
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f82b 	bl	800097c <lcdWriteByte>
 8000926:	4603      	mov	r3, r0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000288 	.word	0x20000288
 8000934:	080051c0 	.word	0x080051c0

08000938 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e00e      	b.n	8000968 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	2001      	movs	r0, #1
 8000954:	f000 f812 	bl	800097c <lcdWriteByte>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <lcdPrintStr+0x2a>
            return false;
 800095e:	2300      	movs	r3, #0
 8000960:	e007      	b.n	8000972 <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	3301      	adds	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	429a      	cmp	r2, r3
 800096e:	d3ec      	bcc.n	800094a <lcdPrintStr+0x12>
        }
    }

    return true;
 8000970:	2301      	movs	r3, #1
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <lcdWriteByte+0xdc>)
 800098a:	79da      	ldrb	r2, [r3, #7]
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4313      	orrs	r3, r2
 8000990:	b2da      	uxtb	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	f023 030f 	bic.w	r3, r3, #15
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <lcdWriteByte+0xe0>)
 80009a8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <lcdWriteByte+0xe0>)
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <lcdWriteByte+0xe0>)
 80009b0:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <lcdWriteByte+0xdc>)
 80009b4:	79da      	ldrb	r2, [r3, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	f023 030f 	bic.w	r3, r3, #15
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <lcdWriteByte+0xe0>)
 80009d2:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 80009d4:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <lcdWriteByte+0xdc>)
 80009d6:	79da      	ldrb	r2, [r3, #7]
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	4313      	orrs	r3, r2
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	011b      	lsls	r3, r3, #4
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <lcdWriteByte+0xe0>)
 80009f2:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <lcdWriteByte+0xe0>)
 80009f6:	78da      	ldrb	r2, [r3, #3]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <lcdWriteByte+0xe0>)
 80009fa:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <lcdWriteByte+0xdc>)
 80009fe:	79da      	ldrb	r2, [r3, #7]
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	b25a      	sxtb	r2, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <lcdWriteByte+0xe0>)
 8000a18:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <lcdWriteByte+0xdc>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <lcdWriteByte+0xdc>)
 8000a20:	799b      	ldrb	r3, [r3, #6]
 8000a22:	b299      	uxth	r1, r3
 8000a24:	2306      	movs	r3, #6
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <lcdWriteByte+0xe0>)
 8000a28:	f002 f96e 	bl	8002d08 <HAL_I2C_Master_Transmit_DMA>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d004      	beq.n	8000a3c <lcdWriteByte+0xc0>
        return false;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e00b      	b.n	8000a4e <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f003 fb6c 	bl	8004114 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <lcdWriteByte+0xdc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fac3 	bl	8002fcc <HAL_I2C_GetState>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b20      	cmp	r3, #32
 8000a4a:	d1f4      	bne.n	8000a36 <lcdWriteByte+0xba>
    }

    return true;
 8000a4c:	2301      	movs	r3, #1
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000288 	.word	0x20000288
 8000a5c:	20000280 	.word	0x20000280

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b5b0      	push	{r4, r5, r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// init the CAN filter
	canFilter.FilterBank = 0;
 8000a66:	4b49      	ldr	r3, [pc, #292]	; (8000b8c <main+0x12c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a6c:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <main+0x12c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
	canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a72:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <main+0x12c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
	canFilter.FilterIdHigh = 0;
 8000a78:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <main+0x12c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	canFilter.FilterIdLow = 0;
 8000a7e:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <main+0x12c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
	canFilter.FilterMaskIdHigh = 0;
 8000a84:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <main+0x12c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
	canFilter.FilterMaskIdLow = 0;
 8000a8a:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <main+0x12c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a90:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <main+0x12c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	61da      	str	r2, [r3, #28]
	canFilter.FilterActivation = ENABLE;
 8000a96:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <main+0x12c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	621a      	str	r2, [r3, #32]
	canFilter.SlaveStartFilterBank = 14;
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <main+0x12c>)
 8000a9e:	220e      	movs	r2, #14
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24

	// init the CAN mailbox for BASE
	txHeader0.DLC = 8; // Number of bites to be transmitted max- 8
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <main+0x130>)
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	611a      	str	r2, [r3, #16]
	txHeader0.IDE = CAN_ID_STD;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <main+0x130>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
	txHeader0.RTR = CAN_RTR_DATA;
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <main+0x130>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
	txHeader0.StdId = 0x90;
 8000ab4:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <main+0x130>)
 8000ab6:	2290      	movs	r2, #144	; 0x90
 8000ab8:	601a      	str	r2, [r3, #0]
	txHeader0.ExtId = 0x02;
 8000aba:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <main+0x130>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
	txHeader0.TransmitGlobalTime = DISABLE;
 8000ac0:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <main+0x130>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for Torque Setting 
	txHeader1.DLC = 8; // Number of bites to be transmitted max- 8
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <main+0x134>)
 8000ac8:	2208      	movs	r2, #8
 8000aca:	611a      	str	r2, [r3, #16]
	txHeader1.IDE = CAN_ID_STD;
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <main+0x134>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
	txHeader1.RTR = CAN_RTR_DATA;
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <main+0x134>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
	txHeader1.StdId = 0x91;
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <main+0x134>)
 8000ada:	2291      	movs	r2, #145	; 0x91
 8000adc:	601a      	str	r2, [r3, #0]
	txHeader1.ExtId = 0x03;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <main+0x134>)
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	605a      	str	r2, [r3, #4]
	txHeader1.TransmitGlobalTime = DISABLE;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <main+0x134>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for DAQ Data
	txHeader2.DLC = 8; // Number of bites to be transmitted max- 8
 8000aea:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <main+0x138>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	611a      	str	r2, [r3, #16]
	txHeader2.IDE = CAN_ID_STD;
 8000af0:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <main+0x138>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
	txHeader2.RTR = CAN_RTR_DATA;
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <main+0x138>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
	txHeader2.StdId = 0x92;
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <main+0x138>)
 8000afe:	2292      	movs	r2, #146	; 0x92
 8000b00:	601a      	str	r2, [r3, #0]
	txHeader2.ExtId = 0x04;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <main+0x138>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	605a      	str	r2, [r3, #4]
	txHeader2.TransmitGlobalTime = DISABLE;
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <main+0x138>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for Control Data
	txHeader3.DLC = 8; // Number of bites to be transmitted max- 8
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <main+0x13c>)
 8000b10:	2208      	movs	r2, #8
 8000b12:	611a      	str	r2, [r3, #16]
	txHeader3.IDE = CAN_ID_STD;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <main+0x13c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
	txHeader3.RTR = CAN_RTR_DATA;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <main+0x13c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
	txHeader3.StdId = 0x93;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <main+0x13c>)
 8000b22:	2293      	movs	r2, #147	; 0x93
 8000b24:	601a      	str	r2, [r3, #0]
	txHeader3.ExtId = 0x05;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <main+0x13c>)
 8000b28:	2205      	movs	r2, #5
 8000b2a:	605a      	str	r2, [r3, #4]
	txHeader3.TransmitGlobalTime = DISABLE;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <main+0x13c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	751a      	strb	r2, [r3, #20]

	HAL_CAN_ConfigFilter(&hcan1, &canFilter); // Initialize CAN Filter
 8000b32:	4916      	ldr	r1, [pc, #88]	; (8000b8c <main+0x12c>)
 8000b34:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <main+0x140>)
 8000b36:	f000 ffb9 	bl	8001aac <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1); // Initialize CAN Bus
 8000b3a:	4819      	ldr	r0, [pc, #100]	; (8000ba0 <main+0x140>)
 8000b3c:	f001 f8a2 	bl	8001c84 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Interrupt
 8000b40:	2102      	movs	r1, #2
 8000b42:	4817      	ldr	r0, [pc, #92]	; (8000ba0 <main+0x140>)
 8000b44:	f001 f9f4 	bl	8001f30 <HAL_CAN_ActivateNotification>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fbac 	bl	80012a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f82e 	bl	8000bac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b50:	f000 f93e 	bl	8000dd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b54:	f000 f888 	bl	8000c68 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000b58:	f000 f8d8 	bl	8000d0c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000b5c:	f000 f90a 	bl	8000d74 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	// start up LCD display
	welcomeScreen();
 8000b60:	f000 f9be 	bl	8000ee0 <welcomeScreen>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <main+0x144>)
 8000b66:	1d3c      	adds	r4, r7, #4
 8000b68:	461d      	mov	r5, r3
 8000b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 ffa5 	bl	8003aca <osThreadCreate>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <main+0x148>)
 8000b84:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b86:	f002 ff99 	bl	8003abc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <main+0x12a>
 8000b8c:	2000414c 	.word	0x2000414c
 8000b90:	200040dc 	.word	0x200040dc
 8000b94:	20004174 	.word	0x20004174
 8000b98:	20004108 	.word	0x20004108
 8000b9c:	20004018 	.word	0x20004018
 8000ba0:	20004120 	.word	0x20004120
 8000ba4:	080050f8 	.word	0x080050f8
 8000ba8:	20003ff4 	.word	0x20003ff4

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2234      	movs	r2, #52	; 0x34
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 fa82 	bl	80050c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <SystemClock_Config+0xb4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <SystemClock_Config+0xb4>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <SystemClock_Config+0xb4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <SystemClock_Config+0xb8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <SystemClock_Config+0xb8>)
 8000bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <SystemClock_Config+0xb8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c10:	2310      	movs	r3, #16
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 fcb1 	bl	8003584 <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c28:	f000 f996 	bl	8000f58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fae0 	bl	800320c <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c52:	f000 f981 	bl	8000f58 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	; 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000c7c:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <MX_ADC1_Init+0x9c>)
 8000c7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000ca8:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <MX_ADC1_Init+0xa0>)
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000cc8:	f000 fb82 	bl	80013d0 <HAL_ADC_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 f941 	bl	8000f58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <MX_ADC1_Init+0x98>)
 8000ce8:	f000 fbb6 	bl	8001458 <HAL_ADC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cf2:	f000 f931 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20004094 	.word	0x20004094
 8000d04:	40012000 	.word	0x40012000
 8000d08:	0f000001 	.word	0x0f000001

08000d0c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <MX_CAN1_Init+0x64>)
 8000d14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d18:	2210      	movs	r2, #16
 8000d1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_CAN1_Init+0x60>)
 8000d5a:	f000 fdab 	bl	80018b4 <HAL_CAN_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000d64:	f000 f8f8 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20004120 	.word	0x20004120
 8000d70:	40006400 	.word	0x40006400

08000d74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000d7a:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <MX_I2C1_Init+0x54>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <MX_I2C1_Init+0x58>)
 8000d82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_I2C1_Init+0x50>)
 8000db2:	f001 fe65 	bl	8002a80 <HAL_I2C_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dbc:	f000 f8cc 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20004030 	.word	0x20004030
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	000186a0 	.word	0x000186a0

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <MX_GPIO_Init+0xe0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a30      	ldr	r2, [pc, #192]	; (8000eb0 <MX_GPIO_Init+0xe0>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <MX_GPIO_Init+0xe0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_GPIO_Init+0xe0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <MX_GPIO_Init+0xe0>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_GPIO_Init+0xe0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f240 4104 	movw	r1, #1028	; 0x404
 8000e24:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <MX_GPIO_Init+0xe4>)
 8000e26:	f001 fe11 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e30:	4821      	ldr	r0, [pc, #132]	; (8000eb8 <MX_GPIO_Init+0xe8>)
 8000e32:	f001 fe0b 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000e36:	f240 4304 	movw	r3, #1028	; 0x404
 8000e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <MX_GPIO_Init+0xe4>)
 8000e50:	f001 fc68 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <MX_GPIO_Init+0xe4>)
 8000e6a:	f001 fc5b 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <MX_GPIO_Init+0xe4>)
 8000e84:	f001 fc4e 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_GPIO_Init+0xe8>)
 8000ea2:	f001 fc3f 	bl	8002724 <HAL_GPIO_Init>

}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020000 	.word	0x40020000

08000ebc <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief CAN read message function
 * 
 * @param hcan1
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	// receive CAN bus message to canRX buffer
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX); 
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 ff1e 	bl	8001d0c <HAL_CAN_GetRxMessage>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000294 	.word	0x20000294
 8000edc:	20003ffc 	.word	0x20003ffc

08000ee0 <welcomeScreen>:
/**
 * @brief welcome & boot screen
 * 
 */
void welcomeScreen()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	lcdInit(&hi2c1, 0x27, 2, 16);       			// init lcd (i2c reference, LCD address, lines, rows)
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	2127      	movs	r1, #39	; 0x27
 8000eea:	4814      	ldr	r0, [pc, #80]	; (8000f3c <welcomeScreen+0x5c>)
 8000eec:	f7ff fb2e 	bl	800054c <lcdInit>
	lcdAutoscrollOff();								// turn off autoscroll
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2008      	movs	r0, #8
 8000ef4:	f7ff fbdc 	bl	80006b0 <lcdCommand>
	lcdBacklightOn();								// turn on backlight
 8000ef8:	2008      	movs	r0, #8
 8000efa:	f7ff fcc7 	bl	800088c <lcdBacklight>
	lcdDisplayClear();                  			// clear the screen
 8000efe:	2101      	movs	r1, #1
 8000f00:	2002      	movs	r0, #2
 8000f02:	f7ff fbd5 	bl	80006b0 <lcdCommand>
	lcdSetCursorPosition(2, 0);         			// set the cursor
 8000f06:	2100      	movs	r1, #0
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f7ff fce9 	bl	80008e0 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"welcome AERO!", 13);   	// print
 8000f0e:	210d      	movs	r1, #13
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <welcomeScreen+0x60>)
 8000f12:	f7ff fd11 	bl	8000938 <lcdPrintStr>
	lcdSetCursorPosition(2, 1);         			// next line
 8000f16:	2101      	movs	r1, #1
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f7ff fce1 	bl	80008e0 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"booting up...", 13);   	// print
 8000f1e:	210d      	movs	r1, #13
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <welcomeScreen+0x64>)
 8000f22:	f7ff fd09 	bl	8000938 <lcdPrintStr>
	HAL_Delay(3000);								// delay 3 seconds so the screen can be read
 8000f26:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f2a:	f000 fa2d 	bl	8001388 <HAL_Delay>
	lcdDisplayClear();								// clear the display so the other screens can be printed
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff fbbd 	bl	80006b0 <lcdCommand>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20004030 	.word	0x20004030
 8000f40:	08005114 	.word	0x08005114
 8000f44:	08005124 	.word	0x08005124

08000f48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f002 fe06 	bl	8003b62 <osDelay>
 8000f56:	e7fb      	b.n	8000f50 <StartDefaultTask+0x8>

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	f06f 0001 	mvn.w	r0, #1
 8000faa:	f001 faf2 	bl	8002592 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a24      	ldr	r2, [pc, #144]	; (800106c <HAL_ADC_MspInit+0xb0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d141      	bne.n	8001062 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <HAL_ADC_MspInit+0xb4>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a22      	ldr	r2, [pc, #136]	; (8001070 <HAL_ADC_MspInit+0xb4>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_ADC_MspInit+0xb4>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_ADC_MspInit+0xb4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <HAL_ADC_MspInit+0xb4>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_ADC_MspInit+0xb4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_ADC_MspInit+0xb4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a14      	ldr	r2, [pc, #80]	; (8001070 <HAL_ADC_MspInit+0xb4>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_ADC_MspInit+0xb4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001032:	23ff      	movs	r3, #255	; 0xff
 8001034:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001036:	2303      	movs	r3, #3
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	480b      	ldr	r0, [pc, #44]	; (8001074 <HAL_ADC_MspInit+0xb8>)
 8001046:	f001 fb6d 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800104a:	2303      	movs	r3, #3
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104e:	2303      	movs	r3, #3
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4806      	ldr	r0, [pc, #24]	; (8001078 <HAL_ADC_MspInit+0xbc>)
 800105e:	f001 fb61 	bl	8002724 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40012000 	.word	0x40012000
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400

0800107c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <HAL_CAN_MspInit+0xa4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d13c      	bne.n	8001118 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_CAN_MspInit+0xa8>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <HAL_CAN_MspInit+0xa8>)
 80010a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_CAN_MspInit+0xa8>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_CAN_MspInit+0xa8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a18      	ldr	r2, [pc, #96]	; (8001124 <HAL_CAN_MspInit+0xa8>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_CAN_MspInit+0xa8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010e8:	2309      	movs	r3, #9
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <HAL_CAN_MspInit+0xac>)
 80010f4:	f001 fb16 	bl	8002724 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2105      	movs	r1, #5
 80010fc:	2013      	movs	r0, #19
 80010fe:	f001 fa48 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001102:	2013      	movs	r0, #19
 8001104:	f001 fa61 	bl	80025ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2105      	movs	r1, #5
 800110c:	2014      	movs	r0, #20
 800110e:	f001 fa40 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001112:	2014      	movs	r0, #20
 8001114:	f001 fa59 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40006400 	.word	0x40006400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <HAL_I2C_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12b      	bne.n	80011a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116a:	23c0      	movs	r3, #192	; 0xc0
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117a:	2304      	movs	r3, #4
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <HAL_I2C_MspInit+0x8c>)
 8001186:	f001 facd 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f8ac 	bl	8001348 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011f0:	f003 fac8 	bl	8004784 <xTaskGetSchedulerState>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d001      	beq.n	80011fe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011fa:	f003 fd05 	bl	8004c08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <CAN1_TX_IRQHandler+0x10>)
 800120a:	f000 feb7 	bl	8001f7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20004120 	.word	0x20004120

08001218 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <CAN1_RX0_IRQHandler+0x10>)
 800121e:	f000 fead 	bl	8001f7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20004120 	.word	0x20004120

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800126c:	4c0b      	ldr	r4, [pc, #44]	; (800129c <LoopFillZerobss+0x26>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800127a:	f7ff ffd7 	bl	800122c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f003 fefd 	bl	800507c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fbed 	bl	8000a60 <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001288:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001294:	080051ec 	.word	0x080051ec
  ldr r2, =_sbss
 8001298:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800129c:	20004190 	.word	0x20004190

080012a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f001 f955 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fe44 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f001 f96d 	bl	80025e6 <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f001 f935 	bl	8002592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000000 	.word	0x20000000
 8001340:	20000008 	.word	0x20000008
 8001344:	20000004 	.word	0x20000004

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000008 	.word	0x20000008
 800136c:	2000418c 	.word	0x2000418c

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000418c 	.word	0x2000418c

08001388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff ffee 	bl	8001370 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d005      	beq.n	80013ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_Delay+0x44>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ae:	bf00      	nop
 80013b0:	f7ff ffde 	bl	8001370 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d8f7      	bhi.n	80013b0 <HAL_Delay+0x28>
  {
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008

080013d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e033      	b.n	800144e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d109      	bne.n	8001402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fde4 	bl	8000fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d118      	bne.n	8001440 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001416:	f023 0302 	bic.w	r3, r3, #2
 800141a:	f043 0202 	orr.w	r2, r3, #2
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f94a 	bl	80016bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
 800143e:	e001      	b.n	8001444 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1c>
 8001470:	2302      	movs	r3, #2
 8001472:	e113      	b.n	800169c <HAL_ADC_ConfigChannel+0x244>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b09      	cmp	r3, #9
 8001482:	d925      	bls.n	80014d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68d9      	ldr	r1, [r3, #12]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	3b1e      	subs	r3, #30
 800149a:	2207      	movs	r2, #7
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43da      	mvns	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	400a      	ands	r2, r1
 80014a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68d9      	ldr	r1, [r3, #12]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	4603      	mov	r3, r0
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4403      	add	r3, r0
 80014c2:	3b1e      	subs	r3, #30
 80014c4:	409a      	lsls	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	e022      	b.n	8001516 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6919      	ldr	r1, [r3, #16]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	2207      	movs	r2, #7
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	400a      	ands	r2, r1
 80014f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6919      	ldr	r1, [r3, #16]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	4603      	mov	r3, r0
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4403      	add	r3, r0
 800150c:	409a      	lsls	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d824      	bhi.n	8001568 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	3b05      	subs	r3, #5
 8001530:	221f      	movs	r2, #31
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	400a      	ands	r2, r1
 800153e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	3b05      	subs	r3, #5
 800155a:	fa00 f203 	lsl.w	r2, r0, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
 8001566:	e04c      	b.n	8001602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d824      	bhi.n	80015ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b23      	subs	r3, #35	; 0x23
 8001582:	221f      	movs	r2, #31
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43da      	mvns	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	400a      	ands	r2, r1
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b23      	subs	r3, #35	; 0x23
 80015ac:	fa00 f203 	lsl.w	r2, r0, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
 80015b8:	e023      	b.n	8001602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b41      	subs	r3, #65	; 0x41
 80015cc:	221f      	movs	r2, #31
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	400a      	ands	r2, r1
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	3b41      	subs	r3, #65	; 0x41
 80015f6:	fa00 f203 	lsl.w	r2, r0, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <HAL_ADC_ConfigChannel+0x250>)
 8001604:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_ADC_ConfigChannel+0x254>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d10f      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1d8>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b12      	cmp	r3, #18
 8001616:	d10b      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_ADC_ConfigChannel+0x254>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12b      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x23a>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_ADC_ConfigChannel+0x258>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d003      	beq.n	800164c <HAL_ADC_ConfigChannel+0x1f4>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b11      	cmp	r3, #17
 800164a:	d122      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_ADC_ConfigChannel+0x258>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d111      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_ADC_ConfigChannel+0x25c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <HAL_ADC_ConfigChannel+0x260>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	0c9a      	lsrs	r2, r3, #18
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001684:	e002      	b.n	800168c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3b01      	subs	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f9      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40012300 	.word	0x40012300
 80016ac:	40012000 	.word	0x40012000
 80016b0:	10000012 	.word	0x10000012
 80016b4:	20000000 	.word	0x20000000
 80016b8:	431bde83 	.word	0x431bde83

080016bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c4:	4b79      	ldr	r3, [pc, #484]	; (80018ac <ADC_Init+0x1f0>)
 80016c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	021a      	lsls	r2, r3, #8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6899      	ldr	r1, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <ADC_Init+0x1f4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6899      	ldr	r1, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e00f      	b.n	80017ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0202 	bic.w	r2, r2, #2
 80017c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6899      	ldr	r1, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e1b      	ldrb	r3, [r3, #24]
 80017d4:	005a      	lsls	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	3b01      	subs	r3, #1
 8001814:	035a      	lsls	r2, r3, #13
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e007      	b.n	8001830 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	3b01      	subs	r3, #1
 800184c:	051a      	lsls	r2, r3, #20
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001872:	025a      	lsls	r2, r3, #9
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800188a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	029a      	lsls	r2, r3, #10
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	609a      	str	r2, [r3, #8]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40012300 	.word	0x40012300
 80018b0:	0f000001 	.word	0x0f000001

080018b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0ed      	b.n	8001aa2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fbd2 	bl	800107c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e8:	f7ff fd42 	bl	8001370 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ee:	e012      	b.n	8001916 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f0:	f7ff fd3e 	bl	8001370 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b0a      	cmp	r3, #10
 80018fc:	d90b      	bls.n	8001916 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2205      	movs	r2, #5
 800190e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0c5      	b.n	8001aa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0e5      	beq.n	80018f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0202 	bic.w	r2, r2, #2
 8001932:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001934:	f7ff fd1c 	bl	8001370 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800193a:	e012      	b.n	8001962 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800193c:	f7ff fd18 	bl	8001370 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d90b      	bls.n	8001962 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2205      	movs	r2, #5
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e09f      	b.n	8001aa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e5      	bne.n	800193c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7e1b      	ldrb	r3, [r3, #24]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d108      	bne.n	800198a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e007      	b.n	800199a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7e5b      	ldrb	r3, [r3, #25]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d108      	bne.n	80019b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e007      	b.n	80019c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7e9b      	ldrb	r3, [r3, #26]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d108      	bne.n	80019de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e007      	b.n	80019ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0220 	bic.w	r2, r2, #32
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7edb      	ldrb	r3, [r3, #27]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0210 	bic.w	r2, r2, #16
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e007      	b.n	8001a18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0210 	orr.w	r2, r2, #16
 8001a16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7f1b      	ldrb	r3, [r3, #28]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d108      	bne.n	8001a32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0208 	orr.w	r2, r2, #8
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e007      	b.n	8001a42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0208 	bic.w	r2, r2, #8
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7f5b      	ldrb	r3, [r3, #29]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d108      	bne.n	8001a5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0204 	orr.w	r2, r2, #4
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e007      	b.n	8001a6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0204 	bic.w	r2, r2, #4
 8001a6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	ea42 0103 	orr.w	r1, r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac4:	7cfb      	ldrb	r3, [r7, #19]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d003      	beq.n	8001ad2 <HAL_CAN_ConfigFilter+0x26>
 8001aca:	7cfb      	ldrb	r3, [r7, #19]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	f040 80c7 	bne.w	8001c60 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a69      	ldr	r2, [pc, #420]	; (8001c7c <HAL_CAN_ConfigFilter+0x1d0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d001      	beq.n	8001ae0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001adc:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ade:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ae6:	f043 0201 	orr.w	r2, r3, #1
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	4a63      	ldr	r2, [pc, #396]	; (8001c80 <HAL_CAN_ConfigFilter+0x1d4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d111      	bne.n	8001b1c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001afe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	2201      	movs	r2, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d123      	bne.n	8001b8e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	401a      	ands	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b68:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3248      	adds	r2, #72	; 0x48
 8001b6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b84:	6979      	ldr	r1, [r7, #20]
 8001b86:	3348      	adds	r3, #72	; 0x48
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d122      	bne.n	8001bdc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bb6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3248      	adds	r2, #72	; 0x48
 8001bbc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd2:	6979      	ldr	r1, [r7, #20]
 8001bd4:	3348      	adds	r3, #72	; 0x48
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bf6:	e007      	b.n	8001c08 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	431a      	orrs	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c22:	e007      	b.n	8001c34 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c52:	f023 0201 	bic.w	r2, r3, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e006      	b.n	8001c6e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40006c00 	.word	0x40006c00
 8001c80:	40006400 	.word	0x40006400

08001c84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d12e      	bne.n	8001cf6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff fb5e 	bl	8001370 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cb6:	e012      	b.n	8001cde <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb8:	f7ff fb5a 	bl	8001370 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d90b      	bls.n	8001cde <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e012      	b.n	8001d04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e5      	bne.n	8001cb8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e006      	b.n	8001d04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
  }
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d003      	beq.n	8001d30 <HAL_CAN_GetRxMessage+0x24>
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	f040 80f3 	bne.w	8001f16 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10e      	bne.n	8001d54 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d116      	bne.n	8001d72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0e7      	b.n	8001f24 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0d8      	b.n	8001f24 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	331b      	adds	r3, #27
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0204 	and.w	r2, r3, #4
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10c      	bne.n	8001daa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	331b      	adds	r3, #27
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	4413      	add	r3, r2
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0d5b      	lsrs	r3, r3, #21
 8001da0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e00b      	b.n	8001dc2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	331b      	adds	r3, #27
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4413      	add	r3, r2
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	331b      	adds	r3, #27
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0202 	and.w	r2, r3, #2
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	331b      	adds	r3, #27
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	331b      	adds	r3, #27
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	331b      	adds	r3, #27
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	0a1a      	lsrs	r2, r3, #8
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0c1a      	lsrs	r2, r3, #16
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	3302      	adds	r3, #2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0e1a      	lsrs	r2, r3, #24
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3303      	adds	r3, #3
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	3304      	adds	r3, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0a1a      	lsrs	r2, r3, #8
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	3305      	adds	r3, #5
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	0c1a      	lsrs	r2, r3, #16
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	3306      	adds	r3, #6
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0e1a      	lsrs	r2, r3, #24
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	3307      	adds	r3, #7
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d108      	bne.n	8001f02 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	e007      	b.n	8001f12 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0220 	orr.w	r2, r2, #32
 8001f10:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e006      	b.n	8001f24 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
  }
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f40:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d002      	beq.n	8001f4e <HAL_CAN_ActivateNotification+0x1e>
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d109      	bne.n	8001f62 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6959      	ldr	r1, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e006      	b.n	8001f70 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
  }
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d07c      	beq.n	80020bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d023      	beq.n	8002014 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f983 	bl	80022ea <HAL_CAN_TxMailbox0CompleteCallback>
 8001fe4:	e016      	b.n	8002014 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff8:	e00c      	b.n	8002014 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
 800200c:	e002      	b.n	8002014 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f989 	bl	8002326 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d024      	beq.n	8002068 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002026:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f963 	bl	80022fe <HAL_CAN_TxMailbox1CompleteCallback>
 8002038:	e016      	b.n	8002068 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
 800204c:	e00c      	b.n	8002068 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e002      	b.n	8002068 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f969 	bl	800233a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d024      	beq.n	80020bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800207a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f943 	bl	8002312 <HAL_CAN_TxMailbox2CompleteCallback>
 800208c:	e016      	b.n	80020bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d004      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
 80020a0:	e00c      	b.n	80020bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
 80020b4:	e002      	b.n	80020bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f949 	bl	800234e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00c      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2210      	movs	r2, #16
 80020de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2208      	movs	r2, #8
 80020fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f930 	bl	8002362 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fece 	bl	8000ebc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00c      	beq.n	8002144 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2210      	movs	r2, #16
 8002142:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2208      	movs	r2, #8
 800215e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f912 	bl	800238a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8f9 	bl	8002376 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f8fc 	bl	800239e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00b      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2208      	movs	r2, #8
 80021c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8f5 	bl	80023b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d07b      	beq.n	80022ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d072      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002236:	2b00      	cmp	r3, #0
 8002238:	d043      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002240:	2b00      	cmp	r3, #0
 8002242:	d03e      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800224a:	2b60      	cmp	r3, #96	; 0x60
 800224c:	d02b      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x32a>
 800224e:	2b60      	cmp	r3, #96	; 0x60
 8002250:	d82e      	bhi.n	80022b0 <HAL_CAN_IRQHandler+0x334>
 8002252:	2b50      	cmp	r3, #80	; 0x50
 8002254:	d022      	beq.n	800229c <HAL_CAN_IRQHandler+0x320>
 8002256:	2b50      	cmp	r3, #80	; 0x50
 8002258:	d82a      	bhi.n	80022b0 <HAL_CAN_IRQHandler+0x334>
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d019      	beq.n	8002292 <HAL_CAN_IRQHandler+0x316>
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	d826      	bhi.n	80022b0 <HAL_CAN_IRQHandler+0x334>
 8002262:	2b30      	cmp	r3, #48	; 0x30
 8002264:	d010      	beq.n	8002288 <HAL_CAN_IRQHandler+0x30c>
 8002266:	2b30      	cmp	r3, #48	; 0x30
 8002268:	d822      	bhi.n	80022b0 <HAL_CAN_IRQHandler+0x334>
 800226a:	2b10      	cmp	r3, #16
 800226c:	d002      	beq.n	8002274 <HAL_CAN_IRQHandler+0x2f8>
 800226e:	2b20      	cmp	r3, #32
 8002270:	d005      	beq.n	800227e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002272:	e01d      	b.n	80022b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	f043 0308 	orr.w	r3, r3, #8
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800227c:	e019      	b.n	80022b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f043 0310 	orr.w	r3, r3, #16
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002286:	e014      	b.n	80022b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	f043 0320 	orr.w	r3, r3, #32
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002290:	e00f      	b.n	80022b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800229a:	e00a      	b.n	80022b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022a4:	e005      	b.n	80022b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022ae:	e000      	b.n	80022b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80022b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2204      	movs	r2, #4
 80022c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f872 	bl	80023c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	; 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	; (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4907      	ldr	r1, [pc, #28]	; (8002478 <__NVIC_EnableIRQ+0x38>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	; (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	; (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff29 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff3e 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff8e 	bl	80024d0 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5d 	bl	800247c <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff31 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa2 	bl	8002538 <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Start_IT+0x26>
 8002620:	2302      	movs	r3, #2
 8002622:	e040      	b.n	80026a6 <HAL_DMA_Start_IT+0xa8>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d12f      	bne.n	8002698 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f83a 	bl	80026c6 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	223f      	movs	r2, #63	; 0x3f
 8002658:	409a      	lsls	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0216 	orr.w	r2, r2, #22
 800266c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0208 	orr.w	r2, r2, #8
 8002684:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e005      	b.n	80026a4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
 80026a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026e2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d108      	bne.n	8002706 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002704:	e007      	b.n	8002716 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	60da      	str	r2, [r3, #12]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e165      	b.n	8002a0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002740:	2201      	movs	r2, #1
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	f040 8154 	bne.w	8002a06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d005      	beq.n	8002776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002772:	2b02      	cmp	r3, #2
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d017      	beq.n	8002814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d123      	bne.n	8002868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	08da      	lsrs	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3208      	adds	r2, #8
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0203 	and.w	r2, r3, #3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80ae 	beq.w	8002a06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_GPIO_Init+0x300>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <HAL_GPIO_Init+0x300>)
 80028b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ba:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <HAL_GPIO_Init+0x300>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c6:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_GPIO_Init+0x304>)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4f      	ldr	r2, [pc, #316]	; (8002a2c <HAL_GPIO_Init+0x308>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d025      	beq.n	800293e <HAL_GPIO_Init+0x21a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4e      	ldr	r2, [pc, #312]	; (8002a30 <HAL_GPIO_Init+0x30c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01f      	beq.n	800293a <HAL_GPIO_Init+0x216>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4d      	ldr	r2, [pc, #308]	; (8002a34 <HAL_GPIO_Init+0x310>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d019      	beq.n	8002936 <HAL_GPIO_Init+0x212>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4c      	ldr	r2, [pc, #304]	; (8002a38 <HAL_GPIO_Init+0x314>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_GPIO_Init+0x20e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4b      	ldr	r2, [pc, #300]	; (8002a3c <HAL_GPIO_Init+0x318>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00d      	beq.n	800292e <HAL_GPIO_Init+0x20a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4a      	ldr	r2, [pc, #296]	; (8002a40 <HAL_GPIO_Init+0x31c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <HAL_GPIO_Init+0x206>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a49      	ldr	r2, [pc, #292]	; (8002a44 <HAL_GPIO_Init+0x320>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_GPIO_Init+0x202>
 8002922:	2306      	movs	r3, #6
 8002924:	e00c      	b.n	8002940 <HAL_GPIO_Init+0x21c>
 8002926:	2307      	movs	r3, #7
 8002928:	e00a      	b.n	8002940 <HAL_GPIO_Init+0x21c>
 800292a:	2305      	movs	r3, #5
 800292c:	e008      	b.n	8002940 <HAL_GPIO_Init+0x21c>
 800292e:	2304      	movs	r3, #4
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x21c>
 8002932:	2303      	movs	r3, #3
 8002934:	e004      	b.n	8002940 <HAL_GPIO_Init+0x21c>
 8002936:	2302      	movs	r3, #2
 8002938:	e002      	b.n	8002940 <HAL_GPIO_Init+0x21c>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x21c>
 800293e:	2300      	movs	r3, #0
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f002 0203 	and.w	r2, r2, #3
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	4093      	lsls	r3, r2
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002950:	4935      	ldr	r1, [pc, #212]	; (8002a28 <HAL_GPIO_Init+0x304>)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295e:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_GPIO_Init+0x324>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002982:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <HAL_GPIO_Init+0x324>)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002988:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_GPIO_Init+0x324>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <HAL_GPIO_Init+0x324>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_GPIO_Init+0x324>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029d6:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_GPIO_Init+0x324>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_GPIO_Init+0x324>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a00:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_GPIO_Init+0x324>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	f67f ae96 	bls.w	8002740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40021400 	.word	0x40021400
 8002a44:	40021800 	.word	0x40021800
 8002a48:	40013c00 	.word	0x40013c00

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a68:	e003      	b.n	8002a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	041a      	lsls	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	619a      	str	r2, [r3, #24]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e12b      	b.n	8002cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fb40 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f000 fd3a 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8002ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a81      	ldr	r2, [pc, #516]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d807      	bhi.n	8002b04 <HAL_I2C_Init+0x84>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a80      	ldr	r2, [pc, #512]	; (8002cf8 <HAL_I2C_Init+0x278>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e006      	b.n	8002b12 <HAL_I2C_Init+0x92>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a7d      	ldr	r2, [pc, #500]	; (8002cfc <HAL_I2C_Init+0x27c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e7      	b.n	8002cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a78      	ldr	r2, [pc, #480]	; (8002d00 <HAL_I2C_Init+0x280>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a6a      	ldr	r2, [pc, #424]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d802      	bhi.n	8002b54 <HAL_I2C_Init+0xd4>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	3301      	adds	r3, #1
 8002b52:	e009      	b.n	8002b68 <HAL_I2C_Init+0xe8>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	4a69      	ldr	r2, [pc, #420]	; (8002d04 <HAL_I2C_Init+0x284>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	3301      	adds	r3, #1
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	495c      	ldr	r1, [pc, #368]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b84:	428b      	cmp	r3, r1
 8002b86:	d819      	bhi.n	8002bbc <HAL_I2C_Init+0x13c>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1e59      	subs	r1, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_I2C_Init+0x138>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e59      	subs	r1, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb6:	e051      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e04f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d111      	bne.n	8002be8 <HAL_I2C_Init+0x168>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e012      	b.n	8002c0e <HAL_I2C_Init+0x18e>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	0099      	lsls	r1, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Init+0x196>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e022      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10e      	bne.n	8002c3c <HAL_I2C_Init+0x1bc>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1e58      	subs	r0, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	440b      	add	r3, r1
 8002c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3a:	e00f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1e58      	subs	r0, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	0099      	lsls	r1, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	6809      	ldr	r1, [r1, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6911      	ldr	r1, [r2, #16]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	000186a0 	.word	0x000186a0
 8002cf8:	001e847f 	.word	0x001e847f
 8002cfc:	003d08ff 	.word	0x003d08ff
 8002d00:	431bde83 	.word	0x431bde83
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	461a      	mov	r2, r3
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	f040 810d 	bne.w	8002f48 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d2e:	4b89      	ldr	r3, [pc, #548]	; (8002f54 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	08db      	lsrs	r3, r3, #3
 8002d34:	4a88      	ldr	r2, [pc, #544]	; (8002f58 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0a1a      	lsrs	r2, r3, #8
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	009a      	lsls	r2, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d116      	bne.n	8002d82 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0e3      	b.n	8002f4a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d0db      	beq.n	8002d48 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Master_Transmit_DMA+0x96>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0d5      	b.n	8002f4a <HAL_I2C_Master_Transmit_DMA+0x242>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d007      	beq.n	8002dc4 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2221      	movs	r2, #33	; 0x21
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2210      	movs	r2, #16
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	893a      	ldrh	r2, [r7, #8]
 8002df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a56      	ldr	r2, [pc, #344]	; (8002f5c <HAL_I2C_Master_Transmit_DMA+0x254>)
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e06:	897a      	ldrh	r2, [r7, #10]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d07b      	beq.n	8002f0c <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d02a      	beq.n	8002e72 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	4a4f      	ldr	r2, [pc, #316]	; (8002f60 <HAL_I2C_Master_Transmit_DMA+0x258>)
 8002e22:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	4a4e      	ldr	r2, [pc, #312]	; (8002f64 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8002e2a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2200      	movs	r2, #0
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	2200      	movs	r2, #0
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	2200      	movs	r2, #0
 8002e42:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	2200      	movs	r2, #0
 8002e4a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	4619      	mov	r1, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	f7ff fbcc 	bl	80025fe <HAL_DMA_Start_IT>
 8002e66:	4603      	mov	r3, r0
 8002e68:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d139      	bne.n	8002ee4 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8002e70:	e013      	b.n	8002e9a <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e057      	b.n	8002f4a <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002eb0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec0:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e02f      	b.n	8002f44 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f043 0210 	orr.w	r2, r3, #16
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01e      	b.n	8002f4a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f42:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e000      	b.n	8002f4a <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000
 8002f58:	14f8b589 	.word	0x14f8b589
 8002f5c:	ffff0000 	.word	0xffff0000
 8002f60:	08002fe9 	.word	0x08002fe9
 8002f64:	08003193 	.word	0x08003193

08002f68 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	b2db      	uxtb	r3, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003004:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800301a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003028:	2200      	movs	r2, #0
 800302a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	2200      	movs	r2, #0
 800303a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003042:	2b21      	cmp	r3, #33	; 0x21
 8003044:	d007      	beq.n	8003056 <I2C_DMAXferCplt+0x6e>
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800304c:	2b22      	cmp	r3, #34	; 0x22
 800304e:	d131      	bne.n	80030b4 <I2C_DMAXferCplt+0xcc>
 8003050:	7cbb      	ldrb	r3, [r7, #18]
 8003052:	2b20      	cmp	r3, #32
 8003054:	d12e      	bne.n	80030b4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003064:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	2b29      	cmp	r3, #41	; 0x29
 8003070:	d10a      	bne.n	8003088 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2221      	movs	r2, #33	; 0x21
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2228      	movs	r2, #40	; 0x28
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003080:	6978      	ldr	r0, [r7, #20]
 8003082:	f7ff ff7b 	bl	8002f7c <HAL_I2C_SlaveTxCpltCallback>
 8003086:	e00c      	b.n	80030a2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003088:	7cfb      	ldrb	r3, [r7, #19]
 800308a:	2b2a      	cmp	r3, #42	; 0x2a
 800308c:	d109      	bne.n	80030a2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2222      	movs	r2, #34	; 0x22
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2228      	movs	r2, #40	; 0x28
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800309c:	6978      	ldr	r0, [r7, #20]
 800309e:	f7ff ff77 	bl	8002f90 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80030b0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80030b2:	e06a      	b.n	800318a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d064      	beq.n	800318a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030e8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030f0:	d009      	beq.n	8003106 <I2C_DMAXferCplt+0x11e>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d006      	beq.n	8003106 <I2C_DMAXferCplt+0x11e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030fe:	d002      	beq.n	8003106 <I2C_DMAXferCplt+0x11e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b20      	cmp	r3, #32
 8003104:	d107      	bne.n	8003116 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003124:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003134:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003144:	6978      	ldr	r0, [r7, #20]
 8003146:	f7ff ff37 	bl	8002fb8 <HAL_I2C_ErrorCallback>
}
 800314a:	e01e      	b.n	800318a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d10a      	bne.n	8003176 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f7ff ff18 	bl	8002fa4 <HAL_I2C_MemRxCpltCallback>
}
 8003174:	e009      	b.n	800318a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2212      	movs	r2, #18
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003184:	6978      	ldr	r0, [r7, #20]
 8003186:	f7ff feef 	bl	8002f68 <HAL_I2C_MasterRxCpltCallback>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	2200      	movs	r2, #0
 80031ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	2200      	movs	r2, #0
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fa74 	bl	80026ae <HAL_DMA_GetError>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d01b      	beq.n	8003204 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f043 0210 	orr.w	r2, r3, #16
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff feda 	bl	8002fb8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0cc      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b68      	ldr	r3, [pc, #416]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d90c      	bls.n	8003248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b65      	ldr	r3, [pc, #404]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0b8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003260:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800326a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	494d      	ldr	r1, [pc, #308]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d044      	beq.n	800332c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d119      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e067      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4934      	ldr	r1, [pc, #208]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fc:	f7fe f838 	bl	8001370 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fe f834 	bl	8001370 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e04f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d20c      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4916      	ldr	r1, [pc, #88]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003392:	f000 f821 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490a      	ldr	r1, [pc, #40]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_ClockConfig+0x1c8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd ff98 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00
 80033c8:	40023800 	.word	0x40023800
 80033cc:	080051c4 	.word	0x080051c4
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033de:	2100      	movs	r1, #0
 80033e0:	6079      	str	r1, [r7, #4]
 80033e2:	2100      	movs	r1, #0
 80033e4:	60f9      	str	r1, [r7, #12]
 80033e6:	2100      	movs	r1, #0
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033ea:	2100      	movs	r1, #0
 80033ec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ee:	4952      	ldr	r1, [pc, #328]	; (8003538 <HAL_RCC_GetSysClockFreq+0x160>)
 80033f0:	6889      	ldr	r1, [r1, #8]
 80033f2:	f001 010c 	and.w	r1, r1, #12
 80033f6:	2908      	cmp	r1, #8
 80033f8:	d00d      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0x3e>
 80033fa:	2908      	cmp	r1, #8
 80033fc:	f200 8094 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x150>
 8003400:	2900      	cmp	r1, #0
 8003402:	d002      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0x32>
 8003404:	2904      	cmp	r1, #4
 8003406:	d003      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x38>
 8003408:	e08e      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340a:	4b4c      	ldr	r3, [pc, #304]	; (800353c <HAL_RCC_GetSysClockFreq+0x164>)
 800340c:	60bb      	str	r3, [r7, #8]
       break;
 800340e:	e08e      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCC_GetSysClockFreq+0x168>)
 8003412:	60bb      	str	r3, [r7, #8]
      break;
 8003414:	e08b      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003416:	4948      	ldr	r1, [pc, #288]	; (8003538 <HAL_RCC_GetSysClockFreq+0x160>)
 8003418:	6849      	ldr	r1, [r1, #4]
 800341a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800341e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003420:	4945      	ldr	r1, [pc, #276]	; (8003538 <HAL_RCC_GetSysClockFreq+0x160>)
 8003422:	6849      	ldr	r1, [r1, #4]
 8003424:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003428:	2900      	cmp	r1, #0
 800342a:	d024      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342c:	4942      	ldr	r1, [pc, #264]	; (8003538 <HAL_RCC_GetSysClockFreq+0x160>)
 800342e:	6849      	ldr	r1, [r1, #4]
 8003430:	0989      	lsrs	r1, r1, #6
 8003432:	4608      	mov	r0, r1
 8003434:	f04f 0100 	mov.w	r1, #0
 8003438:	f240 14ff 	movw	r4, #511	; 0x1ff
 800343c:	f04f 0500 	mov.w	r5, #0
 8003440:	ea00 0204 	and.w	r2, r0, r4
 8003444:	ea01 0305 	and.w	r3, r1, r5
 8003448:	493d      	ldr	r1, [pc, #244]	; (8003540 <HAL_RCC_GetSysClockFreq+0x168>)
 800344a:	fb01 f003 	mul.w	r0, r1, r3
 800344e:	2100      	movs	r1, #0
 8003450:	fb01 f102 	mul.w	r1, r1, r2
 8003454:	1844      	adds	r4, r0, r1
 8003456:	493a      	ldr	r1, [pc, #232]	; (8003540 <HAL_RCC_GetSysClockFreq+0x168>)
 8003458:	fba2 0101 	umull	r0, r1, r2, r1
 800345c:	1863      	adds	r3, r4, r1
 800345e:	4619      	mov	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	461a      	mov	r2, r3
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	f7fc feda 	bl	8000220 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e04a      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b30      	ldr	r3, [pc, #192]	; (8003538 <HAL_RCC_GetSysClockFreq+0x160>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	461a      	mov	r2, r3
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	ea02 0400 	and.w	r4, r2, r0
 800348e:	ea03 0501 	and.w	r5, r3, r1
 8003492:	4620      	mov	r0, r4
 8003494:	4629      	mov	r1, r5
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	014b      	lsls	r3, r1, #5
 80034a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034a4:	0142      	lsls	r2, r0, #5
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	1b00      	subs	r0, r0, r4
 80034ac:	eb61 0105 	sbc.w	r1, r1, r5
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	018b      	lsls	r3, r1, #6
 80034ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034be:	0182      	lsls	r2, r0, #6
 80034c0:	1a12      	subs	r2, r2, r0
 80034c2:	eb63 0301 	sbc.w	r3, r3, r1
 80034c6:	f04f 0000 	mov.w	r0, #0
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	00d9      	lsls	r1, r3, #3
 80034d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034d4:	00d0      	lsls	r0, r2, #3
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	1912      	adds	r2, r2, r4
 80034dc:	eb45 0303 	adc.w	r3, r5, r3
 80034e0:	f04f 0000 	mov.w	r0, #0
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	0299      	lsls	r1, r3, #10
 80034ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034ee:	0290      	lsls	r0, r2, #10
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	f7fc fe8e 	bl	8000220 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_RCC_GetSysClockFreq+0x160>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	60bb      	str	r3, [r7, #8]
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_RCC_GetSysClockFreq+0x164>)
 800352a:	60bb      	str	r3, [r7, #8]
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	68bb      	ldr	r3, [r7, #8]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bdb0      	pop	{r4, r5, r7, pc}
 8003538:	40023800 	.word	0x40023800
 800353c:	00f42400 	.word	0x00f42400
 8003540:	017d7840 	.word	0x017d7840

08003544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_RCC_GetHCLKFreq+0x14>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000000 	.word	0x20000000

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003560:	f7ff fff0 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	0a9b      	lsrs	r3, r3, #10
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800
 8003580:	080051d4 	.word	0x080051d4

08003584 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e270      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d075      	beq.n	800368e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035a2:	4ba3      	ldr	r3, [pc, #652]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4ba0      	ldr	r3, [pc, #640]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d112      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4b9d      	ldr	r3, [pc, #628]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	4b99      	ldr	r3, [pc, #612]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <HAL_RCC_OscConfig+0x108>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d157      	bne.n	800368c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e24b      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x74>
 80035ea:	4b91      	ldr	r3, [pc, #580]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a90      	ldr	r2, [pc, #576]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x98>
 8003602:	4b8b      	ldr	r3, [pc, #556]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a8a      	ldr	r2, [pc, #552]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b88      	ldr	r3, [pc, #544]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a87      	ldr	r2, [pc, #540]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 800361c:	4b84      	ldr	r3, [pc, #528]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a83      	ldr	r2, [pc, #524]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b81      	ldr	r3, [pc, #516]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a80      	ldr	r2, [pc, #512]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd fe98 	bl	8001370 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7fd fe94 	bl	8001370 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e210      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b76      	ldr	r3, [pc, #472]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xc0>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd fe84 	bl	8001370 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800366c:	f7fd fe80 	bl	8001370 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1fc      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0xe8>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800369a:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a6:	4b62      	ldr	r3, [pc, #392]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b5f      	ldr	r3, [pc, #380]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b5c      	ldr	r3, [pc, #368]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1d0      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4952      	ldr	r1, [pc, #328]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b4f      	ldr	r3, [pc, #316]	; (8003834 <HAL_RCC_OscConfig+0x2b0>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fe39 	bl	8001370 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd fe35 	bl	8001370 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1b1      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4940      	ldr	r1, [pc, #256]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_OscConfig+0x2b0>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd fe18 	bl	8001370 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003744:	f7fd fe14 	bl	8001370 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e190      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d030      	beq.n	80037d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_RCC_OscConfig+0x2b4>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fd fdf8 	bl	8001370 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003784:	f7fd fdf4 	bl	8001370 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e170      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x200>
 80037a2:	e015      	b.n	80037d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCC_OscConfig+0x2b4>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fd fde1 	bl	8001370 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b2:	f7fd fddd 	bl	8001370 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e159      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f0      	bne.n	80037b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80a0 	beq.w	800391e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_OscConfig+0x2b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d121      	bne.n	800385e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCC_OscConfig+0x2b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_RCC_OscConfig+0x2b8>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003826:	f7fd fda3 	bl	8001370 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	e011      	b.n	8003852 <HAL_RCC_OscConfig+0x2ce>
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	42470000 	.word	0x42470000
 8003838:	42470e80 	.word	0x42470e80
 800383c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fd fd96 	bl	8001370 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e112      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b8b      	ldr	r3, [pc, #556]	; (8003a80 <HAL_RCC_OscConfig+0x4fc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x2f0>
 8003866:	4b87      	ldr	r3, [pc, #540]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a86      	ldr	r2, [pc, #536]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
 8003872:	e01c      	b.n	80038ae <HAL_RCC_OscConfig+0x32a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b05      	cmp	r3, #5
 800387a:	d10c      	bne.n	8003896 <HAL_RCC_OscConfig+0x312>
 800387c:	4b81      	ldr	r3, [pc, #516]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	4a80      	ldr	r2, [pc, #512]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	6713      	str	r3, [r2, #112]	; 0x70
 8003888:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a7d      	ldr	r2, [pc, #500]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
 8003894:	e00b      	b.n	80038ae <HAL_RCC_OscConfig+0x32a>
 8003896:	4b7b      	ldr	r3, [pc, #492]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a7a      	ldr	r2, [pc, #488]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	4b78      	ldr	r3, [pc, #480]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	4a77      	ldr	r2, [pc, #476]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d015      	beq.n	80038e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fd fd5b 	bl	8001370 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fd fd57 	bl	8001370 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e0d1      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d4:	4b6b      	ldr	r3, [pc, #428]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ee      	beq.n	80038be <HAL_RCC_OscConfig+0x33a>
 80038e0:	e014      	b.n	800390c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fd fd45 	bl	8001370 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	e00a      	b.n	8003900 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fd fd41 	bl	8001370 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e0bb      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003900:	4b60      	ldr	r3, [pc, #384]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ee      	bne.n	80038ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d105      	bne.n	800391e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a5b      	ldr	r2, [pc, #364]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80a7 	beq.w	8003a76 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003928:	4b56      	ldr	r3, [pc, #344]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b08      	cmp	r3, #8
 8003932:	d060      	beq.n	80039f6 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d145      	bne.n	80039c8 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	4b52      	ldr	r3, [pc, #328]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fd fd15 	bl	8001370 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fd fd11 	bl	8001370 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e08d      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395c:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f0      	bne.n	800394a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	019b      	lsls	r3, r3, #6
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	3b01      	subs	r3, #1
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	061b      	lsls	r3, r3, #24
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	071b      	lsls	r3, r3, #28
 8003994:	493b      	ldr	r1, [pc, #236]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd fce6 	bl	8001370 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fd fce2 	bl	8001370 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e05e      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x424>
 80039c6:	e056      	b.n	8003a76 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fd fccf 	bl	8001370 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fd fccb 	bl	8001370 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e047      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0x452>
 80039f4:	e03f      	b.n	8003a76 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e03a      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <HAL_RCC_OscConfig+0x500>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d030      	beq.n	8003a72 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d129      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d122      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d119      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d10f      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40007000 	.word	0x40007000
 8003a84:	40023800 	.word	0x40023800
 8003a88:	42470060 	.word	0x42470060

08003a8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a9e:	2b84      	cmp	r3, #132	; 0x84
 8003aa0:	d005      	beq.n	8003aae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003aa2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3303      	adds	r3, #3
 8003aac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ac0:	f000 fb5c 	bl	800417c <vTaskStartScheduler>
  
  return osOK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003acc:	b089      	sub	sp, #36	; 0x24
 8003ace:	af04      	add	r7, sp, #16
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <osThreadCreate+0x54>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685c      	ldr	r4, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681d      	ldr	r5, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691e      	ldr	r6, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ffc8 	bl	8003a8c <makeFreeRtosPriority>
 8003afc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b06:	9202      	str	r2, [sp, #8]
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	9100      	str	r1, [sp, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4632      	mov	r2, r6
 8003b10:	4629      	mov	r1, r5
 8003b12:	4620      	mov	r0, r4
 8003b14:	f000 f8ed 	bl	8003cf2 <xTaskCreateStatic>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e01c      	b.n	8003b58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685c      	ldr	r4, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b2a:	b29e      	uxth	r6, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ffaa 	bl	8003a8c <makeFreeRtosPriority>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	f107 030c 	add.w	r3, r7, #12
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	9200      	str	r2, [sp, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	4632      	mov	r2, r6
 8003b46:	4629      	mov	r1, r5
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 f92f 	bl	8003dac <xTaskCreate>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d001      	beq.n	8003b58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b58:	68fb      	ldr	r3, [r7, #12]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <osDelay+0x16>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	e000      	b.n	8003b7a <osDelay+0x18>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 faca 	bl	8004114 <vTaskDelay>
  
  return osOK;
 8003b80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f103 0208 	add.w	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f103 0208 	add.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f103 0208 	add.w	r2, r3, #8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d103      	bne.n	8003c4c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e00c      	b.n	8003c66 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	e002      	b.n	8003c5a <vListInsert+0x2e>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d2f6      	bcs.n	8003c54 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	601a      	str	r2, [r3, #0]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6852      	ldr	r2, [r2, #4]
 8003cbe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d103      	bne.n	8003cd2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1e5a      	subs	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b08e      	sub	sp, #56	; 0x38
 8003cf6:	af04      	add	r7, sp, #16
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d18:	bf00      	nop
 8003d1a:	e7fe      	b.n	8003d1a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	61fb      	str	r3, [r7, #28]
}
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d38:	2354      	movs	r3, #84	; 0x54
 8003d3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b54      	cmp	r3, #84	; 0x54
 8003d40:	d00a      	beq.n	8003d58 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	61bb      	str	r3, [r7, #24]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01e      	beq.n	8003d9e <xTaskCreateStatic+0xac>
 8003d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01b      	beq.n	8003d9e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9303      	str	r3, [sp, #12]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	9302      	str	r3, [sp, #8]
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f850 	bl	8003e36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d98:	f000 f8d4 	bl	8003f44 <prvAddNewTaskToReadyList>
 8003d9c:	e001      	b.n	8003da2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003da2:	697b      	ldr	r3, [r7, #20]
	}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3728      	adds	r7, #40	; 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af04      	add	r7, sp, #16
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 ff71 	bl	8004ca8 <pvPortMalloc>
 8003dc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00e      	beq.n	8003dec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003dce:	2054      	movs	r0, #84	; 0x54
 8003dd0:	f000 ff6a 	bl	8004ca8 <pvPortMalloc>
 8003dd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
 8003de2:	e005      	b.n	8003df0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003de4:	6978      	ldr	r0, [r7, #20]
 8003de6:	f001 f82b 	bl	8004e40 <vPortFree>
 8003dea:	e001      	b.n	8003df0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d017      	beq.n	8003e26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	2300      	movs	r3, #0
 8003e02:	9303      	str	r3, [sp, #12]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	9302      	str	r3, [sp, #8]
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f80e 	bl	8003e36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e1a:	69f8      	ldr	r0, [r7, #28]
 8003e1c:	f000 f892 	bl	8003f44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e20:	2301      	movs	r3, #1
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	e002      	b.n	8003e2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e2c:	69bb      	ldr	r3, [r7, #24]
	}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b088      	sub	sp, #32
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <prvInitialiseNewTask+0x48>
	__asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	617b      	str	r3, [r7, #20]
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01f      	beq.n	8003ec4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	e012      	b.n	8003eb0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	7819      	ldrb	r1, [r3, #0]
 8003e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	4413      	add	r3, r2
 8003e98:	3334      	adds	r3, #52	; 0x34
 8003e9a:	460a      	mov	r2, r1
 8003e9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3301      	adds	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	d9e9      	bls.n	8003e8a <prvInitialiseNewTask+0x54>
 8003eb6:	e000      	b.n	8003eba <prvInitialiseNewTask+0x84>
			{
				break;
 8003eb8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ec2:	e003      	b.n	8003ecc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d901      	bls.n	8003ed6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ed2:	2306      	movs	r3, #6
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eda:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	3304      	adds	r3, #4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fe6c 	bl	8003bca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	3318      	adds	r3, #24
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fe67 	bl	8003bca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	f1c3 0207 	rsb	r2, r3, #7
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	2200      	movs	r2, #0
 8003f16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	69b8      	ldr	r0, [r7, #24]
 8003f26:	f000 fcb1 	bl	800488c <pxPortInitialiseStack>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f3c:	bf00      	nop
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f4c:	f000 fdca 	bl	8004ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <prvAddNewTaskToReadyList+0xb8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <prvAddNewTaskToReadyList+0xb8>)
 8003f58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f62:	4a27      	ldr	r2, [pc, #156]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <prvAddNewTaskToReadyList+0xb8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d110      	bne.n	8003f92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f70:	f000 fb4a 	bl	8004608 <prvInitialiseTaskLists>
 8003f74:	e00d      	b.n	8003f92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f76:	4b23      	ldr	r3, [pc, #140]	; (8004004 <prvAddNewTaskToReadyList+0xc0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d802      	bhi.n	8003f92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f92:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <prvAddNewTaskToReadyList+0xc4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3301      	adds	r3, #1
 8003f98:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <prvAddNewTaskToReadyList+0xc4>)
 8003f9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <prvAddNewTaskToReadyList+0xc8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <prvAddNewTaskToReadyList+0xc8>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <prvAddNewTaskToReadyList+0xcc>)
 8003fbc:	441a      	add	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f7ff fe0d 	bl	8003be4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fca:	f000 fdbb 	bl	8004b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <prvAddNewTaskToReadyList+0xc0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00e      	beq.n	8003ff4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <prvAddNewTaskToReadyList+0xbc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d207      	bcs.n	8003ff4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <prvAddNewTaskToReadyList+0xd0>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	2000039c 	.word	0x2000039c
 8004000:	2000029c 	.word	0x2000029c
 8004004:	200003a8 	.word	0x200003a8
 8004008:	200003b8 	.word	0x200003b8
 800400c:	200003a4 	.word	0x200003a4
 8004010:	200002a0 	.word	0x200002a0
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <vTaskDelayUntil+0x2a>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	617b      	str	r3, [r7, #20]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <vTaskDelayUntil+0x46>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	613b      	str	r3, [r7, #16]
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800405e:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <vTaskDelayUntil+0xf0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <vTaskDelayUntil+0x64>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60fb      	str	r3, [r7, #12]
}
 8004078:	bf00      	nop
 800407a:	e7fe      	b.n	800407a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800407c:	f000 f8de 	bl	800423c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004080:	4b22      	ldr	r3, [pc, #136]	; (800410c <vTaskDelayUntil+0xf4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	4413      	add	r3, r2
 800408e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	429a      	cmp	r2, r3
 8004098:	d20b      	bcs.n	80040b2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d211      	bcs.n	80040c8 <vTaskDelayUntil+0xb0>
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d90d      	bls.n	80040c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
 80040b0:	e00a      	b.n	80040c8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d303      	bcc.n	80040c4 <vTaskDelayUntil+0xac>
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d901      	bls.n	80040c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fb6f 	bl	80047c0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80040e2:	f000 f8b9 	bl	8004258 <xTaskResumeAll>
 80040e6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80040ee:	4b08      	ldr	r3, [pc, #32]	; (8004110 <vTaskDelayUntil+0xf8>)
 80040f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040fe:	bf00      	nop
 8004100:	3728      	adds	r7, #40	; 0x28
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200003c4 	.word	0x200003c4
 800410c:	200003a0 	.word	0x200003a0
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d017      	beq.n	8004156 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004126:	4b13      	ldr	r3, [pc, #76]	; (8004174 <vTaskDelay+0x60>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <vTaskDelay+0x30>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	60bb      	str	r3, [r7, #8]
}
 8004140:	bf00      	nop
 8004142:	e7fe      	b.n	8004142 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004144:	f000 f87a 	bl	800423c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004148:	2100      	movs	r1, #0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fb38 	bl	80047c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004150:	f000 f882 	bl	8004258 <xTaskResumeAll>
 8004154:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <vTaskDelay+0x64>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	200003c4 	.word	0x200003c4
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800418a:	463a      	mov	r2, r7
 800418c:	1d39      	adds	r1, r7, #4
 800418e:	f107 0308 	add.w	r3, r7, #8
 8004192:	4618      	mov	r0, r3
 8004194:	f7fc f9c0 	bl	8000518 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004198:	6839      	ldr	r1, [r7, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	9202      	str	r2, [sp, #8]
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	2300      	movs	r3, #0
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	2300      	movs	r3, #0
 80041a8:	460a      	mov	r2, r1
 80041aa:	491e      	ldr	r1, [pc, #120]	; (8004224 <vTaskStartScheduler+0xa8>)
 80041ac:	481e      	ldr	r0, [pc, #120]	; (8004228 <vTaskStartScheduler+0xac>)
 80041ae:	f7ff fda0 	bl	8003cf2 <xTaskCreateStatic>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a1d      	ldr	r2, [pc, #116]	; (800422c <vTaskStartScheduler+0xb0>)
 80041b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041b8:	4b1c      	ldr	r3, [pc, #112]	; (800422c <vTaskStartScheduler+0xb0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041c0:	2301      	movs	r3, #1
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e001      	b.n	80041ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d116      	bne.n	80041fe <vTaskStartScheduler+0x82>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	613b      	str	r3, [r7, #16]
}
 80041e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <vTaskStartScheduler+0xb4>)
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <vTaskStartScheduler+0xb8>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <vTaskStartScheduler+0xbc>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041f8:	f000 fbd2 	bl	80049a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041fc:	e00e      	b.n	800421c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d10a      	bne.n	800421c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60fb      	str	r3, [r7, #12]
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <vTaskStartScheduler+0x9e>
}
 800421c:	bf00      	nop
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	080051b8 	.word	0x080051b8
 8004228:	080045d9 	.word	0x080045d9
 800422c:	200003c0 	.word	0x200003c0
 8004230:	200003bc 	.word	0x200003bc
 8004234:	200003a8 	.word	0x200003a8
 8004238:	200003a0 	.word	0x200003a0

0800423c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <vTaskSuspendAll+0x18>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3301      	adds	r3, #1
 8004246:	4a03      	ldr	r2, [pc, #12]	; (8004254 <vTaskSuspendAll+0x18>)
 8004248:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	200003c4 	.word	0x200003c4

08004258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <xTaskResumeAll+0x114>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <xTaskResumeAll+0x2c>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	603b      	str	r3, [r7, #0]
}
 8004280:	bf00      	nop
 8004282:	e7fe      	b.n	8004282 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004284:	f000 fc2e 	bl	8004ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004288:	4b38      	ldr	r3, [pc, #224]	; (800436c <xTaskResumeAll+0x114>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3b01      	subs	r3, #1
 800428e:	4a37      	ldr	r2, [pc, #220]	; (800436c <xTaskResumeAll+0x114>)
 8004290:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004292:	4b36      	ldr	r3, [pc, #216]	; (800436c <xTaskResumeAll+0x114>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d161      	bne.n	800435e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800429a:	4b35      	ldr	r3, [pc, #212]	; (8004370 <xTaskResumeAll+0x118>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d05d      	beq.n	800435e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042a2:	e02e      	b.n	8004302 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a4:	4b33      	ldr	r3, [pc, #204]	; (8004374 <xTaskResumeAll+0x11c>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3318      	adds	r3, #24
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fcf4 	bl	8003c9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fcef 	bl	8003c9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	2201      	movs	r2, #1
 80042c6:	409a      	lsls	r2, r3
 80042c8:	4b2b      	ldr	r3, [pc, #172]	; (8004378 <xTaskResumeAll+0x120>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <xTaskResumeAll+0x120>)
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4a27      	ldr	r2, [pc, #156]	; (800437c <xTaskResumeAll+0x124>)
 80042e0:	441a      	add	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7ff fc7b 	bl	8003be4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <xTaskResumeAll+0x128>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d302      	bcc.n	8004302 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <xTaskResumeAll+0x12c>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <xTaskResumeAll+0x11c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1cc      	bne.n	80042a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004310:	f000 fa18 	bl	8004744 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004314:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <xTaskResumeAll+0x130>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004320:	f000 f846 	bl	80043b0 <xTaskIncrementTick>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <xTaskResumeAll+0x12c>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3b01      	subs	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f1      	bne.n	8004320 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800433c:	4b12      	ldr	r3, [pc, #72]	; (8004388 <xTaskResumeAll+0x130>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <xTaskResumeAll+0x12c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800434a:	2301      	movs	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <xTaskResumeAll+0x134>)
 8004350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800435e:	f000 fbf1 	bl	8004b44 <vPortExitCritical>

	return xAlreadyYielded;
 8004362:	68bb      	ldr	r3, [r7, #8]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	200003c4 	.word	0x200003c4
 8004370:	2000039c 	.word	0x2000039c
 8004374:	2000035c 	.word	0x2000035c
 8004378:	200003a4 	.word	0x200003a4
 800437c:	200002a0 	.word	0x200002a0
 8004380:	2000029c 	.word	0x2000029c
 8004384:	200003b0 	.word	0x200003b0
 8004388:	200003ac 	.word	0x200003ac
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <xTaskGetTickCount+0x1c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800439c:	687b      	ldr	r3, [r7, #4]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	200003a0 	.word	0x200003a0

080043b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ba:	4b4e      	ldr	r3, [pc, #312]	; (80044f4 <xTaskIncrementTick+0x144>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f040 808e 	bne.w	80044e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043c4:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <xTaskIncrementTick+0x148>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043cc:	4a4a      	ldr	r2, [pc, #296]	; (80044f8 <xTaskIncrementTick+0x148>)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d120      	bne.n	800441a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043d8:	4b48      	ldr	r3, [pc, #288]	; (80044fc <xTaskIncrementTick+0x14c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	603b      	str	r3, [r7, #0]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <xTaskIncrementTick+0x46>
 80043f8:	4b40      	ldr	r3, [pc, #256]	; (80044fc <xTaskIncrementTick+0x14c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b40      	ldr	r3, [pc, #256]	; (8004500 <xTaskIncrementTick+0x150>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3e      	ldr	r2, [pc, #248]	; (80044fc <xTaskIncrementTick+0x14c>)
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4a3e      	ldr	r2, [pc, #248]	; (8004500 <xTaskIncrementTick+0x150>)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <xTaskIncrementTick+0x154>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3301      	adds	r3, #1
 8004412:	4a3c      	ldr	r2, [pc, #240]	; (8004504 <xTaskIncrementTick+0x154>)
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	f000 f995 	bl	8004744 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800441a:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <xTaskIncrementTick+0x158>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	429a      	cmp	r2, r3
 8004422:	d348      	bcc.n	80044b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004424:	4b35      	ldr	r3, [pc, #212]	; (80044fc <xTaskIncrementTick+0x14c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <xTaskIncrementTick+0x158>)
 8004430:	f04f 32ff 	mov.w	r2, #4294967295
 8004434:	601a      	str	r2, [r3, #0]
					break;
 8004436:	e03e      	b.n	80044b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004438:	4b30      	ldr	r3, [pc, #192]	; (80044fc <xTaskIncrementTick+0x14c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d203      	bcs.n	8004458 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <xTaskIncrementTick+0x158>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004456:	e02e      	b.n	80044b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	3304      	adds	r3, #4
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fc1e 	bl	8003c9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3318      	adds	r3, #24
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fc15 	bl	8003c9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	2201      	movs	r2, #1
 800447a:	409a      	lsls	r2, r3
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <xTaskIncrementTick+0x15c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4313      	orrs	r3, r2
 8004482:	4a22      	ldr	r2, [pc, #136]	; (800450c <xTaskIncrementTick+0x15c>)
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <xTaskIncrementTick+0x160>)
 8004494:	441a      	add	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	3304      	adds	r3, #4
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f7ff fba1 	bl	8003be4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a6:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <xTaskIncrementTick+0x164>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d3b9      	bcc.n	8004424 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80044b0:	2301      	movs	r3, #1
 80044b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b4:	e7b6      	b.n	8004424 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <xTaskIncrementTick+0x164>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044bc:	4914      	ldr	r1, [pc, #80]	; (8004510 <xTaskIncrementTick+0x160>)
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d901      	bls.n	80044d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80044ce:	2301      	movs	r3, #1
 80044d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <xTaskIncrementTick+0x168>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80044da:	2301      	movs	r3, #1
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e004      	b.n	80044ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <xTaskIncrementTick+0x16c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3301      	adds	r3, #1
 80044e6:	4a0d      	ldr	r2, [pc, #52]	; (800451c <xTaskIncrementTick+0x16c>)
 80044e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80044ea:	697b      	ldr	r3, [r7, #20]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	200003c4 	.word	0x200003c4
 80044f8:	200003a0 	.word	0x200003a0
 80044fc:	20000354 	.word	0x20000354
 8004500:	20000358 	.word	0x20000358
 8004504:	200003b4 	.word	0x200003b4
 8004508:	200003bc 	.word	0x200003bc
 800450c:	200003a4 	.word	0x200003a4
 8004510:	200002a0 	.word	0x200002a0
 8004514:	2000029c 	.word	0x2000029c
 8004518:	200003b0 	.word	0x200003b0
 800451c:	200003ac 	.word	0x200003ac

08004520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004526:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <vTaskSwitchContext+0xa4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800452e:	4b26      	ldr	r3, [pc, #152]	; (80045c8 <vTaskSwitchContext+0xa8>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004534:	e03f      	b.n	80045b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004536:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <vTaskSwitchContext+0xa8>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800453c:	4b23      	ldr	r3, [pc, #140]	; (80045cc <vTaskSwitchContext+0xac>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	fab3 f383 	clz	r3, r3
 8004548:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800454a:	7afb      	ldrb	r3, [r7, #11]
 800454c:	f1c3 031f 	rsb	r3, r3, #31
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	491f      	ldr	r1, [pc, #124]	; (80045d0 <vTaskSwitchContext+0xb0>)
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	607b      	str	r3, [r7, #4]
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <vTaskSwitchContext+0x5a>
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <vTaskSwitchContext+0xb0>)
 8004588:	4413      	add	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3308      	adds	r3, #8
 800459e:	429a      	cmp	r2, r3
 80045a0:	d104      	bne.n	80045ac <vTaskSwitchContext+0x8c>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	4a08      	ldr	r2, [pc, #32]	; (80045d4 <vTaskSwitchContext+0xb4>)
 80045b4:	6013      	str	r3, [r2, #0]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	200003c4 	.word	0x200003c4
 80045c8:	200003b0 	.word	0x200003b0
 80045cc:	200003a4 	.word	0x200003a4
 80045d0:	200002a0 	.word	0x200002a0
 80045d4:	2000029c 	.word	0x2000029c

080045d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045e0:	f000 f852 	bl	8004688 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <prvIdleTask+0x28>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d9f9      	bls.n	80045e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <prvIdleTask+0x2c>)
 80045ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045fc:	e7f0      	b.n	80045e0 <prvIdleTask+0x8>
 80045fe:	bf00      	nop
 8004600:	200002a0 	.word	0x200002a0
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800460e:	2300      	movs	r3, #0
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	e00c      	b.n	800462e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4a12      	ldr	r2, [pc, #72]	; (8004668 <prvInitialiseTaskLists+0x60>)
 8004620:	4413      	add	r3, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fab1 	bl	8003b8a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3301      	adds	r3, #1
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b06      	cmp	r3, #6
 8004632:	d9ef      	bls.n	8004614 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004634:	480d      	ldr	r0, [pc, #52]	; (800466c <prvInitialiseTaskLists+0x64>)
 8004636:	f7ff faa8 	bl	8003b8a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800463a:	480d      	ldr	r0, [pc, #52]	; (8004670 <prvInitialiseTaskLists+0x68>)
 800463c:	f7ff faa5 	bl	8003b8a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004640:	480c      	ldr	r0, [pc, #48]	; (8004674 <prvInitialiseTaskLists+0x6c>)
 8004642:	f7ff faa2 	bl	8003b8a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004646:	480c      	ldr	r0, [pc, #48]	; (8004678 <prvInitialiseTaskLists+0x70>)
 8004648:	f7ff fa9f 	bl	8003b8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800464c:	480b      	ldr	r0, [pc, #44]	; (800467c <prvInitialiseTaskLists+0x74>)
 800464e:	f7ff fa9c 	bl	8003b8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <prvInitialiseTaskLists+0x78>)
 8004654:	4a05      	ldr	r2, [pc, #20]	; (800466c <prvInitialiseTaskLists+0x64>)
 8004656:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <prvInitialiseTaskLists+0x7c>)
 800465a:	4a05      	ldr	r2, [pc, #20]	; (8004670 <prvInitialiseTaskLists+0x68>)
 800465c:	601a      	str	r2, [r3, #0]
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	200002a0 	.word	0x200002a0
 800466c:	2000032c 	.word	0x2000032c
 8004670:	20000340 	.word	0x20000340
 8004674:	2000035c 	.word	0x2000035c
 8004678:	20000370 	.word	0x20000370
 800467c:	20000388 	.word	0x20000388
 8004680:	20000354 	.word	0x20000354
 8004684:	20000358 	.word	0x20000358

08004688 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800468e:	e019      	b.n	80046c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004690:	f000 fa28 	bl	8004ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004694:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <prvCheckTasksWaitingTermination+0x50>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fafc 	bl	8003c9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <prvCheckTasksWaitingTermination+0x54>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <prvCheckTasksWaitingTermination+0x54>)
 80046ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <prvCheckTasksWaitingTermination+0x58>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <prvCheckTasksWaitingTermination+0x58>)
 80046b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046ba:	f000 fa43 	bl	8004b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f810 	bl	80046e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <prvCheckTasksWaitingTermination+0x58>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e1      	bne.n	8004690 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000370 	.word	0x20000370
 80046dc:	2000039c 	.word	0x2000039c
 80046e0:	20000384 	.word	0x20000384

080046e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fba0 	bl	8004e40 <vPortFree>
				vPortFree( pxTCB );
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fb9d 	bl	8004e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004706:	e018      	b.n	800473a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800470e:	2b01      	cmp	r3, #1
 8004710:	d103      	bne.n	800471a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fb94 	bl	8004e40 <vPortFree>
	}
 8004718:	e00f      	b.n	800473a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004720:	2b02      	cmp	r3, #2
 8004722:	d00a      	beq.n	800473a <prvDeleteTCB+0x56>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60fb      	str	r3, [r7, #12]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <prvDeleteTCB+0x54>
	}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <prvResetNextTaskUnblockTime+0x38>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004754:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <prvResetNextTaskUnblockTime+0x3c>)
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
 800475a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800475c:	e008      	b.n	8004770 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <prvResetNextTaskUnblockTime+0x38>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <prvResetNextTaskUnblockTime+0x3c>)
 800476e:	6013      	str	r3, [r2, #0]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20000354 	.word	0x20000354
 8004780:	200003bc 	.word	0x200003bc

08004784 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800478a:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <xTaskGetSchedulerState+0x34>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004792:	2301      	movs	r3, #1
 8004794:	607b      	str	r3, [r7, #4]
 8004796:	e008      	b.n	80047aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004798:	4b08      	ldr	r3, [pc, #32]	; (80047bc <xTaskGetSchedulerState+0x38>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d102      	bne.n	80047a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047a0:	2302      	movs	r3, #2
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	e001      	b.n	80047aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047aa:	687b      	ldr	r3, [r7, #4]
	}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	200003a8 	.word	0x200003a8
 80047bc:	200003c4 	.word	0x200003c4

080047c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047ca:	4b29      	ldr	r3, [pc, #164]	; (8004870 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fa61 	bl	8003c9e <uxListRemove>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2201      	movs	r2, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43da      	mvns	r2, r3
 80047f0:	4b21      	ldr	r3, [pc, #132]	; (8004878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4013      	ands	r3, r2
 80047f6:	4a20      	ldr	r2, [pc, #128]	; (8004878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d10a      	bne.n	8004818 <prvAddCurrentTaskToDelayedList+0x58>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004808:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	481a      	ldr	r0, [pc, #104]	; (800487c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004812:	f7ff f9e7 	bl	8003be4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004816:	e026      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d209      	bcs.n	8004844 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f7ff f9f5 	bl	8003c2c <vListInsert>
}
 8004842:	e010      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7ff f9eb 	bl	8003c2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	d202      	bcs.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004860:	4a09      	ldr	r2, [pc, #36]	; (8004888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6013      	str	r3, [r2, #0]
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	200003a0 	.word	0x200003a0
 8004874:	2000029c 	.word	0x2000029c
 8004878:	200003a4 	.word	0x200003a4
 800487c:	20000388 	.word	0x20000388
 8004880:	20000358 	.word	0x20000358
 8004884:	20000354 	.word	0x20000354
 8004888:	200003bc 	.word	0x200003bc

0800488c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3b04      	subs	r3, #4
 800489c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b04      	subs	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3b04      	subs	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048bc:	4a0c      	ldr	r2, [pc, #48]	; (80048f0 <pxPortInitialiseStack+0x64>)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3b14      	subs	r3, #20
 80048c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3b04      	subs	r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f06f 0202 	mvn.w	r2, #2
 80048da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b20      	subs	r3, #32
 80048e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048e2:	68fb      	ldr	r3, [r7, #12]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	080048f5 	.word	0x080048f5

080048f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <prvTaskExitError+0x54>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d00a      	beq.n	800491e <prvTaskExitError+0x2a>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <prvTaskExitError+0x28>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60bb      	str	r3, [r7, #8]
}
 8004930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004932:	bf00      	nop
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0fc      	beq.n	8004934 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	2000000c 	.word	0x2000000c
 800494c:	00000000 	.word	0x00000000

08004950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <pxCurrentTCBConst2>)
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	6808      	ldr	r0, [r1, #0]
 8004956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	f380 8809 	msr	PSP, r0
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8811 	msr	BASEPRI, r0
 800496a:	4770      	bx	lr
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst2>:
 8004970:	2000029c 	.word	0x2000029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004978:	4808      	ldr	r0, [pc, #32]	; (800499c <prvPortStartFirstTask+0x24>)
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	6800      	ldr	r0, [r0, #0]
 800497e:	f380 8808 	msr	MSP, r0
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f380 8814 	msr	CONTROL, r0
 800498a:	b662      	cpsie	i
 800498c:	b661      	cpsie	f
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	df00      	svc	0
 8004998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800499a:	bf00      	nop
 800499c:	e000ed08 	.word	0xe000ed08

080049a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049a6:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <xPortStartScheduler+0x120>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a46      	ldr	r2, [pc, #280]	; (8004ac4 <xPortStartScheduler+0x124>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10a      	bne.n	80049c6 <xPortStartScheduler+0x26>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	613b      	str	r3, [r7, #16]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049c6:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <xPortStartScheduler+0x120>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3f      	ldr	r2, [pc, #252]	; (8004ac8 <xPortStartScheduler+0x128>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10a      	bne.n	80049e6 <xPortStartScheduler+0x46>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60fb      	str	r3, [r7, #12]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <xPortStartScheduler+0x12c>)
 80049e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a0e:	4b31      	ldr	r3, [pc, #196]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a10:	2207      	movs	r2, #7
 8004a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a14:	e009      	b.n	8004a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a16:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d0ef      	beq.n	8004a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a36:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1c3 0307 	rsb	r3, r3, #7
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d00a      	beq.n	8004a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	60bb      	str	r3, [r7, #8]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a58:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a76:	4b18      	ldr	r3, [pc, #96]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a14      	ldr	r2, [pc, #80]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a8e:	f000 f8dd 	bl	8004c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <xPortStartScheduler+0x13c>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a98:	f000 f8fc 	bl	8004c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a9c:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <xPortStartScheduler+0x140>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <xPortStartScheduler+0x140>)
 8004aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aa8:	f7ff ff66 	bl	8004978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aac:	f7ff fd38 	bl	8004520 <vTaskSwitchContext>
	prvTaskExitError();
 8004ab0:	f7ff ff20 	bl	80048f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	e000ed00 	.word	0xe000ed00
 8004ac4:	410fc271 	.word	0x410fc271
 8004ac8:	410fc270 	.word	0x410fc270
 8004acc:	e000e400 	.word	0xe000e400
 8004ad0:	200003c8 	.word	0x200003c8
 8004ad4:	200003cc 	.word	0x200003cc
 8004ad8:	e000ed20 	.word	0xe000ed20
 8004adc:	2000000c 	.word	0x2000000c
 8004ae0:	e000ef34 	.word	0xe000ef34

08004ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	607b      	str	r3, [r7, #4]
}
 8004afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d10f      	bne.n	8004b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vPortEnterCritical+0x5c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	603b      	str	r3, [r7, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <vPortEnterCritical+0x4a>
	}
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	2000000c 	.word	0x2000000c
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <vPortExitCritical+0x50>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <vPortExitCritical+0x24>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	607b      	str	r3, [r7, #4]
}
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <vPortExitCritical+0x50>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <vPortExitCritical+0x50>)
 8004b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <vPortExitCritical+0x50>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <vPortExitCritical+0x42>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	2000000c 	.word	0x2000000c
	...

08004ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ba0:	f3ef 8009 	mrs	r0, PSP
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <pxCurrentTCBConst>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	f01e 0f10 	tst.w	lr, #16
 8004bb0:	bf08      	it	eq
 8004bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bba:	6010      	str	r0, [r2, #0]
 8004bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bc4:	f380 8811 	msr	BASEPRI, r0
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f7ff fca6 	bl	8004520 <vTaskSwitchContext>
 8004bd4:	f04f 0000 	mov.w	r0, #0
 8004bd8:	f380 8811 	msr	BASEPRI, r0
 8004bdc:	bc09      	pop	{r0, r3}
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	6808      	ldr	r0, [r1, #0]
 8004be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be6:	f01e 0f10 	tst.w	lr, #16
 8004bea:	bf08      	it	eq
 8004bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bf0:	f380 8809 	msr	PSP, r0
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst>:
 8004c00:	2000029c 	.word	0x2000029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	607b      	str	r3, [r7, #4]
}
 8004c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c22:	f7ff fbc5 	bl	80043b0 <xTaskIncrementTick>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <xPortSysTickHandler+0x40>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	2300      	movs	r3, #0
 8004c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f383 8811 	msr	BASEPRI, r3
}
 8004c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <vPortSetupTimerInterrupt+0x34>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c56:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <vPortSetupTimerInterrupt+0x38>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <vPortSetupTimerInterrupt+0x3c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <vPortSetupTimerInterrupt+0x40>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <vPortSetupTimerInterrupt+0x44>)
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c6e:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <vPortSetupTimerInterrupt+0x34>)
 8004c70:	2207      	movs	r2, #7
 8004c72:	601a      	str	r2, [r3, #0]
}
 8004c74:	bf00      	nop
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000e010 	.word	0xe000e010
 8004c84:	e000e018 	.word	0xe000e018
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	10624dd3 	.word	0x10624dd3
 8004c90:	e000e014 	.word	0xe000e014

08004c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ca4 <vPortEnableVFP+0x10>
 8004c98:	6801      	ldr	r1, [r0, #0]
 8004c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c9e:	6001      	str	r1, [r0, #0]
 8004ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ca2:	bf00      	nop
 8004ca4:	e000ed88 	.word	0xe000ed88

08004ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cb4:	f7ff fac2 	bl	800423c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cb8:	4b5b      	ldr	r3, [pc, #364]	; (8004e28 <pvPortMalloc+0x180>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cc0:	f000 f920 	bl	8004f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <pvPortMalloc+0x184>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 8093 	bne.w	8004df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01d      	beq.n	8004d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004cd8:	2208      	movs	r2, #8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d014      	beq.n	8004d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f023 0307 	bic.w	r3, r3, #7
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <pvPortMalloc+0x6c>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	617b      	str	r3, [r7, #20]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d06e      	beq.n	8004df8 <pvPortMalloc+0x150>
 8004d1a:	4b45      	ldr	r3, [pc, #276]	; (8004e30 <pvPortMalloc+0x188>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d869      	bhi.n	8004df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d24:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <pvPortMalloc+0x18c>)
 8004d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d28:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <pvPortMalloc+0x18c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d2e:	e004      	b.n	8004d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d903      	bls.n	8004d4c <pvPortMalloc+0xa4>
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f1      	bne.n	8004d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d4c:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <pvPortMalloc+0x180>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d050      	beq.n	8004df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	4413      	add	r3, r2
 8004d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	2308      	movs	r3, #8
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d91f      	bls.n	8004db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <pvPortMalloc+0xf8>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	613b      	str	r3, [r7, #16]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004db2:	69b8      	ldr	r0, [r7, #24]
 8004db4:	f000 f908 	bl	8004fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <pvPortMalloc+0x188>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <pvPortMalloc+0x188>)
 8004dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <pvPortMalloc+0x188>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <pvPortMalloc+0x190>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d203      	bcs.n	8004dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dd2:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <pvPortMalloc+0x188>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <pvPortMalloc+0x190>)
 8004dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <pvPortMalloc+0x184>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <pvPortMalloc+0x194>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <pvPortMalloc+0x194>)
 8004df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004df8:	f7ff fa2e 	bl	8004258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <pvPortMalloc+0x174>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	60fb      	str	r3, [r7, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <pvPortMalloc+0x172>
	return pvReturn;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3728      	adds	r7, #40	; 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20003fd8 	.word	0x20003fd8
 8004e2c:	20003fec 	.word	0x20003fec
 8004e30:	20003fdc 	.word	0x20003fdc
 8004e34:	20003fd0 	.word	0x20003fd0
 8004e38:	20003fe0 	.word	0x20003fe0
 8004e3c:	20003fe4 	.word	0x20003fe4

08004e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d04d      	beq.n	8004eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e52:	2308      	movs	r3, #8
 8004e54:	425b      	negs	r3, r3
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4413      	add	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <vPortFree+0xb8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <vPortFree+0x44>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60fb      	str	r3, [r7, #12]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <vPortFree+0x62>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60bb      	str	r3, [r7, #8]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <vPortFree+0xb8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01e      	beq.n	8004eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11a      	bne.n	8004eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <vPortFree+0xb8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ec8:	f7ff f9b8 	bl	800423c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <vPortFree+0xbc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	4a09      	ldr	r2, [pc, #36]	; (8004efc <vPortFree+0xbc>)
 8004ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eda:	6938      	ldr	r0, [r7, #16]
 8004edc:	f000 f874 	bl	8004fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <vPortFree+0xc0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	4a06      	ldr	r2, [pc, #24]	; (8004f00 <vPortFree+0xc0>)
 8004ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004eea:	f7ff f9b5 	bl	8004258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004eee:	bf00      	nop
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20003fec 	.word	0x20003fec
 8004efc:	20003fdc 	.word	0x20003fdc
 8004f00:	20003fe8 	.word	0x20003fe8

08004f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <prvHeapInit+0xac>)
 8004f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3307      	adds	r3, #7
 8004f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0307 	bic.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <prvHeapInit+0xac>)
 8004f34:	4413      	add	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <prvHeapInit+0xb0>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <prvHeapInit+0xb0>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f50:	2208      	movs	r2, #8
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0307 	bic.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <prvHeapInit+0xb8>)
 8004f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <prvHeapInit+0xbc>)
 8004f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <prvHeapInit+0xc0>)
 8004f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fa2:	601a      	str	r2, [r3, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	200003d0 	.word	0x200003d0
 8004fb4:	20003fd0 	.word	0x20003fd0
 8004fb8:	20003fd8 	.word	0x20003fd8
 8004fbc:	20003fe0 	.word	0x20003fe0
 8004fc0:	20003fdc 	.word	0x20003fdc
 8004fc4:	20003fec 	.word	0x20003fec

08004fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <prvInsertBlockIntoFreeList+0xac>)
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e002      	b.n	8004fdc <prvInsertBlockIntoFreeList+0x14>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d8f7      	bhi.n	8004fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d108      	bne.n	800500a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	441a      	add	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d118      	bne.n	8005050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <prvInsertBlockIntoFreeList+0xb0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d00d      	beq.n	8005046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e008      	b.n	8005058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvInsertBlockIntoFreeList+0xb0>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e003      	b.n	8005058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d002      	beq.n	8005066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20003fd0 	.word	0x20003fd0
 8005078:	20003fd8 	.word	0x20003fd8

0800507c <__libc_init_array>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	4d0d      	ldr	r5, [pc, #52]	; (80050b4 <__libc_init_array+0x38>)
 8005080:	4c0d      	ldr	r4, [pc, #52]	; (80050b8 <__libc_init_array+0x3c>)
 8005082:	1b64      	subs	r4, r4, r5
 8005084:	10a4      	asrs	r4, r4, #2
 8005086:	2600      	movs	r6, #0
 8005088:	42a6      	cmp	r6, r4
 800508a:	d109      	bne.n	80050a0 <__libc_init_array+0x24>
 800508c:	4d0b      	ldr	r5, [pc, #44]	; (80050bc <__libc_init_array+0x40>)
 800508e:	4c0c      	ldr	r4, [pc, #48]	; (80050c0 <__libc_init_array+0x44>)
 8005090:	f000 f820 	bl	80050d4 <_init>
 8005094:	1b64      	subs	r4, r4, r5
 8005096:	10a4      	asrs	r4, r4, #2
 8005098:	2600      	movs	r6, #0
 800509a:	42a6      	cmp	r6, r4
 800509c:	d105      	bne.n	80050aa <__libc_init_array+0x2e>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a4:	4798      	blx	r3
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7ee      	b.n	8005088 <__libc_init_array+0xc>
 80050aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ae:	4798      	blx	r3
 80050b0:	3601      	adds	r6, #1
 80050b2:	e7f2      	b.n	800509a <__libc_init_array+0x1e>
 80050b4:	080051e4 	.word	0x080051e4
 80050b8:	080051e4 	.word	0x080051e4
 80050bc:	080051e4 	.word	0x080051e4
 80050c0:	080051e8 	.word	0x080051e8

080050c4 <memset>:
 80050c4:	4402      	add	r2, r0
 80050c6:	4603      	mov	r3, r0
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d100      	bne.n	80050ce <memset+0xa>
 80050cc:	4770      	bx	lr
 80050ce:	f803 1b01 	strb.w	r1, [r3], #1
 80050d2:	e7f9      	b.n	80050c8 <memset+0x4>

080050d4 <_init>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr

080050e0 <_fini>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr
