
driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf8  08007bf8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c00  08007c00  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c00  08007c00  00017c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004224  20000078  08007c80  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000429c  08007c80  0002429c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015634  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a8  00000000  00000000  000356dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00038788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00039750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a4c  00000000  00000000  0003a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013381  00000000  00000000  0005f034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddc0c  00000000  00000000  000723b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ffc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004590  00000000  00000000  00150014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007aac 	.word	0x08007aac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08007aac 	.word	0x08007aac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96e 	b.w	8000e00 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468c      	mov	ip, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8083 	bne.w	8000c52 <__udivmoddi4+0x116>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	d947      	bls.n	8000be2 <__udivmoddi4+0xa6>
 8000b52:	fab2 f282 	clz	r2, r2
 8000b56:	b142      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	f1c2 0020 	rsb	r0, r2, #32
 8000b5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b60:	4091      	lsls	r1, r2
 8000b62:	4097      	lsls	r7, r2
 8000b64:	ea40 0c01 	orr.w	ip, r0, r1
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbbc f6f8 	udiv	r6, ip, r8
 8000b74:	fa1f fe87 	uxth.w	lr, r7
 8000b78:	fb08 c116 	mls	r1, r8, r6, ip
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb06 f10e 	mul.w	r1, r6, lr
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8e:	f080 8119 	bcs.w	8000dc4 <__udivmoddi4+0x288>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8116 	bls.w	8000dc4 <__udivmoddi4+0x288>
 8000b98:	3e02      	subs	r6, #2
 8000b9a:	443b      	add	r3, r7
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8105 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	f240 8102 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	443c      	add	r4, r7
 8000bc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bcc:	eba4 040e 	sub.w	r4, r4, lr
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	b11d      	cbz	r5, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	b902      	cbnz	r2, 8000be6 <__udivmoddi4+0xaa>
 8000be4:	deff      	udf	#255	; 0xff
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d150      	bne.n	8000c90 <__udivmoddi4+0x154>
 8000bee:	1bcb      	subs	r3, r1, r7
 8000bf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf4:	fa1f f887 	uxth.w	r8, r7
 8000bf8:	2601      	movs	r6, #1
 8000bfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bfe:	0c21      	lsrs	r1, r4, #16
 8000c00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c08:	fb08 f30c 	mul.w	r3, r8, ip
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000c10:	1879      	adds	r1, r7, r1
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0xe2>
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	f200 80e9 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1ac9      	subs	r1, r1, r3
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x10c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x10a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80d9 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e7bf      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x12e>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80b1 	beq.w	8000dbe <__udivmoddi4+0x282>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x1cc>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0x140>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80b8 	bhi.w	8000dec <__udivmoddi4+0x2b0>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	468c      	mov	ip, r1
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0a8      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c8e:	e7a5      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f603 	lsr.w	r6, r0, r3
 8000c98:	4097      	lsls	r7, r2
 8000c9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca2:	40d9      	lsrs	r1, r3
 8000ca4:	4330      	orrs	r0, r6
 8000ca6:	0c03      	lsrs	r3, r0, #16
 8000ca8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cac:	fa1f f887 	uxth.w	r8, r7
 8000cb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb06 f108 	mul.w	r1, r6, r8
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x19c>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cca:	f080 808d 	bcs.w	8000de8 <__udivmoddi4+0x2ac>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 808a 	bls.w	8000de8 <__udivmoddi4+0x2ac>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b281      	uxth	r1, r0
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce8:	fb00 f308 	mul.w	r3, r0, r8
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x1c4>
 8000cf0:	1879      	adds	r1, r7, r1
 8000cf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf6:	d273      	bcs.n	8000de0 <__udivmoddi4+0x2a4>
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d971      	bls.n	8000de0 <__udivmoddi4+0x2a4>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	4439      	add	r1, r7
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d06:	e778      	b.n	8000bfa <__udivmoddi4+0xbe>
 8000d08:	f1c6 0c20 	rsb	ip, r6, #32
 8000d0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d14:	431c      	orrs	r4, r3
 8000d16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d26:	431f      	orrs	r7, r3
 8000d28:	0c3b      	lsrs	r3, r7, #16
 8000d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2e:	fa1f f884 	uxth.w	r8, r4
 8000d32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d3e:	458a      	cmp	sl, r1
 8000d40:	fa02 f206 	lsl.w	r2, r2, r6
 8000d44:	fa00 f306 	lsl.w	r3, r0, r6
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x220>
 8000d4a:	1861      	adds	r1, r4, r1
 8000d4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d50:	d248      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000d52:	458a      	cmp	sl, r1
 8000d54:	d946      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4421      	add	r1, r4
 8000d5c:	eba1 010a 	sub.w	r1, r1, sl
 8000d60:	b2bf      	uxth	r7, r7
 8000d62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d6e:	fb00 f808 	mul.w	r8, r0, r8
 8000d72:	45b8      	cmp	r8, r7
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x24a>
 8000d76:	19e7      	adds	r7, r4, r7
 8000d78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7c:	d22e      	bcs.n	8000ddc <__udivmoddi4+0x2a0>
 8000d7e:	45b8      	cmp	r8, r7
 8000d80:	d92c      	bls.n	8000ddc <__udivmoddi4+0x2a0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4427      	add	r7, r4
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	eba7 0708 	sub.w	r7, r7, r8
 8000d8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d92:	454f      	cmp	r7, r9
 8000d94:	46c6      	mov	lr, r8
 8000d96:	4649      	mov	r1, r9
 8000d98:	d31a      	bcc.n	8000dd0 <__udivmoddi4+0x294>
 8000d9a:	d017      	beq.n	8000dcc <__udivmoddi4+0x290>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x27a>
 8000d9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000da2:	eb67 0701 	sbc.w	r7, r7, r1
 8000da6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000daa:	40f2      	lsrs	r2, r6
 8000dac:	ea4c 0202 	orr.w	r2, ip, r2
 8000db0:	40f7      	lsrs	r7, r6
 8000db2:	e9c5 2700 	strd	r2, r7, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e70b      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6fd      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dcc:	4543      	cmp	r3, r8
 8000dce:	d2e5      	bcs.n	8000d9c <__udivmoddi4+0x260>
 8000dd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7df      	b.n	8000d9c <__udivmoddi4+0x260>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e7d2      	b.n	8000d86 <__udivmoddi4+0x24a>
 8000de0:	4660      	mov	r0, ip
 8000de2:	e78d      	b.n	8000d00 <__udivmoddi4+0x1c4>
 8000de4:	4681      	mov	r9, r0
 8000de6:	e7b9      	b.n	8000d5c <__udivmoddi4+0x220>
 8000de8:	4666      	mov	r6, ip
 8000dea:	e775      	b.n	8000cd8 <__udivmoddi4+0x19c>
 8000dec:	4630      	mov	r0, r6
 8000dee:	e74a      	b.n	8000c86 <__udivmoddi4+0x14a>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	4439      	add	r1, r7
 8000df6:	e713      	b.n	8000c20 <__udivmoddi4+0xe4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	443c      	add	r4, r7
 8000dfc:	e724      	b.n	8000c48 <__udivmoddi4+0x10c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <vApplicationGetIdleTaskMemory+0x30>)
 8000e1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000094 	.word	0x20000094
 8000e34:	200000e8 	.word	0x200000e8

08000e38 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	4608      	mov	r0, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	4603      	mov	r3, r0
 8000e48:	70fb      	strb	r3, [r7, #3]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	70bb      	strb	r3, [r7, #2]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8000e56:	4a4f      	ldr	r2, [pc, #316]	; (8000f94 <lcdInit+0x15c>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <lcdInit+0x15c>)
 8000e64:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8000e66:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <lcdInit+0x15c>)
 8000e68:	78bb      	ldrb	r3, [r7, #2]
 8000e6a:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8000e6c:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <lcdInit+0x15c>)
 8000e6e:	787b      	ldrb	r3, [r7, #1]
 8000e70:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8000e72:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <lcdInit+0x15c>)
 8000e74:	2208      	movs	r2, #8
 8000e76:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8000e78:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <lcdInit+0x160>)
 8000e7a:	2234      	movs	r2, #52	; 0x34
 8000e7c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000e7e:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <lcdInit+0x160>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <lcdInit+0x160>)
 8000e84:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8000e86:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <lcdInit+0x160>)
 8000e88:	2230      	movs	r2, #48	; 0x30
 8000e8a:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	75fb      	strb	r3, [r7, #23]
 8000e90:	e030      	b.n	8000ef4 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000e92:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <lcdInit+0x15c>)
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <lcdInit+0x15c>)
 8000e98:	799b      	ldrb	r3, [r3, #6]
 8000e9a:	b299      	uxth	r1, r3
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	4a3e      	ldr	r2, [pc, #248]	; (8000f98 <lcdInit+0x160>)
 8000ea0:	f003 ffe6 	bl	8004e70 <HAL_I2C_Master_Transmit_DMA>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <lcdInit+0x76>
            return false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e06d      	b.n	8000f8a <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 8000eae:	f005 fb23 	bl	80064f8 <xTaskGetTickCount>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000eb6:	e002      	b.n	8000ebe <lcdInit+0x86>
            vTaskDelay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f005 f9df 	bl	800627c <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <lcdInit+0x15c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 f936 	bl	8005134 <HAL_I2C_GetState>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b20      	cmp	r3, #32
 8000ecc:	d1f4      	bne.n	8000eb8 <lcdInit+0x80>
        }

        if (i == 2) {
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d106      	bne.n	8000ee2 <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 f950 	bl	8006180 <vTaskDelayUntil>
 8000ee0:	e005      	b.n	8000eee <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f005 f949 	bl	8006180 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	75fb      	strb	r3, [r7, #23]
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d9cb      	bls.n	8000e92 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <lcdInit+0x160>)
 8000efc:	222c      	movs	r2, #44	; 0x2c
 8000efe:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <lcdInit+0x160>)
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <lcdInit+0x160>)
 8000f06:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <lcdInit+0x160>)
 8000f0a:	2228      	movs	r2, #40	; 0x28
 8000f0c:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <lcdInit+0x15c>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <lcdInit+0x15c>)
 8000f14:	799b      	ldrb	r3, [r3, #6]
 8000f16:	b299      	uxth	r1, r3
 8000f18:	2303      	movs	r3, #3
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <lcdInit+0x160>)
 8000f1c:	f003 ffa8 	bl	8004e70 <HAL_I2C_Master_Transmit_DMA>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <lcdInit+0xf8>
        return false;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e02f      	b.n	8000f8a <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f005 f9a6 	bl	800627c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <lcdInit+0x15c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 f8fd 	bl	8005134 <HAL_I2C_GetState>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	d1f4      	bne.n	8000f2a <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <lcdInit+0x15c>)
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d904      	bls.n	8000f5c <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8000f5c:	f107 030f 	add.w	r3, r7, #15
 8000f60:	4619      	mov	r1, r3
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f980 	bl	8001268 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8000f68:	2101      	movs	r1, #1
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 f816 	bl	8000f9c <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8000f70:	2101      	movs	r1, #1
 8000f72:	2007      	movs	r0, #7
 8000f74:	f000 f812 	bl	8000f9c <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f000 f80e 	bl	8000f9c <lcdCommand>
    lcdCursorHome();
 8000f80:	2101      	movs	r1, #1
 8000f82:	2005      	movs	r0, #5
 8000f84:	f000 f80a 	bl	8000f9c <lcdCommand>

    return true;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200002f0 	.word	0x200002f0
 8000f98:	200002e8 	.word	0x200002e8

08000f9c <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d06e      	beq.n	8001094 <lcdCommand+0xf8>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f040 80b4 	bne.w	8001124 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	d864      	bhi.n	800108e <lcdCommand+0xf2>
 8000fc4:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <lcdCommand+0x30>)
 8000fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fca:	bf00      	nop
 8000fcc:	08000fed 	.word	0x08000fed
 8000fd0:	0800101d 	.word	0x0800101d
 8000fd4:	08000ffd 	.word	0x08000ffd
 8000fd8:	0800100d 	.word	0x0800100d
 8000fdc:	08001041 	.word	0x08001041
 8000fe0:	08001075 	.word	0x08001075
 8000fe4:	08001065 	.word	0x08001065
 8000fe8:	0800107f 	.word	0x0800107f
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8000fec:	4b61      	ldr	r3, [pc, #388]	; (8001174 <lcdCommand+0x1d8>)
 8000fee:	7a1b      	ldrb	r3, [r3, #8]
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <lcdCommand+0x1d8>)
 8000ff8:	721a      	strb	r2, [r3, #8]
                    break;
 8000ffa:	e04a      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8000ffc:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <lcdCommand+0x1d8>)
 8000ffe:	7a1b      	ldrb	r3, [r3, #8]
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b5b      	ldr	r3, [pc, #364]	; (8001174 <lcdCommand+0x1d8>)
 8001008:	721a      	strb	r2, [r3, #8]
                    break;
 800100a:	e042      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 800100c:	4b59      	ldr	r3, [pc, #356]	; (8001174 <lcdCommand+0x1d8>)
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b57      	ldr	r3, [pc, #348]	; (8001174 <lcdCommand+0x1d8>)
 8001018:	721a      	strb	r2, [r3, #8]
                    break;
 800101a:	e03a      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001020:	f107 030f 	add.w	r3, r7, #15
 8001024:	4619      	mov	r1, r3
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f91e 	bl	8001268 <lcdWriteByte>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <lcdCommand+0x9a>
                        return false;
 8001032:	2300      	movs	r3, #0
 8001034:	e09a      	b.n	800116c <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 8001036:	2002      	movs	r0, #2
 8001038:	f005 f920 	bl	800627c <vTaskDelay>
                        return true;
 800103c:	2301      	movs	r3, #1
 800103e:	e095      	b.n	800116c <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001040:	2302      	movs	r3, #2
 8001042:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001044:	f107 030f 	add.w	r3, r7, #15
 8001048:	4619      	mov	r1, r3
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f90c 	bl	8001268 <lcdWriteByte>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <lcdCommand+0xbe>
                        return false;
 8001056:	2300      	movs	r3, #0
 8001058:	e088      	b.n	800116c <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 800105a:	2002      	movs	r0, #2
 800105c:	f005 f90e 	bl	800627c <vTaskDelay>
                        return true;
 8001060:	2301      	movs	r3, #1
 8001062:	e083      	b.n	800116c <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <lcdCommand+0x1d8>)
 8001066:	7a5b      	ldrb	r3, [r3, #9]
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b41      	ldr	r3, [pc, #260]	; (8001174 <lcdCommand+0x1d8>)
 8001070:	725a      	strb	r2, [r3, #9]
                    break;
 8001072:	e00e      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001074:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <lcdCommand+0x1d8>)
 8001076:	7a5a      	ldrb	r2, [r3, #9]
 8001078:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <lcdCommand+0x1d8>)
 800107a:	725a      	strb	r2, [r3, #9]
                    break;
 800107c:	e009      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <lcdCommand+0x1d8>)
 8001080:	7a5b      	ldrb	r3, [r3, #9]
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <lcdCommand+0x1d8>)
 800108a:	725a      	strb	r2, [r3, #9]
                    break;
 800108c:	e001      	b.n	8001092 <lcdCommand+0xf6>

                default:
                    return false;
 800108e:	2300      	movs	r3, #0
 8001090:	e06c      	b.n	800116c <lcdCommand+0x1d0>
            }

            break;
 8001092:	e049      	b.n	8001128 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3b01      	subs	r3, #1
 8001098:	2b07      	cmp	r3, #7
 800109a:	d840      	bhi.n	800111e <lcdCommand+0x182>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <lcdCommand+0x108>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010c5 	.word	0x080010c5
 80010a8:	0800111f 	.word	0x0800111f
 80010ac:	080010d5 	.word	0x080010d5
 80010b0:	080010e5 	.word	0x080010e5
 80010b4:	0800111f 	.word	0x0800111f
 80010b8:	08001105 	.word	0x08001105
 80010bc:	080010f5 	.word	0x080010f5
 80010c0:	0800110f 	.word	0x0800110f
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <lcdCommand+0x1d8>)
 80010c6:	7a1b      	ldrb	r3, [r3, #8]
 80010c8:	f023 0304 	bic.w	r3, r3, #4
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <lcdCommand+0x1d8>)
 80010d0:	721a      	strb	r2, [r3, #8]
                    break;
 80010d2:	e026      	b.n	8001122 <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <lcdCommand+0x1d8>)
 80010d6:	7a1b      	ldrb	r3, [r3, #8]
 80010d8:	f023 0302 	bic.w	r3, r3, #2
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <lcdCommand+0x1d8>)
 80010e0:	721a      	strb	r2, [r3, #8]
                    break;
 80010e2:	e01e      	b.n	8001122 <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <lcdCommand+0x1d8>)
 80010e6:	7a1b      	ldrb	r3, [r3, #8]
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <lcdCommand+0x1d8>)
 80010f0:	721a      	strb	r2, [r3, #8]
                    break;
 80010f2:	e016      	b.n	8001122 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <lcdCommand+0x1d8>)
 80010f6:	7a5b      	ldrb	r3, [r3, #9]
 80010f8:	f023 0302 	bic.w	r3, r3, #2
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <lcdCommand+0x1d8>)
 8001100:	725a      	strb	r2, [r3, #9]
                    break;
 8001102:	e00e      	b.n	8001122 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <lcdCommand+0x1d8>)
 8001106:	7a5a      	ldrb	r2, [r3, #9]
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <lcdCommand+0x1d8>)
 800110a:	725a      	strb	r2, [r3, #9]
                    break;
 800110c:	e009      	b.n	8001122 <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <lcdCommand+0x1d8>)
 8001110:	7a5b      	ldrb	r3, [r3, #9]
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <lcdCommand+0x1d8>)
 800111a:	725a      	strb	r2, [r3, #9]
                    break;
 800111c:	e001      	b.n	8001122 <lcdCommand+0x186>

                default:
                    return false;
 800111e:	2300      	movs	r3, #0
 8001120:	e024      	b.n	800116c <lcdCommand+0x1d0>
            }

            break;
 8001122:	e001      	b.n	8001128 <lcdCommand+0x18c>

        default:
            return false;
 8001124:	2300      	movs	r3, #0
 8001126:	e021      	b.n	800116c <lcdCommand+0x1d0>
    }

    /* Now lets send the command */
    switch (command) {
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b08      	cmp	r3, #8
 800112c:	dc16      	bgt.n	800115c <lcdCommand+0x1c0>
 800112e:	2b06      	cmp	r3, #6
 8001130:	da0d      	bge.n	800114e <lcdCommand+0x1b2>
 8001132:	2b01      	cmp	r3, #1
 8001134:	d004      	beq.n	8001140 <lcdCommand+0x1a4>
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd10      	ble.n	800115c <lcdCommand+0x1c0>
 800113a:	3b03      	subs	r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d80d      	bhi.n	800115c <lcdCommand+0x1c0>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <lcdCommand+0x1d8>)
 8001142:	7a1b      	ldrb	r3, [r3, #8]
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	b2db      	uxtb	r3, r3
 800114a:	73fb      	strb	r3, [r7, #15]
            break;
 800114c:	e007      	b.n	800115e <lcdCommand+0x1c2>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <lcdCommand+0x1d8>)
 8001150:	7a5b      	ldrb	r3, [r3, #9]
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	b2db      	uxtb	r3, r3
 8001158:	73fb      	strb	r3, [r7, #15]
            break;
 800115a:	e000      	b.n	800115e <lcdCommand+0x1c2>

        default:
            break;
 800115c:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	4619      	mov	r1, r3
 8001164:	2000      	movs	r0, #0
 8001166:	f000 f87f 	bl	8001268 <lcdWriteByte>
 800116a:	4603      	mov	r3, r0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002f0 	.word	0x200002f0

08001178 <lcdBacklight>:
 * @brief  Turn display's Backlight On or Off
 * @param  command LCD_BIT_BACKIGHT_ON to turn display On
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display Off
 * @return         true if success
 */
bool lcdBacklight(uint8_t command) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
    lcdParams.backlight = command;
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <lcdBacklight+0x4c>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, &lcdParams.backlight, 1) != HAL_OK) {
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <lcdBacklight+0x4c>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <lcdBacklight+0x4c>)
 800118e:	799b      	ldrb	r3, [r3, #6]
 8001190:	b299      	uxth	r1, r3
 8001192:	2301      	movs	r3, #1
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <lcdBacklight+0x50>)
 8001196:	f003 fe6b 	bl	8004e70 <HAL_I2C_Master_Transmit_DMA>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <lcdBacklight+0x32>
        return false;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e00b      	b.n	80011bc <lcdBacklight+0x44>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f005 f869 	bl	800627c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <lcdBacklight+0x4c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 ffc0 	bl	8005134 <HAL_I2C_GetState>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	d1f4      	bne.n	80011a4 <lcdBacklight+0x2c>
    }

    return true;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002f0 	.word	0x200002f0
 80011c8:	200002f7 	.word	0x200002f7

080011cc <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <lcdSetCursorPosition+0x50>)
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	79ba      	ldrb	r2, [r7, #6]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d303      	bcc.n	80011ee <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <lcdSetCursorPosition+0x50>)
 80011e8:	791b      	ldrb	r3, [r3, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <lcdSetCursorPosition+0x54>)
 80011f2:	5cd2      	ldrb	r2, [r2, r3]
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001200:	b25b      	sxtb	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8001206:	f107 030f 	add.w	r3, r7, #15
 800120a:	4619      	mov	r1, r3
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f82b 	bl	8001268 <lcdWriteByte>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200002f0 	.word	0x200002f0
 8001220:	08007ba0 	.word	0x08007ba0

08001224 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e00e      	b.n	8001254 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	4619      	mov	r1, r3
 800123e:	2001      	movs	r0, #1
 8001240:	f000 f812 	bl	8001268 <lcdWriteByte>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <lcdPrintStr+0x2a>
            return false;
 800124a:	2300      	movs	r3, #0
 800124c:	e007      	b.n	800125e <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3301      	adds	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3ec      	bcc.n	8001236 <lcdPrintStr+0x12>
        }
    }

    return true;
 800125c:	2301      	movs	r3, #1
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <lcdWriteByte+0xdc>)
 8001276:	79da      	ldrb	r2, [r3, #7]
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4313      	orrs	r3, r2
 800127c:	b2da      	uxtb	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <lcdWriteByte+0xe0>)
 8001294:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <lcdWriteByte+0xe0>)
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <lcdWriteByte+0xe0>)
 800129c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <lcdWriteByte+0xdc>)
 80012a0:	79da      	ldrb	r2, [r3, #7]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f023 030f 	bic.w	r3, r3, #15
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <lcdWriteByte+0xe0>)
 80012be:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <lcdWriteByte+0xdc>)
 80012c2:	79da      	ldrb	r2, [r3, #7]
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <lcdWriteByte+0xe0>)
 80012de:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <lcdWriteByte+0xe0>)
 80012e2:	78da      	ldrb	r2, [r3, #3]
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <lcdWriteByte+0xe0>)
 80012e6:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <lcdWriteByte+0xdc>)
 80012ea:	79da      	ldrb	r2, [r3, #7]
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <lcdWriteByte+0xe0>)
 8001304:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <lcdWriteByte+0xdc>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <lcdWriteByte+0xdc>)
 800130c:	799b      	ldrb	r3, [r3, #6]
 800130e:	b299      	uxth	r1, r3
 8001310:	2306      	movs	r3, #6
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <lcdWriteByte+0xe0>)
 8001314:	f003 fdac 	bl	8004e70 <HAL_I2C_Master_Transmit_DMA>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <lcdWriteByte+0xc0>
        return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e00b      	b.n	800133a <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f004 ffaa 	bl	800627c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <lcdWriteByte+0xdc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f003 ff01 	bl	8005134 <HAL_I2C_GetState>
 8001332:	4603      	mov	r3, r0
 8001334:	2b20      	cmp	r3, #32
 8001336:	d1f4      	bne.n	8001322 <lcdWriteByte+0xba>
    }

    return true;
 8001338:	2301      	movs	r3, #1
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002f0 	.word	0x200002f0
 8001348:	200002e8 	.word	0x200002e8

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f001 faff 	bl	8002954 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f8a3 	bl	80014a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 f9d3 	bl	8001704 <MX_GPIO_Init>
  MX_ADC1_Init();
 800135e:	f000 f8fd 	bl	800155c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001362:	f000 f94d 	bl	8001600 <MX_CAN1_Init>
  MX_DMA_Init();
 8001366:	f000 f9ad 	bl	80016c4 <MX_DMA_Init>
  MX_I2C1_Init();
 800136a:	f000 f97d 	bl	8001668 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // start up LCD display
  welcomeScreen();
 800136e:	f000 fccf 	bl	8001d10 <welcomeScreen>

  // TODO: FIX THE CAN MASK RANGES SO THEY ARE CORRECT 

  // init the CAN filter
	canFilter.FilterBank = 0;
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <main+0x134>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001378:	4b41      	ldr	r3, [pc, #260]	; (8001480 <main+0x134>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
	canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <main+0x134>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
	canFilter.FilterIdHigh = 0x000;
 8001384:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <main+0x134>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
	canFilter.FilterIdLow = 0xFFF;
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <main+0x134>)
 800138c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001390:	605a      	str	r2, [r3, #4]
	canFilter.FilterMaskIdHigh = 0x000;
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <main+0x134>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
	canFilter.FilterMaskIdLow = 0xFFF;
 8001398:	4b39      	ldr	r3, [pc, #228]	; (8001480 <main+0x134>)
 800139a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800139e:	60da      	str	r2, [r3, #12]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80013a0:	4b37      	ldr	r3, [pc, #220]	; (8001480 <main+0x134>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	61da      	str	r2, [r3, #28]
	canFilter.FilterActivation = ENABLE;
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <main+0x134>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	621a      	str	r2, [r3, #32]
	canFilter.SlaveStartFilterBank = 14;
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <main+0x134>)
 80013ae:	220e      	movs	r2, #14
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24

	// init the CAN mailbox for BASE
	txHeader0.DLC = 8; // Number of bites to be transmitted max- 8
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <main+0x138>)
 80013b4:	2208      	movs	r2, #8
 80013b6:	611a      	str	r2, [r3, #16]
	txHeader0.IDE = CAN_ID_STD;
 80013b8:	4b32      	ldr	r3, [pc, #200]	; (8001484 <main+0x138>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
	txHeader0.RTR = CAN_RTR_DATA;
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <main+0x138>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
	txHeader0.StdId = 0x90;
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <main+0x138>)
 80013c6:	2290      	movs	r2, #144	; 0x90
 80013c8:	601a      	str	r2, [r3, #0]
	txHeader0.ExtId = 0;
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <main+0x138>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
	txHeader0.TransmitGlobalTime = DISABLE;
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <main+0x138>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for Torque Setting 
	txHeader1.DLC = 8; // Number of bites to be transmitted max- 8
 80013d6:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <main+0x13c>)
 80013d8:	2208      	movs	r2, #8
 80013da:	611a      	str	r2, [r3, #16]
	txHeader1.IDE = CAN_ID_STD;
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <main+0x13c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
	txHeader1.RTR = CAN_RTR_DATA;
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <main+0x13c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
	txHeader1.StdId = 0x91;
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <main+0x13c>)
 80013ea:	2291      	movs	r2, #145	; 0x91
 80013ec:	601a      	str	r2, [r3, #0]
	txHeader1.ExtId = 0;
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <main+0x13c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
	txHeader1.TransmitGlobalTime = DISABLE;
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <main+0x13c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for DAQ Data
	txHeader2.DLC = 8; // Number of bites to be transmitted max- 8
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <main+0x140>)
 80013fc:	2208      	movs	r2, #8
 80013fe:	611a      	str	r2, [r3, #16]
	txHeader2.IDE = CAN_ID_STD;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <main+0x140>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
	txHeader2.RTR = CAN_RTR_DATA;
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <main+0x140>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
	txHeader2.StdId = 0x92;
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <main+0x140>)
 800140e:	2292      	movs	r2, #146	; 0x92
 8001410:	601a      	str	r2, [r3, #0]
	txHeader2.ExtId = 0;
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <main+0x140>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
	txHeader2.TransmitGlobalTime = DISABLE;
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <main+0x140>)
 800141a:	2200      	movs	r2, #0
 800141c:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for Control Data
	txHeader3.DLC = 8; // Number of bites to be transmitted max- 8
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <main+0x144>)
 8001420:	2208      	movs	r2, #8
 8001422:	611a      	str	r2, [r3, #16]
	txHeader3.IDE = CAN_ID_STD;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <main+0x144>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
	txHeader3.RTR = CAN_RTR_DATA;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <main+0x144>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
	txHeader3.StdId = 0x93;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <main+0x144>)
 8001432:	2293      	movs	r2, #147	; 0x93
 8001434:	601a      	str	r2, [r3, #0]
	txHeader3.ExtId = 0;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <main+0x144>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
	txHeader3.TransmitGlobalTime = DISABLE;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <main+0x144>)
 800143e:	2200      	movs	r2, #0
 8001440:	751a      	strb	r2, [r3, #20]

	HAL_CAN_ConfigFilter(&hcan1, &canFilter); // Initialize CAN Filter
 8001442:	490f      	ldr	r1, [pc, #60]	; (8001480 <main+0x134>)
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <main+0x148>)
 8001446:	f002 f809 	bl	800345c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1); // Initialize CAN Bus
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <main+0x148>)
 800144c:	f002 f8f2 	bl	8003634 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Interrupt
 8001450:	2102      	movs	r1, #2
 8001452:	4810      	ldr	r0, [pc, #64]	; (8001494 <main+0x148>)
 8001454:	f002 fb1f 	bl	8003a96 <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <main+0x14c>)
 800145a:	1d3c      	adds	r4, r7, #4
 800145c:	461d      	mov	r5, r3
 800145e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001462:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fbdf 	bl	8005c32 <osThreadCreate>
 8001474:	4603      	mov	r3, r0
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <main+0x150>)
 8001478:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800147a:	f004 fbd3 	bl	8005c24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800147e:	e7fe      	b.n	800147e <main+0x132>
 8001480:	20004248 	.word	0x20004248
 8001484:	20004178 	.word	0x20004178
 8001488:	20004270 	.word	0x20004270
 800148c:	20004204 	.word	0x20004204
 8001490:	200040c0 	.word	0x200040c0
 8001494:	2000421c 	.word	0x2000421c
 8001498:	08007ad0 	.word	0x08007ad0
 800149c:	2000409c 	.word	0x2000409c

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2234      	movs	r2, #52	; 0x34
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f005 fed4 	bl	800725c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <SystemClock_Config+0xb4>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a21      	ldr	r2, [pc, #132]	; (8001554 <SystemClock_Config+0xb4>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <SystemClock_Config+0xb4>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <SystemClock_Config+0xb8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <SystemClock_Config+0xb8>)
 80014ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <SystemClock_Config+0xb8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001504:	2310      	movs	r3, #16
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4618      	mov	r0, r3
 8001512:	f004 f8eb 	bl	80056ec <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800151c:	f001 f800 	bl	8002520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f003 ff1a 	bl	8005374 <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001546:	f000 ffeb 	bl	8002520 <Error_Handler>
  }
}
 800154a:	bf00      	nop
 800154c:	3750      	adds	r7, #80	; 0x50
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <MX_ADC1_Init+0x9c>)
 8001572:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <MX_ADC1_Init+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001582:	2201      	movs	r2, #1
 8001584:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001588:	2201      	movs	r2, #1
 800158a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_ADC1_Init+0x98>)
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_ADC1_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_ADC1_Init+0x98>)
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <MX_ADC1_Init+0xa0>)
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ba:	480e      	ldr	r0, [pc, #56]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015bc:	f001 fa60 	bl	8002a80 <HAL_ADC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015c6:	f000 ffab 	bl	8002520 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_ADC1_Init+0x98>)
 80015dc:	f001 fc14 	bl	8002e08 <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015e6:	f000 ff9b 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20004130 	.word	0x20004130
 80015f8:	40012000 	.word	0x40012000
 80015fc:	0f000001 	.word	0x0f000001

08001600 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_CAN1_Init+0x60>)
 8001606:	4a17      	ldr	r2, [pc, #92]	; (8001664 <MX_CAN1_Init+0x64>)
 8001608:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_CAN1_Init+0x60>)
 800160c:	2210      	movs	r2, #16
 800160e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_CAN1_Init+0x60>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_CAN1_Init+0x60>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_CAN1_Init+0x60>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_CAN1_Init+0x60>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <MX_CAN1_Init+0x60>)
 800162a:	2200      	movs	r2, #0
 800162c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_CAN1_Init+0x60>)
 8001630:	2200      	movs	r2, #0
 8001632:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_CAN1_Init+0x60>)
 8001636:	2201      	movs	r2, #1
 8001638:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_CAN1_Init+0x60>)
 800163c:	2201      	movs	r2, #1
 800163e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_CAN1_Init+0x60>)
 8001642:	2200      	movs	r2, #0
 8001644:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_CAN1_Init+0x60>)
 8001648:	2200      	movs	r2, #0
 800164a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_CAN1_Init+0x60>)
 800164e:	f001 fe09 	bl	8003264 <HAL_CAN_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001658:	f000 ff62 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000421c 	.word	0x2000421c
 8001664:	40006400 	.word	0x40006400

08001668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <MX_I2C1_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x58>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a6:	f003 fa9f 	bl	8004be8 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 ff36 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200040d8 	.word	0x200040d8
 80016bc:	40005400 	.word	0x40005400
 80016c0:	000186a0 	.word	0x000186a0

080016c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_DMA_Init+0x3c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <MX_DMA_Init+0x3c>)
 80016d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_DMA_Init+0x3c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	2038      	movs	r0, #56	; 0x38
 80016ec:	f002 fd03 	bl	80040f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016f0:	2038      	movs	r0, #56	; 0x38
 80016f2:	f002 fd1c 	bl	800412e <HAL_NVIC_EnableIRQ>

}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <MX_GPIO_Init+0xe0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <MX_GPIO_Init+0xe0>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <MX_GPIO_Init+0xe0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <MX_GPIO_Init+0xe0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <MX_GPIO_Init+0xe0>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <MX_GPIO_Init+0xe0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f240 4104 	movw	r1, #1028	; 0x404
 8001758:	4823      	ldr	r0, [pc, #140]	; (80017e8 <MX_GPIO_Init+0xe4>)
 800175a:	f003 fa2b 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001764:	4821      	ldr	r0, [pc, #132]	; (80017ec <MX_GPIO_Init+0xe8>)
 8001766:	f003 fa25 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800176a:	f240 4304 	movw	r3, #1028	; 0x404
 800176e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4619      	mov	r1, r3
 8001782:	4819      	ldr	r0, [pc, #100]	; (80017e8 <MX_GPIO_Init+0xe4>)
 8001784:	f003 f86a 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001788:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800178c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	2303      	movs	r3, #3
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	4812      	ldr	r0, [pc, #72]	; (80017e8 <MX_GPIO_Init+0xe4>)
 800179e:	f003 f85d 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_GPIO_Init+0xe4>)
 80017b8:	f003 f850 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_GPIO_Init+0xe8>)
 80017d6:	f003 f841 	bl	800485c <HAL_GPIO_Init>

}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020000 	.word	0x40020000

080017f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 4 */

// *** functions *** //

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017fa:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80017fc:	2100      	movs	r1, #0
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f002 f837 	bl	8003872 <HAL_CAN_GetRxMessage>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    Error_Handler();
 800180a:	f000 fe89 	bl	8002520 <Error_Handler>

  // get sensor data from rcb
  if (rxHeader.StdId == 0x81)
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b81      	cmp	r3, #129	; 0x81
 8001814:	d123      	bne.n	800185e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
  {
	  wheelSpeedBL = canRX[0];
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001824:	edc3 7a00 	vstr	s15, [r3]
	  wheelSpeedBR = canRX[1];
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001836:	edc3 7a00 	vstr	s15, [r3]
	  rideHeightBL = canRX[2];
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800183c:	789b      	ldrb	r3, [r3, #2]
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001848:	edc3 7a00 	vstr	s15, [r3]
	  rideHeightBR = canRX[3];
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800184e:	78db      	ldrb	r3, [r3, #3]
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800185a:	edc3 7a00 	vstr	s15, [r3]
  }

  // get ready to drive from high voltage for precharge complete
  if (rxHeader.StdId == 0x87)
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b87      	cmp	r3, #135	; 0x87
 8001864:	d104      	bne.n	8001870 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
  {
	  readyToDrive = canRX[0];
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800186e:	601a      	str	r2, [r3, #0]
  }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200002fc 	.word	0x200002fc
 800187c:	200040a4 	.word	0x200040a4
 8001880:	20000318 	.word	0x20000318
 8001884:	20000314 	.word	0x20000314
 8001888:	20000328 	.word	0x20000328
 800188c:	20000324 	.word	0x20000324
 8001890:	20000308 	.word	0x20000308

08001894 <ADC_Select_CH_WSFR>:

void ADC_Select_CH_WSFR()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <ADC_Select_CH_WSFR+0x3c>)
 80018b8:	f001 faa6 	bl	8002e08 <HAL_ADC_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <ADC_Select_CH_WSFR+0x32>
		Error_Handler();
 80018c2:	f000 fe2d 	bl	8002520 <Error_Handler>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20004130 	.word	0x20004130

080018d4 <ADC_Select_CH_WSFL>:

void ADC_Select_CH_WSFL()
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80018da:	463b      	mov	r3, r7
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <ADC_Select_CH_WSFL+0x3c>)
 80018f8:	f001 fa86 	bl	8002e08 <HAL_ADC_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <ADC_Select_CH_WSFL+0x32>
		Error_Handler();
 8001902:	f000 fe0d 	bl	8002520 <Error_Handler>
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20004130 	.word	0x20004130

08001914 <ADC_Select_CH_RHFR>:

void ADC_Select_CH_RHFR()
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800191a:	463b      	mov	r3, r7
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_2;
 8001926:	2302      	movs	r3, #2
 8001928:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800192a:	2301      	movs	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001932:	463b      	mov	r3, r7
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <ADC_Select_CH_RHFR+0x3c>)
 8001938:	f001 fa66 	bl	8002e08 <HAL_ADC_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <ADC_Select_CH_RHFR+0x32>
		Error_Handler();
 8001942:	f000 fded 	bl	8002520 <Error_Handler>
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20004130 	.word	0x20004130

08001954 <ADC_Select_CH_RHFL>:

void ADC_Select_CH_RHFL()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800195a:	463b      	mov	r3, r7
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;
 8001966:	2303      	movs	r3, #3
 8001968:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <ADC_Select_CH_RHFL+0x3c>)
 8001978:	f001 fa46 	bl	8002e08 <HAL_ADC_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <ADC_Select_CH_RHFL+0x32>
		Error_Handler();
 8001982:	f000 fdcd 	bl	8002520 <Error_Handler>
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20004130 	.word	0x20004130

08001994 <ADC_Select_CH_P0>:

void ADC_Select_CH_P0()
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800199a:	463b      	mov	r3, r7
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;
 80019a6:	2304      	movs	r3, #4
 80019a8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b2:	463b      	mov	r3, r7
 80019b4:	4619      	mov	r1, r3
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <ADC_Select_CH_P0+0x3c>)
 80019b8:	f001 fa26 	bl	8002e08 <HAL_ADC_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <ADC_Select_CH_P0+0x32>
		Error_Handler();
 80019c2:	f000 fdad 	bl	8002520 <Error_Handler>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20004130 	.word	0x20004130

080019d4 <ADC_Select_CH_P1>:

void ADC_Select_CH_P1()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80019da:	463b      	mov	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;
 80019e6:	2305      	movs	r3, #5
 80019e8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f2:	463b      	mov	r3, r7
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <ADC_Select_CH_P1+0x3c>)
 80019f8:	f001 fa06 	bl	8002e08 <HAL_ADC_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <ADC_Select_CH_P1+0x32>
		Error_Handler();
 8001a02:	f000 fd8d 	bl	8002520 <Error_Handler>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20004130 	.word	0x20004130

08001a14 <ADC_Select_CH_B0>:

void ADC_Select_CH_B0()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8001a26:	2306      	movs	r3, #6
 8001a28:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a32:	463b      	mov	r3, r7
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <ADC_Select_CH_B0+0x3c>)
 8001a38:	f001 f9e6 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <ADC_Select_CH_B0+0x32>
		Error_Handler();
 8001a42:	f000 fd6d 	bl	8002520 <Error_Handler>
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20004130 	.word	0x20004130

08001a54 <ADC_Select_CH_B1>:

void ADC_Select_CH_B1()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;
 8001a66:	2307      	movs	r3, #7
 8001a68:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <ADC_Select_CH_B1+0x3c>)
 8001a78:	f001 f9c6 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <ADC_Select_CH_B1+0x32>
		Error_Handler();
 8001a82:	f000 fd4d 	bl	8002520 <Error_Handler>
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20004130 	.word	0x20004130

08001a94 <ADC_Select_CH_CR>:

void ADC_Select_CH_CR()
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <ADC_Select_CH_CR+0x3c>)
 8001ab8:	f001 f9a6 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <ADC_Select_CH_CR+0x32>
		Error_Handler();
 8001ac2:	f000 fd2d 	bl	8002520 <Error_Handler>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20004130 	.word	0x20004130

08001ad4 <ADC_Select_CH_BR>:

void ADC_Select_CH_BR()
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;
 8001ae6:	2309      	movs	r3, #9
 8001ae8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <ADC_Select_CH_BR+0x3c>)
 8001af8:	f001 f986 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <ADC_Select_CH_BR+0x32>
		Error_Handler();
 8001b02:	f000 fd0d 	bl	8002520 <Error_Handler>
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20004130 	.word	0x20004130

08001b14 <pollSensorData>:

void pollSensorData()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	// get front right wheel speed
	ADC_Select_CH_WSFR();
 8001b18:	f7ff febc 	bl	8001894 <ADC_Select_CH_WSFR>
	HAL_ADC_Start(&hadc1);
 8001b1c:	4871      	ldr	r0, [pc, #452]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b1e:	f000 fff3 	bl	8002b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b26:	486f      	ldr	r0, [pc, #444]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b28:	f001 f8d5 	bl	8002cd6 <HAL_ADC_PollForConversion>
	wheelSpeedFR = HAL_ADC_GetValue(&hadc1);
 8001b2c:	486d      	ldr	r0, [pc, #436]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b2e:	f001 f95d 	bl	8002dec <HAL_ADC_GetValue>
 8001b32:	ee07 0a90 	vmov	s15, r0
 8001b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ce8 <pollSensorData+0x1d4>)
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001b40:	4868      	ldr	r0, [pc, #416]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b42:	f001 f895 	bl	8002c70 <HAL_ADC_Stop>

	// get front left wheel speed
	ADC_Select_CH_WSFL();
 8001b46:	f7ff fec5 	bl	80018d4 <ADC_Select_CH_WSFL>
	HAL_ADC_Start(&hadc1);
 8001b4a:	4866      	ldr	r0, [pc, #408]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b4c:	f000 ffdc 	bl	8002b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b54:	4863      	ldr	r0, [pc, #396]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b56:	f001 f8be 	bl	8002cd6 <HAL_ADC_PollForConversion>
	wheelSpeedFL = HAL_ADC_GetValue(&hadc1);
 8001b5a:	4862      	ldr	r0, [pc, #392]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b5c:	f001 f946 	bl	8002dec <HAL_ADC_GetValue>
 8001b60:	ee07 0a90 	vmov	s15, r0
 8001b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b68:	4b60      	ldr	r3, [pc, #384]	; (8001cec <pollSensorData+0x1d8>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001b6e:	485d      	ldr	r0, [pc, #372]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b70:	f001 f87e 	bl	8002c70 <HAL_ADC_Stop>

	// get front right ride height
	ADC_Select_CH_RHFR();
 8001b74:	f7ff fece 	bl	8001914 <ADC_Select_CH_RHFR>
	HAL_ADC_Start(&hadc1);
 8001b78:	485a      	ldr	r0, [pc, #360]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b7a:	f000 ffc5 	bl	8002b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b82:	4858      	ldr	r0, [pc, #352]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b84:	f001 f8a7 	bl	8002cd6 <HAL_ADC_PollForConversion>
	rideHeightFR = HAL_ADC_GetValue(&hadc1);
 8001b88:	4856      	ldr	r0, [pc, #344]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b8a:	f001 f92f 	bl	8002dec <HAL_ADC_GetValue>
 8001b8e:	ee07 0a90 	vmov	s15, r0
 8001b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b96:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <pollSensorData+0x1dc>)
 8001b98:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001b9c:	4851      	ldr	r0, [pc, #324]	; (8001ce4 <pollSensorData+0x1d0>)
 8001b9e:	f001 f867 	bl	8002c70 <HAL_ADC_Stop>

	// get front left ride height
	ADC_Select_CH_RHFL();
 8001ba2:	f7ff fed7 	bl	8001954 <ADC_Select_CH_RHFL>
	HAL_ADC_Start(&hadc1);
 8001ba6:	484f      	ldr	r0, [pc, #316]	; (8001ce4 <pollSensorData+0x1d0>)
 8001ba8:	f000 ffae 	bl	8002b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001bac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bb0:	484c      	ldr	r0, [pc, #304]	; (8001ce4 <pollSensorData+0x1d0>)
 8001bb2:	f001 f890 	bl	8002cd6 <HAL_ADC_PollForConversion>
	rideHeightFL = HAL_ADC_GetValue(&hadc1);
 8001bb6:	484b      	ldr	r0, [pc, #300]	; (8001ce4 <pollSensorData+0x1d0>)
 8001bb8:	f001 f918 	bl	8002dec <HAL_ADC_GetValue>
 8001bbc:	ee07 0a90 	vmov	s15, r0
 8001bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <pollSensorData+0x1e0>)
 8001bc6:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001bca:	4846      	ldr	r0, [pc, #280]	; (8001ce4 <pollSensorData+0x1d0>)
 8001bcc:	f001 f850 	bl	8002c70 <HAL_ADC_Stop>

	// get pedal 0
	ADC_Select_CH_P0();
 8001bd0:	f7ff fee0 	bl	8001994 <ADC_Select_CH_P0>
	HAL_ADC_Start(&hadc1);
 8001bd4:	4843      	ldr	r0, [pc, #268]	; (8001ce4 <pollSensorData+0x1d0>)
 8001bd6:	f000 ff97 	bl	8002b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001bda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bde:	4841      	ldr	r0, [pc, #260]	; (8001ce4 <pollSensorData+0x1d0>)
 8001be0:	f001 f879 	bl	8002cd6 <HAL_ADC_PollForConversion>
	pedal0 = HAL_ADC_GetValue(&hadc1);
 8001be4:	483f      	ldr	r0, [pc, #252]	; (8001ce4 <pollSensorData+0x1d0>)
 8001be6:	f001 f901 	bl	8002dec <HAL_ADC_GetValue>
 8001bea:	ee07 0a90 	vmov	s15, r0
 8001bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf2:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <pollSensorData+0x1e4>)
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001bf8:	483a      	ldr	r0, [pc, #232]	; (8001ce4 <pollSensorData+0x1d0>)
 8001bfa:	f001 f839 	bl	8002c70 <HAL_ADC_Stop>

	// get pedal 1
	ADC_Select_CH_P1();
 8001bfe:	f7ff fee9 	bl	80019d4 <ADC_Select_CH_P1>
	HAL_ADC_Start(&hadc1);
 8001c02:	4838      	ldr	r0, [pc, #224]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c04:	f000 ff80 	bl	8002b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c0c:	4835      	ldr	r0, [pc, #212]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c0e:	f001 f862 	bl	8002cd6 <HAL_ADC_PollForConversion>
	pedal1 = HAL_ADC_GetValue(&hadc1);
 8001c12:	4834      	ldr	r0, [pc, #208]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c14:	f001 f8ea 	bl	8002dec <HAL_ADC_GetValue>
 8001c18:	ee07 0a90 	vmov	s15, r0
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <pollSensorData+0x1e8>)
 8001c22:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001c26:	482f      	ldr	r0, [pc, #188]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c28:	f001 f822 	bl	8002c70 <HAL_ADC_Stop>

	// get brake 0
	ADC_Select_CH_B0();
 8001c2c:	f7ff fef2 	bl	8001a14 <ADC_Select_CH_B0>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c34:	482b      	ldr	r0, [pc, #172]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c36:	f001 f84e 	bl	8002cd6 <HAL_ADC_PollForConversion>
	brake0 = HAL_ADC_GetValue(&hadc1);
 8001c3a:	482a      	ldr	r0, [pc, #168]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c3c:	f001 f8d6 	bl	8002dec <HAL_ADC_GetValue>
 8001c40:	ee07 0a90 	vmov	s15, r0
 8001c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <pollSensorData+0x1ec>)
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001c4e:	4825      	ldr	r0, [pc, #148]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c50:	f001 f80e 	bl	8002c70 <HAL_ADC_Stop>

	// get brake 1
	ADC_Select_CH_B1();
 8001c54:	f7ff fefe 	bl	8001a54 <ADC_Select_CH_B1>
	HAL_ADC_Start(&hadc1);
 8001c58:	4822      	ldr	r0, [pc, #136]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c5a:	f000 ff55 	bl	8002b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c62:	4820      	ldr	r0, [pc, #128]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c64:	f001 f837 	bl	8002cd6 <HAL_ADC_PollForConversion>
	brake1 = HAL_ADC_GetValue(&hadc1);
 8001c68:	481e      	ldr	r0, [pc, #120]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c6a:	f001 f8bf 	bl	8002dec <HAL_ADC_GetValue>
 8001c6e:	ee07 0a90 	vmov	s15, r0
 8001c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c76:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <pollSensorData+0x1f0>)
 8001c78:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001c7c:	4819      	ldr	r0, [pc, #100]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c7e:	f000 fff7 	bl	8002c70 <HAL_ADC_Stop>

	// get coast regen
	ADC_Select_CH_CR();
 8001c82:	f7ff ff07 	bl	8001a94 <ADC_Select_CH_CR>
	HAL_ADC_Start(&hadc1);
 8001c86:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c88:	f000 ff3e 	bl	8002b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c90:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c92:	f001 f820 	bl	8002cd6 <HAL_ADC_PollForConversion>
	coastRegen = HAL_ADC_GetValue(&hadc1);
 8001c96:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <pollSensorData+0x1d0>)
 8001c98:	f001 f8a8 	bl	8002dec <HAL_ADC_GetValue>
 8001c9c:	ee07 0a90 	vmov	s15, r0
 8001ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <pollSensorData+0x1f4>)
 8001ca6:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001caa:	480e      	ldr	r0, [pc, #56]	; (8001ce4 <pollSensorData+0x1d0>)
 8001cac:	f000 ffe0 	bl	8002c70 <HAL_ADC_Stop>

	// get brake regen
	ADC_Select_CH_BR();
 8001cb0:	f7ff ff10 	bl	8001ad4 <ADC_Select_CH_BR>
	HAL_ADC_Start(&hadc1);
 8001cb4:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <pollSensorData+0x1d0>)
 8001cb6:	f000 ff27 	bl	8002b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001cba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cbe:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <pollSensorData+0x1d0>)
 8001cc0:	f001 f809 	bl	8002cd6 <HAL_ADC_PollForConversion>
	brakeRegen = HAL_ADC_GetValue(&hadc1);
 8001cc4:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <pollSensorData+0x1d0>)
 8001cc6:	f001 f891 	bl	8002dec <HAL_ADC_GetValue>
 8001cca:	ee07 0a90 	vmov	s15, r0
 8001cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <pollSensorData+0x1f8>)
 8001cd4:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <pollSensorData+0x1d0>)
 8001cda:	f000 ffc9 	bl	8002c70 <HAL_ADC_Stop>
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20004130 	.word	0x20004130
 8001ce8:	2000030c 	.word	0x2000030c
 8001cec:	20000310 	.word	0x20000310
 8001cf0:	2000031c 	.word	0x2000031c
 8001cf4:	20000320 	.word	0x20000320
 8001cf8:	2000412c 	.word	0x2000412c
 8001cfc:	20004244 	.word	0x20004244
 8001d00:	20004098 	.word	0x20004098
 8001d04:	20004200 	.word	0x20004200
 8001d08:	200041f8 	.word	0x200041f8
 8001d0c:	200041fc 	.word	0x200041fc

08001d10 <welcomeScreen>:
/**
 * @brief welcome & boot screen
 * 
 */
void welcomeScreen()
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	lcdInit(&hi2c1, 0x27, 2, 16);       			// init lcd (i2c reference, LCD address, lines, rows)
 8001d14:	2310      	movs	r3, #16
 8001d16:	2202      	movs	r2, #2
 8001d18:	2127      	movs	r1, #39	; 0x27
 8001d1a:	4814      	ldr	r0, [pc, #80]	; (8001d6c <welcomeScreen+0x5c>)
 8001d1c:	f7ff f88c 	bl	8000e38 <lcdInit>
	lcdAutoscrollOff();								// turn off autoscroll
 8001d20:	2100      	movs	r1, #0
 8001d22:	2008      	movs	r0, #8
 8001d24:	f7ff f93a 	bl	8000f9c <lcdCommand>
	lcdBacklightOn();								// turn on backlight
 8001d28:	2008      	movs	r0, #8
 8001d2a:	f7ff fa25 	bl	8001178 <lcdBacklight>
	lcdDisplayClear();                  			// clear the screen
 8001d2e:	2101      	movs	r1, #1
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7ff f933 	bl	8000f9c <lcdCommand>
	lcdSetCursorPosition(2, 0);         			// set the cursor
 8001d36:	2100      	movs	r1, #0
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f7ff fa47 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"welcome AERO!", 13);   	// print
 8001d3e:	210d      	movs	r1, #13
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <welcomeScreen+0x60>)
 8001d42:	f7ff fa6f 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(2, 1);         			// next line
 8001d46:	2101      	movs	r1, #1
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fa3f 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"booting up...", 13);   	// print
 8001d4e:	210d      	movs	r1, #13
 8001d50:	4808      	ldr	r0, [pc, #32]	; (8001d74 <welcomeScreen+0x64>)
 8001d52:	f7ff fa67 	bl	8001224 <lcdPrintStr>
	HAL_Delay(3000);								// delay 3 seconds so the screen can be read
 8001d56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d5a:	f000 fe6d 	bl	8002a38 <HAL_Delay>
	lcdDisplayClear();								// clear the display so the other screens can be printed
 8001d5e:	2101      	movs	r1, #1
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7ff f91b 	bl	8000f9c <lcdCommand>
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200040d8 	.word	0x200040d8
 8001d70:	08007aec 	.word	0x08007aec
 8001d74:	08007afc 	.word	0x08007afc

08001d78 <racingHUD>:
/**
 * @brief racing hud: mph(est), battery%, drive direction, coast regen, brake regen
 *
 */
void racingHUD()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b090      	sub	sp, #64	; 0x40
 8001d7c:	af00      	add	r7, sp, #0
	// get wheel speed
	float averageWheelSpeed = (wheelSpeedFR + wheelSpeedFL) / 2;
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <racingHUD+0x1b0>)
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	4b69      	ldr	r3, [pc, #420]	; (8001f2c <racingHUD+0x1b4>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d96:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// get current mph from wheel speed
	float currentMPH = ((averageWheelSpeed * WHEEL_DIAMETER) * (3.14159 * 60)) / 63360;
 8001d9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d9c:	f7fe fbfc 	bl	8000598 <__aeabi_f2d>
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <racingHUD+0x1b8>)
 8001da6:	f7fe fc4f 	bl	8000648 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	a359      	add	r3, pc, #356	; (adr r3, 8001f18 <racingHUD+0x1a0>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe fc46 	bl	8000648 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	a356      	add	r3, pc, #344	; (adr r3, 8001f20 <racingHUD+0x1a8>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fd67 	bl	800089c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe fe49 	bl	8000a6c <__aeabi_d2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38

	// get battery percentage
	float batteryPercentage = (emusVoltage / MAX_PACK_VOLTAGE) * 100;
 8001dde:	4b55      	ldr	r3, [pc, #340]	; (8001f34 <racingHUD+0x1bc>)
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001f38 <racingHUD+0x1c0>
 8001de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dec:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001f3c <racingHUD+0x1c4>
 8001df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	char speedStr[10];
	char coastStr[10];
	char brakeStr[10];

	// drive direction
	lcdSetCursorPosition(0, 0);									// position of drive direction
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff f9e6 	bl	80011cc <lcdSetCursorPosition>
	if (direction) lcdPrintStr((uint8_t*)"FWD", 3);     		// print drive direction
 8001e00:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <racingHUD+0x1c8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <racingHUD+0x9a>
 8001e08:	2103      	movs	r1, #3
 8001e0a:	484e      	ldr	r0, [pc, #312]	; (8001f44 <racingHUD+0x1cc>)
 8001e0c:	f7ff fa0a 	bl	8001224 <lcdPrintStr>
 8001e10:	e003      	b.n	8001e1a <racingHUD+0xa2>
	else lcdPrintStr((uint8_t*)"RVS", 3);
 8001e12:	2103      	movs	r1, #3
 8001e14:	484c      	ldr	r0, [pc, #304]	; (8001f48 <racingHUD+0x1d0>)
 8001e16:	f7ff fa05 	bl	8001224 <lcdPrintStr>

	// battery percentage
	lcdSetCursorPosition(12, 0); 								// set cursor for battery percentage value
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	200c      	movs	r0, #12
 8001e1e:	f7ff f9d5 	bl	80011cc <lcdSetCursorPosition>
	sprintf(battStr, "%.0d%%", (int)batteryPercentage); 		// sprintf it
 8001e22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e2e:	ee17 2a90 	vmov	r2, s15
 8001e32:	4946      	ldr	r1, [pc, #280]	; (8001f4c <racingHUD+0x1d4>)
 8001e34:	4618      	mov	r0, r3
 8001e36:	f005 fa19 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)battStr, strlen(battStr));			// print the battery percentage value
 8001e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe f9ee 	bl	8000220 <strlen>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f9e8 	bl	8001224 <lcdPrintStr>

	// speedometer		
	lcdSetCursorPosition(7, 0);                     			// set cursor for mph value
 8001e54:	2100      	movs	r1, #0
 8001e56:	2007      	movs	r0, #7
 8001e58:	f7ff f9b8 	bl	80011cc <lcdSetCursorPosition>
	sprintf(speedStr, "%.0d", (int)currentMPH);					// sprintf it
 8001e5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	ee17 2a90 	vmov	r2, s15
 8001e6c:	4938      	ldr	r1, [pc, #224]	; (8001f50 <racingHUD+0x1d8>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 f9fc 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)speedStr, strlen(speedStr));			// print the current speed in MPH, cast to int to round to whole number
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe f9d1 	bl	8000220 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f9cb 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(7, 1);                     			// set cursor for units
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2007      	movs	r0, #7
 8001e92:	f7ff f99b 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"mph", 3);                    		// print units
 8001e96:	2103      	movs	r1, #3
 8001e98:	482e      	ldr	r0, [pc, #184]	; (8001f54 <racingHUD+0x1dc>)
 8001e9a:	f7ff f9c3 	bl	8001224 <lcdPrintStr>

	// coast regen		
	lcdSetCursorPosition(0, 1);                      			// set cursor for CR
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff f993 	bl	80011cc <lcdSetCursorPosition>
	sprintf(coastStr, "C:%.0d%%", (int)coastRegen);				// sprintf it
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <racingHUD+0x1e0>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	ee17 2a90 	vmov	r2, s15
 8001eb8:	4928      	ldr	r1, [pc, #160]	; (8001f5c <racingHUD+0x1e4>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 f9d6 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)coastStr, strlen(coastStr));  		// print coast regen value
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe f9ab 	bl	8000220 <strlen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f9a5 	bl	8001224 <lcdPrintStr>

	// brake regen		
	lcdSetCursorPosition(11, 1);                     			// set cursor for BR
 8001eda:	2101      	movs	r1, #1
 8001edc:	200b      	movs	r0, #11
 8001ede:	f7ff f975 	bl	80011cc <lcdSetCursorPosition>
	sprintf(brakeStr, "B: %d%%", (int)brakeRegen);				// sprintf it
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <racingHUD+0x1e8>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	ee17 2a90 	vmov	r2, s15
 8001ef2:	491c      	ldr	r1, [pc, #112]	; (8001f64 <racingHUD+0x1ec>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f005 f9b9 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)brakeStr, strlen(brakeStr));  		// print brake regen value
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe f98f 	bl	8000220 <strlen>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f98a 	bl	8001224 <lcdPrintStr>
}
 8001f10:	bf00      	nop
 8001f12:	3740      	adds	r7, #64	; 0x40
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	5119ce07 	.word	0x5119ce07
 8001f1c:	40678fda 	.word	0x40678fda
 8001f20:	00000000 	.word	0x00000000
 8001f24:	40eef000 	.word	0x40eef000
 8001f28:	2000030c 	.word	0x2000030c
 8001f2c:	20000310 	.word	0x20000310
 8001f30:	40348000 	.word	0x40348000
 8001f34:	20000304 	.word	0x20000304
 8001f38:	43848000 	.word	0x43848000
 8001f3c:	42c80000 	.word	0x42c80000
 8001f40:	20000330 	.word	0x20000330
 8001f44:	08007b0c 	.word	0x08007b0c
 8001f48:	08007b10 	.word	0x08007b10
 8001f4c:	08007b14 	.word	0x08007b14
 8001f50:	08007b1c 	.word	0x08007b1c
 8001f54:	08007b24 	.word	0x08007b24
 8001f58:	200041f8 	.word	0x200041f8
 8001f5c:	08007b28 	.word	0x08007b28
 8001f60:	200041fc 	.word	0x200041fc
 8001f64:	08007b34 	.word	0x08007b34

08001f68 <electricalSettings>:
/**
 * @brief battery state, bus voltage, rinehart voltage, power mode
 * 
 */
void electricalSettings()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
	// get battery percentage
	float batteryPercentage = (emusVoltage / MAX_PACK_VOLTAGE) * 100;
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <electricalSettings+0xfc>)
 8001f70:	ed93 7a00 	vldr	s14, [r3]
 8001f74:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002068 <electricalSettings+0x100>
 8001f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f7c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800206c <electricalSettings+0x104>
 8001f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f84:	edc7 7a07 	vstr	s15, [r7, #28]
	// init some char buffs for variables
	char battStr[10];
	char busVStr[10];

	// battery percentage
	lcdSetCursorPosition(0, 0);									// set cursor for battery title
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff f91e 	bl	80011cc <lcdSetCursorPosition>
	sprintf(battStr, "Batt:%d%%", (int)batteryPercentage);		// sprintf it
 8001f90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	ee17 2a90 	vmov	r2, s15
 8001fa0:	4933      	ldr	r1, [pc, #204]	; (8002070 <electricalSettings+0x108>)
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f005 f962 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)battStr, strlen(battStr));			// print title
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe f937 	bl	8000220 <strlen>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	f107 0310 	add.w	r3, r7, #16
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f931 	bl	8001224 <lcdPrintStr>

	// bus voltage
	lcdSetCursorPosition(11, 0);								// set cursor for bus voltage title
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	200b      	movs	r0, #11
 8001fc6:	f7ff f901 	bl	80011cc <lcdSetCursorPosition>
	sprintf(busVStr, "Bus:%d", (int)emusVoltage);				// sprintf it			
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <electricalSettings+0xfc>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	ee17 2a90 	vmov	r2, s15
 8001fda:	4926      	ldr	r1, [pc, #152]	; (8002074 <electricalSettings+0x10c>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f005 f945 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)busVStr, strlen(busVStr));			// print
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe f91b 	bl	8000220 <strlen>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f916 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(15, 1);                                // set cursor for units
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f7ff f8e6 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"V", 1);                              // print units
 8002000:	2101      	movs	r1, #1
 8002002:	481d      	ldr	r0, [pc, #116]	; (8002078 <electricalSettings+0x110>)
 8002004:	f7ff f90e 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(15, 0);                                // set cursor for units
	lcdPrintStr("V");                                       	// print % sign
	*/

	// power mode
	lcdSetCursorPosition(0, 1);                                 // set cursor for mode text
 8002008:	2101      	movs	r1, #1
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff f8de 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Mode:", 5);							// print mode text
 8002010:	2105      	movs	r1, #5
 8002012:	481a      	ldr	r0, [pc, #104]	; (800207c <electricalSettings+0x114>)
 8002014:	f7ff f906 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(5, 1);                                 // set cursor current mode setting
 8002018:	2101      	movs	r1, #1
 800201a:	2005      	movs	r0, #5
 800201c:	f7ff f8d6 	bl	80011cc <lcdSetCursorPosition>
	if (powerMode == TUTORIAL) lcdPrintStr((uint8_t*)"TUTR", 4);
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <electricalSettings+0x118>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d103      	bne.n	8002030 <electricalSettings+0xc8>
 8002028:	2104      	movs	r1, #4
 800202a:	4816      	ldr	r0, [pc, #88]	; (8002084 <electricalSettings+0x11c>)
 800202c:	f7ff f8fa 	bl	8001224 <lcdPrintStr>
	if (powerMode == ECO) lcdPrintStr((uint8_t*)"ECO", 3);
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <electricalSettings+0x118>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d103      	bne.n	8002040 <electricalSettings+0xd8>
 8002038:	2103      	movs	r1, #3
 800203a:	4813      	ldr	r0, [pc, #76]	; (8002088 <electricalSettings+0x120>)
 800203c:	f7ff f8f2 	bl	8001224 <lcdPrintStr>
	if (powerMode == EXPERT) lcdPrintStr((uint8_t*)"EXPT", 4);
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <electricalSettings+0x118>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d104      	bne.n	8002052 <electricalSettings+0xea>
 8002048:	2104      	movs	r1, #4
 800204a:	4810      	ldr	r0, [pc, #64]	; (800208c <electricalSettings+0x124>)
 800204c:	f7ff f8ea 	bl	8001224 <lcdPrintStr>
	else lcdPrintStr((uint8_t*)(uint8_t*)"ERR!", 4);
}
 8002050:	e003      	b.n	800205a <electricalSettings+0xf2>
	else lcdPrintStr((uint8_t*)(uint8_t*)"ERR!", 4);
 8002052:	2104      	movs	r1, #4
 8002054:	480e      	ldr	r0, [pc, #56]	; (8002090 <electricalSettings+0x128>)
 8002056:	f7ff f8e5 	bl	8001224 <lcdPrintStr>
}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000304 	.word	0x20000304
 8002068:	43848000 	.word	0x43848000
 800206c:	42c80000 	.word	0x42c80000
 8002070:	08007b3c 	.word	0x08007b3c
 8002074:	08007b48 	.word	0x08007b48
 8002078:	08007b50 	.word	0x08007b50
 800207c:	08007b54 	.word	0x08007b54
 8002080:	20000000 	.word	0x20000000
 8002084:	08007b5c 	.word	0x08007b5c
 8002088:	08007b64 	.word	0x08007b64
 800208c:	08007b68 	.word	0x08007b68
 8002090:	08007b70 	.word	0x08007b70

08002094 <rideSettings>:
/**
 * @brief ride height, wheel rpm, coast regen, brake regen
 *
 */
void rideSettings()
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
	// init some char buffs for variables
	char rideStr[10];
	char wheelStr[10];

	// ride height
	lcdSetCursorPosition(0, 0);									// set cursor for front left ride height value
 800209a:	2100      	movs	r1, #0
 800209c:	2000      	movs	r0, #0
 800209e:	f7ff f895 	bl	80011cc <lcdSetCursorPosition>
	sprintf(rideStr, "%d", (int)rideHeightFL);					// sprintf it
 80020a2:	4b8a      	ldr	r3, [pc, #552]	; (80022cc <rideSettings+0x238>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	ee17 2a90 	vmov	r2, s15
 80020b4:	4986      	ldr	r1, [pc, #536]	; (80022d0 <rideSettings+0x23c>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f005 f8d8 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));			// print front left ride height value
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f8ad 	bl	8000220 <strlen>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f8a7 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(2, 0);				  					// spacer
 80020d6:	2100      	movs	r1, #0
 80020d8:	2002      	movs	r0, #2
 80020da:	f7ff f877 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"-", 1);						  		// spacer
 80020de:	2101      	movs	r1, #1
 80020e0:	487c      	ldr	r0, [pc, #496]	; (80022d4 <rideSettings+0x240>)
 80020e2:	f7ff f89f 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(3, 0);									// set cursor for front right ride height value
 80020e6:	2100      	movs	r1, #0
 80020e8:	2003      	movs	r0, #3
 80020ea:	f7ff f86f 	bl	80011cc <lcdSetCursorPosition>
	sprintf(rideStr, "%d", (int)rideHeightFR);					// sprintf it
 80020ee:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <rideSettings+0x244>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	ee17 2a90 	vmov	r2, s15
 8002100:	4973      	ldr	r1, [pc, #460]	; (80022d0 <rideSettings+0x23c>)
 8002102:	4618      	mov	r0, r3
 8002104:	f005 f8b2 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));			// print front right ride height value
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f887 	bl	8000220 <strlen>
 8002112:	4603      	mov	r3, r0
 8002114:	b2da      	uxtb	r2, r3
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f881 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(5, 0);									// set cursor for "<- Ride"
 8002122:	2100      	movs	r1, #0
 8002124:	2005      	movs	r0, #5
 8002126:	f7ff f851 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"<-Ride", 6);							// print
 800212a:	2106      	movs	r1, #6
 800212c:	486b      	ldr	r0, [pc, #428]	; (80022dc <rideSettings+0x248>)
 800212e:	f7ff f879 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(0, 1);                  				// set cursor for back left ride height value
 8002132:	2101      	movs	r1, #1
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff f849 	bl	80011cc <lcdSetCursorPosition>
	sprintf(rideStr, "%d", (int)rideHeightBL);					// sprintf it
 800213a:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <rideSettings+0x24c>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	ee17 2a90 	vmov	r2, s15
 800214c:	4960      	ldr	r1, [pc, #384]	; (80022d0 <rideSettings+0x23c>)
 800214e:	4618      	mov	r0, r3
 8002150:	f005 f88c 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));         	// print back left ride height value
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f861 	bl	8000220 <strlen>
 800215e:	4603      	mov	r3, r0
 8002160:	b2da      	uxtb	r2, r3
 8002162:	f107 030c 	add.w	r3, r7, #12
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f85b 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(2, 1);				  					// spacer
 800216e:	2101      	movs	r1, #1
 8002170:	2002      	movs	r0, #2
 8002172:	f7ff f82b 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"-", 1);						  		// spacer
 8002176:	2101      	movs	r1, #1
 8002178:	4856      	ldr	r0, [pc, #344]	; (80022d4 <rideSettings+0x240>)
 800217a:	f7ff f853 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(3, 1);                  				// set cursor for back right ride height value
 800217e:	2101      	movs	r1, #1
 8002180:	2003      	movs	r0, #3
 8002182:	f7ff f823 	bl	80011cc <lcdSetCursorPosition>
	sprintf(rideStr, "%d", (int)rideHeightBR);					// sprintf it
 8002186:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <rideSettings+0x250>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	ee17 2a90 	vmov	r2, s15
 8002198:	494d      	ldr	r1, [pc, #308]	; (80022d0 <rideSettings+0x23c>)
 800219a:	4618      	mov	r0, r3
 800219c:	f005 f866 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));			// print back right ride height value
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f83b 	bl	8000220 <strlen>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f835 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(6, 1);                  				// set cursor for "RPM->"
 80021ba:	2101      	movs	r1, #1
 80021bc:	2006      	movs	r0, #6
 80021be:	f7ff f805 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"RPM->", 5);                   		// print the "RPM->"
 80021c2:	2105      	movs	r1, #5
 80021c4:	4848      	ldr	r0, [pc, #288]	; (80022e8 <rideSettings+0x254>)
 80021c6:	f7ff f82d 	bl	8001224 <lcdPrintStr>

	// wheel speed
	lcdSetCursorPosition(11, 0);								// set cursor for front left wheelspeed value
 80021ca:	2100      	movs	r1, #0
 80021cc:	200b      	movs	r0, #11
 80021ce:	f7fe fffd 	bl	80011cc <lcdSetCursorPosition>
	sprintf(wheelStr, "%d", (int)wheelSpeedFL);					// sprintf it
 80021d2:	4b46      	ldr	r3, [pc, #280]	; (80022ec <rideSettings+0x258>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021dc:	463b      	mov	r3, r7
 80021de:	ee17 2a90 	vmov	r2, s15
 80021e2:	493b      	ldr	r1, [pc, #236]	; (80022d0 <rideSettings+0x23c>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f005 f841 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print front left wheelspeed value
 80021ea:	463b      	mov	r3, r7
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f817 	bl	8000220 <strlen>
 80021f2:	4603      	mov	r3, r0
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	463b      	mov	r3, r7
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff f812 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(13, 0);								// spacer
 8002200:	2100      	movs	r1, #0
 8002202:	200d      	movs	r0, #13
 8002204:	f7fe ffe2 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"-", 1);						  		// spacer
 8002208:	2101      	movs	r1, #1
 800220a:	4832      	ldr	r0, [pc, #200]	; (80022d4 <rideSettings+0x240>)
 800220c:	f7ff f80a 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(14, 0);                 				// set cursor for front right wheelspeed value
 8002210:	2100      	movs	r1, #0
 8002212:	200e      	movs	r0, #14
 8002214:	f7fe ffda 	bl	80011cc <lcdSetCursorPosition>
	sprintf(wheelStr, "%d", (int)wheelSpeedFR);					// sprintf it
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <rideSettings+0x25c>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002222:	463b      	mov	r3, r7
 8002224:	ee17 2a90 	vmov	r2, s15
 8002228:	4929      	ldr	r1, [pc, #164]	; (80022d0 <rideSettings+0x23c>)
 800222a:	4618      	mov	r0, r3
 800222c:	f005 f81e 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print front right wheelspeed value
 8002230:	463b      	mov	r3, r7
 8002232:	4618      	mov	r0, r3
 8002234:	f7fd fff4 	bl	8000220 <strlen>
 8002238:	4603      	mov	r3, r0
 800223a:	b2da      	uxtb	r2, r3
 800223c:	463b      	mov	r3, r7
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe ffef 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(11, 1);                 				// set cursor for back left wheelspeed value
 8002246:	2101      	movs	r1, #1
 8002248:	200b      	movs	r0, #11
 800224a:	f7fe ffbf 	bl	80011cc <lcdSetCursorPosition>
	sprintf(wheelStr, "%d", (int)wheelSpeedBL);					// sprintf it
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <rideSettings+0x260>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002258:	463b      	mov	r3, r7
 800225a:	ee17 2a90 	vmov	r2, s15
 800225e:	491c      	ldr	r1, [pc, #112]	; (80022d0 <rideSettings+0x23c>)
 8002260:	4618      	mov	r0, r3
 8002262:	f005 f803 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print back left wheelspeed value
 8002266:	463b      	mov	r3, r7
 8002268:	4618      	mov	r0, r3
 800226a:	f7fd ffd9 	bl	8000220 <strlen>
 800226e:	4603      	mov	r3, r0
 8002270:	b2da      	uxtb	r2, r3
 8002272:	463b      	mov	r3, r7
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe ffd4 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(13, 1);								// set cursor for "-"
 800227c:	2101      	movs	r1, #1
 800227e:	200d      	movs	r0, #13
 8002280:	f7fe ffa4 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"-", 1);								// print the "-"
 8002284:	2101      	movs	r1, #1
 8002286:	4813      	ldr	r0, [pc, #76]	; (80022d4 <rideSettings+0x240>)
 8002288:	f7fe ffcc 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(14, 1);								// set cursor for back right wheelspeed value
 800228c:	2101      	movs	r1, #1
 800228e:	200e      	movs	r0, #14
 8002290:	f7fe ff9c 	bl	80011cc <lcdSetCursorPosition>
	sprintf(wheelStr, "%d", (int)wheelSpeedBR);					// sprintf it
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <rideSettings+0x264>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800229e:	463b      	mov	r3, r7
 80022a0:	ee17 2a90 	vmov	r2, s15
 80022a4:	490a      	ldr	r1, [pc, #40]	; (80022d0 <rideSettings+0x23c>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 ffe0 	bl	800726c <siprintf>
	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print value for back right wheelspeed value
 80022ac:	463b      	mov	r3, r7
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fd ffb6 	bl	8000220 <strlen>
 80022b4:	4603      	mov	r3, r0
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	463b      	mov	r3, r7
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe ffb1 	bl	8001224 <lcdPrintStr>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000320 	.word	0x20000320
 80022d0:	08007b78 	.word	0x08007b78
 80022d4:	08007b7c 	.word	0x08007b7c
 80022d8:	2000031c 	.word	0x2000031c
 80022dc:	08007b80 	.word	0x08007b80
 80022e0:	20000328 	.word	0x20000328
 80022e4:	20000324 	.word	0x20000324
 80022e8:	08007b88 	.word	0x08007b88
 80022ec:	20000310 	.word	0x20000310
 80022f0:	2000030c 	.word	0x2000030c
 80022f4:	20000318 	.word	0x20000318
 80022f8:	20000314 	.word	0x20000314

080022fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002304:	2001      	movs	r0, #1
 8002306:	f003 fce0 	bl	8005cca <osDelay>

	// poll sensor data
	pollSensorData();
 800230a:	f7ff fc03 	bl	8001b14 <pollSensorData>

	// read can messages
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800230e:	2102      	movs	r1, #2
 8002310:	486e      	ldr	r0, [pc, #440]	; (80024cc <StartDefaultTask+0x1d0>)
 8002312:	f001 fbc0 	bl	8003a96 <HAL_CAN_ActivateNotification>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <StartDefaultTask+0x24>
		Error_Handler();
 800231c:	f000 f900 	bl	8002520 <Error_Handler>

	// send can messages
	uint8_t csend0[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // Tx Buffer
 8002320:	4a6b      	ldr	r2, [pc, #428]	; (80024d0 <StartDefaultTask+0x1d4>)
 8002322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800232a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_CAN_AddTxMessage(&hcan1, &txHeader0, csend0, &canMailbox); // Send Message
 800232e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002332:	4b68      	ldr	r3, [pc, #416]	; (80024d4 <StartDefaultTask+0x1d8>)
 8002334:	4968      	ldr	r1, [pc, #416]	; (80024d8 <StartDefaultTask+0x1dc>)
 8002336:	4865      	ldr	r0, [pc, #404]	; (80024cc <StartDefaultTask+0x1d0>)
 8002338:	f001 f9c0 	bl	80036bc <HAL_CAN_AddTxMessage>

	uint8_t csend1[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; 	// add torque setting
 800233c:	4a64      	ldr	r2, [pc, #400]	; (80024d0 <StartDefaultTask+0x1d4>)
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002346:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_CAN_AddTxMessage(&hcan1, &txHeader1, csend1, &canMailbox); // Send Message
 800234a:	f107 021c 	add.w	r2, r7, #28
 800234e:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <StartDefaultTask+0x1d8>)
 8002350:	4962      	ldr	r1, [pc, #392]	; (80024dc <StartDefaultTask+0x1e0>)
 8002352:	485e      	ldr	r0, [pc, #376]	; (80024cc <StartDefaultTask+0x1d0>)
 8002354:	f001 f9b2 	bl	80036bc <HAL_CAN_AddTxMessage>

	uint8_t csend2[] = {wheelSpeedFL, wheelSpeedFR, rideHeightFL, rideHeightFR, brake0, brake1, pedal0, pedal1};
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <StartDefaultTask+0x1e4>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002362:	edc7 7a00 	vstr	s15, [r7]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	753b      	strb	r3, [r7, #20]
 800236c:	4b5d      	ldr	r3, [pc, #372]	; (80024e4 <StartDefaultTask+0x1e8>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002376:	edc7 7a00 	vstr	s15, [r7]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	757b      	strb	r3, [r7, #21]
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <StartDefaultTask+0x1ec>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238a:	edc7 7a00 	vstr	s15, [r7]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	75bb      	strb	r3, [r7, #22]
 8002394:	4b55      	ldr	r3, [pc, #340]	; (80024ec <StartDefaultTask+0x1f0>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239e:	edc7 7a00 	vstr	s15, [r7]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	75fb      	strb	r3, [r7, #23]
 80023a8:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <StartDefaultTask+0x1f4>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b2:	edc7 7a00 	vstr	s15, [r7]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	763b      	strb	r3, [r7, #24]
 80023bc:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <StartDefaultTask+0x1f8>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c6:	edc7 7a00 	vstr	s15, [r7]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	767b      	strb	r3, [r7, #25]
 80023d0:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <StartDefaultTask+0x1fc>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023da:	edc7 7a00 	vstr	s15, [r7]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	76bb      	strb	r3, [r7, #26]
 80023e4:	4b45      	ldr	r3, [pc, #276]	; (80024fc <StartDefaultTask+0x200>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ee:	edc7 7a00 	vstr	s15, [r7]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	76fb      	strb	r3, [r7, #27]
	HAL_CAN_AddTxMessage(&hcan1, &txHeader2, csend2, &canMailbox); // Send Message
 80023f8:	f107 0214 	add.w	r2, r7, #20
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <StartDefaultTask+0x1d8>)
 80023fe:	4940      	ldr	r1, [pc, #256]	; (8002500 <StartDefaultTask+0x204>)
 8002400:	4832      	ldr	r0, [pc, #200]	; (80024cc <StartDefaultTask+0x1d0>)
 8002402:	f001 f95b 	bl	80036bc <HAL_CAN_AddTxMessage>

	uint8_t csend3[] = {coastRegen, brakeRegen, cooling, direction, 0x04, 0x05, 0x06, 0x07};
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <StartDefaultTask+0x208>)
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002410:	edc7 7a00 	vstr	s15, [r7]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	733b      	strb	r3, [r7, #12]
 800241a:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <StartDefaultTask+0x20c>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002424:	edc7 7a00 	vstr	s15, [r7]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	737b      	strb	r3, [r7, #13]
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <StartDefaultTask+0x210>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	73bb      	strb	r3, [r7, #14]
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <StartDefaultTask+0x214>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	2304      	movs	r3, #4
 8002440:	743b      	strb	r3, [r7, #16]
 8002442:	2305      	movs	r3, #5
 8002444:	747b      	strb	r3, [r7, #17]
 8002446:	2306      	movs	r3, #6
 8002448:	74bb      	strb	r3, [r7, #18]
 800244a:	2307      	movs	r3, #7
 800244c:	74fb      	strb	r3, [r7, #19]
	HAL_CAN_AddTxMessage(&hcan1, &txHeader3, csend3, &canMailbox); // Send Message
 800244e:	f107 020c 	add.w	r2, r7, #12
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <StartDefaultTask+0x1d8>)
 8002454:	492f      	ldr	r1, [pc, #188]	; (8002514 <StartDefaultTask+0x218>)
 8002456:	481d      	ldr	r0, [pc, #116]	; (80024cc <StartDefaultTask+0x1d0>)
 8002458:	f001 f930 	bl	80036bc <HAL_CAN_AddTxMessage>


	// check for lcd button press to change screeens
	int oldScreen = currentScreen;
 800245c:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <StartDefaultTask+0x21c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_GPIO_ReadPin(GPIOB, PIN_LCD_BUTTON) == 0)
 8002462:	211b      	movs	r1, #27
 8002464:	482d      	ldr	r0, [pc, #180]	; (800251c <StartDefaultTask+0x220>)
 8002466:	f002 fb8d 	bl	8004b84 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <StartDefaultTask+0x18c>
	{
		currentScreen++;
 8002470:	4b29      	ldr	r3, [pc, #164]	; (8002518 <StartDefaultTask+0x21c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	4a28      	ldr	r2, [pc, #160]	; (8002518 <StartDefaultTask+0x21c>)
 8002478:	6013      	str	r3, [r2, #0]
		// loop back the first screen after reaching the last one
		if (currentScreen > RIDE_SETTINGS) currentScreen = RACING_HUD;
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <StartDefaultTask+0x21c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	dd02      	ble.n	8002488 <StartDefaultTask+0x18c>
 8002482:	4b25      	ldr	r3, [pc, #148]	; (8002518 <StartDefaultTask+0x21c>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
	}

	// clear screen if the screen mode has been changed
	if (currentScreen != oldScreen) lcdDisplayClear();
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <StartDefaultTask+0x21c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800248e:	429a      	cmp	r2, r3
 8002490:	d003      	beq.n	800249a <StartDefaultTask+0x19e>
 8002492:	2101      	movs	r1, #1
 8002494:	2002      	movs	r0, #2
 8002496:	f7fe fd81 	bl	8000f9c <lcdCommand>

	// screen updates
	switch (currentScreen)
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <StartDefaultTask+0x21c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d009      	beq.n	80024b6 <StartDefaultTask+0x1ba>
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	dc0d      	bgt.n	80024c2 <StartDefaultTask+0x1c6>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <StartDefaultTask+0x1b4>
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d006      	beq.n	80024bc <StartDefaultTask+0x1c0>
 80024ae:	e008      	b.n	80024c2 <StartDefaultTask+0x1c6>
	{
		case RACING_HUD:
			racingHUD();
 80024b0:	f7ff fc62 	bl	8001d78 <racingHUD>
		break;
 80024b4:	e009      	b.n	80024ca <StartDefaultTask+0x1ce>

		case ELECTRICAL_SETTINGS:
			electricalSettings();
 80024b6:	f7ff fd57 	bl	8001f68 <electricalSettings>
		break;
 80024ba:	e006      	b.n	80024ca <StartDefaultTask+0x1ce>

		case RIDE_SETTINGS:
			rideSettings();
 80024bc:	f7ff fdea 	bl	8002094 <rideSettings>
		break;
 80024c0:	e003      	b.n	80024ca <StartDefaultTask+0x1ce>

		default:
			// go to racing hud because were not supposed to be here
			currentScreen = RACING_HUD;
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <StartDefaultTask+0x21c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
		break;
 80024c8:	bf00      	nop
  {
 80024ca:	e71b      	b.n	8002304 <StartDefaultTask+0x8>
 80024cc:	2000421c 	.word	0x2000421c
 80024d0:	08007b90 	.word	0x08007b90
 80024d4:	20004190 	.word	0x20004190
 80024d8:	20004178 	.word	0x20004178
 80024dc:	20004270 	.word	0x20004270
 80024e0:	20000310 	.word	0x20000310
 80024e4:	2000030c 	.word	0x2000030c
 80024e8:	20000320 	.word	0x20000320
 80024ec:	2000031c 	.word	0x2000031c
 80024f0:	20004098 	.word	0x20004098
 80024f4:	20004200 	.word	0x20004200
 80024f8:	2000412c 	.word	0x2000412c
 80024fc:	20004244 	.word	0x20004244
 8002500:	20004204 	.word	0x20004204
 8002504:	200041f8 	.word	0x200041f8
 8002508:	200041fc 	.word	0x200041fc
 800250c:	2000032c 	.word	0x2000032c
 8002510:	20000330 	.word	0x20000330
 8002514:	200040c0 	.word	0x200040c0
 8002518:	20000334 	.word	0x20000334
 800251c:	40020400 	.word	0x40020400

08002520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
}
 8002526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002528:	e7fe      	b.n	8002528 <Error_Handler+0x8>
	...

0800252c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_MspInit+0x54>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_MspInit+0x54>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_MspInit+0x54>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_MspInit+0x54>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_MspInit+0x54>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_MspInit+0x54>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	210f      	movs	r1, #15
 800256e:	f06f 0001 	mvn.w	r0, #1
 8002572:	f001 fdc0 	bl	80040f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800

08002584 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3c      	ldr	r2, [pc, #240]	; (8002694 <HAL_ADC_MspInit+0x110>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d171      	bne.n	800268a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_ADC_MspInit+0x114>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a3a      	ldr	r2, [pc, #232]	; (8002698 <HAL_ADC_MspInit+0x114>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b38      	ldr	r3, [pc, #224]	; (8002698 <HAL_ADC_MspInit+0x114>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_ADC_MspInit+0x114>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a33      	ldr	r2, [pc, #204]	; (8002698 <HAL_ADC_MspInit+0x114>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_ADC_MspInit+0x114>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_ADC_MspInit+0x114>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <HAL_ADC_MspInit+0x114>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <HAL_ADC_MspInit+0x114>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80025fa:	23ff      	movs	r3, #255	; 0xff
 80025fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025fe:	2303      	movs	r3, #3
 8002600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	4823      	ldr	r0, [pc, #140]	; (800269c <HAL_ADC_MspInit+0x118>)
 800260e:	f002 f925 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002612:	2303      	movs	r3, #3
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002616:	2303      	movs	r3, #3
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	481e      	ldr	r0, [pc, #120]	; (80026a0 <HAL_ADC_MspInit+0x11c>)
 8002626:	f002 f919 	bl	800485c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 800262c:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_ADC_MspInit+0x124>)
 800262e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002630:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 8002632:	2200      	movs	r2, #0
 8002634:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002642:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 8002644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002648:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800264a:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 800264c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002650:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 8002654:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002658:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 800265c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002660:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 8002664:	2200      	movs	r2, #0
 8002666:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 800266a:	2200      	movs	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800266e:	480d      	ldr	r0, [pc, #52]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 8002670:	f001 fd78 	bl	8004164 <HAL_DMA_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800267a:	f7ff ff51 	bl	8002520 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 8002682:	639a      	str	r2, [r3, #56]	; 0x38
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_ADC_MspInit+0x120>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3728      	adds	r7, #40	; 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40012000 	.word	0x40012000
 8002698:	40023800 	.word	0x40023800
 800269c:	40020000 	.word	0x40020000
 80026a0:	40020400 	.word	0x40020400
 80026a4:	20004198 	.word	0x20004198
 80026a8:	40026410 	.word	0x40026410

080026ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a21      	ldr	r2, [pc, #132]	; (8002750 <HAL_CAN_MspInit+0xa4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d13c      	bne.n	8002748 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_CAN_MspInit+0xa8>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_CAN_MspInit+0xa8>)
 80026d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_CAN_MspInit+0xa8>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_CAN_MspInit+0xa8>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <HAL_CAN_MspInit+0xa8>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_CAN_MspInit+0xa8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002718:	2309      	movs	r3, #9
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	480d      	ldr	r0, [pc, #52]	; (8002758 <HAL_CAN_MspInit+0xac>)
 8002724:	f002 f89a 	bl	800485c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	2105      	movs	r1, #5
 800272c:	2013      	movs	r0, #19
 800272e:	f001 fce2 	bl	80040f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002732:	2013      	movs	r0, #19
 8002734:	f001 fcfb 	bl	800412e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	2105      	movs	r1, #5
 800273c:	2014      	movs	r0, #20
 800273e:	f001 fcda 	bl	80040f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002742:	2014      	movs	r0, #20
 8002744:	f001 fcf3 	bl	800412e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002748:	bf00      	nop
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40006400 	.word	0x40006400
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000

0800275c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_I2C_MspInit+0x84>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d12b      	bne.n	80027d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_I2C_MspInit+0x88>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <HAL_I2C_MspInit+0x88>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_I2C_MspInit+0x88>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279e:	2312      	movs	r3, #18
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027aa:	2304      	movs	r3, #4
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	480c      	ldr	r0, [pc, #48]	; (80027e8 <HAL_I2C_MspInit+0x8c>)
 80027b6:	f002 f851 	bl	800485c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_I2C_MspInit+0x88>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_I2C_MspInit+0x88>)
 80027c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_I2C_MspInit+0x88>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40005400 	.word	0x40005400
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020400 	.word	0x40020400

080027ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <NMI_Handler+0x4>

080027f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <HardFault_Handler+0x4>

080027f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <MemManage_Handler+0x4>

080027fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <BusFault_Handler+0x4>

08002804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <UsageFault_Handler+0x4>

0800280a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281c:	f000 f8ec 	bl	80029f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002820:	f004 f864 	bl	80068ec <xTaskGetSchedulerState>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800282a:	f004 faa5 	bl	8006d78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <CAN1_TX_IRQHandler+0x10>)
 800283a:	f001 f952 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000421c 	.word	0x2000421c

08002848 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <CAN1_RX0_IRQHandler+0x10>)
 800284e:	f001 f948 	bl	8003ae2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000421c 	.word	0x2000421c

0800285c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <DMA2_Stream0_IRQHandler+0x10>)
 8002862:	f001 fd85 	bl	8004370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20004198 	.word	0x20004198

08002870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <_sbrk+0x5c>)
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <_sbrk+0x60>)
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <_sbrk+0x64>)
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <_sbrk+0x68>)
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <_sbrk+0x64>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d207      	bcs.n	80028b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a0:	f004 fca4 	bl	80071ec <__errno>
 80028a4:	4603      	mov	r3, r0
 80028a6:	220c      	movs	r2, #12
 80028a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	e009      	b.n	80028c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <_sbrk+0x64>)
 80028c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028c2:	68fb      	ldr	r3, [r7, #12]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20050000 	.word	0x20050000
 80028d0:	00000400 	.word	0x00000400
 80028d4:	20000338 	.word	0x20000338
 80028d8:	200042a0 	.word	0x200042a0

080028dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <SystemInit+0x20>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <SystemInit+0x20>)
 80028e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002906:	490e      	ldr	r1, [pc, #56]	; (8002940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002908:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800290c:	e002      	b.n	8002914 <LoopCopyDataInit>

0800290e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002912:	3304      	adds	r3, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002918:	d3f9      	bcc.n	800290e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800291c:	4c0b      	ldr	r4, [pc, #44]	; (800294c <LoopFillZerobss+0x26>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002920:	e001      	b.n	8002926 <LoopFillZerobss>

08002922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002924:	3204      	adds	r2, #4

08002926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002928:	d3fb      	bcc.n	8002922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800292a:	f7ff ffd7 	bl	80028dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292e:	f004 fc63 	bl	80071f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002932:	f7fe fd0b 	bl	800134c <main>
  bx  lr    
 8002936:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002938:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002940:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002944:	08007c08 	.word	0x08007c08
  ldr r2, =_sbss
 8002948:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800294c:	2000429c 	.word	0x2000429c

08002950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002950:	e7fe      	b.n	8002950 <ADC_IRQHandler>
	...

08002954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_Init+0x40>)
 800295e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_Init+0x40>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_Init+0x40>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f001 fbaf 	bl	80040e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff fdd0 	bl	800252c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 fbc7 	bl	800414a <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f001 fb8f 	bl	80040f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000004 	.word	0x20000004
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	20000008 	.word	0x20000008

080029f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_IncTick+0x20>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_IncTick+0x24>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <HAL_IncTick+0x24>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	2000000c 	.word	0x2000000c
 8002a1c:	20004288 	.word	0x20004288

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20004288 	.word	0x20004288

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d005      	beq.n	8002a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_Delay+0x44>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a5e:	bf00      	nop
 8002a60:	f7ff ffde 	bl	8002a20 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d8f7      	bhi.n	8002a60 <HAL_Delay+0x28>
  {
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000000c 	.word	0x2000000c

08002a80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e033      	b.n	8002afe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff fd70 	bl	8002584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d118      	bne.n	8002af0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ac6:	f023 0302 	bic.w	r3, r3, #2
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 faca 	bl	800306c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
 8002aee:	e001      	b.n	8002af4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_Start+0x1a>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e097      	b.n	8002c52 <HAL_ADC_Start+0x14a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d018      	beq.n	8002b6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b48:	4b45      	ldr	r3, [pc, #276]	; (8002c60 <HAL_ADC_Start+0x158>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a45      	ldr	r2, [pc, #276]	; (8002c64 <HAL_ADC_Start+0x15c>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9a      	lsrs	r2, r3, #18
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d15f      	bne.n	8002c38 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ba2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f023 0206 	bic.w	r2, r3, #6
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_ADC_Start+0x160>)
 8002bd6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002be0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d129      	bne.n	8002c50 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e020      	b.n	8002c50 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <HAL_ADC_Start+0x164>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d11b      	bne.n	8002c50 <HAL_ADC_Start+0x148>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d114      	bne.n	8002c50 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	e00b      	b.n	8002c50 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f043 0210 	orr.w	r2, r3, #16
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000004 	.word	0x20000004
 8002c64:	431bde83 	.word	0x431bde83
 8002c68:	40012300 	.word	0x40012300
 8002c6c:	40012000 	.word	0x40012000

08002c70 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Stop+0x16>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e021      	b.n	8002cca <HAL_ADC_Stop+0x5a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf2:	d113      	bne.n	8002d1c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d02:	d10b      	bne.n	8002d1c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e063      	b.n	8002de4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d1c:	f7ff fe80 	bl	8002a20 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d22:	e021      	b.n	8002d68 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d01d      	beq.n	8002d68 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_ADC_PollForConversion+0x6c>
 8002d32:	f7ff fe75 	bl	8002a20 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d212      	bcs.n	8002d68 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d00b      	beq.n	8002d68 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e03d      	b.n	8002de4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d1d6      	bne.n	8002d24 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f06f 0212 	mvn.w	r2, #18
 8002d7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d123      	bne.n	8002de2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11f      	bne.n	8002de2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d111      	bne.n	8002de2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x1c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e113      	b.n	800304c <HAL_ADC_ConfigChannel+0x244>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d925      	bls.n	8002e80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68d9      	ldr	r1, [r3, #12]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	3b1e      	subs	r3, #30
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43da      	mvns	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	400a      	ands	r2, r1
 8002e58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68d9      	ldr	r1, [r3, #12]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4403      	add	r3, r0
 8002e72:	3b1e      	subs	r3, #30
 8002e74:	409a      	lsls	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	e022      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6919      	ldr	r1, [r3, #16]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	2207      	movs	r2, #7
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6919      	ldr	r1, [r3, #16]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4403      	add	r3, r0
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d824      	bhi.n	8002f18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3b05      	subs	r3, #5
 8002ee0:	221f      	movs	r2, #31
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	400a      	ands	r2, r1
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	4618      	mov	r0, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	3b05      	subs	r3, #5
 8002f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
 8002f16:	e04c      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d824      	bhi.n	8002f6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	3b23      	subs	r3, #35	; 0x23
 8002f32:	221f      	movs	r2, #31
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	400a      	ands	r2, r1
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b23      	subs	r3, #35	; 0x23
 8002f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
 8002f68:	e023      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b41      	subs	r3, #65	; 0x41
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	400a      	ands	r2, r1
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b41      	subs	r3, #65	; 0x41
 8002fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_ADC_ConfigChannel+0x250>)
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a28      	ldr	r2, [pc, #160]	; (800305c <HAL_ADC_ConfigChannel+0x254>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d8>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b12      	cmp	r3, #18
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_ADC_ConfigChannel+0x254>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12b      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x23a>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_ADC_ConfigChannel+0x258>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0x1f4>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b11      	cmp	r3, #17
 8002ffa:	d122      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a11      	ldr	r2, [pc, #68]	; (8003060 <HAL_ADC_ConfigChannel+0x258>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d111      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_ADC_ConfigChannel+0x25c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <HAL_ADC_ConfigChannel+0x260>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	0c9a      	lsrs	r2, r3, #18
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003034:	e002      	b.n	800303c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3b01      	subs	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f9      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40012300 	.word	0x40012300
 800305c:	40012000 	.word	0x40012000
 8003060:	10000012 	.word	0x10000012
 8003064:	20000004 	.word	0x20000004
 8003068:	431bde83 	.word	0x431bde83

0800306c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003074:	4b79      	ldr	r3, [pc, #484]	; (800325c <ADC_Init+0x1f0>)
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	021a      	lsls	r2, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	4a58      	ldr	r2, [pc, #352]	; (8003260 <ADC_Init+0x1f4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e00f      	b.n	800316a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0202 	bic.w	r2, r2, #2
 8003178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e1b      	ldrb	r3, [r3, #24]
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	3b01      	subs	r3, #1
 80031c4:	035a      	lsls	r2, r3, #13
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	e007      	b.n	80031e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	051a      	lsls	r2, r3, #20
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003222:	025a      	lsls	r2, r3, #9
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	029a      	lsls	r2, r3, #10
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40012300 	.word	0x40012300
 8003260:	0f000001 	.word	0x0f000001

08003264 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0ed      	b.n	8003452 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fa12 	bl	80026ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003298:	f7ff fbc2 	bl	8002a20 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800329e:	e012      	b.n	80032c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032a0:	f7ff fbbe 	bl	8002a20 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b0a      	cmp	r3, #10
 80032ac:	d90b      	bls.n	80032c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2205      	movs	r2, #5
 80032be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0c5      	b.n	8003452 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0e5      	beq.n	80032a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0202 	bic.w	r2, r2, #2
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e4:	f7ff fb9c 	bl	8002a20 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032ea:	e012      	b.n	8003312 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032ec:	f7ff fb98 	bl	8002a20 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b0a      	cmp	r3, #10
 80032f8:	d90b      	bls.n	8003312 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2205      	movs	r2, #5
 800330a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e09f      	b.n	8003452 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e5      	bne.n	80032ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7e1b      	ldrb	r3, [r3, #24]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d108      	bne.n	800333a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e007      	b.n	800334a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003348:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7e5b      	ldrb	r3, [r3, #25]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e007      	b.n	8003374 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	7e9b      	ldrb	r3, [r3, #26]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d108      	bne.n	800338e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0220 	orr.w	r2, r2, #32
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e007      	b.n	800339e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0220 	bic.w	r2, r2, #32
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7edb      	ldrb	r3, [r3, #27]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d108      	bne.n	80033b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0210 	bic.w	r2, r2, #16
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e007      	b.n	80033c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0210 	orr.w	r2, r2, #16
 80033c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	7f1b      	ldrb	r3, [r3, #28]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d108      	bne.n	80033e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0208 	orr.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e007      	b.n	80033f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0208 	bic.w	r2, r2, #8
 80033f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7f5b      	ldrb	r3, [r3, #29]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d108      	bne.n	800340c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0204 	orr.w	r2, r2, #4
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e007      	b.n	800341c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0204 	bic.w	r2, r2, #4
 800341a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	ea42 0103 	orr.w	r1, r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	1e5a      	subs	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003472:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d003      	beq.n	8003482 <HAL_CAN_ConfigFilter+0x26>
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b02      	cmp	r3, #2
 800347e:	f040 80c7 	bne.w	8003610 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a69      	ldr	r2, [pc, #420]	; (800362c <HAL_CAN_ConfigFilter+0x1d0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d001      	beq.n	8003490 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800348c:	4b68      	ldr	r3, [pc, #416]	; (8003630 <HAL_CAN_ConfigFilter+0x1d4>)
 800348e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	4a63      	ldr	r2, [pc, #396]	; (8003630 <HAL_CAN_ConfigFilter+0x1d4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d111      	bne.n	80034cc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	431a      	orrs	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	2201      	movs	r2, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d123      	bne.n	800353e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43db      	mvns	r3, r3
 8003500:	401a      	ands	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003518:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	3248      	adds	r2, #72	; 0x48
 800351e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003532:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003534:	6979      	ldr	r1, [r7, #20]
 8003536:	3348      	adds	r3, #72	; 0x48
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d122      	bne.n	800358c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	431a      	orrs	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003566:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3248      	adds	r2, #72	; 0x48
 800356c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003580:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003582:	6979      	ldr	r1, [r7, #20]
 8003584:	3348      	adds	r3, #72	; 0x48
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	440b      	add	r3, r1
 800358a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	43db      	mvns	r3, r3
 800359e:	401a      	ands	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035a6:	e007      	b.n	80035b8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80035d2:	e007      	b.n	80035e4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	431a      	orrs	r2, r3
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003602:	f023 0201 	bic.w	r2, r3, #1
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e006      	b.n	800361e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40006c00 	.word	0x40006c00
 8003630:	40006400 	.word	0x40006400

08003634 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d12e      	bne.n	80036a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003660:	f7ff f9de 	bl	8002a20 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003666:	e012      	b.n	800368e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003668:	f7ff f9da 	bl	8002a20 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b0a      	cmp	r3, #10
 8003674:	d90b      	bls.n	800368e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2205      	movs	r2, #5
 8003686:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e012      	b.n	80036b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e006      	b.n	80036b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
  }
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80036da:	7ffb      	ldrb	r3, [r7, #31]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d003      	beq.n	80036e8 <HAL_CAN_AddTxMessage+0x2c>
 80036e0:	7ffb      	ldrb	r3, [r7, #31]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	f040 80b8 	bne.w	8003858 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80a0 	beq.w	8003848 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	0e1b      	lsrs	r3, r3, #24
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d907      	bls.n	8003728 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e09e      	b.n	8003866 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003728:	2201      	movs	r2, #1
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	409a      	lsls	r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10d      	bne.n	8003756 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	6809      	ldr	r1, [r1, #0]
 8003748:	431a      	orrs	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3318      	adds	r3, #24
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	440b      	add	r3, r1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e00f      	b.n	8003776 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003760:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800376a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	3318      	adds	r3, #24
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	440b      	add	r3, r1
 8003774:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3318      	adds	r3, #24
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	440b      	add	r3, r1
 8003786:	3304      	adds	r3, #4
 8003788:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	7d1b      	ldrb	r3, [r3, #20]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d111      	bne.n	80037b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3318      	adds	r3, #24
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	3304      	adds	r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3318      	adds	r3, #24
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	440b      	add	r3, r1
 80037b2:	3304      	adds	r3, #4
 80037b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3307      	adds	r3, #7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	061a      	lsls	r2, r3, #24
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3306      	adds	r3, #6
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3305      	adds	r3, #5
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	4313      	orrs	r3, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	3204      	adds	r2, #4
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	4610      	mov	r0, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6811      	ldr	r1, [r2, #0]
 80037de:	ea43 0200 	orr.w	r2, r3, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80037ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3303      	adds	r3, #3
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	061a      	lsls	r2, r3, #24
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3302      	adds	r3, #2
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3301      	adds	r3, #1
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	4313      	orrs	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	4610      	mov	r0, r2
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	6811      	ldr	r1, [r2, #0]
 8003814:	ea43 0200 	orr.w	r2, r3, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	440b      	add	r3, r1
 800381e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003822:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	3318      	adds	r3, #24
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	4413      	add	r3, r2
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	6811      	ldr	r1, [r2, #0]
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3318      	adds	r3, #24
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	440b      	add	r3, r1
 8003842:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e00e      	b.n	8003866 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e006      	b.n	8003866 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003872:	b480      	push	{r7}
 8003874:	b087      	sub	sp, #28
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003886:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d003      	beq.n	8003896 <HAL_CAN_GetRxMessage+0x24>
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b02      	cmp	r3, #2
 8003892:	f040 80f3 	bne.w	8003a7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10e      	bne.n	80038ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d116      	bne.n	80038d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0e7      	b.n	8003a8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0d8      	b.n	8003a8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	331b      	adds	r3, #27
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	4413      	add	r3, r2
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0204 	and.w	r2, r3, #4
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	331b      	adds	r3, #27
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4413      	add	r3, r2
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0d5b      	lsrs	r3, r3, #21
 8003906:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e00b      	b.n	8003928 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	331b      	adds	r3, #27
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4413      	add	r3, r2
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	331b      	adds	r3, #27
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	4413      	add	r3, r2
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0202 	and.w	r2, r3, #2
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	331b      	adds	r3, #27
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	4413      	add	r3, r2
 800394a:	3304      	adds	r3, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	331b      	adds	r3, #27
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	4413      	add	r3, r2
 8003962:	3304      	adds	r3, #4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	b2da      	uxtb	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	331b      	adds	r3, #27
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	b29a      	uxth	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	4413      	add	r3, r2
 8003990:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0a1a      	lsrs	r2, r3, #8
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	4413      	add	r3, r2
 80039c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0c1a      	lsrs	r2, r3, #16
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	3302      	adds	r3, #2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	4413      	add	r3, r2
 80039da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0e1a      	lsrs	r2, r3, #24
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	3303      	adds	r3, #3
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	3304      	adds	r3, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0a1a      	lsrs	r2, r3, #8
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	3305      	adds	r3, #5
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0c1a      	lsrs	r2, r3, #16
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	3306      	adds	r3, #6
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0e1a      	lsrs	r2, r3, #24
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	3307      	adds	r3, #7
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0220 	orr.w	r2, r2, #32
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e007      	b.n	8003a78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0220 	orr.w	r2, r2, #32
 8003a76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e006      	b.n	8003a8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d002      	beq.n	8003ab4 <HAL_CAN_ActivateNotification+0x1e>
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d109      	bne.n	8003ac8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6959      	ldr	r1, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e006      	b.n	8003ad6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b08a      	sub	sp, #40	; 0x28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d07c      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d023      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f983 	bl	8003e50 <HAL_CAN_TxMailbox0CompleteCallback>
 8003b4a:	e016      	b.n	8003b7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	e00c      	b.n	8003b7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
 8003b72:	e002      	b.n	8003b7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f989 	bl	8003e8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d024      	beq.n	8003bce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f963 	bl	8003e64 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b9e:	e016      	b.n	8003bce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	e00c      	b.n	8003bce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	e002      	b.n	8003bce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f969 	bl	8003ea0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d024      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003be0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f943 	bl	8003e78 <HAL_CAN_TxMailbox2CompleteCallback>
 8003bf2:	e016      	b.n	8003c22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	e00c      	b.n	8003c22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	e002      	b.n	8003c22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f949 	bl	8003eb4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2210      	movs	r2, #16
 8003c44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d006      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f930 	bl	8003ec8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fd fdb5 	bl	80017f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f912 	bl	8003ef0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f8f9 	bl	8003edc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d006      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2210      	movs	r2, #16
 8003d04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8fc 	bl	8003f04 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d006      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8f5 	bl	8003f18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d07b      	beq.n	8003e30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d072      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d043      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03e      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003db0:	2b60      	cmp	r3, #96	; 0x60
 8003db2:	d02b      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x32a>
 8003db4:	2b60      	cmp	r3, #96	; 0x60
 8003db6:	d82e      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d022      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x320>
 8003dbc:	2b50      	cmp	r3, #80	; 0x50
 8003dbe:	d82a      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d019      	beq.n	8003df8 <HAL_CAN_IRQHandler+0x316>
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d826      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d010      	beq.n	8003dee <HAL_CAN_IRQHandler+0x30c>
 8003dcc:	2b30      	cmp	r3, #48	; 0x30
 8003dce:	d822      	bhi.n	8003e16 <HAL_CAN_IRQHandler+0x334>
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d002      	beq.n	8003dda <HAL_CAN_IRQHandler+0x2f8>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d005      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003dd8:	e01d      	b.n	8003e16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	f043 0308 	orr.w	r3, r3, #8
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003de2:	e019      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f043 0310 	orr.w	r3, r3, #16
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003dec:	e014      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	f043 0320 	orr.w	r3, r3, #32
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003df6:	e00f      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e00:	e00a      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e0a:	e005      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e14:	e000      	b.n	8003e18 <HAL_CAN_IRQHandler+0x336>
            break;
 8003e16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f872 	bl	8003f2c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3728      	adds	r7, #40	; 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <__NVIC_SetPriorityGrouping+0x44>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <__NVIC_SetPriorityGrouping+0x44>)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	60d3      	str	r3, [r2, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	0a1b      	lsrs	r3, r3, #8
 8003f92:	f003 0307 	and.w	r3, r3, #7
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	db0b      	blt.n	8003fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	f003 021f 	and.w	r2, r3, #31
 8003fbc:	4907      	ldr	r1, [pc, #28]	; (8003fdc <__NVIC_EnableIRQ+0x38>)
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000e100 	.word	0xe000e100

08003fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	6039      	str	r1, [r7, #0]
 8003fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	db0a      	blt.n	800400a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	490c      	ldr	r1, [pc, #48]	; (800402c <__NVIC_SetPriority+0x4c>)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	0112      	lsls	r2, r2, #4
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	440b      	add	r3, r1
 8004004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004008:	e00a      	b.n	8004020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4908      	ldr	r1, [pc, #32]	; (8004030 <__NVIC_SetPriority+0x50>)
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	3b04      	subs	r3, #4
 8004018:	0112      	lsls	r2, r2, #4
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	440b      	add	r3, r1
 800401e:	761a      	strb	r2, [r3, #24]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000e100 	.word	0xe000e100
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004034:	b480      	push	{r7}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f1c3 0307 	rsb	r3, r3, #7
 800404e:	2b04      	cmp	r3, #4
 8004050:	bf28      	it	cs
 8004052:	2304      	movcs	r3, #4
 8004054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3304      	adds	r3, #4
 800405a:	2b06      	cmp	r3, #6
 800405c:	d902      	bls.n	8004064 <NVIC_EncodePriority+0x30>
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3b03      	subs	r3, #3
 8004062:	e000      	b.n	8004066 <NVIC_EncodePriority+0x32>
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43da      	mvns	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	401a      	ands	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800407c:	f04f 31ff 	mov.w	r1, #4294967295
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43d9      	mvns	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800408c:	4313      	orrs	r3, r2
         );
}
 800408e:	4618      	mov	r0, r3
 8004090:	3724      	adds	r7, #36	; 0x24
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ac:	d301      	bcc.n	80040b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ae:	2301      	movs	r3, #1
 80040b0:	e00f      	b.n	80040d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <SysTick_Config+0x40>)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ba:	210f      	movs	r1, #15
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
 80040c0:	f7ff ff8e 	bl	8003fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <SysTick_Config+0x40>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ca:	4b04      	ldr	r3, [pc, #16]	; (80040dc <SysTick_Config+0x40>)
 80040cc:	2207      	movs	r2, #7
 80040ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	e000e010 	.word	0xe000e010

080040e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ff29 	bl	8003f40 <__NVIC_SetPriorityGrouping>
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	4603      	mov	r3, r0
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004108:	f7ff ff3e 	bl	8003f88 <__NVIC_GetPriorityGrouping>
 800410c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	6978      	ldr	r0, [r7, #20]
 8004114:	f7ff ff8e 	bl	8004034 <NVIC_EncodePriority>
 8004118:	4602      	mov	r2, r0
 800411a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff5d 	bl	8003fe0 <__NVIC_SetPriority>
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	4603      	mov	r3, r0
 8004136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ff31 	bl	8003fa4 <__NVIC_EnableIRQ>
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff ffa2 	bl	800409c <SysTick_Config>
 8004158:	4603      	mov	r3, r0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004170:	f7fe fc56 	bl	8002a20 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e099      	b.n	80042b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a0:	e00f      	b.n	80041c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041a2:	f7fe fc3d 	bl	8002a20 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b05      	cmp	r3, #5
 80041ae:	d908      	bls.n	80041c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2203      	movs	r2, #3
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e078      	b.n	80042b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e8      	bne.n	80041a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4b38      	ldr	r3, [pc, #224]	; (80042bc <HAL_DMA_Init+0x158>)
 80041dc:	4013      	ands	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b04      	cmp	r3, #4
 800421a:	d107      	bne.n	800422c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	4313      	orrs	r3, r2
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0307 	bic.w	r3, r3, #7
 8004242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	2b04      	cmp	r3, #4
 8004254:	d117      	bne.n	8004286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fa7b 	bl	8004764 <DMA_CheckFifoParam>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2240      	movs	r2, #64	; 0x40
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004282:	2301      	movs	r3, #1
 8004284:	e016      	b.n	80042b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fa32 	bl	80046f8 <DMA_CalcBaseAndBitshift>
 8004294:	4603      	mov	r3, r0
 8004296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	223f      	movs	r2, #63	; 0x3f
 800429e:	409a      	lsls	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	e010803f 	.word	0xe010803f

080042c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_DMA_Start_IT+0x26>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e040      	b.n	8004368 <HAL_DMA_Start_IT+0xa8>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d12f      	bne.n	800435a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2202      	movs	r2, #2
 80042fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f9c4 	bl	800469c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	223f      	movs	r2, #63	; 0x3f
 800431a:	409a      	lsls	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0216 	orr.w	r2, r2, #22
 800432e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0208 	orr.w	r2, r2, #8
 8004346:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e005      	b.n	8004366 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004362:	2302      	movs	r3, #2
 8004364:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004366:	7dfb      	ldrb	r3, [r7, #23]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800437c:	4b92      	ldr	r3, [pc, #584]	; (80045c8 <HAL_DMA_IRQHandler+0x258>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a92      	ldr	r2, [pc, #584]	; (80045cc <HAL_DMA_IRQHandler+0x25c>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0a9b      	lsrs	r3, r3, #10
 8004388:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439a:	2208      	movs	r2, #8
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01a      	beq.n	80043dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0204 	bic.w	r2, r2, #4
 80043c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c8:	2208      	movs	r2, #8
 80043ca:	409a      	lsls	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	f043 0201 	orr.w	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	2201      	movs	r2, #1
 80043e2:	409a      	lsls	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d012      	beq.n	8004412 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fe:	2201      	movs	r2, #1
 8004400:	409a      	lsls	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f043 0202 	orr.w	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004416:	2204      	movs	r2, #4
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d012      	beq.n	8004448 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	2204      	movs	r2, #4
 8004436:	409a      	lsls	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	f043 0204 	orr.w	r2, r3, #4
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	2210      	movs	r2, #16
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d043      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d03c      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	2210      	movs	r2, #16
 800446c:	409a      	lsls	r2, r3
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d018      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d024      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
 800449e:	e01f      	b.n	80044e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
 80044b0:	e016      	b.n	80044e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d107      	bne.n	80044d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0208 	bic.w	r2, r2, #8
 80044ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e4:	2220      	movs	r2, #32
 80044e6:	409a      	lsls	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 808e 	beq.w	800460e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8086 	beq.w	800460e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004506:	2220      	movs	r2, #32
 8004508:	409a      	lsls	r2, r3
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b05      	cmp	r3, #5
 8004518:	d136      	bne.n	8004588 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0216 	bic.w	r2, r2, #22
 8004528:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004538:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <HAL_DMA_IRQHandler+0x1da>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0208 	bic.w	r2, r2, #8
 8004558:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	223f      	movs	r2, #63	; 0x3f
 8004560:	409a      	lsls	r2, r3
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457a:	2b00      	cmp	r3, #0
 800457c:	d07d      	beq.n	800467a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4798      	blx	r3
        }
        return;
 8004586:	e078      	b.n	800467a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01c      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d108      	bne.n	80045b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d030      	beq.n	800460e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
 80045b4:	e02b      	b.n	800460e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d027      	beq.n	800460e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
 80045c6:	e022      	b.n	800460e <HAL_DMA_IRQHandler+0x29e>
 80045c8:	20000004 	.word	0x20000004
 80045cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0210 	bic.w	r2, r2, #16
 80045ec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	2b00      	cmp	r3, #0
 8004614:	d032      	beq.n	800467c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d022      	beq.n	8004668 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2205      	movs	r2, #5
 8004626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0201 	bic.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3301      	adds	r3, #1
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	429a      	cmp	r2, r3
 8004644:	d307      	bcc.n	8004656 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f2      	bne.n	800463a <HAL_DMA_IRQHandler+0x2ca>
 8004654:	e000      	b.n	8004658 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004656:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
 8004678:	e000      	b.n	800467c <HAL_DMA_IRQHandler+0x30c>
        return;
 800467a:	bf00      	nop
    }
  }
}
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop

08004684 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d108      	bne.n	80046dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046da:	e007      	b.n	80046ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	3b10      	subs	r3, #16
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <DMA_CalcBaseAndBitshift+0x64>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004712:	4a13      	ldr	r2, [pc, #76]	; (8004760 <DMA_CalcBaseAndBitshift+0x68>)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d909      	bls.n	800473a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	1d1a      	adds	r2, r3, #4
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	659a      	str	r2, [r3, #88]	; 0x58
 8004738:	e007      	b.n	800474a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	aaaaaaab 	.word	0xaaaaaaab
 8004760:	08007bbc 	.word	0x08007bbc

08004764 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11f      	bne.n	80047be <DMA_CheckFifoParam+0x5a>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d856      	bhi.n	8004832 <DMA_CheckFifoParam+0xce>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <DMA_CheckFifoParam+0x28>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	0800479d 	.word	0x0800479d
 8004790:	080047af 	.word	0x080047af
 8004794:	0800479d 	.word	0x0800479d
 8004798:	08004833 	.word	0x08004833
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d046      	beq.n	8004836 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ac:	e043      	b.n	8004836 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047b6:	d140      	bne.n	800483a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047bc:	e03d      	b.n	800483a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c6:	d121      	bne.n	800480c <DMA_CheckFifoParam+0xa8>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d837      	bhi.n	800483e <DMA_CheckFifoParam+0xda>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <DMA_CheckFifoParam+0x70>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	080047eb 	.word	0x080047eb
 80047dc:	080047e5 	.word	0x080047e5
 80047e0:	080047fd 	.word	0x080047fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      break;
 80047e8:	e030      	b.n	800484c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d025      	beq.n	8004842 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fa:	e022      	b.n	8004842 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004804:	d11f      	bne.n	8004846 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800480a:	e01c      	b.n	8004846 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d903      	bls.n	800481a <DMA_CheckFifoParam+0xb6>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d003      	beq.n	8004820 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004818:	e018      	b.n	800484c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
      break;
 800481e:	e015      	b.n	800484c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00e      	beq.n	800484a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      break;
 8004830:	e00b      	b.n	800484a <DMA_CheckFifoParam+0xe6>
      break;
 8004832:	bf00      	nop
 8004834:	e00a      	b.n	800484c <DMA_CheckFifoParam+0xe8>
      break;
 8004836:	bf00      	nop
 8004838:	e008      	b.n	800484c <DMA_CheckFifoParam+0xe8>
      break;
 800483a:	bf00      	nop
 800483c:	e006      	b.n	800484c <DMA_CheckFifoParam+0xe8>
      break;
 800483e:	bf00      	nop
 8004840:	e004      	b.n	800484c <DMA_CheckFifoParam+0xe8>
      break;
 8004842:	bf00      	nop
 8004844:	e002      	b.n	800484c <DMA_CheckFifoParam+0xe8>
      break;   
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <DMA_CheckFifoParam+0xe8>
      break;
 800484a:	bf00      	nop
    }
  } 
  
  return status; 
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
 8004876:	e165      	b.n	8004b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004878:	2201      	movs	r2, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	429a      	cmp	r2, r3
 8004892:	f040 8154 	bne.w	8004b3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d005      	beq.n	80048ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d130      	bne.n	8004910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	2203      	movs	r2, #3
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048e4:	2201      	movs	r2, #1
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	f003 0201 	and.w	r2, r3, #1
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4313      	orrs	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b03      	cmp	r3, #3
 800491a:	d017      	beq.n	800494c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	2203      	movs	r2, #3
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4313      	orrs	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d123      	bne.n	80049a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	08da      	lsrs	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3208      	adds	r2, #8
 8004960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	220f      	movs	r2, #15
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4013      	ands	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	08da      	lsrs	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3208      	adds	r2, #8
 800499a:	69b9      	ldr	r1, [r7, #24]
 800499c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	2203      	movs	r2, #3
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 0203 	and.w	r2, r3, #3
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80ae 	beq.w	8004b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <HAL_GPIO_Init+0x300>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	4a5c      	ldr	r2, [pc, #368]	; (8004b5c <HAL_GPIO_Init+0x300>)
 80049ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f0:	6453      	str	r3, [r2, #68]	; 0x44
 80049f2:	4b5a      	ldr	r3, [pc, #360]	; (8004b5c <HAL_GPIO_Init+0x300>)
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049fe:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <HAL_GPIO_Init+0x304>)
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	089b      	lsrs	r3, r3, #2
 8004a04:	3302      	adds	r3, #2
 8004a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	220f      	movs	r2, #15
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a4f      	ldr	r2, [pc, #316]	; (8004b64 <HAL_GPIO_Init+0x308>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d025      	beq.n	8004a76 <HAL_GPIO_Init+0x21a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a4e      	ldr	r2, [pc, #312]	; (8004b68 <HAL_GPIO_Init+0x30c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01f      	beq.n	8004a72 <HAL_GPIO_Init+0x216>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a4d      	ldr	r2, [pc, #308]	; (8004b6c <HAL_GPIO_Init+0x310>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d019      	beq.n	8004a6e <HAL_GPIO_Init+0x212>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a4c      	ldr	r2, [pc, #304]	; (8004b70 <HAL_GPIO_Init+0x314>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_GPIO_Init+0x20e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a4b      	ldr	r2, [pc, #300]	; (8004b74 <HAL_GPIO_Init+0x318>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00d      	beq.n	8004a66 <HAL_GPIO_Init+0x20a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a4a      	ldr	r2, [pc, #296]	; (8004b78 <HAL_GPIO_Init+0x31c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <HAL_GPIO_Init+0x206>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a49      	ldr	r2, [pc, #292]	; (8004b7c <HAL_GPIO_Init+0x320>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d101      	bne.n	8004a5e <HAL_GPIO_Init+0x202>
 8004a5a:	2306      	movs	r3, #6
 8004a5c:	e00c      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a5e:	2307      	movs	r3, #7
 8004a60:	e00a      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a62:	2305      	movs	r3, #5
 8004a64:	e008      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a66:	2304      	movs	r3, #4
 8004a68:	e006      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e004      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e002      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a76:	2300      	movs	r3, #0
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	f002 0203 	and.w	r2, r2, #3
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	4093      	lsls	r3, r2
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a88:	4935      	ldr	r1, [pc, #212]	; (8004b60 <HAL_GPIO_Init+0x304>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	3302      	adds	r3, #2
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a96:	4b3a      	ldr	r3, [pc, #232]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aba:	4a31      	ldr	r2, [pc, #196]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ac0:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ae4:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aea:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b38:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	f67f ae96 	bls.w	8004878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3724      	adds	r7, #36	; 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40020000 	.word	0x40020000
 8004b68:	40020400 	.word	0x40020400
 8004b6c:	40020800 	.word	0x40020800
 8004b70:	40020c00 	.word	0x40020c00
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40021400 	.word	0x40021400
 8004b7c:	40021800 	.word	0x40021800
 8004b80:	40013c00 	.word	0x40013c00

08004b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	e001      	b.n	8004ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bc4:	787b      	ldrb	r3, [r7, #1]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bd0:	e003      	b.n	8004bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bd2:	887b      	ldrh	r3, [r7, #2]
 8004bd4:	041a      	lsls	r2, r3, #16
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	619a      	str	r2, [r3, #24]
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e12b      	b.n	8004e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fd fda4 	bl	800275c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2224      	movs	r2, #36	; 0x24
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f000 fd3a 	bl	80056c4 <HAL_RCC_GetPCLK1Freq>
 8004c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4a81      	ldr	r2, [pc, #516]	; (8004e5c <HAL_I2C_Init+0x274>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d807      	bhi.n	8004c6c <HAL_I2C_Init+0x84>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a80      	ldr	r2, [pc, #512]	; (8004e60 <HAL_I2C_Init+0x278>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	bf94      	ite	ls
 8004c64:	2301      	movls	r3, #1
 8004c66:	2300      	movhi	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	e006      	b.n	8004c7a <HAL_I2C_Init+0x92>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a7d      	ldr	r2, [pc, #500]	; (8004e64 <HAL_I2C_Init+0x27c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	bf94      	ite	ls
 8004c74:	2301      	movls	r3, #1
 8004c76:	2300      	movhi	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e0e7      	b.n	8004e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a78      	ldr	r2, [pc, #480]	; (8004e68 <HAL_I2C_Init+0x280>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	0c9b      	lsrs	r3, r3, #18
 8004c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4a6a      	ldr	r2, [pc, #424]	; (8004e5c <HAL_I2C_Init+0x274>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d802      	bhi.n	8004cbc <HAL_I2C_Init+0xd4>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	e009      	b.n	8004cd0 <HAL_I2C_Init+0xe8>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	4a69      	ldr	r2, [pc, #420]	; (8004e6c <HAL_I2C_Init+0x284>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	3301      	adds	r3, #1
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	495c      	ldr	r1, [pc, #368]	; (8004e5c <HAL_I2C_Init+0x274>)
 8004cec:	428b      	cmp	r3, r1
 8004cee:	d819      	bhi.n	8004d24 <HAL_I2C_Init+0x13c>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1e59      	subs	r1, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cfe:	1c59      	adds	r1, r3, #1
 8004d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d04:	400b      	ands	r3, r1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_I2C_Init+0x138>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1e59      	subs	r1, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d18:	3301      	adds	r3, #1
 8004d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1e:	e051      	b.n	8004dc4 <HAL_I2C_Init+0x1dc>
 8004d20:	2304      	movs	r3, #4
 8004d22:	e04f      	b.n	8004dc4 <HAL_I2C_Init+0x1dc>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d111      	bne.n	8004d50 <HAL_I2C_Init+0x168>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1e58      	subs	r0, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	440b      	add	r3, r1
 8004d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	e012      	b.n	8004d76 <HAL_I2C_Init+0x18e>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1e58      	subs	r0, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	0099      	lsls	r1, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d66:	3301      	adds	r3, #1
 8004d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_I2C_Init+0x196>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e022      	b.n	8004dc4 <HAL_I2C_Init+0x1dc>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10e      	bne.n	8004da4 <HAL_I2C_Init+0x1bc>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1e58      	subs	r0, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6859      	ldr	r1, [r3, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	440b      	add	r3, r1
 8004d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da2:	e00f      	b.n	8004dc4 <HAL_I2C_Init+0x1dc>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1e58      	subs	r0, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6859      	ldr	r1, [r3, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	0099      	lsls	r1, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	6809      	ldr	r1, [r1, #0]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6911      	ldr	r1, [r2, #16]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	68d2      	ldr	r2, [r2, #12]
 8004dfe:	4311      	orrs	r1, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	000186a0 	.word	0x000186a0
 8004e60:	001e847f 	.word	0x001e847f
 8004e64:	003d08ff 	.word	0x003d08ff
 8004e68:	431bde83 	.word	0x431bde83
 8004e6c:	10624dd3 	.word	0x10624dd3

08004e70 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	817b      	strh	r3, [r7, #10]
 8004e80:	4613      	mov	r3, r2
 8004e82:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	f040 810d 	bne.w	80050b0 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e96:	4b89      	ldr	r3, [pc, #548]	; (80050bc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	08db      	lsrs	r3, r3, #3
 8004e9c:	4a88      	ldr	r2, [pc, #544]	; (80050c0 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8004e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea2:	0a1a      	lsrs	r2, r3, #8
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009a      	lsls	r2, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d116      	bne.n	8004eea <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0220 	orr.w	r2, r3, #32
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0e3      	b.n	80050b2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d0db      	beq.n	8004eb0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_I2C_Master_Transmit_DMA+0x96>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0d5      	b.n	80050b2 <HAL_I2C_Master_Transmit_DMA+0x242>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d007      	beq.n	8004f2c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2221      	movs	r2, #33	; 0x21
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2210      	movs	r2, #16
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	893a      	ldrh	r2, [r7, #8]
 8004f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a56      	ldr	r2, [pc, #344]	; (80050c4 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8004f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004f6e:	897a      	ldrh	r2, [r7, #10]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d07b      	beq.n	8005074 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d02a      	beq.n	8004fda <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f88:	4a4f      	ldr	r2, [pc, #316]	; (80050c8 <HAL_I2C_Master_Transmit_DMA+0x258>)
 8004f8a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	4a4e      	ldr	r2, [pc, #312]	; (80050cc <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8004f92:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	2200      	movs	r2, #0
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	2200      	movs	r2, #0
 8004faa:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3310      	adds	r3, #16
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	f7ff f979 	bl	80042c0 <HAL_DMA_Start_IT>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d139      	bne.n	800504c <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8004fd8:	e013      	b.n	8005002 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e057      	b.n	80050b2 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005018:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005028:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005038:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e02f      	b.n	80050ac <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f043 0210 	orr.w	r2, r3, #16
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e01e      	b.n	80050b2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005082:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005092:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80050aa:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000004 	.word	0x20000004
 80050c0:	14f8b589 	.word	0x14f8b589
 80050c4:	ffff0000 	.word	0xffff0000
 80050c8:	08005151 	.word	0x08005151
 80050cc:	080052fb 	.word	0x080052fb

080050d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005142:	b2db      	uxtb	r3, r3
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800516c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005182:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	2200      	movs	r2, #0
 8005192:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	2200      	movs	r2, #0
 80051a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80051aa:	2b21      	cmp	r3, #33	; 0x21
 80051ac:	d007      	beq.n	80051be <I2C_DMAXferCplt+0x6e>
 80051ae:	7cfb      	ldrb	r3, [r7, #19]
 80051b0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80051b4:	2b22      	cmp	r3, #34	; 0x22
 80051b6:	d131      	bne.n	800521c <I2C_DMAXferCplt+0xcc>
 80051b8:	7cbb      	ldrb	r3, [r7, #18]
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d12e      	bne.n	800521c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051cc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	2b29      	cmp	r3, #41	; 0x29
 80051d8:	d10a      	bne.n	80051f0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2221      	movs	r2, #33	; 0x21
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2228      	movs	r2, #40	; 0x28
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051e8:	6978      	ldr	r0, [r7, #20]
 80051ea:	f7ff ff7b 	bl	80050e4 <HAL_I2C_SlaveTxCpltCallback>
 80051ee:	e00c      	b.n	800520a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	2b2a      	cmp	r3, #42	; 0x2a
 80051f4:	d109      	bne.n	800520a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2222      	movs	r2, #34	; 0x22
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2228      	movs	r2, #40	; 0x28
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005204:	6978      	ldr	r0, [r7, #20]
 8005206:	f7ff ff77 	bl	80050f8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005218:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800521a:	e06a      	b.n	80052f2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d064      	beq.n	80052f2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005240:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005250:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005258:	d009      	beq.n	800526e <I2C_DMAXferCplt+0x11e>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d006      	beq.n	800526e <I2C_DMAXferCplt+0x11e>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005266:	d002      	beq.n	800526e <I2C_DMAXferCplt+0x11e>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b20      	cmp	r3, #32
 800526c:	d107      	bne.n	800527e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800528c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800529c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80052ac:	6978      	ldr	r0, [r7, #20]
 80052ae:	f7ff ff37 	bl	8005120 <HAL_I2C_ErrorCallback>
}
 80052b2:	e01e      	b.n	80052f2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d10a      	bne.n	80052de <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2200      	movs	r2, #0
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80052d6:	6978      	ldr	r0, [r7, #20]
 80052d8:	f7ff ff18 	bl	800510c <HAL_I2C_MemRxCpltCallback>
}
 80052dc:	e009      	b.n	80052f2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2212      	movs	r2, #18
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80052ec:	6978      	ldr	r0, [r7, #20]
 80052ee:	f7ff feef 	bl	80050d0 <HAL_I2C_MasterRxCpltCallback>
}
 80052f2:	bf00      	nop
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	2200      	movs	r2, #0
 8005316:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	2200      	movs	r2, #0
 8005326:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff f9ab 	bl	8004684 <HAL_DMA_GetError>
 800532e:	4603      	mov	r3, r0
 8005330:	2b02      	cmp	r3, #2
 8005332:	d01b      	beq.n	800536c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005342:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f043 0210 	orr.w	r2, r3, #16
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7ff feda 	bl	8005120 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0cc      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005388:	4b68      	ldr	r3, [pc, #416]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d90c      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b65      	ldr	r3, [pc, #404]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	4b63      	ldr	r3, [pc, #396]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0b8      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d020      	beq.n	80053fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c8:	4b59      	ldr	r3, [pc, #356]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4a58      	ldr	r2, [pc, #352]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e0:	4b53      	ldr	r3, [pc, #332]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4a52      	ldr	r2, [pc, #328]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ec:	4b50      	ldr	r3, [pc, #320]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	494d      	ldr	r1, [pc, #308]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d044      	beq.n	8005494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	4b47      	ldr	r3, [pc, #284]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d119      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e07f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d003      	beq.n	8005432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	2b03      	cmp	r3, #3
 8005430:	d107      	bne.n	8005442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005432:	4b3f      	ldr	r3, [pc, #252]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e06f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005442:	4b3b      	ldr	r3, [pc, #236]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e067      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005452:	4b37      	ldr	r3, [pc, #220]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 0203 	bic.w	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4934      	ldr	r1, [pc, #208]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005464:	f7fd fadc 	bl	8002a20 <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	e00a      	b.n	8005482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7fd fad8 	bl	8002a20 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	; 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e04f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005482:	4b2b      	ldr	r3, [pc, #172]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 020c 	and.w	r2, r3, #12
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	429a      	cmp	r2, r3
 8005492:	d1eb      	bne.n	800546c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005494:	4b25      	ldr	r3, [pc, #148]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d20c      	bcs.n	80054bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b22      	ldr	r3, [pc, #136]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b20      	ldr	r3, [pc, #128]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e032      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c8:	4b19      	ldr	r3, [pc, #100]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4916      	ldr	r1, [pc, #88]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e6:	4b12      	ldr	r3, [pc, #72]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	490e      	ldr	r1, [pc, #56]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054fa:	f000 f821 	bl	8005540 <HAL_RCC_GetSysClockFreq>
 80054fe:	4602      	mov	r2, r0
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	091b      	lsrs	r3, r3, #4
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	490a      	ldr	r1, [pc, #40]	; (8005534 <HAL_RCC_ClockConfig+0x1c0>)
 800550c:	5ccb      	ldrb	r3, [r1, r3]
 800550e:	fa22 f303 	lsr.w	r3, r2, r3
 8005512:	4a09      	ldr	r2, [pc, #36]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd fa3c 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40023c00 	.word	0x40023c00
 8005530:	40023800 	.word	0x40023800
 8005534:	08007ba4 	.word	0x08007ba4
 8005538:	20000004 	.word	0x20000004
 800553c:	20000008 	.word	0x20000008

08005540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005540:	b5b0      	push	{r4, r5, r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005546:	2100      	movs	r1, #0
 8005548:	6079      	str	r1, [r7, #4]
 800554a:	2100      	movs	r1, #0
 800554c:	60f9      	str	r1, [r7, #12]
 800554e:	2100      	movs	r1, #0
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005552:	2100      	movs	r1, #0
 8005554:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005556:	4952      	ldr	r1, [pc, #328]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005558:	6889      	ldr	r1, [r1, #8]
 800555a:	f001 010c 	and.w	r1, r1, #12
 800555e:	2908      	cmp	r1, #8
 8005560:	d00d      	beq.n	800557e <HAL_RCC_GetSysClockFreq+0x3e>
 8005562:	2908      	cmp	r1, #8
 8005564:	f200 8094 	bhi.w	8005690 <HAL_RCC_GetSysClockFreq+0x150>
 8005568:	2900      	cmp	r1, #0
 800556a:	d002      	beq.n	8005572 <HAL_RCC_GetSysClockFreq+0x32>
 800556c:	2904      	cmp	r1, #4
 800556e:	d003      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x38>
 8005570:	e08e      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005572:	4b4c      	ldr	r3, [pc, #304]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005574:	60bb      	str	r3, [r7, #8]
       break;
 8005576:	e08e      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005578:	4b4b      	ldr	r3, [pc, #300]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800557a:	60bb      	str	r3, [r7, #8]
      break;
 800557c:	e08b      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800557e:	4948      	ldr	r1, [pc, #288]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005580:	6849      	ldr	r1, [r1, #4]
 8005582:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005586:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005588:	4945      	ldr	r1, [pc, #276]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800558a:	6849      	ldr	r1, [r1, #4]
 800558c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005590:	2900      	cmp	r1, #0
 8005592:	d024      	beq.n	80055de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005594:	4942      	ldr	r1, [pc, #264]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005596:	6849      	ldr	r1, [r1, #4]
 8005598:	0989      	lsrs	r1, r1, #6
 800559a:	4608      	mov	r0, r1
 800559c:	f04f 0100 	mov.w	r1, #0
 80055a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80055a4:	f04f 0500 	mov.w	r5, #0
 80055a8:	ea00 0204 	and.w	r2, r0, r4
 80055ac:	ea01 0305 	and.w	r3, r1, r5
 80055b0:	493d      	ldr	r1, [pc, #244]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80055b2:	fb01 f003 	mul.w	r0, r1, r3
 80055b6:	2100      	movs	r1, #0
 80055b8:	fb01 f102 	mul.w	r1, r1, r2
 80055bc:	1844      	adds	r4, r0, r1
 80055be:	493a      	ldr	r1, [pc, #232]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80055c0:	fba2 0101 	umull	r0, r1, r2, r1
 80055c4:	1863      	adds	r3, r4, r1
 80055c6:	4619      	mov	r1, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	f7fb fa9c 	bl	8000b0c <__aeabi_uldivmod>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4613      	mov	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e04a      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055de:	4b30      	ldr	r3, [pc, #192]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	099b      	lsrs	r3, r3, #6
 80055e4:	461a      	mov	r2, r3
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055ee:	f04f 0100 	mov.w	r1, #0
 80055f2:	ea02 0400 	and.w	r4, r2, r0
 80055f6:	ea03 0501 	and.w	r5, r3, r1
 80055fa:	4620      	mov	r0, r4
 80055fc:	4629      	mov	r1, r5
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	014b      	lsls	r3, r1, #5
 8005608:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800560c:	0142      	lsls	r2, r0, #5
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	1b00      	subs	r0, r0, r4
 8005614:	eb61 0105 	sbc.w	r1, r1, r5
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	018b      	lsls	r3, r1, #6
 8005622:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005626:	0182      	lsls	r2, r0, #6
 8005628:	1a12      	subs	r2, r2, r0
 800562a:	eb63 0301 	sbc.w	r3, r3, r1
 800562e:	f04f 0000 	mov.w	r0, #0
 8005632:	f04f 0100 	mov.w	r1, #0
 8005636:	00d9      	lsls	r1, r3, #3
 8005638:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800563c:	00d0      	lsls	r0, r2, #3
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	1912      	adds	r2, r2, r4
 8005644:	eb45 0303 	adc.w	r3, r5, r3
 8005648:	f04f 0000 	mov.w	r0, #0
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	0299      	lsls	r1, r3, #10
 8005652:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005656:	0290      	lsls	r0, r2, #10
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	461a      	mov	r2, r3
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	f7fb fa50 	bl	8000b0c <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4613      	mov	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	3301      	adds	r3, #1
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	60bb      	str	r3, [r7, #8]
      break;
 800568e:	e002      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005692:	60bb      	str	r3, [r7, #8]
      break;
 8005694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005696:	68bb      	ldr	r3, [r7, #8]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bdb0      	pop	{r4, r5, r7, pc}
 80056a0:	40023800 	.word	0x40023800
 80056a4:	00f42400 	.word	0x00f42400
 80056a8:	017d7840 	.word	0x017d7840

080056ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056b2:	681b      	ldr	r3, [r3, #0]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000004 	.word	0x20000004

080056c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056c8:	f7ff fff0 	bl	80056ac <HAL_RCC_GetHCLKFreq>
 80056cc:	4602      	mov	r2, r0
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	0a9b      	lsrs	r3, r3, #10
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	4903      	ldr	r1, [pc, #12]	; (80056e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056da:	5ccb      	ldrb	r3, [r1, r3]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40023800 	.word	0x40023800
 80056e8:	08007bb4 	.word	0x08007bb4

080056ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e270      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d075      	beq.n	80057f6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800570a:	4ba3      	ldr	r3, [pc, #652]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b04      	cmp	r3, #4
 8005714:	d00c      	beq.n	8005730 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005716:	4ba0      	ldr	r3, [pc, #640]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800571e:	2b08      	cmp	r3, #8
 8005720:	d112      	bne.n	8005748 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005722:	4b9d      	ldr	r3, [pc, #628]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572e:	d10b      	bne.n	8005748 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005730:	4b99      	ldr	r3, [pc, #612]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d05b      	beq.n	80057f4 <HAL_RCC_OscConfig+0x108>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d157      	bne.n	80057f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e24b      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005750:	d106      	bne.n	8005760 <HAL_RCC_OscConfig+0x74>
 8005752:	4b91      	ldr	r3, [pc, #580]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a90      	ldr	r2, [pc, #576]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e01d      	b.n	800579c <HAL_RCC_OscConfig+0xb0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005768:	d10c      	bne.n	8005784 <HAL_RCC_OscConfig+0x98>
 800576a:	4b8b      	ldr	r3, [pc, #556]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a8a      	ldr	r2, [pc, #552]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	4b88      	ldr	r3, [pc, #544]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a87      	ldr	r2, [pc, #540]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800577c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e00b      	b.n	800579c <HAL_RCC_OscConfig+0xb0>
 8005784:	4b84      	ldr	r3, [pc, #528]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a83      	ldr	r2, [pc, #524]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800578a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	4b81      	ldr	r3, [pc, #516]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a80      	ldr	r2, [pc, #512]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d013      	beq.n	80057cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fd f93c 	bl	8002a20 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ac:	f7fd f938 	bl	8002a20 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	; 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e210      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	4b76      	ldr	r3, [pc, #472]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0xc0>
 80057ca:	e014      	b.n	80057f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fd f928 	bl	8002a20 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d4:	f7fd f924 	bl	8002a20 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b64      	cmp	r3, #100	; 0x64
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e1fc      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e6:	4b6c      	ldr	r3, [pc, #432]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0xe8>
 80057f2:	e000      	b.n	80057f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d063      	beq.n	80058ca <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005802:	4b65      	ldr	r3, [pc, #404]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800580e:	4b62      	ldr	r3, [pc, #392]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005816:	2b08      	cmp	r3, #8
 8005818:	d11c      	bne.n	8005854 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800581a:	4b5f      	ldr	r3, [pc, #380]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d116      	bne.n	8005854 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005826:	4b5c      	ldr	r3, [pc, #368]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_RCC_OscConfig+0x152>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d001      	beq.n	800583e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e1d0      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583e:	4b56      	ldr	r3, [pc, #344]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4952      	ldr	r1, [pc, #328]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800584e:	4313      	orrs	r3, r2
 8005850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005852:	e03a      	b.n	80058ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d020      	beq.n	800589e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800585c:	4b4f      	ldr	r3, [pc, #316]	; (800599c <HAL_RCC_OscConfig+0x2b0>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005862:	f7fd f8dd 	bl	8002a20 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800586a:	f7fd f8d9 	bl	8002a20 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e1b1      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587c:	4b46      	ldr	r3, [pc, #280]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005888:	4b43      	ldr	r3, [pc, #268]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4940      	ldr	r1, [pc, #256]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	4313      	orrs	r3, r2
 800589a:	600b      	str	r3, [r1, #0]
 800589c:	e015      	b.n	80058ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800589e:	4b3f      	ldr	r3, [pc, #252]	; (800599c <HAL_RCC_OscConfig+0x2b0>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fd f8bc 	bl	8002a20 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ac:	f7fd f8b8 	bl	8002a20 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e190      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058be:	4b36      	ldr	r3, [pc, #216]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d030      	beq.n	8005938 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058de:	4b30      	ldr	r3, [pc, #192]	; (80059a0 <HAL_RCC_OscConfig+0x2b4>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fd f89c 	bl	8002a20 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ec:	f7fd f898 	bl	8002a20 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e170      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058fe:	4b26      	ldr	r3, [pc, #152]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x200>
 800590a:	e015      	b.n	8005938 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800590c:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <HAL_RCC_OscConfig+0x2b4>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005912:	f7fd f885 	bl	8002a20 <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800591a:	f7fd f881 	bl	8002a20 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e159      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800592e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f0      	bne.n	800591a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80a0 	beq.w	8005a86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800594a:	4b13      	ldr	r3, [pc, #76]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10f      	bne.n	8005976 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	6413      	str	r3, [r2, #64]	; 0x40
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_RCC_OscConfig+0x2b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d121      	bne.n	80059c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <HAL_RCC_OscConfig+0x2b8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a07      	ldr	r2, [pc, #28]	; (80059a4 <HAL_RCC_OscConfig+0x2b8>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800598e:	f7fd f847 	bl	8002a20 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005994:	e011      	b.n	80059ba <HAL_RCC_OscConfig+0x2ce>
 8005996:	bf00      	nop
 8005998:	40023800 	.word	0x40023800
 800599c:	42470000 	.word	0x42470000
 80059a0:	42470e80 	.word	0x42470e80
 80059a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a8:	f7fd f83a 	bl	8002a20 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e112      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ba:	4b8b      	ldr	r3, [pc, #556]	; (8005be8 <HAL_RCC_OscConfig+0x4fc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d106      	bne.n	80059dc <HAL_RCC_OscConfig+0x2f0>
 80059ce:	4b87      	ldr	r3, [pc, #540]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	4a86      	ldr	r2, [pc, #536]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70
 80059da:	e01c      	b.n	8005a16 <HAL_RCC_OscConfig+0x32a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b05      	cmp	r3, #5
 80059e2:	d10c      	bne.n	80059fe <HAL_RCC_OscConfig+0x312>
 80059e4:	4b81      	ldr	r3, [pc, #516]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 80059e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e8:	4a80      	ldr	r2, [pc, #512]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 80059ea:	f043 0304 	orr.w	r3, r3, #4
 80059ee:	6713      	str	r3, [r2, #112]	; 0x70
 80059f0:	4b7e      	ldr	r3, [pc, #504]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	4a7d      	ldr	r2, [pc, #500]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	6713      	str	r3, [r2, #112]	; 0x70
 80059fc:	e00b      	b.n	8005a16 <HAL_RCC_OscConfig+0x32a>
 80059fe:	4b7b      	ldr	r3, [pc, #492]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	4a7a      	ldr	r2, [pc, #488]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0a:	4b78      	ldr	r3, [pc, #480]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0e:	4a77      	ldr	r2, [pc, #476]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d015      	beq.n	8005a4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1e:	f7fc ffff 	bl	8002a20 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a24:	e00a      	b.n	8005a3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a26:	f7fc fffb 	bl	8002a20 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e0d1      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3c:	4b6b      	ldr	r3, [pc, #428]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0ee      	beq.n	8005a26 <HAL_RCC_OscConfig+0x33a>
 8005a48:	e014      	b.n	8005a74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4a:	f7fc ffe9 	bl	8002a20 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a50:	e00a      	b.n	8005a68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a52:	f7fc ffe5 	bl	8002a20 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e0bb      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a68:	4b60      	ldr	r3, [pc, #384]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1ee      	bne.n	8005a52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d105      	bne.n	8005a86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7a:	4b5c      	ldr	r3, [pc, #368]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	4a5b      	ldr	r2, [pc, #364]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 80a7 	beq.w	8005bde <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a90:	4b56      	ldr	r3, [pc, #344]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 030c 	and.w	r3, r3, #12
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d060      	beq.n	8005b5e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d145      	bne.n	8005b30 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa4:	4b52      	ldr	r3, [pc, #328]	; (8005bf0 <HAL_RCC_OscConfig+0x504>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aaa:	f7fc ffb9 	bl	8002a20 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab2:	f7fc ffb5 	bl	8002a20 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e08d      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac4:	4b49      	ldr	r3, [pc, #292]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f0      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	019b      	lsls	r3, r3, #6
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	071b      	lsls	r3, r3, #28
 8005afc:	493b      	ldr	r1, [pc, #236]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b02:	4b3b      	ldr	r3, [pc, #236]	; (8005bf0 <HAL_RCC_OscConfig+0x504>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fc ff8a 	bl	8002a20 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fc ff86 	bl	8002a20 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e05e      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b22:	4b32      	ldr	r3, [pc, #200]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x424>
 8005b2e:	e056      	b.n	8005bde <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b30:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <HAL_RCC_OscConfig+0x504>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b36:	f7fc ff73 	bl	8002a20 <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b3e:	f7fc ff6f 	bl	8002a20 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e047      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b50:	4b26      	ldr	r3, [pc, #152]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f0      	bne.n	8005b3e <HAL_RCC_OscConfig+0x452>
 8005b5c:	e03f      	b.n	8005bde <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e03a      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b6a:	4b20      	ldr	r3, [pc, #128]	; (8005bec <HAL_RCC_OscConfig+0x500>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d030      	beq.n	8005bda <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d129      	bne.n	8005bda <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d122      	bne.n	8005bda <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ba0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d119      	bne.n	8005bda <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d10f      	bne.n	8005bda <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d001      	beq.n	8005bde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40007000 	.word	0x40007000
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	42470060 	.word	0x42470060

08005bf4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c06:	2b84      	cmp	r3, #132	; 0x84
 8005c08:	d005      	beq.n	8005c16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	3303      	adds	r3, #3
 8005c14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c16:	68fb      	ldr	r3, [r7, #12]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c28:	f000 fb5c 	bl	80062e4 <vTaskStartScheduler>
  
  return osOK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c34:	b089      	sub	sp, #36	; 0x24
 8005c36:	af04      	add	r7, sp, #16
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d020      	beq.n	8005c86 <osThreadCreate+0x54>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01c      	beq.n	8005c86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685c      	ldr	r4, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681d      	ldr	r5, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691e      	ldr	r6, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff ffc8 	bl	8005bf4 <makeFreeRtosPriority>
 8005c64:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c6e:	9202      	str	r2, [sp, #8]
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	9100      	str	r1, [sp, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	4632      	mov	r2, r6
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 f8ed 	bl	8005e5a <xTaskCreateStatic>
 8005c80:	4603      	mov	r3, r0
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e01c      	b.n	8005cc0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685c      	ldr	r4, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c92:	b29e      	uxth	r6, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff ffaa 	bl	8005bf4 <makeFreeRtosPriority>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	f107 030c 	add.w	r3, r7, #12
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	9200      	str	r2, [sp, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	4632      	mov	r2, r6
 8005cae:	4629      	mov	r1, r5
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f000 f92f 	bl	8005f14 <xTaskCreate>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d001      	beq.n	8005cc0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <osDelay+0x16>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	e000      	b.n	8005ce2 <osDelay+0x18>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 faca 	bl	800627c <vTaskDelay>
  
  return osOK;
 8005ce8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f103 0208 	add.w	r2, r3, #8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f103 0208 	add.w	r2, r3, #8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f103 0208 	add.w	r2, r3, #8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	601a      	str	r2, [r3, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d103      	bne.n	8005db4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e00c      	b.n	8005dce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3308      	adds	r3, #8
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e002      	b.n	8005dc2 <vListInsert+0x2e>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d2f6      	bcs.n	8005dbc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6892      	ldr	r2, [r2, #8]
 8005e1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6852      	ldr	r2, [r2, #4]
 8005e26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d103      	bne.n	8005e3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	1e5a      	subs	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b08e      	sub	sp, #56	; 0x38
 8005e5e:	af04      	add	r7, sp, #16
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
 8005e66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	61fb      	str	r3, [r7, #28]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ea0:	2354      	movs	r3, #84	; 0x54
 8005ea2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b54      	cmp	r3, #84	; 0x54
 8005ea8:	d00a      	beq.n	8005ec0 <xTaskCreateStatic+0x66>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	61bb      	str	r3, [r7, #24]
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ec0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01e      	beq.n	8005f06 <xTaskCreateStatic+0xac>
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01b      	beq.n	8005f06 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9303      	str	r3, [sp, #12]
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	9302      	str	r3, [sp, #8]
 8005ee8:	f107 0314 	add.w	r3, r7, #20
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f850 	bl	8005f9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f00:	f000 f8d4 	bl	80060ac <prvAddNewTaskToReadyList>
 8005f04:	e001      	b.n	8005f0a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f0a:	697b      	ldr	r3, [r7, #20]
	}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3728      	adds	r7, #40	; 0x28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08c      	sub	sp, #48	; 0x30
 8005f18:	af04      	add	r7, sp, #16
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 ff75 	bl	8006e18 <pvPortMalloc>
 8005f2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00e      	beq.n	8005f54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f36:	2054      	movs	r0, #84	; 0x54
 8005f38:	f000 ff6e 	bl	8006e18 <pvPortMalloc>
 8005f3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30
 8005f4a:	e005      	b.n	8005f58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f4c:	6978      	ldr	r0, [r7, #20]
 8005f4e:	f001 f82f 	bl	8006fb0 <vPortFree>
 8005f52:	e001      	b.n	8005f58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d017      	beq.n	8005f8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f66:	88fa      	ldrh	r2, [r7, #6]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9303      	str	r3, [sp, #12]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	9302      	str	r3, [sp, #8]
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f80e 	bl	8005f9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f82:	69f8      	ldr	r0, [r7, #28]
 8005f84:	f000 f892 	bl	80060ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	61bb      	str	r3, [r7, #24]
 8005f8c:	e002      	b.n	8005f94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f94:	69bb      	ldr	r3, [r7, #24]
	}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b088      	sub	sp, #32
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f023 0307 	bic.w	r3, r3, #7
 8005fc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	617b      	str	r3, [r7, #20]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01f      	beq.n	800602c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	e012      	b.n	8006018 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	7819      	ldrb	r1, [r3, #0]
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	3334      	adds	r3, #52	; 0x34
 8006002:	460a      	mov	r2, r1
 8006004:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d006      	beq.n	8006020 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	3301      	adds	r3, #1
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d9e9      	bls.n	8005ff2 <prvInitialiseNewTask+0x54>
 800601e:	e000      	b.n	8006022 <prvInitialiseNewTask+0x84>
			{
				break;
 8006020:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800602a:	e003      	b.n	8006034 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	2b06      	cmp	r3, #6
 8006038:	d901      	bls.n	800603e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800603a:	2306      	movs	r3, #6
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006042:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	2200      	movs	r2, #0
 800604e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	3304      	adds	r3, #4
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fe6c 	bl	8005d32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	3318      	adds	r3, #24
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fe67 	bl	8005d32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006068:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	f1c3 0207 	rsb	r2, r3, #7
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	2200      	movs	r2, #0
 800607e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	68f9      	ldr	r1, [r7, #12]
 800608c:	69b8      	ldr	r0, [r7, #24]
 800608e:	f000 fcb1 	bl	80069f4 <pxPortInitialiseStack>
 8006092:	4602      	mov	r2, r0
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a4:	bf00      	nop
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060b4:	f000 fdce 	bl	8006c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060b8:	4b2a      	ldr	r3, [pc, #168]	; (8006164 <prvAddNewTaskToReadyList+0xb8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	4a29      	ldr	r2, [pc, #164]	; (8006164 <prvAddNewTaskToReadyList+0xb8>)
 80060c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060c2:	4b29      	ldr	r3, [pc, #164]	; (8006168 <prvAddNewTaskToReadyList+0xbc>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060ca:	4a27      	ldr	r2, [pc, #156]	; (8006168 <prvAddNewTaskToReadyList+0xbc>)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060d0:	4b24      	ldr	r3, [pc, #144]	; (8006164 <prvAddNewTaskToReadyList+0xb8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d110      	bne.n	80060fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060d8:	f000 fb4a 	bl	8006770 <prvInitialiseTaskLists>
 80060dc:	e00d      	b.n	80060fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060de:	4b23      	ldr	r3, [pc, #140]	; (800616c <prvAddNewTaskToReadyList+0xc0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060e6:	4b20      	ldr	r3, [pc, #128]	; (8006168 <prvAddNewTaskToReadyList+0xbc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d802      	bhi.n	80060fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060f4:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <prvAddNewTaskToReadyList+0xbc>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060fa:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <prvAddNewTaskToReadyList+0xc4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <prvAddNewTaskToReadyList+0xc4>)
 8006102:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	2201      	movs	r2, #1
 800610a:	409a      	lsls	r2, r3
 800610c:	4b19      	ldr	r3, [pc, #100]	; (8006174 <prvAddNewTaskToReadyList+0xc8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4313      	orrs	r3, r2
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <prvAddNewTaskToReadyList+0xc8>)
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4a15      	ldr	r2, [pc, #84]	; (8006178 <prvAddNewTaskToReadyList+0xcc>)
 8006124:	441a      	add	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3304      	adds	r3, #4
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f7ff fe0d 	bl	8005d4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006132:	f000 fdbf 	bl	8006cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <prvAddNewTaskToReadyList+0xc0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00e      	beq.n	800615c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800613e:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <prvAddNewTaskToReadyList+0xbc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	429a      	cmp	r2, r3
 800614a:	d207      	bcs.n	800615c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800614c:	4b0b      	ldr	r3, [pc, #44]	; (800617c <prvAddNewTaskToReadyList+0xd0>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	2000043c 	.word	0x2000043c
 8006168:	2000033c 	.word	0x2000033c
 800616c:	20000448 	.word	0x20000448
 8006170:	20000458 	.word	0x20000458
 8006174:	20000444 	.word	0x20000444
 8006178:	20000340 	.word	0x20000340
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	; 0x28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800618a:	2300      	movs	r3, #0
 800618c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <vTaskDelayUntil+0x2a>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	617b      	str	r3, [r7, #20]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <vTaskDelayUntil+0x46>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80061c6:	4b2a      	ldr	r3, [pc, #168]	; (8006270 <vTaskDelayUntil+0xf0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <vTaskDelayUntil+0x64>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	60fb      	str	r3, [r7, #12]
}
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80061e4:	f000 f8de 	bl	80063a4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80061e8:	4b22      	ldr	r3, [pc, #136]	; (8006274 <vTaskDelayUntil+0xf4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a3a      	ldr	r2, [r7, #32]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d20b      	bcs.n	800621a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	429a      	cmp	r2, r3
 800620a:	d211      	bcs.n	8006230 <vTaskDelayUntil+0xb0>
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	429a      	cmp	r2, r3
 8006212:	d90d      	bls.n	8006230 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
 8006218:	e00a      	b.n	8006230 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	429a      	cmp	r2, r3
 8006222:	d303      	bcc.n	800622c <vTaskDelayUntil+0xac>
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	429a      	cmp	r2, r3
 800622a:	d901      	bls.n	8006230 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	d006      	beq.n	800624a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fb6f 	bl	8006928 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800624a:	f000 f8b9 	bl	80063c0 <xTaskResumeAll>
 800624e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d107      	bne.n	8006266 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006256:	4b08      	ldr	r3, [pc, #32]	; (8006278 <vTaskDelayUntil+0xf8>)
 8006258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006266:	bf00      	nop
 8006268:	3728      	adds	r7, #40	; 0x28
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000464 	.word	0x20000464
 8006274:	20000440 	.word	0x20000440
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006284:	2300      	movs	r3, #0
 8006286:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d017      	beq.n	80062be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800628e:	4b13      	ldr	r3, [pc, #76]	; (80062dc <vTaskDelay+0x60>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <vTaskDelay+0x30>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60bb      	str	r3, [r7, #8]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062ac:	f000 f87a 	bl	80063a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062b0:	2100      	movs	r1, #0
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fb38 	bl	8006928 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062b8:	f000 f882 	bl	80063c0 <xTaskResumeAll>
 80062bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d107      	bne.n	80062d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062c4:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <vTaskDelay+0x64>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000464 	.word	0x20000464
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08a      	sub	sp, #40	; 0x28
 80062e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062f2:	463a      	mov	r2, r7
 80062f4:	1d39      	adds	r1, r7, #4
 80062f6:	f107 0308 	add.w	r3, r7, #8
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fa fd82 	bl	8000e04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	9202      	str	r2, [sp, #8]
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	2300      	movs	r3, #0
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	2300      	movs	r3, #0
 8006310:	460a      	mov	r2, r1
 8006312:	491e      	ldr	r1, [pc, #120]	; (800638c <vTaskStartScheduler+0xa8>)
 8006314:	481e      	ldr	r0, [pc, #120]	; (8006390 <vTaskStartScheduler+0xac>)
 8006316:	f7ff fda0 	bl	8005e5a <xTaskCreateStatic>
 800631a:	4603      	mov	r3, r0
 800631c:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <vTaskStartScheduler+0xb0>)
 800631e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006320:	4b1c      	ldr	r3, [pc, #112]	; (8006394 <vTaskStartScheduler+0xb0>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e001      	b.n	8006332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d116      	bne.n	8006366 <vTaskStartScheduler+0x82>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	613b      	str	r3, [r7, #16]
}
 800634a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800634c:	4b12      	ldr	r3, [pc, #72]	; (8006398 <vTaskStartScheduler+0xb4>)
 800634e:	f04f 32ff 	mov.w	r2, #4294967295
 8006352:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006354:	4b11      	ldr	r3, [pc, #68]	; (800639c <vTaskStartScheduler+0xb8>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800635a:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <vTaskStartScheduler+0xbc>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006360:	f000 fbd6 	bl	8006b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006364:	e00e      	b.n	8006384 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d10a      	bne.n	8006384 <vTaskStartScheduler+0xa0>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	60fb      	str	r3, [r7, #12]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <vTaskStartScheduler+0x9e>
}
 8006384:	bf00      	nop
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	08007b98 	.word	0x08007b98
 8006390:	08006741 	.word	0x08006741
 8006394:	20000460 	.word	0x20000460
 8006398:	2000045c 	.word	0x2000045c
 800639c:	20000448 	.word	0x20000448
 80063a0:	20000440 	.word	0x20000440

080063a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063a8:	4b04      	ldr	r3, [pc, #16]	; (80063bc <vTaskSuspendAll+0x18>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	4a03      	ldr	r2, [pc, #12]	; (80063bc <vTaskSuspendAll+0x18>)
 80063b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063b2:	bf00      	nop
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20000464 	.word	0x20000464

080063c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063ce:	4b41      	ldr	r3, [pc, #260]	; (80064d4 <xTaskResumeAll+0x114>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <xTaskResumeAll+0x2c>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	603b      	str	r3, [r7, #0]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063ec:	f000 fc32 	bl	8006c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063f0:	4b38      	ldr	r3, [pc, #224]	; (80064d4 <xTaskResumeAll+0x114>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	4a37      	ldr	r2, [pc, #220]	; (80064d4 <xTaskResumeAll+0x114>)
 80063f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fa:	4b36      	ldr	r3, [pc, #216]	; (80064d4 <xTaskResumeAll+0x114>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d161      	bne.n	80064c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006402:	4b35      	ldr	r3, [pc, #212]	; (80064d8 <xTaskResumeAll+0x118>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d05d      	beq.n	80064c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800640a:	e02e      	b.n	800646a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640c:	4b33      	ldr	r3, [pc, #204]	; (80064dc <xTaskResumeAll+0x11c>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3318      	adds	r3, #24
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff fcf4 	bl	8005e06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3304      	adds	r3, #4
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff fcef 	bl	8005e06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	2201      	movs	r2, #1
 800642e:	409a      	lsls	r2, r3
 8006430:	4b2b      	ldr	r3, [pc, #172]	; (80064e0 <xTaskResumeAll+0x120>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4313      	orrs	r3, r2
 8006436:	4a2a      	ldr	r2, [pc, #168]	; (80064e0 <xTaskResumeAll+0x120>)
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4a27      	ldr	r2, [pc, #156]	; (80064e4 <xTaskResumeAll+0x124>)
 8006448:	441a      	add	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3304      	adds	r3, #4
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f7ff fc7b 	bl	8005d4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	4b23      	ldr	r3, [pc, #140]	; (80064e8 <xTaskResumeAll+0x128>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006464:	4b21      	ldr	r3, [pc, #132]	; (80064ec <xTaskResumeAll+0x12c>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800646a:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <xTaskResumeAll+0x11c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1cc      	bne.n	800640c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006478:	f000 fa18 	bl	80068ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800647c:	4b1c      	ldr	r3, [pc, #112]	; (80064f0 <xTaskResumeAll+0x130>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d010      	beq.n	80064aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006488:	f000 f846 	bl	8006518 <xTaskIncrementTick>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006492:	4b16      	ldr	r3, [pc, #88]	; (80064ec <xTaskResumeAll+0x12c>)
 8006494:	2201      	movs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3b01      	subs	r3, #1
 800649c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f1      	bne.n	8006488 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80064a4:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <xTaskResumeAll+0x130>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064aa:	4b10      	ldr	r3, [pc, #64]	; (80064ec <xTaskResumeAll+0x12c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064b6:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <xTaskResumeAll+0x134>)
 80064b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064c6:	f000 fbf5 	bl	8006cb4 <vPortExitCritical>

	return xAlreadyYielded;
 80064ca:	68bb      	ldr	r3, [r7, #8]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20000464 	.word	0x20000464
 80064d8:	2000043c 	.word	0x2000043c
 80064dc:	200003fc 	.word	0x200003fc
 80064e0:	20000444 	.word	0x20000444
 80064e4:	20000340 	.word	0x20000340
 80064e8:	2000033c 	.word	0x2000033c
 80064ec:	20000450 	.word	0x20000450
 80064f0:	2000044c 	.word	0x2000044c
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <xTaskGetTickCount+0x1c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006504:	687b      	ldr	r3, [r7, #4]
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000440 	.word	0x20000440

08006518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006522:	4b4e      	ldr	r3, [pc, #312]	; (800665c <xTaskIncrementTick+0x144>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f040 808e 	bne.w	8006648 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800652c:	4b4c      	ldr	r3, [pc, #304]	; (8006660 <xTaskIncrementTick+0x148>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006534:	4a4a      	ldr	r2, [pc, #296]	; (8006660 <xTaskIncrementTick+0x148>)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d120      	bne.n	8006582 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006540:	4b48      	ldr	r3, [pc, #288]	; (8006664 <xTaskIncrementTick+0x14c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <xTaskIncrementTick+0x48>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	603b      	str	r3, [r7, #0]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <xTaskIncrementTick+0x46>
 8006560:	4b40      	ldr	r3, [pc, #256]	; (8006664 <xTaskIncrementTick+0x14c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	4b40      	ldr	r3, [pc, #256]	; (8006668 <xTaskIncrementTick+0x150>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a3e      	ldr	r2, [pc, #248]	; (8006664 <xTaskIncrementTick+0x14c>)
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	4a3e      	ldr	r2, [pc, #248]	; (8006668 <xTaskIncrementTick+0x150>)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	4b3d      	ldr	r3, [pc, #244]	; (800666c <xTaskIncrementTick+0x154>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	4a3c      	ldr	r2, [pc, #240]	; (800666c <xTaskIncrementTick+0x154>)
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	f000 f995 	bl	80068ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006582:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <xTaskIncrementTick+0x158>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	429a      	cmp	r2, r3
 800658a:	d348      	bcc.n	800661e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800658c:	4b35      	ldr	r3, [pc, #212]	; (8006664 <xTaskIncrementTick+0x14c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006596:	4b36      	ldr	r3, [pc, #216]	; (8006670 <xTaskIncrementTick+0x158>)
 8006598:	f04f 32ff 	mov.w	r2, #4294967295
 800659c:	601a      	str	r2, [r3, #0]
					break;
 800659e:	e03e      	b.n	800661e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a0:	4b30      	ldr	r3, [pc, #192]	; (8006664 <xTaskIncrementTick+0x14c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d203      	bcs.n	80065c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065b8:	4a2d      	ldr	r2, [pc, #180]	; (8006670 <xTaskIncrementTick+0x158>)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065be:	e02e      	b.n	800661e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fc1e 	bl	8005e06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	3318      	adds	r3, #24
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fc15 	bl	8005e06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	2201      	movs	r2, #1
 80065e2:	409a      	lsls	r2, r3
 80065e4:	4b23      	ldr	r3, [pc, #140]	; (8006674 <xTaskIncrementTick+0x15c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	4a22      	ldr	r2, [pc, #136]	; (8006674 <xTaskIncrementTick+0x15c>)
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4a1f      	ldr	r2, [pc, #124]	; (8006678 <xTaskIncrementTick+0x160>)
 80065fc:	441a      	add	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f7ff fba1 	bl	8005d4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660e:	4b1b      	ldr	r3, [pc, #108]	; (800667c <xTaskIncrementTick+0x164>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	429a      	cmp	r2, r3
 8006616:	d3b9      	bcc.n	800658c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800661c:	e7b6      	b.n	800658c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800661e:	4b17      	ldr	r3, [pc, #92]	; (800667c <xTaskIncrementTick+0x164>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4914      	ldr	r1, [pc, #80]	; (8006678 <xTaskIncrementTick+0x160>)
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d901      	bls.n	800663a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006636:	2301      	movs	r3, #1
 8006638:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <xTaskIncrementTick+0x168>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006642:	2301      	movs	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	e004      	b.n	8006652 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <xTaskIncrementTick+0x16c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	4a0d      	ldr	r2, [pc, #52]	; (8006684 <xTaskIncrementTick+0x16c>)
 8006650:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006652:	697b      	ldr	r3, [r7, #20]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	20000464 	.word	0x20000464
 8006660:	20000440 	.word	0x20000440
 8006664:	200003f4 	.word	0x200003f4
 8006668:	200003f8 	.word	0x200003f8
 800666c:	20000454 	.word	0x20000454
 8006670:	2000045c 	.word	0x2000045c
 8006674:	20000444 	.word	0x20000444
 8006678:	20000340 	.word	0x20000340
 800667c:	2000033c 	.word	0x2000033c
 8006680:	20000450 	.word	0x20000450
 8006684:	2000044c 	.word	0x2000044c

08006688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800668e:	4b27      	ldr	r3, [pc, #156]	; (800672c <vTaskSwitchContext+0xa4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006696:	4b26      	ldr	r3, [pc, #152]	; (8006730 <vTaskSwitchContext+0xa8>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800669c:	e03f      	b.n	800671e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800669e:	4b24      	ldr	r3, [pc, #144]	; (8006730 <vTaskSwitchContext+0xa8>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a4:	4b23      	ldr	r3, [pc, #140]	; (8006734 <vTaskSwitchContext+0xac>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	fab3 f383 	clz	r3, r3
 80066b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80066b2:	7afb      	ldrb	r3, [r7, #11]
 80066b4:	f1c3 031f 	rsb	r3, r3, #31
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	491f      	ldr	r1, [pc, #124]	; (8006738 <vTaskSwitchContext+0xb0>)
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <vTaskSwitchContext+0x5a>
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4a12      	ldr	r2, [pc, #72]	; (8006738 <vTaskSwitchContext+0xb0>)
 80066f0:	4413      	add	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3308      	adds	r3, #8
 8006706:	429a      	cmp	r2, r3
 8006708:	d104      	bne.n	8006714 <vTaskSwitchContext+0x8c>
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	4a08      	ldr	r2, [pc, #32]	; (800673c <vTaskSwitchContext+0xb4>)
 800671c:	6013      	str	r3, [r2, #0]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000464 	.word	0x20000464
 8006730:	20000450 	.word	0x20000450
 8006734:	20000444 	.word	0x20000444
 8006738:	20000340 	.word	0x20000340
 800673c:	2000033c 	.word	0x2000033c

08006740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006748:	f000 f852 	bl	80067f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <prvIdleTask+0x28>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d9f9      	bls.n	8006748 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <prvIdleTask+0x2c>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006764:	e7f0      	b.n	8006748 <prvIdleTask+0x8>
 8006766:	bf00      	nop
 8006768:	20000340 	.word	0x20000340
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006776:	2300      	movs	r3, #0
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	e00c      	b.n	8006796 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <prvInitialiseTaskLists+0x60>)
 8006788:	4413      	add	r3, r2
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fab1 	bl	8005cf2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3301      	adds	r3, #1
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b06      	cmp	r3, #6
 800679a:	d9ef      	bls.n	800677c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800679c:	480d      	ldr	r0, [pc, #52]	; (80067d4 <prvInitialiseTaskLists+0x64>)
 800679e:	f7ff faa8 	bl	8005cf2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067a2:	480d      	ldr	r0, [pc, #52]	; (80067d8 <prvInitialiseTaskLists+0x68>)
 80067a4:	f7ff faa5 	bl	8005cf2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067a8:	480c      	ldr	r0, [pc, #48]	; (80067dc <prvInitialiseTaskLists+0x6c>)
 80067aa:	f7ff faa2 	bl	8005cf2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ae:	480c      	ldr	r0, [pc, #48]	; (80067e0 <prvInitialiseTaskLists+0x70>)
 80067b0:	f7ff fa9f 	bl	8005cf2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067b4:	480b      	ldr	r0, [pc, #44]	; (80067e4 <prvInitialiseTaskLists+0x74>)
 80067b6:	f7ff fa9c 	bl	8005cf2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067ba:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <prvInitialiseTaskLists+0x78>)
 80067bc:	4a05      	ldr	r2, [pc, #20]	; (80067d4 <prvInitialiseTaskLists+0x64>)
 80067be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <prvInitialiseTaskLists+0x7c>)
 80067c2:	4a05      	ldr	r2, [pc, #20]	; (80067d8 <prvInitialiseTaskLists+0x68>)
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000340 	.word	0x20000340
 80067d4:	200003cc 	.word	0x200003cc
 80067d8:	200003e0 	.word	0x200003e0
 80067dc:	200003fc 	.word	0x200003fc
 80067e0:	20000410 	.word	0x20000410
 80067e4:	20000428 	.word	0x20000428
 80067e8:	200003f4 	.word	0x200003f4
 80067ec:	200003f8 	.word	0x200003f8

080067f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f6:	e019      	b.n	800682c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067f8:	f000 fa2c 	bl	8006c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <prvCheckTasksWaitingTermination+0x50>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff fafc 	bl	8005e06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800680e:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <prvCheckTasksWaitingTermination+0x54>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3b01      	subs	r3, #1
 8006814:	4a0b      	ldr	r2, [pc, #44]	; (8006844 <prvCheckTasksWaitingTermination+0x54>)
 8006816:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <prvCheckTasksWaitingTermination+0x58>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	4a0a      	ldr	r2, [pc, #40]	; (8006848 <prvCheckTasksWaitingTermination+0x58>)
 8006820:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006822:	f000 fa47 	bl	8006cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f810 	bl	800684c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <prvCheckTasksWaitingTermination+0x58>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e1      	bne.n	80067f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000410 	.word	0x20000410
 8006844:	2000043c 	.word	0x2000043c
 8006848:	20000424 	.word	0x20000424

0800684c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800685a:	2b00      	cmp	r3, #0
 800685c:	d108      	bne.n	8006870 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fba4 	bl	8006fb0 <vPortFree>
				vPortFree( pxTCB );
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fba1 	bl	8006fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800686e:	e018      	b.n	80068a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006876:	2b01      	cmp	r3, #1
 8006878:	d103      	bne.n	8006882 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fb98 	bl	8006fb0 <vPortFree>
	}
 8006880:	e00f      	b.n	80068a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006888:	2b02      	cmp	r3, #2
 800688a:	d00a      	beq.n	80068a2 <prvDeleteTCB+0x56>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60fb      	str	r3, [r7, #12]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <prvDeleteTCB+0x54>
	}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068b2:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <prvResetNextTaskUnblockTime+0x38>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <prvResetNextTaskUnblockTime+0x3c>)
 80068be:	f04f 32ff 	mov.w	r2, #4294967295
 80068c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068c4:	e008      	b.n	80068d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c6:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <prvResetNextTaskUnblockTime+0x38>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <prvResetNextTaskUnblockTime+0x3c>)
 80068d6:	6013      	str	r3, [r2, #0]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	200003f4 	.word	0x200003f4
 80068e8:	2000045c 	.word	0x2000045c

080068ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068f2:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <xTaskGetSchedulerState+0x34>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d102      	bne.n	8006900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068fa:	2301      	movs	r3, #1
 80068fc:	607b      	str	r3, [r7, #4]
 80068fe:	e008      	b.n	8006912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006900:	4b08      	ldr	r3, [pc, #32]	; (8006924 <xTaskGetSchedulerState+0x38>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d102      	bne.n	800690e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006908:	2302      	movs	r3, #2
 800690a:	607b      	str	r3, [r7, #4]
 800690c:	e001      	b.n	8006912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800690e:	2300      	movs	r3, #0
 8006910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006912:	687b      	ldr	r3, [r7, #4]
	}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20000448 	.word	0x20000448
 8006924:	20000464 	.word	0x20000464

08006928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006932:	4b29      	ldr	r3, [pc, #164]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006938:	4b28      	ldr	r3, [pc, #160]	; (80069dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3304      	adds	r3, #4
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fa61 	bl	8005e06 <uxListRemove>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10b      	bne.n	8006962 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	2201      	movs	r2, #1
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43da      	mvns	r2, r3
 8006958:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4013      	ands	r3, r2
 800695e:	4a20      	ldr	r2, [pc, #128]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006960:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d10a      	bne.n	8006980 <prvAddCurrentTaskToDelayedList+0x58>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006970:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3304      	adds	r3, #4
 8006976:	4619      	mov	r1, r3
 8006978:	481a      	ldr	r0, [pc, #104]	; (80069e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800697a:	f7ff f9e7 	bl	8005d4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800697e:	e026      	b.n	80069ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4413      	add	r3, r2
 8006986:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006988:	4b14      	ldr	r3, [pc, #80]	; (80069dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	429a      	cmp	r2, r3
 8006996:	d209      	bcs.n	80069ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006998:	4b13      	ldr	r3, [pc, #76]	; (80069e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7ff f9f5 	bl	8005d94 <vListInsert>
}
 80069aa:	e010      	b.n	80069ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069ac:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3304      	adds	r3, #4
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f7ff f9eb 	bl	8005d94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069be:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d202      	bcs.n	80069ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6013      	str	r3, [r2, #0]
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000440 	.word	0x20000440
 80069dc:	2000033c 	.word	0x2000033c
 80069e0:	20000444 	.word	0x20000444
 80069e4:	20000428 	.word	0x20000428
 80069e8:	200003f8 	.word	0x200003f8
 80069ec:	200003f4 	.word	0x200003f4
 80069f0:	2000045c 	.word	0x2000045c

080069f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3b04      	subs	r3, #4
 8006a04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3b04      	subs	r3, #4
 8006a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f023 0201 	bic.w	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3b04      	subs	r3, #4
 8006a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a24:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <pxPortInitialiseStack+0x64>)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3b14      	subs	r3, #20
 8006a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f06f 0202 	mvn.w	r2, #2
 8006a42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3b20      	subs	r3, #32
 8006a48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	08006a5d 	.word	0x08006a5d

08006a5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <prvTaskExitError+0x54>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d00a      	beq.n	8006a86 <prvTaskExitError+0x2a>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	60fb      	str	r3, [r7, #12]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <prvTaskExitError+0x28>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	60bb      	str	r3, [r7, #8]
}
 8006a98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a9a:	bf00      	nop
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0fc      	beq.n	8006a9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006aa2:	bf00      	nop
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20000010 	.word	0x20000010
	...

08006ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <pxCurrentTCBConst2>)
 8006ac2:	6819      	ldr	r1, [r3, #0]
 8006ac4:	6808      	ldr	r0, [r1, #0]
 8006ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aca:	f380 8809 	msr	PSP, r0
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f04f 0000 	mov.w	r0, #0
 8006ad6:	f380 8811 	msr	BASEPRI, r0
 8006ada:	4770      	bx	lr
 8006adc:	f3af 8000 	nop.w

08006ae0 <pxCurrentTCBConst2>:
 8006ae0:	2000033c 	.word	0x2000033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop

08006ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ae8:	4808      	ldr	r0, [pc, #32]	; (8006b0c <prvPortStartFirstTask+0x24>)
 8006aea:	6800      	ldr	r0, [r0, #0]
 8006aec:	6800      	ldr	r0, [r0, #0]
 8006aee:	f380 8808 	msr	MSP, r0
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f380 8814 	msr	CONTROL, r0
 8006afa:	b662      	cpsie	i
 8006afc:	b661      	cpsie	f
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	df00      	svc	0
 8006b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b0a:	bf00      	nop
 8006b0c:	e000ed08 	.word	0xe000ed08

08006b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b16:	4b46      	ldr	r3, [pc, #280]	; (8006c30 <xPortStartScheduler+0x120>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a46      	ldr	r2, [pc, #280]	; (8006c34 <xPortStartScheduler+0x124>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d10a      	bne.n	8006b36 <xPortStartScheduler+0x26>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	613b      	str	r3, [r7, #16]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b36:	4b3e      	ldr	r3, [pc, #248]	; (8006c30 <xPortStartScheduler+0x120>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a3f      	ldr	r2, [pc, #252]	; (8006c38 <xPortStartScheduler+0x128>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10a      	bne.n	8006b56 <xPortStartScheduler+0x46>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	60fb      	str	r3, [r7, #12]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b56:	4b39      	ldr	r3, [pc, #228]	; (8006c3c <xPortStartScheduler+0x12c>)
 8006b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	22ff      	movs	r2, #255	; 0xff
 8006b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	4b31      	ldr	r3, [pc, #196]	; (8006c40 <xPortStartScheduler+0x130>)
 8006b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b7e:	4b31      	ldr	r3, [pc, #196]	; (8006c44 <xPortStartScheduler+0x134>)
 8006b80:	2207      	movs	r2, #7
 8006b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b84:	e009      	b.n	8006b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b86:	4b2f      	ldr	r3, [pc, #188]	; (8006c44 <xPortStartScheduler+0x134>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	4a2d      	ldr	r2, [pc, #180]	; (8006c44 <xPortStartScheduler+0x134>)
 8006b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d0ef      	beq.n	8006b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ba6:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <xPortStartScheduler+0x134>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f1c3 0307 	rsb	r3, r3, #7
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d00a      	beq.n	8006bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	60bb      	str	r3, [r7, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bc8:	4b1e      	ldr	r3, [pc, #120]	; (8006c44 <xPortStartScheduler+0x134>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	021b      	lsls	r3, r3, #8
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <xPortStartScheduler+0x134>)
 8006bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bd2:	4b1c      	ldr	r3, [pc, #112]	; (8006c44 <xPortStartScheduler+0x134>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bda:	4a1a      	ldr	r2, [pc, #104]	; (8006c44 <xPortStartScheduler+0x134>)
 8006bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006be6:	4b18      	ldr	r3, [pc, #96]	; (8006c48 <xPortStartScheduler+0x138>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <xPortStartScheduler+0x138>)
 8006bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bf2:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <xPortStartScheduler+0x138>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <xPortStartScheduler+0x138>)
 8006bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bfe:	f000 f8dd 	bl	8006dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c02:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <xPortStartScheduler+0x13c>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c08:	f000 f8fc 	bl	8006e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c0c:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <xPortStartScheduler+0x140>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a0f      	ldr	r2, [pc, #60]	; (8006c50 <xPortStartScheduler+0x140>)
 8006c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c18:	f7ff ff66 	bl	8006ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c1c:	f7ff fd34 	bl	8006688 <vTaskSwitchContext>
	prvTaskExitError();
 8006c20:	f7ff ff1c 	bl	8006a5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	e000ed00 	.word	0xe000ed00
 8006c34:	410fc271 	.word	0x410fc271
 8006c38:	410fc270 	.word	0x410fc270
 8006c3c:	e000e400 	.word	0xe000e400
 8006c40:	20000468 	.word	0x20000468
 8006c44:	2000046c 	.word	0x2000046c
 8006c48:	e000ed20 	.word	0xe000ed20
 8006c4c:	20000010 	.word	0x20000010
 8006c50:	e000ef34 	.word	0xe000ef34

08006c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	607b      	str	r3, [r7, #4]
}
 8006c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <vPortEnterCritical+0x58>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3301      	adds	r3, #1
 8006c74:	4a0d      	ldr	r2, [pc, #52]	; (8006cac <vPortEnterCritical+0x58>)
 8006c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c78:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <vPortEnterCritical+0x58>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d10f      	bne.n	8006ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c80:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <vPortEnterCritical+0x5c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	603b      	str	r3, [r7, #0]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <vPortEnterCritical+0x4a>
	}
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	20000010 	.word	0x20000010
 8006cb0:	e000ed04 	.word	0xe000ed04

08006cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cba:	4b12      	ldr	r3, [pc, #72]	; (8006d04 <vPortExitCritical+0x50>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10a      	bne.n	8006cd8 <vPortExitCritical+0x24>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	607b      	str	r3, [r7, #4]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <vPortExitCritical+0x50>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	4a09      	ldr	r2, [pc, #36]	; (8006d04 <vPortExitCritical+0x50>)
 8006ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <vPortExitCritical+0x50>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d105      	bne.n	8006cf6 <vPortExitCritical+0x42>
 8006cea:	2300      	movs	r3, #0
 8006cec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	20000010 	.word	0x20000010
	...

08006d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d10:	f3ef 8009 	mrs	r0, PSP
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <pxCurrentTCBConst>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	f01e 0f10 	tst.w	lr, #16
 8006d20:	bf08      	it	eq
 8006d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	6010      	str	r0, [r2, #0]
 8006d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d34:	f380 8811 	msr	BASEPRI, r0
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f7ff fca2 	bl	8006688 <vTaskSwitchContext>
 8006d44:	f04f 0000 	mov.w	r0, #0
 8006d48:	f380 8811 	msr	BASEPRI, r0
 8006d4c:	bc09      	pop	{r0, r3}
 8006d4e:	6819      	ldr	r1, [r3, #0]
 8006d50:	6808      	ldr	r0, [r1, #0]
 8006d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d56:	f01e 0f10 	tst.w	lr, #16
 8006d5a:	bf08      	it	eq
 8006d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d60:	f380 8809 	msr	PSP, r0
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	f3af 8000 	nop.w

08006d70 <pxCurrentTCBConst>:
 8006d70:	2000033c 	.word	0x2000033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop

08006d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
}
 8006d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d92:	f7ff fbc1 	bl	8006518 <xTaskIncrementTick>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <xPortSysTickHandler+0x40>)
 8006d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	2300      	movs	r3, #0
 8006da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	f383 8811 	msr	BASEPRI, r3
}
 8006dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <vPortSetupTimerInterrupt+0x34>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <vPortSetupTimerInterrupt+0x38>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <vPortSetupTimerInterrupt+0x3c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <vPortSetupTimerInterrupt+0x40>)
 8006dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd6:	099b      	lsrs	r3, r3, #6
 8006dd8:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <vPortSetupTimerInterrupt+0x44>)
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dde:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <vPortSetupTimerInterrupt+0x34>)
 8006de0:	2207      	movs	r2, #7
 8006de2:	601a      	str	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	e000e010 	.word	0xe000e010
 8006df4:	e000e018 	.word	0xe000e018
 8006df8:	20000004 	.word	0x20000004
 8006dfc:	10624dd3 	.word	0x10624dd3
 8006e00:	e000e014 	.word	0xe000e014

08006e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e14 <vPortEnableVFP+0x10>
 8006e08:	6801      	ldr	r1, [r0, #0]
 8006e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e0e:	6001      	str	r1, [r0, #0]
 8006e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e12:	bf00      	nop
 8006e14:	e000ed88 	.word	0xe000ed88

08006e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e24:	f7ff fabe 	bl	80063a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e28:	4b5b      	ldr	r3, [pc, #364]	; (8006f98 <pvPortMalloc+0x180>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e30:	f000 f920 	bl	8007074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e34:	4b59      	ldr	r3, [pc, #356]	; (8006f9c <pvPortMalloc+0x184>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 8093 	bne.w	8006f68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01d      	beq.n	8006e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e48:	2208      	movs	r2, #8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d014      	beq.n	8006e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f023 0307 	bic.w	r3, r3, #7
 8006e60:	3308      	adds	r3, #8
 8006e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <pvPortMalloc+0x6c>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	617b      	str	r3, [r7, #20]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d06e      	beq.n	8006f68 <pvPortMalloc+0x150>
 8006e8a:	4b45      	ldr	r3, [pc, #276]	; (8006fa0 <pvPortMalloc+0x188>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d869      	bhi.n	8006f68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e94:	4b43      	ldr	r3, [pc, #268]	; (8006fa4 <pvPortMalloc+0x18c>)
 8006e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e98:	4b42      	ldr	r3, [pc, #264]	; (8006fa4 <pvPortMalloc+0x18c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e9e:	e004      	b.n	8006eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d903      	bls.n	8006ebc <pvPortMalloc+0xa4>
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1f1      	bne.n	8006ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ebc:	4b36      	ldr	r3, [pc, #216]	; (8006f98 <pvPortMalloc+0x180>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d050      	beq.n	8006f68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2208      	movs	r2, #8
 8006ecc:	4413      	add	r3, r2
 8006ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d91f      	bls.n	8006f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <pvPortMalloc+0xf8>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	613b      	str	r3, [r7, #16]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f22:	69b8      	ldr	r0, [r7, #24]
 8006f24:	f000 f908 	bl	8007138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f28:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f36:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <pvPortMalloc+0x190>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d203      	bcs.n	8006f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f42:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a18      	ldr	r2, [pc, #96]	; (8006fa8 <pvPortMalloc+0x190>)
 8006f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <pvPortMalloc+0x184>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <pvPortMalloc+0x194>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	4a11      	ldr	r2, [pc, #68]	; (8006fac <pvPortMalloc+0x194>)
 8006f66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f68:	f7ff fa2a 	bl	80063c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <pvPortMalloc+0x174>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60fb      	str	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <pvPortMalloc+0x172>
	return pvReturn;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3728      	adds	r7, #40	; 0x28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20004078 	.word	0x20004078
 8006f9c:	2000408c 	.word	0x2000408c
 8006fa0:	2000407c 	.word	0x2000407c
 8006fa4:	20004070 	.word	0x20004070
 8006fa8:	20004080 	.word	0x20004080
 8006fac:	20004084 	.word	0x20004084

08006fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d04d      	beq.n	800705e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fc2:	2308      	movs	r3, #8
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4413      	add	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	4b24      	ldr	r3, [pc, #144]	; (8007068 <vPortFree+0xb8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <vPortFree+0x44>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	60fb      	str	r3, [r7, #12]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <vPortFree+0x62>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60bb      	str	r3, [r7, #8]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <vPortFree+0xb8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01e      	beq.n	800705e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11a      	bne.n	800705e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <vPortFree+0xb8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	43db      	mvns	r3, r3
 8007032:	401a      	ands	r2, r3
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007038:	f7ff f9b4 	bl	80063a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <vPortFree+0xbc>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4413      	add	r3, r2
 8007046:	4a09      	ldr	r2, [pc, #36]	; (800706c <vPortFree+0xbc>)
 8007048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f000 f874 	bl	8007138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <vPortFree+0xc0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3301      	adds	r3, #1
 8007056:	4a06      	ldr	r2, [pc, #24]	; (8007070 <vPortFree+0xc0>)
 8007058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800705a:	f7ff f9b1 	bl	80063c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800705e:	bf00      	nop
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	2000408c 	.word	0x2000408c
 800706c:	2000407c 	.word	0x2000407c
 8007070:	20004088 	.word	0x20004088

08007074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800707a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800707e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007080:	4b27      	ldr	r3, [pc, #156]	; (8007120 <prvHeapInit+0xac>)
 8007082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3307      	adds	r3, #7
 8007092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0307 	bic.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <prvHeapInit+0xac>)
 80070a4:	4413      	add	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070ac:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <prvHeapInit+0xb0>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070b2:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <prvHeapInit+0xb0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070c0:	2208      	movs	r2, #8
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0307 	bic.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a15      	ldr	r2, [pc, #84]	; (8007128 <prvHeapInit+0xb4>)
 80070d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <prvHeapInit+0xb4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070de:	4b12      	ldr	r3, [pc, #72]	; (8007128 <prvHeapInit+0xb4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070f4:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <prvHeapInit+0xb4>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	4a0a      	ldr	r2, [pc, #40]	; (800712c <prvHeapInit+0xb8>)
 8007102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <prvHeapInit+0xbc>)
 800710a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800710c:	4b09      	ldr	r3, [pc, #36]	; (8007134 <prvHeapInit+0xc0>)
 800710e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20000470 	.word	0x20000470
 8007124:	20004070 	.word	0x20004070
 8007128:	20004078 	.word	0x20004078
 800712c:	20004080 	.word	0x20004080
 8007130:	2000407c 	.word	0x2000407c
 8007134:	2000408c 	.word	0x2000408c

08007138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007140:	4b28      	ldr	r3, [pc, #160]	; (80071e4 <prvInsertBlockIntoFreeList+0xac>)
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e002      	b.n	800714c <prvInsertBlockIntoFreeList+0x14>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d8f7      	bhi.n	8007146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d108      	bne.n	800717a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	441a      	add	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d118      	bne.n	80071c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d00d      	beq.n	80071b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	441a      	add	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	e008      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <prvInsertBlockIntoFreeList+0xb0>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e003      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d002      	beq.n	80071d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20004070 	.word	0x20004070
 80071e8:	20004078 	.word	0x20004078

080071ec <__errno>:
 80071ec:	4b01      	ldr	r3, [pc, #4]	; (80071f4 <__errno+0x8>)
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000014 	.word	0x20000014

080071f8 <__libc_init_array>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4d0d      	ldr	r5, [pc, #52]	; (8007230 <__libc_init_array+0x38>)
 80071fc:	4c0d      	ldr	r4, [pc, #52]	; (8007234 <__libc_init_array+0x3c>)
 80071fe:	1b64      	subs	r4, r4, r5
 8007200:	10a4      	asrs	r4, r4, #2
 8007202:	2600      	movs	r6, #0
 8007204:	42a6      	cmp	r6, r4
 8007206:	d109      	bne.n	800721c <__libc_init_array+0x24>
 8007208:	4d0b      	ldr	r5, [pc, #44]	; (8007238 <__libc_init_array+0x40>)
 800720a:	4c0c      	ldr	r4, [pc, #48]	; (800723c <__libc_init_array+0x44>)
 800720c:	f000 fc4e 	bl	8007aac <_init>
 8007210:	1b64      	subs	r4, r4, r5
 8007212:	10a4      	asrs	r4, r4, #2
 8007214:	2600      	movs	r6, #0
 8007216:	42a6      	cmp	r6, r4
 8007218:	d105      	bne.n	8007226 <__libc_init_array+0x2e>
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007220:	4798      	blx	r3
 8007222:	3601      	adds	r6, #1
 8007224:	e7ee      	b.n	8007204 <__libc_init_array+0xc>
 8007226:	f855 3b04 	ldr.w	r3, [r5], #4
 800722a:	4798      	blx	r3
 800722c:	3601      	adds	r6, #1
 800722e:	e7f2      	b.n	8007216 <__libc_init_array+0x1e>
 8007230:	08007c00 	.word	0x08007c00
 8007234:	08007c00 	.word	0x08007c00
 8007238:	08007c00 	.word	0x08007c00
 800723c:	08007c04 	.word	0x08007c04

08007240 <memcpy>:
 8007240:	440a      	add	r2, r1
 8007242:	4291      	cmp	r1, r2
 8007244:	f100 33ff 	add.w	r3, r0, #4294967295
 8007248:	d100      	bne.n	800724c <memcpy+0xc>
 800724a:	4770      	bx	lr
 800724c:	b510      	push	{r4, lr}
 800724e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007256:	4291      	cmp	r1, r2
 8007258:	d1f9      	bne.n	800724e <memcpy+0xe>
 800725a:	bd10      	pop	{r4, pc}

0800725c <memset>:
 800725c:	4402      	add	r2, r0
 800725e:	4603      	mov	r3, r0
 8007260:	4293      	cmp	r3, r2
 8007262:	d100      	bne.n	8007266 <memset+0xa>
 8007264:	4770      	bx	lr
 8007266:	f803 1b01 	strb.w	r1, [r3], #1
 800726a:	e7f9      	b.n	8007260 <memset+0x4>

0800726c <siprintf>:
 800726c:	b40e      	push	{r1, r2, r3}
 800726e:	b500      	push	{lr}
 8007270:	b09c      	sub	sp, #112	; 0x70
 8007272:	ab1d      	add	r3, sp, #116	; 0x74
 8007274:	9002      	str	r0, [sp, #8]
 8007276:	9006      	str	r0, [sp, #24]
 8007278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800727c:	4809      	ldr	r0, [pc, #36]	; (80072a4 <siprintf+0x38>)
 800727e:	9107      	str	r1, [sp, #28]
 8007280:	9104      	str	r1, [sp, #16]
 8007282:	4909      	ldr	r1, [pc, #36]	; (80072a8 <siprintf+0x3c>)
 8007284:	f853 2b04 	ldr.w	r2, [r3], #4
 8007288:	9105      	str	r1, [sp, #20]
 800728a:	6800      	ldr	r0, [r0, #0]
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	a902      	add	r1, sp, #8
 8007290:	f000 f868 	bl	8007364 <_svfiprintf_r>
 8007294:	9b02      	ldr	r3, [sp, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	b01c      	add	sp, #112	; 0x70
 800729c:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a0:	b003      	add	sp, #12
 80072a2:	4770      	bx	lr
 80072a4:	20000014 	.word	0x20000014
 80072a8:	ffff0208 	.word	0xffff0208

080072ac <__ssputs_r>:
 80072ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b0:	688e      	ldr	r6, [r1, #8]
 80072b2:	429e      	cmp	r6, r3
 80072b4:	4682      	mov	sl, r0
 80072b6:	460c      	mov	r4, r1
 80072b8:	4690      	mov	r8, r2
 80072ba:	461f      	mov	r7, r3
 80072bc:	d838      	bhi.n	8007330 <__ssputs_r+0x84>
 80072be:	898a      	ldrh	r2, [r1, #12]
 80072c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072c4:	d032      	beq.n	800732c <__ssputs_r+0x80>
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	6909      	ldr	r1, [r1, #16]
 80072ca:	eba5 0901 	sub.w	r9, r5, r1
 80072ce:	6965      	ldr	r5, [r4, #20]
 80072d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072d8:	3301      	adds	r3, #1
 80072da:	444b      	add	r3, r9
 80072dc:	106d      	asrs	r5, r5, #1
 80072de:	429d      	cmp	r5, r3
 80072e0:	bf38      	it	cc
 80072e2:	461d      	movcc	r5, r3
 80072e4:	0553      	lsls	r3, r2, #21
 80072e6:	d531      	bpl.n	800734c <__ssputs_r+0xa0>
 80072e8:	4629      	mov	r1, r5
 80072ea:	f000 fb39 	bl	8007960 <_malloc_r>
 80072ee:	4606      	mov	r6, r0
 80072f0:	b950      	cbnz	r0, 8007308 <__ssputs_r+0x5c>
 80072f2:	230c      	movs	r3, #12
 80072f4:	f8ca 3000 	str.w	r3, [sl]
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007308:	6921      	ldr	r1, [r4, #16]
 800730a:	464a      	mov	r2, r9
 800730c:	f7ff ff98 	bl	8007240 <memcpy>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	6126      	str	r6, [r4, #16]
 800731e:	6165      	str	r5, [r4, #20]
 8007320:	444e      	add	r6, r9
 8007322:	eba5 0509 	sub.w	r5, r5, r9
 8007326:	6026      	str	r6, [r4, #0]
 8007328:	60a5      	str	r5, [r4, #8]
 800732a:	463e      	mov	r6, r7
 800732c:	42be      	cmp	r6, r7
 800732e:	d900      	bls.n	8007332 <__ssputs_r+0x86>
 8007330:	463e      	mov	r6, r7
 8007332:	4632      	mov	r2, r6
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	4641      	mov	r1, r8
 8007338:	f000 faa8 	bl	800788c <memmove>
 800733c:	68a3      	ldr	r3, [r4, #8]
 800733e:	6822      	ldr	r2, [r4, #0]
 8007340:	1b9b      	subs	r3, r3, r6
 8007342:	4432      	add	r2, r6
 8007344:	60a3      	str	r3, [r4, #8]
 8007346:	6022      	str	r2, [r4, #0]
 8007348:	2000      	movs	r0, #0
 800734a:	e7db      	b.n	8007304 <__ssputs_r+0x58>
 800734c:	462a      	mov	r2, r5
 800734e:	f000 fb61 	bl	8007a14 <_realloc_r>
 8007352:	4606      	mov	r6, r0
 8007354:	2800      	cmp	r0, #0
 8007356:	d1e1      	bne.n	800731c <__ssputs_r+0x70>
 8007358:	6921      	ldr	r1, [r4, #16]
 800735a:	4650      	mov	r0, sl
 800735c:	f000 fab0 	bl	80078c0 <_free_r>
 8007360:	e7c7      	b.n	80072f2 <__ssputs_r+0x46>
	...

08007364 <_svfiprintf_r>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	4698      	mov	r8, r3
 800736a:	898b      	ldrh	r3, [r1, #12]
 800736c:	061b      	lsls	r3, r3, #24
 800736e:	b09d      	sub	sp, #116	; 0x74
 8007370:	4607      	mov	r7, r0
 8007372:	460d      	mov	r5, r1
 8007374:	4614      	mov	r4, r2
 8007376:	d50e      	bpl.n	8007396 <_svfiprintf_r+0x32>
 8007378:	690b      	ldr	r3, [r1, #16]
 800737a:	b963      	cbnz	r3, 8007396 <_svfiprintf_r+0x32>
 800737c:	2140      	movs	r1, #64	; 0x40
 800737e:	f000 faef 	bl	8007960 <_malloc_r>
 8007382:	6028      	str	r0, [r5, #0]
 8007384:	6128      	str	r0, [r5, #16]
 8007386:	b920      	cbnz	r0, 8007392 <_svfiprintf_r+0x2e>
 8007388:	230c      	movs	r3, #12
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	e0d1      	b.n	8007536 <_svfiprintf_r+0x1d2>
 8007392:	2340      	movs	r3, #64	; 0x40
 8007394:	616b      	str	r3, [r5, #20]
 8007396:	2300      	movs	r3, #0
 8007398:	9309      	str	r3, [sp, #36]	; 0x24
 800739a:	2320      	movs	r3, #32
 800739c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a4:	2330      	movs	r3, #48	; 0x30
 80073a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007550 <_svfiprintf_r+0x1ec>
 80073aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073ae:	f04f 0901 	mov.w	r9, #1
 80073b2:	4623      	mov	r3, r4
 80073b4:	469a      	mov	sl, r3
 80073b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ba:	b10a      	cbz	r2, 80073c0 <_svfiprintf_r+0x5c>
 80073bc:	2a25      	cmp	r2, #37	; 0x25
 80073be:	d1f9      	bne.n	80073b4 <_svfiprintf_r+0x50>
 80073c0:	ebba 0b04 	subs.w	fp, sl, r4
 80073c4:	d00b      	beq.n	80073de <_svfiprintf_r+0x7a>
 80073c6:	465b      	mov	r3, fp
 80073c8:	4622      	mov	r2, r4
 80073ca:	4629      	mov	r1, r5
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7ff ff6d 	bl	80072ac <__ssputs_r>
 80073d2:	3001      	adds	r0, #1
 80073d4:	f000 80aa 	beq.w	800752c <_svfiprintf_r+0x1c8>
 80073d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073da:	445a      	add	r2, fp
 80073dc:	9209      	str	r2, [sp, #36]	; 0x24
 80073de:	f89a 3000 	ldrb.w	r3, [sl]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80a2 	beq.w	800752c <_svfiprintf_r+0x1c8>
 80073e8:	2300      	movs	r3, #0
 80073ea:	f04f 32ff 	mov.w	r2, #4294967295
 80073ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f2:	f10a 0a01 	add.w	sl, sl, #1
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	9307      	str	r3, [sp, #28]
 80073fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007400:	4654      	mov	r4, sl
 8007402:	2205      	movs	r2, #5
 8007404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007408:	4851      	ldr	r0, [pc, #324]	; (8007550 <_svfiprintf_r+0x1ec>)
 800740a:	f7f8 ff11 	bl	8000230 <memchr>
 800740e:	9a04      	ldr	r2, [sp, #16]
 8007410:	b9d8      	cbnz	r0, 800744a <_svfiprintf_r+0xe6>
 8007412:	06d0      	lsls	r0, r2, #27
 8007414:	bf44      	itt	mi
 8007416:	2320      	movmi	r3, #32
 8007418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800741c:	0711      	lsls	r1, r2, #28
 800741e:	bf44      	itt	mi
 8007420:	232b      	movmi	r3, #43	; 0x2b
 8007422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007426:	f89a 3000 	ldrb.w	r3, [sl]
 800742a:	2b2a      	cmp	r3, #42	; 0x2a
 800742c:	d015      	beq.n	800745a <_svfiprintf_r+0xf6>
 800742e:	9a07      	ldr	r2, [sp, #28]
 8007430:	4654      	mov	r4, sl
 8007432:	2000      	movs	r0, #0
 8007434:	f04f 0c0a 	mov.w	ip, #10
 8007438:	4621      	mov	r1, r4
 800743a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800743e:	3b30      	subs	r3, #48	; 0x30
 8007440:	2b09      	cmp	r3, #9
 8007442:	d94e      	bls.n	80074e2 <_svfiprintf_r+0x17e>
 8007444:	b1b0      	cbz	r0, 8007474 <_svfiprintf_r+0x110>
 8007446:	9207      	str	r2, [sp, #28]
 8007448:	e014      	b.n	8007474 <_svfiprintf_r+0x110>
 800744a:	eba0 0308 	sub.w	r3, r0, r8
 800744e:	fa09 f303 	lsl.w	r3, r9, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	9304      	str	r3, [sp, #16]
 8007456:	46a2      	mov	sl, r4
 8007458:	e7d2      	b.n	8007400 <_svfiprintf_r+0x9c>
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	1d19      	adds	r1, r3, #4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	9103      	str	r1, [sp, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	bfbb      	ittet	lt
 8007466:	425b      	neglt	r3, r3
 8007468:	f042 0202 	orrlt.w	r2, r2, #2
 800746c:	9307      	strge	r3, [sp, #28]
 800746e:	9307      	strlt	r3, [sp, #28]
 8007470:	bfb8      	it	lt
 8007472:	9204      	strlt	r2, [sp, #16]
 8007474:	7823      	ldrb	r3, [r4, #0]
 8007476:	2b2e      	cmp	r3, #46	; 0x2e
 8007478:	d10c      	bne.n	8007494 <_svfiprintf_r+0x130>
 800747a:	7863      	ldrb	r3, [r4, #1]
 800747c:	2b2a      	cmp	r3, #42	; 0x2a
 800747e:	d135      	bne.n	80074ec <_svfiprintf_r+0x188>
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	1d1a      	adds	r2, r3, #4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	9203      	str	r2, [sp, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	bfb8      	it	lt
 800748c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007490:	3402      	adds	r4, #2
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007560 <_svfiprintf_r+0x1fc>
 8007498:	7821      	ldrb	r1, [r4, #0]
 800749a:	2203      	movs	r2, #3
 800749c:	4650      	mov	r0, sl
 800749e:	f7f8 fec7 	bl	8000230 <memchr>
 80074a2:	b140      	cbz	r0, 80074b6 <_svfiprintf_r+0x152>
 80074a4:	2340      	movs	r3, #64	; 0x40
 80074a6:	eba0 000a 	sub.w	r0, r0, sl
 80074aa:	fa03 f000 	lsl.w	r0, r3, r0
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	4303      	orrs	r3, r0
 80074b2:	3401      	adds	r4, #1
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ba:	4826      	ldr	r0, [pc, #152]	; (8007554 <_svfiprintf_r+0x1f0>)
 80074bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074c0:	2206      	movs	r2, #6
 80074c2:	f7f8 feb5 	bl	8000230 <memchr>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d038      	beq.n	800753c <_svfiprintf_r+0x1d8>
 80074ca:	4b23      	ldr	r3, [pc, #140]	; (8007558 <_svfiprintf_r+0x1f4>)
 80074cc:	bb1b      	cbnz	r3, 8007516 <_svfiprintf_r+0x1b2>
 80074ce:	9b03      	ldr	r3, [sp, #12]
 80074d0:	3307      	adds	r3, #7
 80074d2:	f023 0307 	bic.w	r3, r3, #7
 80074d6:	3308      	adds	r3, #8
 80074d8:	9303      	str	r3, [sp, #12]
 80074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074dc:	4433      	add	r3, r6
 80074de:	9309      	str	r3, [sp, #36]	; 0x24
 80074e0:	e767      	b.n	80073b2 <_svfiprintf_r+0x4e>
 80074e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e6:	460c      	mov	r4, r1
 80074e8:	2001      	movs	r0, #1
 80074ea:	e7a5      	b.n	8007438 <_svfiprintf_r+0xd4>
 80074ec:	2300      	movs	r3, #0
 80074ee:	3401      	adds	r4, #1
 80074f0:	9305      	str	r3, [sp, #20]
 80074f2:	4619      	mov	r1, r3
 80074f4:	f04f 0c0a 	mov.w	ip, #10
 80074f8:	4620      	mov	r0, r4
 80074fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074fe:	3a30      	subs	r2, #48	; 0x30
 8007500:	2a09      	cmp	r2, #9
 8007502:	d903      	bls.n	800750c <_svfiprintf_r+0x1a8>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0c5      	beq.n	8007494 <_svfiprintf_r+0x130>
 8007508:	9105      	str	r1, [sp, #20]
 800750a:	e7c3      	b.n	8007494 <_svfiprintf_r+0x130>
 800750c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007510:	4604      	mov	r4, r0
 8007512:	2301      	movs	r3, #1
 8007514:	e7f0      	b.n	80074f8 <_svfiprintf_r+0x194>
 8007516:	ab03      	add	r3, sp, #12
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	462a      	mov	r2, r5
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <_svfiprintf_r+0x1f8>)
 800751e:	a904      	add	r1, sp, #16
 8007520:	4638      	mov	r0, r7
 8007522:	f3af 8000 	nop.w
 8007526:	1c42      	adds	r2, r0, #1
 8007528:	4606      	mov	r6, r0
 800752a:	d1d6      	bne.n	80074da <_svfiprintf_r+0x176>
 800752c:	89ab      	ldrh	r3, [r5, #12]
 800752e:	065b      	lsls	r3, r3, #25
 8007530:	f53f af2c 	bmi.w	800738c <_svfiprintf_r+0x28>
 8007534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007536:	b01d      	add	sp, #116	; 0x74
 8007538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753c:	ab03      	add	r3, sp, #12
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	462a      	mov	r2, r5
 8007542:	4b06      	ldr	r3, [pc, #24]	; (800755c <_svfiprintf_r+0x1f8>)
 8007544:	a904      	add	r1, sp, #16
 8007546:	4638      	mov	r0, r7
 8007548:	f000 f87a 	bl	8007640 <_printf_i>
 800754c:	e7eb      	b.n	8007526 <_svfiprintf_r+0x1c2>
 800754e:	bf00      	nop
 8007550:	08007bc4 	.word	0x08007bc4
 8007554:	08007bce 	.word	0x08007bce
 8007558:	00000000 	.word	0x00000000
 800755c:	080072ad 	.word	0x080072ad
 8007560:	08007bca 	.word	0x08007bca

08007564 <_printf_common>:
 8007564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	4616      	mov	r6, r2
 800756a:	4699      	mov	r9, r3
 800756c:	688a      	ldr	r2, [r1, #8]
 800756e:	690b      	ldr	r3, [r1, #16]
 8007570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007574:	4293      	cmp	r3, r2
 8007576:	bfb8      	it	lt
 8007578:	4613      	movlt	r3, r2
 800757a:	6033      	str	r3, [r6, #0]
 800757c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007580:	4607      	mov	r7, r0
 8007582:	460c      	mov	r4, r1
 8007584:	b10a      	cbz	r2, 800758a <_printf_common+0x26>
 8007586:	3301      	adds	r3, #1
 8007588:	6033      	str	r3, [r6, #0]
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	0699      	lsls	r1, r3, #26
 800758e:	bf42      	ittt	mi
 8007590:	6833      	ldrmi	r3, [r6, #0]
 8007592:	3302      	addmi	r3, #2
 8007594:	6033      	strmi	r3, [r6, #0]
 8007596:	6825      	ldr	r5, [r4, #0]
 8007598:	f015 0506 	ands.w	r5, r5, #6
 800759c:	d106      	bne.n	80075ac <_printf_common+0x48>
 800759e:	f104 0a19 	add.w	sl, r4, #25
 80075a2:	68e3      	ldr	r3, [r4, #12]
 80075a4:	6832      	ldr	r2, [r6, #0]
 80075a6:	1a9b      	subs	r3, r3, r2
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	dc26      	bgt.n	80075fa <_printf_common+0x96>
 80075ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075b0:	1e13      	subs	r3, r2, #0
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	bf18      	it	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	0692      	lsls	r2, r2, #26
 80075ba:	d42b      	bmi.n	8007614 <_printf_common+0xb0>
 80075bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075c0:	4649      	mov	r1, r9
 80075c2:	4638      	mov	r0, r7
 80075c4:	47c0      	blx	r8
 80075c6:	3001      	adds	r0, #1
 80075c8:	d01e      	beq.n	8007608 <_printf_common+0xa4>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	68e5      	ldr	r5, [r4, #12]
 80075ce:	6832      	ldr	r2, [r6, #0]
 80075d0:	f003 0306 	and.w	r3, r3, #6
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	bf08      	it	eq
 80075d8:	1aad      	subeq	r5, r5, r2
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	6922      	ldr	r2, [r4, #16]
 80075de:	bf0c      	ite	eq
 80075e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075e4:	2500      	movne	r5, #0
 80075e6:	4293      	cmp	r3, r2
 80075e8:	bfc4      	itt	gt
 80075ea:	1a9b      	subgt	r3, r3, r2
 80075ec:	18ed      	addgt	r5, r5, r3
 80075ee:	2600      	movs	r6, #0
 80075f0:	341a      	adds	r4, #26
 80075f2:	42b5      	cmp	r5, r6
 80075f4:	d11a      	bne.n	800762c <_printf_common+0xc8>
 80075f6:	2000      	movs	r0, #0
 80075f8:	e008      	b.n	800760c <_printf_common+0xa8>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4652      	mov	r2, sl
 80075fe:	4649      	mov	r1, r9
 8007600:	4638      	mov	r0, r7
 8007602:	47c0      	blx	r8
 8007604:	3001      	adds	r0, #1
 8007606:	d103      	bne.n	8007610 <_printf_common+0xac>
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007610:	3501      	adds	r5, #1
 8007612:	e7c6      	b.n	80075a2 <_printf_common+0x3e>
 8007614:	18e1      	adds	r1, r4, r3
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	2030      	movs	r0, #48	; 0x30
 800761a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800761e:	4422      	add	r2, r4
 8007620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007628:	3302      	adds	r3, #2
 800762a:	e7c7      	b.n	80075bc <_printf_common+0x58>
 800762c:	2301      	movs	r3, #1
 800762e:	4622      	mov	r2, r4
 8007630:	4649      	mov	r1, r9
 8007632:	4638      	mov	r0, r7
 8007634:	47c0      	blx	r8
 8007636:	3001      	adds	r0, #1
 8007638:	d0e6      	beq.n	8007608 <_printf_common+0xa4>
 800763a:	3601      	adds	r6, #1
 800763c:	e7d9      	b.n	80075f2 <_printf_common+0x8e>
	...

08007640 <_printf_i>:
 8007640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	460c      	mov	r4, r1
 8007646:	4691      	mov	r9, r2
 8007648:	7e27      	ldrb	r7, [r4, #24]
 800764a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800764c:	2f78      	cmp	r7, #120	; 0x78
 800764e:	4680      	mov	r8, r0
 8007650:	469a      	mov	sl, r3
 8007652:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007656:	d807      	bhi.n	8007668 <_printf_i+0x28>
 8007658:	2f62      	cmp	r7, #98	; 0x62
 800765a:	d80a      	bhi.n	8007672 <_printf_i+0x32>
 800765c:	2f00      	cmp	r7, #0
 800765e:	f000 80d8 	beq.w	8007812 <_printf_i+0x1d2>
 8007662:	2f58      	cmp	r7, #88	; 0x58
 8007664:	f000 80a3 	beq.w	80077ae <_printf_i+0x16e>
 8007668:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800766c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007670:	e03a      	b.n	80076e8 <_printf_i+0xa8>
 8007672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007676:	2b15      	cmp	r3, #21
 8007678:	d8f6      	bhi.n	8007668 <_printf_i+0x28>
 800767a:	a001      	add	r0, pc, #4	; (adr r0, 8007680 <_printf_i+0x40>)
 800767c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007680:	080076d9 	.word	0x080076d9
 8007684:	080076ed 	.word	0x080076ed
 8007688:	08007669 	.word	0x08007669
 800768c:	08007669 	.word	0x08007669
 8007690:	08007669 	.word	0x08007669
 8007694:	08007669 	.word	0x08007669
 8007698:	080076ed 	.word	0x080076ed
 800769c:	08007669 	.word	0x08007669
 80076a0:	08007669 	.word	0x08007669
 80076a4:	08007669 	.word	0x08007669
 80076a8:	08007669 	.word	0x08007669
 80076ac:	080077f9 	.word	0x080077f9
 80076b0:	0800771d 	.word	0x0800771d
 80076b4:	080077db 	.word	0x080077db
 80076b8:	08007669 	.word	0x08007669
 80076bc:	08007669 	.word	0x08007669
 80076c0:	0800781b 	.word	0x0800781b
 80076c4:	08007669 	.word	0x08007669
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007669 	.word	0x08007669
 80076d0:	08007669 	.word	0x08007669
 80076d4:	080077e3 	.word	0x080077e3
 80076d8:	680b      	ldr	r3, [r1, #0]
 80076da:	1d1a      	adds	r2, r3, #4
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	600a      	str	r2, [r1, #0]
 80076e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076e8:	2301      	movs	r3, #1
 80076ea:	e0a3      	b.n	8007834 <_printf_i+0x1f4>
 80076ec:	6825      	ldr	r5, [r4, #0]
 80076ee:	6808      	ldr	r0, [r1, #0]
 80076f0:	062e      	lsls	r6, r5, #24
 80076f2:	f100 0304 	add.w	r3, r0, #4
 80076f6:	d50a      	bpl.n	800770e <_printf_i+0xce>
 80076f8:	6805      	ldr	r5, [r0, #0]
 80076fa:	600b      	str	r3, [r1, #0]
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	da03      	bge.n	8007708 <_printf_i+0xc8>
 8007700:	232d      	movs	r3, #45	; 0x2d
 8007702:	426d      	negs	r5, r5
 8007704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007708:	485e      	ldr	r0, [pc, #376]	; (8007884 <_printf_i+0x244>)
 800770a:	230a      	movs	r3, #10
 800770c:	e019      	b.n	8007742 <_printf_i+0x102>
 800770e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007712:	6805      	ldr	r5, [r0, #0]
 8007714:	600b      	str	r3, [r1, #0]
 8007716:	bf18      	it	ne
 8007718:	b22d      	sxthne	r5, r5
 800771a:	e7ef      	b.n	80076fc <_printf_i+0xbc>
 800771c:	680b      	ldr	r3, [r1, #0]
 800771e:	6825      	ldr	r5, [r4, #0]
 8007720:	1d18      	adds	r0, r3, #4
 8007722:	6008      	str	r0, [r1, #0]
 8007724:	0628      	lsls	r0, r5, #24
 8007726:	d501      	bpl.n	800772c <_printf_i+0xec>
 8007728:	681d      	ldr	r5, [r3, #0]
 800772a:	e002      	b.n	8007732 <_printf_i+0xf2>
 800772c:	0669      	lsls	r1, r5, #25
 800772e:	d5fb      	bpl.n	8007728 <_printf_i+0xe8>
 8007730:	881d      	ldrh	r5, [r3, #0]
 8007732:	4854      	ldr	r0, [pc, #336]	; (8007884 <_printf_i+0x244>)
 8007734:	2f6f      	cmp	r7, #111	; 0x6f
 8007736:	bf0c      	ite	eq
 8007738:	2308      	moveq	r3, #8
 800773a:	230a      	movne	r3, #10
 800773c:	2100      	movs	r1, #0
 800773e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007742:	6866      	ldr	r6, [r4, #4]
 8007744:	60a6      	str	r6, [r4, #8]
 8007746:	2e00      	cmp	r6, #0
 8007748:	bfa2      	ittt	ge
 800774a:	6821      	ldrge	r1, [r4, #0]
 800774c:	f021 0104 	bicge.w	r1, r1, #4
 8007750:	6021      	strge	r1, [r4, #0]
 8007752:	b90d      	cbnz	r5, 8007758 <_printf_i+0x118>
 8007754:	2e00      	cmp	r6, #0
 8007756:	d04d      	beq.n	80077f4 <_printf_i+0x1b4>
 8007758:	4616      	mov	r6, r2
 800775a:	fbb5 f1f3 	udiv	r1, r5, r3
 800775e:	fb03 5711 	mls	r7, r3, r1, r5
 8007762:	5dc7      	ldrb	r7, [r0, r7]
 8007764:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007768:	462f      	mov	r7, r5
 800776a:	42bb      	cmp	r3, r7
 800776c:	460d      	mov	r5, r1
 800776e:	d9f4      	bls.n	800775a <_printf_i+0x11a>
 8007770:	2b08      	cmp	r3, #8
 8007772:	d10b      	bne.n	800778c <_printf_i+0x14c>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	07df      	lsls	r7, r3, #31
 8007778:	d508      	bpl.n	800778c <_printf_i+0x14c>
 800777a:	6923      	ldr	r3, [r4, #16]
 800777c:	6861      	ldr	r1, [r4, #4]
 800777e:	4299      	cmp	r1, r3
 8007780:	bfde      	ittt	le
 8007782:	2330      	movle	r3, #48	; 0x30
 8007784:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007788:	f106 36ff 	addle.w	r6, r6, #4294967295
 800778c:	1b92      	subs	r2, r2, r6
 800778e:	6122      	str	r2, [r4, #16]
 8007790:	f8cd a000 	str.w	sl, [sp]
 8007794:	464b      	mov	r3, r9
 8007796:	aa03      	add	r2, sp, #12
 8007798:	4621      	mov	r1, r4
 800779a:	4640      	mov	r0, r8
 800779c:	f7ff fee2 	bl	8007564 <_printf_common>
 80077a0:	3001      	adds	r0, #1
 80077a2:	d14c      	bne.n	800783e <_printf_i+0x1fe>
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	b004      	add	sp, #16
 80077aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ae:	4835      	ldr	r0, [pc, #212]	; (8007884 <_printf_i+0x244>)
 80077b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	680e      	ldr	r6, [r1, #0]
 80077b8:	061f      	lsls	r7, r3, #24
 80077ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80077be:	600e      	str	r6, [r1, #0]
 80077c0:	d514      	bpl.n	80077ec <_printf_i+0x1ac>
 80077c2:	07d9      	lsls	r1, r3, #31
 80077c4:	bf44      	itt	mi
 80077c6:	f043 0320 	orrmi.w	r3, r3, #32
 80077ca:	6023      	strmi	r3, [r4, #0]
 80077cc:	b91d      	cbnz	r5, 80077d6 <_printf_i+0x196>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	f023 0320 	bic.w	r3, r3, #32
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	2310      	movs	r3, #16
 80077d8:	e7b0      	b.n	800773c <_printf_i+0xfc>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	f043 0320 	orr.w	r3, r3, #32
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	2378      	movs	r3, #120	; 0x78
 80077e4:	4828      	ldr	r0, [pc, #160]	; (8007888 <_printf_i+0x248>)
 80077e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ea:	e7e3      	b.n	80077b4 <_printf_i+0x174>
 80077ec:	065e      	lsls	r6, r3, #25
 80077ee:	bf48      	it	mi
 80077f0:	b2ad      	uxthmi	r5, r5
 80077f2:	e7e6      	b.n	80077c2 <_printf_i+0x182>
 80077f4:	4616      	mov	r6, r2
 80077f6:	e7bb      	b.n	8007770 <_printf_i+0x130>
 80077f8:	680b      	ldr	r3, [r1, #0]
 80077fa:	6826      	ldr	r6, [r4, #0]
 80077fc:	6960      	ldr	r0, [r4, #20]
 80077fe:	1d1d      	adds	r5, r3, #4
 8007800:	600d      	str	r5, [r1, #0]
 8007802:	0635      	lsls	r5, r6, #24
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	d501      	bpl.n	800780c <_printf_i+0x1cc>
 8007808:	6018      	str	r0, [r3, #0]
 800780a:	e002      	b.n	8007812 <_printf_i+0x1d2>
 800780c:	0671      	lsls	r1, r6, #25
 800780e:	d5fb      	bpl.n	8007808 <_printf_i+0x1c8>
 8007810:	8018      	strh	r0, [r3, #0]
 8007812:	2300      	movs	r3, #0
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	4616      	mov	r6, r2
 8007818:	e7ba      	b.n	8007790 <_printf_i+0x150>
 800781a:	680b      	ldr	r3, [r1, #0]
 800781c:	1d1a      	adds	r2, r3, #4
 800781e:	600a      	str	r2, [r1, #0]
 8007820:	681e      	ldr	r6, [r3, #0]
 8007822:	6862      	ldr	r2, [r4, #4]
 8007824:	2100      	movs	r1, #0
 8007826:	4630      	mov	r0, r6
 8007828:	f7f8 fd02 	bl	8000230 <memchr>
 800782c:	b108      	cbz	r0, 8007832 <_printf_i+0x1f2>
 800782e:	1b80      	subs	r0, r0, r6
 8007830:	6060      	str	r0, [r4, #4]
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	2300      	movs	r3, #0
 8007838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800783c:	e7a8      	b.n	8007790 <_printf_i+0x150>
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	4632      	mov	r2, r6
 8007842:	4649      	mov	r1, r9
 8007844:	4640      	mov	r0, r8
 8007846:	47d0      	blx	sl
 8007848:	3001      	adds	r0, #1
 800784a:	d0ab      	beq.n	80077a4 <_printf_i+0x164>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	079b      	lsls	r3, r3, #30
 8007850:	d413      	bmi.n	800787a <_printf_i+0x23a>
 8007852:	68e0      	ldr	r0, [r4, #12]
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	4298      	cmp	r0, r3
 8007858:	bfb8      	it	lt
 800785a:	4618      	movlt	r0, r3
 800785c:	e7a4      	b.n	80077a8 <_printf_i+0x168>
 800785e:	2301      	movs	r3, #1
 8007860:	4632      	mov	r2, r6
 8007862:	4649      	mov	r1, r9
 8007864:	4640      	mov	r0, r8
 8007866:	47d0      	blx	sl
 8007868:	3001      	adds	r0, #1
 800786a:	d09b      	beq.n	80077a4 <_printf_i+0x164>
 800786c:	3501      	adds	r5, #1
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	9903      	ldr	r1, [sp, #12]
 8007872:	1a5b      	subs	r3, r3, r1
 8007874:	42ab      	cmp	r3, r5
 8007876:	dcf2      	bgt.n	800785e <_printf_i+0x21e>
 8007878:	e7eb      	b.n	8007852 <_printf_i+0x212>
 800787a:	2500      	movs	r5, #0
 800787c:	f104 0619 	add.w	r6, r4, #25
 8007880:	e7f5      	b.n	800786e <_printf_i+0x22e>
 8007882:	bf00      	nop
 8007884:	08007bd5 	.word	0x08007bd5
 8007888:	08007be6 	.word	0x08007be6

0800788c <memmove>:
 800788c:	4288      	cmp	r0, r1
 800788e:	b510      	push	{r4, lr}
 8007890:	eb01 0402 	add.w	r4, r1, r2
 8007894:	d902      	bls.n	800789c <memmove+0x10>
 8007896:	4284      	cmp	r4, r0
 8007898:	4623      	mov	r3, r4
 800789a:	d807      	bhi.n	80078ac <memmove+0x20>
 800789c:	1e43      	subs	r3, r0, #1
 800789e:	42a1      	cmp	r1, r4
 80078a0:	d008      	beq.n	80078b4 <memmove+0x28>
 80078a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078aa:	e7f8      	b.n	800789e <memmove+0x12>
 80078ac:	4402      	add	r2, r0
 80078ae:	4601      	mov	r1, r0
 80078b0:	428a      	cmp	r2, r1
 80078b2:	d100      	bne.n	80078b6 <memmove+0x2a>
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078be:	e7f7      	b.n	80078b0 <memmove+0x24>

080078c0 <_free_r>:
 80078c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078c2:	2900      	cmp	r1, #0
 80078c4:	d048      	beq.n	8007958 <_free_r+0x98>
 80078c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ca:	9001      	str	r0, [sp, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f1a1 0404 	sub.w	r4, r1, #4
 80078d2:	bfb8      	it	lt
 80078d4:	18e4      	addlt	r4, r4, r3
 80078d6:	f000 f8d3 	bl	8007a80 <__malloc_lock>
 80078da:	4a20      	ldr	r2, [pc, #128]	; (800795c <_free_r+0x9c>)
 80078dc:	9801      	ldr	r0, [sp, #4]
 80078de:	6813      	ldr	r3, [r2, #0]
 80078e0:	4615      	mov	r5, r2
 80078e2:	b933      	cbnz	r3, 80078f2 <_free_r+0x32>
 80078e4:	6063      	str	r3, [r4, #4]
 80078e6:	6014      	str	r4, [r2, #0]
 80078e8:	b003      	add	sp, #12
 80078ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078ee:	f000 b8cd 	b.w	8007a8c <__malloc_unlock>
 80078f2:	42a3      	cmp	r3, r4
 80078f4:	d90b      	bls.n	800790e <_free_r+0x4e>
 80078f6:	6821      	ldr	r1, [r4, #0]
 80078f8:	1862      	adds	r2, r4, r1
 80078fa:	4293      	cmp	r3, r2
 80078fc:	bf04      	itt	eq
 80078fe:	681a      	ldreq	r2, [r3, #0]
 8007900:	685b      	ldreq	r3, [r3, #4]
 8007902:	6063      	str	r3, [r4, #4]
 8007904:	bf04      	itt	eq
 8007906:	1852      	addeq	r2, r2, r1
 8007908:	6022      	streq	r2, [r4, #0]
 800790a:	602c      	str	r4, [r5, #0]
 800790c:	e7ec      	b.n	80078e8 <_free_r+0x28>
 800790e:	461a      	mov	r2, r3
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	b10b      	cbz	r3, 8007918 <_free_r+0x58>
 8007914:	42a3      	cmp	r3, r4
 8007916:	d9fa      	bls.n	800790e <_free_r+0x4e>
 8007918:	6811      	ldr	r1, [r2, #0]
 800791a:	1855      	adds	r5, r2, r1
 800791c:	42a5      	cmp	r5, r4
 800791e:	d10b      	bne.n	8007938 <_free_r+0x78>
 8007920:	6824      	ldr	r4, [r4, #0]
 8007922:	4421      	add	r1, r4
 8007924:	1854      	adds	r4, r2, r1
 8007926:	42a3      	cmp	r3, r4
 8007928:	6011      	str	r1, [r2, #0]
 800792a:	d1dd      	bne.n	80078e8 <_free_r+0x28>
 800792c:	681c      	ldr	r4, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	6053      	str	r3, [r2, #4]
 8007932:	4421      	add	r1, r4
 8007934:	6011      	str	r1, [r2, #0]
 8007936:	e7d7      	b.n	80078e8 <_free_r+0x28>
 8007938:	d902      	bls.n	8007940 <_free_r+0x80>
 800793a:	230c      	movs	r3, #12
 800793c:	6003      	str	r3, [r0, #0]
 800793e:	e7d3      	b.n	80078e8 <_free_r+0x28>
 8007940:	6825      	ldr	r5, [r4, #0]
 8007942:	1961      	adds	r1, r4, r5
 8007944:	428b      	cmp	r3, r1
 8007946:	bf04      	itt	eq
 8007948:	6819      	ldreq	r1, [r3, #0]
 800794a:	685b      	ldreq	r3, [r3, #4]
 800794c:	6063      	str	r3, [r4, #4]
 800794e:	bf04      	itt	eq
 8007950:	1949      	addeq	r1, r1, r5
 8007952:	6021      	streq	r1, [r4, #0]
 8007954:	6054      	str	r4, [r2, #4]
 8007956:	e7c7      	b.n	80078e8 <_free_r+0x28>
 8007958:	b003      	add	sp, #12
 800795a:	bd30      	pop	{r4, r5, pc}
 800795c:	20004090 	.word	0x20004090

08007960 <_malloc_r>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	1ccd      	adds	r5, r1, #3
 8007964:	f025 0503 	bic.w	r5, r5, #3
 8007968:	3508      	adds	r5, #8
 800796a:	2d0c      	cmp	r5, #12
 800796c:	bf38      	it	cc
 800796e:	250c      	movcc	r5, #12
 8007970:	2d00      	cmp	r5, #0
 8007972:	4606      	mov	r6, r0
 8007974:	db01      	blt.n	800797a <_malloc_r+0x1a>
 8007976:	42a9      	cmp	r1, r5
 8007978:	d903      	bls.n	8007982 <_malloc_r+0x22>
 800797a:	230c      	movs	r3, #12
 800797c:	6033      	str	r3, [r6, #0]
 800797e:	2000      	movs	r0, #0
 8007980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007982:	f000 f87d 	bl	8007a80 <__malloc_lock>
 8007986:	4921      	ldr	r1, [pc, #132]	; (8007a0c <_malloc_r+0xac>)
 8007988:	680a      	ldr	r2, [r1, #0]
 800798a:	4614      	mov	r4, r2
 800798c:	b99c      	cbnz	r4, 80079b6 <_malloc_r+0x56>
 800798e:	4f20      	ldr	r7, [pc, #128]	; (8007a10 <_malloc_r+0xb0>)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	b923      	cbnz	r3, 800799e <_malloc_r+0x3e>
 8007994:	4621      	mov	r1, r4
 8007996:	4630      	mov	r0, r6
 8007998:	f000 f862 	bl	8007a60 <_sbrk_r>
 800799c:	6038      	str	r0, [r7, #0]
 800799e:	4629      	mov	r1, r5
 80079a0:	4630      	mov	r0, r6
 80079a2:	f000 f85d 	bl	8007a60 <_sbrk_r>
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	d123      	bne.n	80079f2 <_malloc_r+0x92>
 80079aa:	230c      	movs	r3, #12
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 f86c 	bl	8007a8c <__malloc_unlock>
 80079b4:	e7e3      	b.n	800797e <_malloc_r+0x1e>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	1b5b      	subs	r3, r3, r5
 80079ba:	d417      	bmi.n	80079ec <_malloc_r+0x8c>
 80079bc:	2b0b      	cmp	r3, #11
 80079be:	d903      	bls.n	80079c8 <_malloc_r+0x68>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	441c      	add	r4, r3
 80079c4:	6025      	str	r5, [r4, #0]
 80079c6:	e004      	b.n	80079d2 <_malloc_r+0x72>
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	42a2      	cmp	r2, r4
 80079cc:	bf0c      	ite	eq
 80079ce:	600b      	streq	r3, [r1, #0]
 80079d0:	6053      	strne	r3, [r2, #4]
 80079d2:	4630      	mov	r0, r6
 80079d4:	f000 f85a 	bl	8007a8c <__malloc_unlock>
 80079d8:	f104 000b 	add.w	r0, r4, #11
 80079dc:	1d23      	adds	r3, r4, #4
 80079de:	f020 0007 	bic.w	r0, r0, #7
 80079e2:	1ac2      	subs	r2, r0, r3
 80079e4:	d0cc      	beq.n	8007980 <_malloc_r+0x20>
 80079e6:	1a1b      	subs	r3, r3, r0
 80079e8:	50a3      	str	r3, [r4, r2]
 80079ea:	e7c9      	b.n	8007980 <_malloc_r+0x20>
 80079ec:	4622      	mov	r2, r4
 80079ee:	6864      	ldr	r4, [r4, #4]
 80079f0:	e7cc      	b.n	800798c <_malloc_r+0x2c>
 80079f2:	1cc4      	adds	r4, r0, #3
 80079f4:	f024 0403 	bic.w	r4, r4, #3
 80079f8:	42a0      	cmp	r0, r4
 80079fa:	d0e3      	beq.n	80079c4 <_malloc_r+0x64>
 80079fc:	1a21      	subs	r1, r4, r0
 80079fe:	4630      	mov	r0, r6
 8007a00:	f000 f82e 	bl	8007a60 <_sbrk_r>
 8007a04:	3001      	adds	r0, #1
 8007a06:	d1dd      	bne.n	80079c4 <_malloc_r+0x64>
 8007a08:	e7cf      	b.n	80079aa <_malloc_r+0x4a>
 8007a0a:	bf00      	nop
 8007a0c:	20004090 	.word	0x20004090
 8007a10:	20004094 	.word	0x20004094

08007a14 <_realloc_r>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	4607      	mov	r7, r0
 8007a18:	4614      	mov	r4, r2
 8007a1a:	460e      	mov	r6, r1
 8007a1c:	b921      	cbnz	r1, 8007a28 <_realloc_r+0x14>
 8007a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a22:	4611      	mov	r1, r2
 8007a24:	f7ff bf9c 	b.w	8007960 <_malloc_r>
 8007a28:	b922      	cbnz	r2, 8007a34 <_realloc_r+0x20>
 8007a2a:	f7ff ff49 	bl	80078c0 <_free_r>
 8007a2e:	4625      	mov	r5, r4
 8007a30:	4628      	mov	r0, r5
 8007a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a34:	f000 f830 	bl	8007a98 <_malloc_usable_size_r>
 8007a38:	42a0      	cmp	r0, r4
 8007a3a:	d20f      	bcs.n	8007a5c <_realloc_r+0x48>
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f7ff ff8e 	bl	8007960 <_malloc_r>
 8007a44:	4605      	mov	r5, r0
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d0f2      	beq.n	8007a30 <_realloc_r+0x1c>
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	f7ff fbf7 	bl	8007240 <memcpy>
 8007a52:	4631      	mov	r1, r6
 8007a54:	4638      	mov	r0, r7
 8007a56:	f7ff ff33 	bl	80078c0 <_free_r>
 8007a5a:	e7e9      	b.n	8007a30 <_realloc_r+0x1c>
 8007a5c:	4635      	mov	r5, r6
 8007a5e:	e7e7      	b.n	8007a30 <_realloc_r+0x1c>

08007a60 <_sbrk_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d06      	ldr	r5, [pc, #24]	; (8007a7c <_sbrk_r+0x1c>)
 8007a64:	2300      	movs	r3, #0
 8007a66:	4604      	mov	r4, r0
 8007a68:	4608      	mov	r0, r1
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	f7fa ff00 	bl	8002870 <_sbrk>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_sbrk_r+0x1a>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_sbrk_r+0x1a>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	2000428c 	.word	0x2000428c

08007a80 <__malloc_lock>:
 8007a80:	4801      	ldr	r0, [pc, #4]	; (8007a88 <__malloc_lock+0x8>)
 8007a82:	f000 b811 	b.w	8007aa8 <__retarget_lock_acquire_recursive>
 8007a86:	bf00      	nop
 8007a88:	20004294 	.word	0x20004294

08007a8c <__malloc_unlock>:
 8007a8c:	4801      	ldr	r0, [pc, #4]	; (8007a94 <__malloc_unlock+0x8>)
 8007a8e:	f000 b80c 	b.w	8007aaa <__retarget_lock_release_recursive>
 8007a92:	bf00      	nop
 8007a94:	20004294 	.word	0x20004294

08007a98 <_malloc_usable_size_r>:
 8007a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9c:	1f18      	subs	r0, r3, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bfbc      	itt	lt
 8007aa2:	580b      	ldrlt	r3, [r1, r0]
 8007aa4:	18c0      	addlt	r0, r0, r3
 8007aa6:	4770      	bx	lr

08007aa8 <__retarget_lock_acquire_recursive>:
 8007aa8:	4770      	bx	lr

08007aaa <__retarget_lock_release_recursive>:
 8007aaa:	4770      	bx	lr

08007aac <_init>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	bf00      	nop
 8007ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab2:	bc08      	pop	{r3}
 8007ab4:	469e      	mov	lr, r3
 8007ab6:	4770      	bx	lr

08007ab8 <_fini>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	bf00      	nop
 8007abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007abe:	bc08      	pop	{r3}
 8007ac0:	469e      	mov	lr, r3
 8007ac2:	4770      	bx	lr
