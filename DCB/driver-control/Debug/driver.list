
driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007254  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007434  08007434  00017434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007560  08007560  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007568  08007568  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800756c  0800756c  0001756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c4  20000078  080075e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000423c  080075e8  0002423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150b2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003082  00000000  00000000  0003515a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  000381e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00039198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a4c  00000000  00000000  0003a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013327  00000000  00000000  0005ea6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddbde  00000000  00000000  00071d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004550  00000000  00000000  0014f9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800741c 	.word	0x0800741c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	0800741c 	.word	0x0800741c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96e 	b.w	8000e00 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468c      	mov	ip, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8083 	bne.w	8000c52 <__udivmoddi4+0x116>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	d947      	bls.n	8000be2 <__udivmoddi4+0xa6>
 8000b52:	fab2 f282 	clz	r2, r2
 8000b56:	b142      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	f1c2 0020 	rsb	r0, r2, #32
 8000b5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b60:	4091      	lsls	r1, r2
 8000b62:	4097      	lsls	r7, r2
 8000b64:	ea40 0c01 	orr.w	ip, r0, r1
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbbc f6f8 	udiv	r6, ip, r8
 8000b74:	fa1f fe87 	uxth.w	lr, r7
 8000b78:	fb08 c116 	mls	r1, r8, r6, ip
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb06 f10e 	mul.w	r1, r6, lr
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8e:	f080 8119 	bcs.w	8000dc4 <__udivmoddi4+0x288>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8116 	bls.w	8000dc4 <__udivmoddi4+0x288>
 8000b98:	3e02      	subs	r6, #2
 8000b9a:	443b      	add	r3, r7
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8105 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	f240 8102 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	443c      	add	r4, r7
 8000bc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bcc:	eba4 040e 	sub.w	r4, r4, lr
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	b11d      	cbz	r5, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	b902      	cbnz	r2, 8000be6 <__udivmoddi4+0xaa>
 8000be4:	deff      	udf	#255	; 0xff
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d150      	bne.n	8000c90 <__udivmoddi4+0x154>
 8000bee:	1bcb      	subs	r3, r1, r7
 8000bf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf4:	fa1f f887 	uxth.w	r8, r7
 8000bf8:	2601      	movs	r6, #1
 8000bfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bfe:	0c21      	lsrs	r1, r4, #16
 8000c00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c08:	fb08 f30c 	mul.w	r3, r8, ip
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000c10:	1879      	adds	r1, r7, r1
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0xe2>
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	f200 80e9 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1ac9      	subs	r1, r1, r3
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x10c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x10a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80d9 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e7bf      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x12e>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80b1 	beq.w	8000dbe <__udivmoddi4+0x282>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x1cc>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0x140>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80b8 	bhi.w	8000dec <__udivmoddi4+0x2b0>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	468c      	mov	ip, r1
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0a8      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c8e:	e7a5      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f603 	lsr.w	r6, r0, r3
 8000c98:	4097      	lsls	r7, r2
 8000c9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca2:	40d9      	lsrs	r1, r3
 8000ca4:	4330      	orrs	r0, r6
 8000ca6:	0c03      	lsrs	r3, r0, #16
 8000ca8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cac:	fa1f f887 	uxth.w	r8, r7
 8000cb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb06 f108 	mul.w	r1, r6, r8
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x19c>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cca:	f080 808d 	bcs.w	8000de8 <__udivmoddi4+0x2ac>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 808a 	bls.w	8000de8 <__udivmoddi4+0x2ac>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b281      	uxth	r1, r0
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce8:	fb00 f308 	mul.w	r3, r0, r8
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x1c4>
 8000cf0:	1879      	adds	r1, r7, r1
 8000cf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf6:	d273      	bcs.n	8000de0 <__udivmoddi4+0x2a4>
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d971      	bls.n	8000de0 <__udivmoddi4+0x2a4>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	4439      	add	r1, r7
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d06:	e778      	b.n	8000bfa <__udivmoddi4+0xbe>
 8000d08:	f1c6 0c20 	rsb	ip, r6, #32
 8000d0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d14:	431c      	orrs	r4, r3
 8000d16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d26:	431f      	orrs	r7, r3
 8000d28:	0c3b      	lsrs	r3, r7, #16
 8000d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2e:	fa1f f884 	uxth.w	r8, r4
 8000d32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d3e:	458a      	cmp	sl, r1
 8000d40:	fa02 f206 	lsl.w	r2, r2, r6
 8000d44:	fa00 f306 	lsl.w	r3, r0, r6
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x220>
 8000d4a:	1861      	adds	r1, r4, r1
 8000d4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d50:	d248      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000d52:	458a      	cmp	sl, r1
 8000d54:	d946      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4421      	add	r1, r4
 8000d5c:	eba1 010a 	sub.w	r1, r1, sl
 8000d60:	b2bf      	uxth	r7, r7
 8000d62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d6e:	fb00 f808 	mul.w	r8, r0, r8
 8000d72:	45b8      	cmp	r8, r7
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x24a>
 8000d76:	19e7      	adds	r7, r4, r7
 8000d78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7c:	d22e      	bcs.n	8000ddc <__udivmoddi4+0x2a0>
 8000d7e:	45b8      	cmp	r8, r7
 8000d80:	d92c      	bls.n	8000ddc <__udivmoddi4+0x2a0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4427      	add	r7, r4
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	eba7 0708 	sub.w	r7, r7, r8
 8000d8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d92:	454f      	cmp	r7, r9
 8000d94:	46c6      	mov	lr, r8
 8000d96:	4649      	mov	r1, r9
 8000d98:	d31a      	bcc.n	8000dd0 <__udivmoddi4+0x294>
 8000d9a:	d017      	beq.n	8000dcc <__udivmoddi4+0x290>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x27a>
 8000d9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000da2:	eb67 0701 	sbc.w	r7, r7, r1
 8000da6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000daa:	40f2      	lsrs	r2, r6
 8000dac:	ea4c 0202 	orr.w	r2, ip, r2
 8000db0:	40f7      	lsrs	r7, r6
 8000db2:	e9c5 2700 	strd	r2, r7, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e70b      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6fd      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dcc:	4543      	cmp	r3, r8
 8000dce:	d2e5      	bcs.n	8000d9c <__udivmoddi4+0x260>
 8000dd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7df      	b.n	8000d9c <__udivmoddi4+0x260>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e7d2      	b.n	8000d86 <__udivmoddi4+0x24a>
 8000de0:	4660      	mov	r0, ip
 8000de2:	e78d      	b.n	8000d00 <__udivmoddi4+0x1c4>
 8000de4:	4681      	mov	r9, r0
 8000de6:	e7b9      	b.n	8000d5c <__udivmoddi4+0x220>
 8000de8:	4666      	mov	r6, ip
 8000dea:	e775      	b.n	8000cd8 <__udivmoddi4+0x19c>
 8000dec:	4630      	mov	r0, r6
 8000dee:	e74a      	b.n	8000c86 <__udivmoddi4+0x14a>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	4439      	add	r1, r7
 8000df6:	e713      	b.n	8000c20 <__udivmoddi4+0xe4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	443c      	add	r4, r7
 8000dfc:	e724      	b.n	8000c48 <__udivmoddi4+0x10c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <vApplicationGetIdleTaskMemory+0x30>)
 8000e1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000094 	.word	0x20000094
 8000e34:	200000e8 	.word	0x200000e8

08000e38 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	4608      	mov	r0, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	4603      	mov	r3, r0
 8000e48:	70fb      	strb	r3, [r7, #3]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	70bb      	strb	r3, [r7, #2]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8000e56:	4a4f      	ldr	r2, [pc, #316]	; (8000f94 <lcdInit+0x15c>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <lcdInit+0x15c>)
 8000e64:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8000e66:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <lcdInit+0x15c>)
 8000e68:	78bb      	ldrb	r3, [r7, #2]
 8000e6a:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8000e6c:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <lcdInit+0x15c>)
 8000e6e:	787b      	ldrb	r3, [r7, #1]
 8000e70:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8000e72:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <lcdInit+0x15c>)
 8000e74:	2208      	movs	r2, #8
 8000e76:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8000e78:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <lcdInit+0x160>)
 8000e7a:	2234      	movs	r2, #52	; 0x34
 8000e7c:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000e7e:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <lcdInit+0x160>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <lcdInit+0x160>)
 8000e84:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8000e86:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <lcdInit+0x160>)
 8000e88:	2230      	movs	r2, #48	; 0x30
 8000e8a:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	75fb      	strb	r3, [r7, #23]
 8000e90:	e030      	b.n	8000ef4 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000e92:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <lcdInit+0x15c>)
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <lcdInit+0x15c>)
 8000e98:	799b      	ldrb	r3, [r3, #6]
 8000e9a:	b299      	uxth	r1, r3
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	4a3e      	ldr	r2, [pc, #248]	; (8000f98 <lcdInit+0x160>)
 8000ea0:	f003 fc9e 	bl	80047e0 <HAL_I2C_Master_Transmit_DMA>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <lcdInit+0x76>
            return false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e06d      	b.n	8000f8a <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 8000eae:	f004 ffdb 	bl	8005e68 <xTaskGetTickCount>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000eb6:	e002      	b.n	8000ebe <lcdInit+0x86>
            vTaskDelay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f004 fe97 	bl	8005bec <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <lcdInit+0x15c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fdee 	bl	8004aa4 <HAL_I2C_GetState>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b20      	cmp	r3, #32
 8000ecc:	d1f4      	bne.n	8000eb8 <lcdInit+0x80>
        }

        if (i == 2) {
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d106      	bne.n	8000ee2 <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 fe08 	bl	8005af0 <vTaskDelayUntil>
 8000ee0:	e005      	b.n	8000eee <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 fe01 	bl	8005af0 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	75fb      	strb	r3, [r7, #23]
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d9cb      	bls.n	8000e92 <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <lcdInit+0x160>)
 8000efc:	222c      	movs	r2, #44	; 0x2c
 8000efe:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <lcdInit+0x160>)
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <lcdInit+0x160>)
 8000f06:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <lcdInit+0x160>)
 8000f0a:	2228      	movs	r2, #40	; 0x28
 8000f0c:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <lcdInit+0x15c>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <lcdInit+0x15c>)
 8000f14:	799b      	ldrb	r3, [r3, #6]
 8000f16:	b299      	uxth	r1, r3
 8000f18:	2303      	movs	r3, #3
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <lcdInit+0x160>)
 8000f1c:	f003 fc60 	bl	80047e0 <HAL_I2C_Master_Transmit_DMA>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <lcdInit+0xf8>
        return false;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e02f      	b.n	8000f8a <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f004 fe5e 	bl	8005bec <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <lcdInit+0x15c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fdb5 	bl	8004aa4 <HAL_I2C_GetState>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	d1f4      	bne.n	8000f2a <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <lcdInit+0x15c>)
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d904      	bls.n	8000f5c <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8000f5c:	f107 030f 	add.w	r3, r7, #15
 8000f60:	4619      	mov	r1, r3
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f980 	bl	8001268 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8000f68:	2101      	movs	r1, #1
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 f816 	bl	8000f9c <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8000f70:	2101      	movs	r1, #1
 8000f72:	2007      	movs	r0, #7
 8000f74:	f000 f812 	bl	8000f9c <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f000 f80e 	bl	8000f9c <lcdCommand>
    lcdCursorHome();
 8000f80:	2101      	movs	r1, #1
 8000f82:	2005      	movs	r0, #5
 8000f84:	f000 f80a 	bl	8000f9c <lcdCommand>

    return true;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200002f0 	.word	0x200002f0
 8000f98:	200002e8 	.word	0x200002e8

08000f9c <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d06e      	beq.n	8001094 <lcdCommand+0xf8>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f040 80b4 	bne.w	8001124 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	d864      	bhi.n	800108e <lcdCommand+0xf2>
 8000fc4:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <lcdCommand+0x30>)
 8000fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fca:	bf00      	nop
 8000fcc:	08000fed 	.word	0x08000fed
 8000fd0:	0800101d 	.word	0x0800101d
 8000fd4:	08000ffd 	.word	0x08000ffd
 8000fd8:	0800100d 	.word	0x0800100d
 8000fdc:	08001041 	.word	0x08001041
 8000fe0:	08001075 	.word	0x08001075
 8000fe4:	08001065 	.word	0x08001065
 8000fe8:	0800107f 	.word	0x0800107f
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8000fec:	4b61      	ldr	r3, [pc, #388]	; (8001174 <lcdCommand+0x1d8>)
 8000fee:	7a1b      	ldrb	r3, [r3, #8]
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <lcdCommand+0x1d8>)
 8000ff8:	721a      	strb	r2, [r3, #8]
                    break;
 8000ffa:	e04a      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8000ffc:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <lcdCommand+0x1d8>)
 8000ffe:	7a1b      	ldrb	r3, [r3, #8]
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b5b      	ldr	r3, [pc, #364]	; (8001174 <lcdCommand+0x1d8>)
 8001008:	721a      	strb	r2, [r3, #8]
                    break;
 800100a:	e042      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 800100c:	4b59      	ldr	r3, [pc, #356]	; (8001174 <lcdCommand+0x1d8>)
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b57      	ldr	r3, [pc, #348]	; (8001174 <lcdCommand+0x1d8>)
 8001018:	721a      	strb	r2, [r3, #8]
                    break;
 800101a:	e03a      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001020:	f107 030f 	add.w	r3, r7, #15
 8001024:	4619      	mov	r1, r3
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f91e 	bl	8001268 <lcdWriteByte>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <lcdCommand+0x9a>
                        return false;
 8001032:	2300      	movs	r3, #0
 8001034:	e09a      	b.n	800116c <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 8001036:	2002      	movs	r0, #2
 8001038:	f004 fdd8 	bl	8005bec <vTaskDelay>
                        return true;
 800103c:	2301      	movs	r3, #1
 800103e:	e095      	b.n	800116c <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001040:	2302      	movs	r3, #2
 8001042:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001044:	f107 030f 	add.w	r3, r7, #15
 8001048:	4619      	mov	r1, r3
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f90c 	bl	8001268 <lcdWriteByte>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <lcdCommand+0xbe>
                        return false;
 8001056:	2300      	movs	r3, #0
 8001058:	e088      	b.n	800116c <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 800105a:	2002      	movs	r0, #2
 800105c:	f004 fdc6 	bl	8005bec <vTaskDelay>
                        return true;
 8001060:	2301      	movs	r3, #1
 8001062:	e083      	b.n	800116c <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <lcdCommand+0x1d8>)
 8001066:	7a5b      	ldrb	r3, [r3, #9]
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b41      	ldr	r3, [pc, #260]	; (8001174 <lcdCommand+0x1d8>)
 8001070:	725a      	strb	r2, [r3, #9]
                    break;
 8001072:	e00e      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8001074:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <lcdCommand+0x1d8>)
 8001076:	7a5a      	ldrb	r2, [r3, #9]
 8001078:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <lcdCommand+0x1d8>)
 800107a:	725a      	strb	r2, [r3, #9]
                    break;
 800107c:	e009      	b.n	8001092 <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <lcdCommand+0x1d8>)
 8001080:	7a5b      	ldrb	r3, [r3, #9]
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <lcdCommand+0x1d8>)
 800108a:	725a      	strb	r2, [r3, #9]
                    break;
 800108c:	e001      	b.n	8001092 <lcdCommand+0xf6>

                default:
                    return false;
 800108e:	2300      	movs	r3, #0
 8001090:	e06c      	b.n	800116c <lcdCommand+0x1d0>
            }

            break;
 8001092:	e049      	b.n	8001128 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3b01      	subs	r3, #1
 8001098:	2b07      	cmp	r3, #7
 800109a:	d840      	bhi.n	800111e <lcdCommand+0x182>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <lcdCommand+0x108>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010c5 	.word	0x080010c5
 80010a8:	0800111f 	.word	0x0800111f
 80010ac:	080010d5 	.word	0x080010d5
 80010b0:	080010e5 	.word	0x080010e5
 80010b4:	0800111f 	.word	0x0800111f
 80010b8:	08001105 	.word	0x08001105
 80010bc:	080010f5 	.word	0x080010f5
 80010c0:	0800110f 	.word	0x0800110f
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <lcdCommand+0x1d8>)
 80010c6:	7a1b      	ldrb	r3, [r3, #8]
 80010c8:	f023 0304 	bic.w	r3, r3, #4
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <lcdCommand+0x1d8>)
 80010d0:	721a      	strb	r2, [r3, #8]
                    break;
 80010d2:	e026      	b.n	8001122 <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <lcdCommand+0x1d8>)
 80010d6:	7a1b      	ldrb	r3, [r3, #8]
 80010d8:	f023 0302 	bic.w	r3, r3, #2
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <lcdCommand+0x1d8>)
 80010e0:	721a      	strb	r2, [r3, #8]
                    break;
 80010e2:	e01e      	b.n	8001122 <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <lcdCommand+0x1d8>)
 80010e6:	7a1b      	ldrb	r3, [r3, #8]
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <lcdCommand+0x1d8>)
 80010f0:	721a      	strb	r2, [r3, #8]
                    break;
 80010f2:	e016      	b.n	8001122 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <lcdCommand+0x1d8>)
 80010f6:	7a5b      	ldrb	r3, [r3, #9]
 80010f8:	f023 0302 	bic.w	r3, r3, #2
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <lcdCommand+0x1d8>)
 8001100:	725a      	strb	r2, [r3, #9]
                    break;
 8001102:	e00e      	b.n	8001122 <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <lcdCommand+0x1d8>)
 8001106:	7a5a      	ldrb	r2, [r3, #9]
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <lcdCommand+0x1d8>)
 800110a:	725a      	strb	r2, [r3, #9]
                    break;
 800110c:	e009      	b.n	8001122 <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <lcdCommand+0x1d8>)
 8001110:	7a5b      	ldrb	r3, [r3, #9]
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <lcdCommand+0x1d8>)
 800111a:	725a      	strb	r2, [r3, #9]
                    break;
 800111c:	e001      	b.n	8001122 <lcdCommand+0x186>

                default:
                    return false;
 800111e:	2300      	movs	r3, #0
 8001120:	e024      	b.n	800116c <lcdCommand+0x1d0>
            }

            break;
 8001122:	e001      	b.n	8001128 <lcdCommand+0x18c>

        default:
            return false;
 8001124:	2300      	movs	r3, #0
 8001126:	e021      	b.n	800116c <lcdCommand+0x1d0>
    }

    /* Now lets send the command */
    switch (command) {
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b08      	cmp	r3, #8
 800112c:	dc16      	bgt.n	800115c <lcdCommand+0x1c0>
 800112e:	2b06      	cmp	r3, #6
 8001130:	da0d      	bge.n	800114e <lcdCommand+0x1b2>
 8001132:	2b01      	cmp	r3, #1
 8001134:	d004      	beq.n	8001140 <lcdCommand+0x1a4>
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd10      	ble.n	800115c <lcdCommand+0x1c0>
 800113a:	3b03      	subs	r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d80d      	bhi.n	800115c <lcdCommand+0x1c0>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <lcdCommand+0x1d8>)
 8001142:	7a1b      	ldrb	r3, [r3, #8]
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	b2db      	uxtb	r3, r3
 800114a:	73fb      	strb	r3, [r7, #15]
            break;
 800114c:	e007      	b.n	800115e <lcdCommand+0x1c2>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <lcdCommand+0x1d8>)
 8001150:	7a5b      	ldrb	r3, [r3, #9]
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	b2db      	uxtb	r3, r3
 8001158:	73fb      	strb	r3, [r7, #15]
            break;
 800115a:	e000      	b.n	800115e <lcdCommand+0x1c2>

        default:
            break;
 800115c:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	4619      	mov	r1, r3
 8001164:	2000      	movs	r0, #0
 8001166:	f000 f87f 	bl	8001268 <lcdWriteByte>
 800116a:	4603      	mov	r3, r0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002f0 	.word	0x200002f0

08001178 <lcdBacklight>:
 * @brief  Turn display's Backlight On or Off
 * @param  command LCD_BIT_BACKIGHT_ON to turn display On
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display Off
 * @return         true if success
 */
bool lcdBacklight(uint8_t command) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
    lcdParams.backlight = command;
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <lcdBacklight+0x4c>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, &lcdParams.backlight, 1) != HAL_OK) {
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <lcdBacklight+0x4c>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <lcdBacklight+0x4c>)
 800118e:	799b      	ldrb	r3, [r3, #6]
 8001190:	b299      	uxth	r1, r3
 8001192:	2301      	movs	r3, #1
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <lcdBacklight+0x50>)
 8001196:	f003 fb23 	bl	80047e0 <HAL_I2C_Master_Transmit_DMA>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <lcdBacklight+0x32>
        return false;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e00b      	b.n	80011bc <lcdBacklight+0x44>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f004 fd21 	bl	8005bec <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <lcdBacklight+0x4c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fc78 	bl	8004aa4 <HAL_I2C_GetState>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	d1f4      	bne.n	80011a4 <lcdBacklight+0x2c>
    }

    return true;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002f0 	.word	0x200002f0
 80011c8:	200002f7 	.word	0x200002f7

080011cc <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <lcdSetCursorPosition+0x50>)
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	79ba      	ldrb	r2, [r7, #6]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d303      	bcc.n	80011ee <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <lcdSetCursorPosition+0x50>)
 80011e8:	791b      	ldrb	r3, [r3, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <lcdSetCursorPosition+0x54>)
 80011f2:	5cd2      	ldrb	r2, [r2, r3]
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001200:	b25b      	sxtb	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 8001206:	f107 030f 	add.w	r3, r7, #15
 800120a:	4619      	mov	r1, r3
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f82b 	bl	8001268 <lcdWriteByte>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200002f0 	.word	0x200002f0
 8001220:	08007510 	.word	0x08007510

08001224 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e00e      	b.n	8001254 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	4619      	mov	r1, r3
 800123e:	2001      	movs	r0, #1
 8001240:	f000 f812 	bl	8001268 <lcdWriteByte>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <lcdPrintStr+0x2a>
            return false;
 800124a:	2300      	movs	r3, #0
 800124c:	e007      	b.n	800125e <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3301      	adds	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3ec      	bcc.n	8001236 <lcdPrintStr+0x12>
        }
    }

    return true;
 800125c:	2301      	movs	r3, #1
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <lcdWriteByte+0xdc>)
 8001276:	79da      	ldrb	r2, [r3, #7]
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4313      	orrs	r3, r2
 800127c:	b2da      	uxtb	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <lcdWriteByte+0xe0>)
 8001294:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <lcdWriteByte+0xe0>)
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <lcdWriteByte+0xe0>)
 800129c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <lcdWriteByte+0xdc>)
 80012a0:	79da      	ldrb	r2, [r3, #7]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f023 030f 	bic.w	r3, r3, #15
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <lcdWriteByte+0xe0>)
 80012be:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <lcdWriteByte+0xdc>)
 80012c2:	79da      	ldrb	r2, [r3, #7]
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <lcdWriteByte+0xe0>)
 80012de:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <lcdWriteByte+0xe0>)
 80012e2:	78da      	ldrb	r2, [r3, #3]
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <lcdWriteByte+0xe0>)
 80012e6:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <lcdWriteByte+0xdc>)
 80012ea:	79da      	ldrb	r2, [r3, #7]
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <lcdWriteByte+0xe0>)
 8001304:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <lcdWriteByte+0xdc>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <lcdWriteByte+0xdc>)
 800130c:	799b      	ldrb	r3, [r3, #6]
 800130e:	b299      	uxth	r1, r3
 8001310:	2306      	movs	r3, #6
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <lcdWriteByte+0xe0>)
 8001314:	f003 fa64 	bl	80047e0 <HAL_I2C_Master_Transmit_DMA>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <lcdWriteByte+0xc0>
        return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e00b      	b.n	800133a <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f004 fc62 	bl	8005bec <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <lcdWriteByte+0xdc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f003 fbb9 	bl	8004aa4 <HAL_I2C_GetState>
 8001332:	4603      	mov	r3, r0
 8001334:	2b20      	cmp	r3, #32
 8001336:	d1f4      	bne.n	8001322 <lcdWriteByte+0xba>
    }

    return true;
 8001338:	2301      	movs	r3, #1
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002f0 	.word	0x200002f0
 8001348:	200002e8 	.word	0x200002e8

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f001 faa1 	bl	8002898 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f8a1 	bl	800149c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 f9b1 	bl	80016c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800135e:	f000 f8fb 	bl	8001558 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001362:	f000 f94b 	bl	80015fc <MX_CAN1_Init>
  MX_I2C1_Init();
 8001366:	f000 f97d 	bl	8001664 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // start up LCD display
  welcomeScreen();
 800136a:	f000 fcaf 	bl	8001ccc <welcomeScreen>

  // TODO: FIX THE CAN MASK RANGES SO THEY ARE CORRECT 

  // init the CAN filter
	canFilter.FilterBank = 0;
 800136e:	4b43      	ldr	r3, [pc, #268]	; (800147c <main+0x130>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001374:	4b41      	ldr	r3, [pc, #260]	; (800147c <main+0x130>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
	canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <main+0x130>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
	canFilter.FilterIdHigh = 0x000;
 8001380:	4b3e      	ldr	r3, [pc, #248]	; (800147c <main+0x130>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
	canFilter.FilterIdLow = 0xFFF;
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <main+0x130>)
 8001388:	f640 72ff 	movw	r2, #4095	; 0xfff
 800138c:	605a      	str	r2, [r3, #4]
	canFilter.FilterMaskIdHigh = 0x000;
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <main+0x130>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
	canFilter.FilterMaskIdLow = 0xFFF;
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <main+0x130>)
 8001396:	f640 72ff 	movw	r2, #4095	; 0xfff
 800139a:	60da      	str	r2, [r3, #12]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800139c:	4b37      	ldr	r3, [pc, #220]	; (800147c <main+0x130>)
 800139e:	2201      	movs	r2, #1
 80013a0:	61da      	str	r2, [r3, #28]
	canFilter.FilterActivation = ENABLE;
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <main+0x130>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	621a      	str	r2, [r3, #32]
	canFilter.SlaveStartFilterBank = 14;
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <main+0x130>)
 80013aa:	220e      	movs	r2, #14
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

	// init the CAN mailbox for BASE
	txHeader0.DLC = 8; // Number of bites to be transmitted max- 8
 80013ae:	4b34      	ldr	r3, [pc, #208]	; (8001480 <main+0x134>)
 80013b0:	2208      	movs	r2, #8
 80013b2:	611a      	str	r2, [r3, #16]
	txHeader0.IDE = CAN_ID_STD;
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <main+0x134>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
	txHeader0.RTR = CAN_RTR_DATA;
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <main+0x134>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
	txHeader0.StdId = 0x90;
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <main+0x134>)
 80013c2:	2290      	movs	r2, #144	; 0x90
 80013c4:	601a      	str	r2, [r3, #0]
	txHeader0.ExtId = 0;
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <main+0x134>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
	txHeader0.TransmitGlobalTime = DISABLE;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <main+0x134>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for Torque Setting 
	txHeader1.DLC = 8; // Number of bites to be transmitted max- 8
 80013d2:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <main+0x138>)
 80013d4:	2208      	movs	r2, #8
 80013d6:	611a      	str	r2, [r3, #16]
	txHeader1.IDE = CAN_ID_STD;
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <main+0x138>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
	txHeader1.RTR = CAN_RTR_DATA;
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <main+0x138>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
	txHeader1.StdId = 0x91;
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <main+0x138>)
 80013e6:	2291      	movs	r2, #145	; 0x91
 80013e8:	601a      	str	r2, [r3, #0]
	txHeader1.ExtId = 0;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <main+0x138>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
	txHeader1.TransmitGlobalTime = DISABLE;
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <main+0x138>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for DAQ Data
	txHeader2.DLC = 8; // Number of bites to be transmitted max- 8
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <main+0x13c>)
 80013f8:	2208      	movs	r2, #8
 80013fa:	611a      	str	r2, [r3, #16]
	txHeader2.IDE = CAN_ID_STD;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <main+0x13c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
	txHeader2.RTR = CAN_RTR_DATA;
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <main+0x13c>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
	txHeader2.StdId = 0x92;
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <main+0x13c>)
 800140a:	2292      	movs	r2, #146	; 0x92
 800140c:	601a      	str	r2, [r3, #0]
	txHeader2.ExtId = 0;
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <main+0x13c>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
	txHeader2.TransmitGlobalTime = DISABLE;
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <main+0x13c>)
 8001416:	2200      	movs	r2, #0
 8001418:	751a      	strb	r2, [r3, #20]

	// init the CAN mailbox for Control Data
	txHeader3.DLC = 8; // Number of bites to be transmitted max- 8
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <main+0x140>)
 800141c:	2208      	movs	r2, #8
 800141e:	611a      	str	r2, [r3, #16]
	txHeader3.IDE = CAN_ID_STD;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <main+0x140>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
	txHeader3.RTR = CAN_RTR_DATA;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <main+0x140>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
	txHeader3.StdId = 0x93;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <main+0x140>)
 800142e:	2293      	movs	r2, #147	; 0x93
 8001430:	601a      	str	r2, [r3, #0]
	txHeader3.ExtId = 0;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <main+0x140>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
	txHeader3.TransmitGlobalTime = DISABLE;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <main+0x140>)
 800143a:	2200      	movs	r2, #0
 800143c:	751a      	strb	r2, [r3, #20]

	HAL_CAN_ConfigFilter(&hcan1, &canFilter); // Initialize CAN Filter
 800143e:	490f      	ldr	r1, [pc, #60]	; (800147c <main+0x130>)
 8001440:	4813      	ldr	r0, [pc, #76]	; (8001490 <main+0x144>)
 8001442:	f001 ffad 	bl	80033a0 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1); // Initialize CAN Bus
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <main+0x144>)
 8001448:	f002 f896 	bl	8003578 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Interrupt
 800144c:	2102      	movs	r1, #2
 800144e:	4810      	ldr	r0, [pc, #64]	; (8001490 <main+0x144>)
 8001450:	f002 fac3 	bl	80039da <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <main+0x148>)
 8001456:	1d3c      	adds	r4, r7, #4
 8001458:	461d      	mov	r5, r3
 800145a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f004 f899 	bl	80055a2 <osThreadCreate>
 8001470:	4603      	mov	r3, r0
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <main+0x14c>)
 8001474:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001476:	f004 f88d 	bl	8005594 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800147a:	e7fe      	b.n	800147a <main+0x12e>
 800147c:	200041e8 	.word	0x200041e8
 8001480:	20004178 	.word	0x20004178
 8001484:	20004210 	.word	0x20004210
 8001488:	200041a4 	.word	0x200041a4
 800148c:	200040c0 	.word	0x200040c0
 8001490:	200041bc 	.word	0x200041bc
 8001494:	08007440 	.word	0x08007440
 8001498:	2000409c 	.word	0x2000409c

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	; 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	2234      	movs	r2, #52	; 0x34
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fb8e 	bl	8006bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <SystemClock_Config+0xb4>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a21      	ldr	r2, [pc, #132]	; (8001550 <SystemClock_Config+0xb4>)
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <SystemClock_Config+0xb4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014dc:	2300      	movs	r3, #0
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <SystemClock_Config+0xb8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <SystemClock_Config+0xb8>)
 80014e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <SystemClock_Config+0xb8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001500:	2310      	movs	r3, #16
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fda5 	bl	800505c <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001518:	f000 ffe2 	bl	80024e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fbd4 	bl	8004ce4 <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001542:	f000 ffcd 	bl	80024e0 <Error_Handler>
  }
}
 8001546:	bf00      	nop
 8001548:	3750      	adds	r7, #80	; 0x50
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40007000 	.word	0x40007000

08001558 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155e:	463b      	mov	r3, r7
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <MX_ADC1_Init+0x98>)
 800156c:	4a21      	ldr	r2, [pc, #132]	; (80015f4 <MX_ADC1_Init+0x9c>)
 800156e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_ADC1_Init+0x98>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_ADC1_Init+0x98>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_ADC1_Init+0x98>)
 800157e:	2201      	movs	r2, #1
 8001580:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_ADC1_Init+0x98>)
 8001584:	2201      	movs	r2, #1
 8001586:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_ADC1_Init+0x98>)
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_ADC1_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_ADC1_Init+0x98>)
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <MX_ADC1_Init+0xa0>)
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_ADC1_Init+0x98>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015b6:	480e      	ldr	r0, [pc, #56]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015b8:	f001 fa04 	bl	80029c4 <HAL_ADC_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015c2:	f000 ff8d 	bl	80024e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015d8:	f001 fbb8 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015e2:	f000 ff7d 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20004130 	.word	0x20004130
 80015f4:	40012000 	.word	0x40012000
 80015f8:	0f000001 	.word	0x0f000001

080015fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_CAN1_Init+0x60>)
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <MX_CAN1_Init+0x64>)
 8001604:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_CAN1_Init+0x60>)
 8001608:	2210      	movs	r2, #16
 800160a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <MX_CAN1_Init+0x60>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_CAN1_Init+0x60>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_CAN1_Init+0x60>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_CAN1_Init+0x60>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <MX_CAN1_Init+0x60>)
 8001626:	2200      	movs	r2, #0
 8001628:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_CAN1_Init+0x60>)
 800162c:	2200      	movs	r2, #0
 800162e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_CAN1_Init+0x60>)
 8001632:	2201      	movs	r2, #1
 8001634:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_CAN1_Init+0x60>)
 8001638:	2201      	movs	r2, #1
 800163a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_CAN1_Init+0x60>)
 800163e:	2200      	movs	r2, #0
 8001640:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_CAN1_Init+0x60>)
 8001644:	2200      	movs	r2, #0
 8001646:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_CAN1_Init+0x60>)
 800164a:	f001 fdad 	bl	80031a8 <HAL_CAN_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001654:	f000 ff44 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200041bc 	.word	0x200041bc
 8001660:	40006400 	.word	0x40006400

08001664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_I2C1_Init+0x50>)
 800166a:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <MX_I2C1_Init+0x54>)
 800166c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_I2C1_Init+0x58>)
 8001672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_I2C1_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_I2C1_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_I2C1_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_I2C1_Init+0x50>)
 80016a2:	f002 ff59 	bl	8004558 <HAL_I2C_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016ac:	f000 ff18 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200040d8 	.word	0x200040d8
 80016b8:	40005400 	.word	0x40005400
 80016bc:	000186a0 	.word	0x000186a0

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <MX_GPIO_Init+0xe0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <MX_GPIO_Init+0xe0>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <MX_GPIO_Init+0xe0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <MX_GPIO_Init+0xe0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <MX_GPIO_Init+0xe0>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <MX_GPIO_Init+0xe0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f240 4104 	movw	r1, #1028	; 0x404
 8001714:	4823      	ldr	r0, [pc, #140]	; (80017a4 <MX_GPIO_Init+0xe4>)
 8001716:	f002 ff05 	bl	8004524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001720:	4821      	ldr	r0, [pc, #132]	; (80017a8 <MX_GPIO_Init+0xe8>)
 8001722:	f002 feff 	bl	8004524 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001726:	f240 4304 	movw	r3, #1028	; 0x404
 800172a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	4619      	mov	r1, r3
 800173e:	4819      	ldr	r0, [pc, #100]	; (80017a4 <MX_GPIO_Init+0xe4>)
 8001740:	f002 fd44 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001744:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174a:	2303      	movs	r3, #3
 800174c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	4619      	mov	r1, r3
 8001758:	4812      	ldr	r0, [pc, #72]	; (80017a4 <MX_GPIO_Init+0xe4>)
 800175a:	f002 fd37 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800175e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4619      	mov	r1, r3
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_GPIO_Init+0xe4>)
 8001774:	f002 fd2a 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_GPIO_Init+0xe8>)
 8001792:	f002 fd1b 	bl	80041cc <HAL_GPIO_Init>

}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020000 	.word	0x40020000

080017ac <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 4 */

// *** functions *** //

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017b6:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80017b8:	2100      	movs	r1, #0
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f001 fffb 	bl	80037b6 <HAL_CAN_GetRxMessage>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    Error_Handler();
 80017c6:	f000 fe8b 	bl	80024e0 <Error_Handler>

  // get sensor data from rcb
  if (rxHeader.StdId == 0x81)
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b81      	cmp	r3, #129	; 0x81
 80017d0:	d123      	bne.n	800181a <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
  {
	  wheelSpeedBL = canRX[0];
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]
	  wheelSpeedBR = canRX[1];
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80017f2:	edc3 7a00 	vstr	s15, [r3]
	  rideHeightBL = canRX[2];
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017f8:	789b      	ldrb	r3, [r3, #2]
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001804:	edc3 7a00 	vstr	s15, [r3]
	  rideHeightBR = canRX[3];
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800180a:	78db      	ldrb	r3, [r3, #3]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
  }

  // get ready to drive from high voltage for precharge complete
  if (rxHeader.StdId == 0x87)
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b87      	cmp	r3, #135	; 0x87
 8001820:	d104      	bne.n	800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
  {
	  readyToDrive = canRX[0];
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800182a:	601a      	str	r2, [r3, #0]
  }
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200002fc 	.word	0x200002fc
 8001838:	200040a4 	.word	0x200040a4
 800183c:	20000318 	.word	0x20000318
 8001840:	20000314 	.word	0x20000314
 8001844:	20000328 	.word	0x20000328
 8001848:	20000324 	.word	0x20000324
 800184c:	20000308 	.word	0x20000308

08001850 <ADC_Select_CH_WSFR>:

void ADC_Select_CH_WSFR()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001856:	463b      	mov	r3, r7
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001866:	2301      	movs	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	4619      	mov	r1, r3
 8001872:	4806      	ldr	r0, [pc, #24]	; (800188c <ADC_Select_CH_WSFR+0x3c>)
 8001874:	f001 fa6a 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <ADC_Select_CH_WSFR+0x32>
		Error_Handler();
 800187e:	f000 fe2f 	bl	80024e0 <Error_Handler>
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20004130 	.word	0x20004130

08001890 <ADC_Select_CH_WSFL>:

void ADC_Select_CH_WSFL()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ae:	463b      	mov	r3, r7
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <ADC_Select_CH_WSFL+0x3c>)
 80018b4:	f001 fa4a 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <ADC_Select_CH_WSFL+0x32>
		Error_Handler();
 80018be:	f000 fe0f 	bl	80024e0 <Error_Handler>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20004130 	.word	0x20004130

080018d0 <ADC_Select_CH_RHFR>:

void ADC_Select_CH_RHFR()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ee:	463b      	mov	r3, r7
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <ADC_Select_CH_RHFR+0x3c>)
 80018f4:	f001 fa2a 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <ADC_Select_CH_RHFR+0x32>
		Error_Handler();
 80018fe:	f000 fdef 	bl	80024e0 <Error_Handler>
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20004130 	.word	0x20004130

08001910 <ADC_Select_CH_RHFL>:

void ADC_Select_CH_RHFL()
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001916:	463b      	mov	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;
 8001922:	2303      	movs	r3, #3
 8001924:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192e:	463b      	mov	r3, r7
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	; (800194c <ADC_Select_CH_RHFL+0x3c>)
 8001934:	f001 fa0a 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <ADC_Select_CH_RHFL+0x32>
		Error_Handler();
 800193e:	f000 fdcf 	bl	80024e0 <Error_Handler>
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20004130 	.word	0x20004130

08001950 <ADC_Select_CH_P0>:

void ADC_Select_CH_P0()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001956:	463b      	mov	r3, r7
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;
 8001962:	2304      	movs	r3, #4
 8001964:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001966:	2301      	movs	r3, #1
 8001968:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196e:	463b      	mov	r3, r7
 8001970:	4619      	mov	r1, r3
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <ADC_Select_CH_P0+0x3c>)
 8001974:	f001 f9ea 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <ADC_Select_CH_P0+0x32>
		Error_Handler();
 800197e:	f000 fdaf 	bl	80024e0 <Error_Handler>
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20004130 	.word	0x20004130

08001990 <ADC_Select_CH_P1>:

void ADC_Select_CH_P1()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;
 80019a2:	2305      	movs	r3, #5
 80019a4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <ADC_Select_CH_P1+0x3c>)
 80019b4:	f001 f9ca 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <ADC_Select_CH_P1+0x32>
		Error_Handler();
 80019be:	f000 fd8f 	bl	80024e0 <Error_Handler>
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20004130 	.word	0x20004130

080019d0 <ADC_Select_CH_B0>:

void ADC_Select_CH_B0()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80019d6:	463b      	mov	r3, r7
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 80019e2:	2306      	movs	r3, #6
 80019e4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <ADC_Select_CH_B0+0x3c>)
 80019f4:	f001 f9aa 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <ADC_Select_CH_B0+0x32>
		Error_Handler();
 80019fe:	f000 fd6f 	bl	80024e0 <Error_Handler>
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20004130 	.word	0x20004130

08001a10 <ADC_Select_CH_B1>:

void ADC_Select_CH_B1()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a16:	463b      	mov	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;
 8001a22:	2307      	movs	r3, #7
 8001a24:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <ADC_Select_CH_B1+0x3c>)
 8001a34:	f001 f98a 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <ADC_Select_CH_B1+0x32>
		Error_Handler();
 8001a3e:	f000 fd4f 	bl	80024e0 <Error_Handler>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20004130 	.word	0x20004130

08001a50 <ADC_Select_CH_CR>:

void ADC_Select_CH_CR()
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;
 8001a62:	2308      	movs	r3, #8
 8001a64:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <ADC_Select_CH_CR+0x3c>)
 8001a74:	f001 f96a 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <ADC_Select_CH_CR+0x32>
		Error_Handler();
 8001a7e:	f000 fd2f 	bl	80024e0 <Error_Handler>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20004130 	.word	0x20004130

08001a90 <ADC_Select_CH_BR>:

void ADC_Select_CH_BR()
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;
 8001aa2:	2309      	movs	r3, #9
 8001aa4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <ADC_Select_CH_BR+0x3c>)
 8001ab4:	f001 f94a 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <ADC_Select_CH_BR+0x32>
		Error_Handler();
 8001abe:	f000 fd0f 	bl	80024e0 <Error_Handler>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20004130 	.word	0x20004130

08001ad0 <pollSensorData>:

void pollSensorData()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	// get front right wheel speed
	ADC_Select_CH_WSFR();
 8001ad4:	f7ff febc 	bl	8001850 <ADC_Select_CH_WSFR>
	HAL_ADC_Start(&hadc1);
 8001ad8:	4871      	ldr	r0, [pc, #452]	; (8001ca0 <pollSensorData+0x1d0>)
 8001ada:	f000 ffb7 	bl	8002a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001ade:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ae2:	486f      	ldr	r0, [pc, #444]	; (8001ca0 <pollSensorData+0x1d0>)
 8001ae4:	f001 f899 	bl	8002c1a <HAL_ADC_PollForConversion>
	wheelSpeedFR = HAL_ADC_GetValue(&hadc1);
 8001ae8:	486d      	ldr	r0, [pc, #436]	; (8001ca0 <pollSensorData+0x1d0>)
 8001aea:	f001 f921 	bl	8002d30 <HAL_ADC_GetValue>
 8001aee:	ee07 0a90 	vmov	s15, r0
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	4b6b      	ldr	r3, [pc, #428]	; (8001ca4 <pollSensorData+0x1d4>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001afc:	4868      	ldr	r0, [pc, #416]	; (8001ca0 <pollSensorData+0x1d0>)
 8001afe:	f001 f859 	bl	8002bb4 <HAL_ADC_Stop>

	// get front left wheel speed
	ADC_Select_CH_WSFL();
 8001b02:	f7ff fec5 	bl	8001890 <ADC_Select_CH_WSFL>
	HAL_ADC_Start(&hadc1);
 8001b06:	4866      	ldr	r0, [pc, #408]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b08:	f000 ffa0 	bl	8002a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b10:	4863      	ldr	r0, [pc, #396]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b12:	f001 f882 	bl	8002c1a <HAL_ADC_PollForConversion>
	wheelSpeedFL = HAL_ADC_GetValue(&hadc1);
 8001b16:	4862      	ldr	r0, [pc, #392]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b18:	f001 f90a 	bl	8002d30 <HAL_ADC_GetValue>
 8001b1c:	ee07 0a90 	vmov	s15, r0
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <pollSensorData+0x1d8>)
 8001b26:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001b2a:	485d      	ldr	r0, [pc, #372]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b2c:	f001 f842 	bl	8002bb4 <HAL_ADC_Stop>

	// get front right ride height
	ADC_Select_CH_RHFR();
 8001b30:	f7ff fece 	bl	80018d0 <ADC_Select_CH_RHFR>
	HAL_ADC_Start(&hadc1);
 8001b34:	485a      	ldr	r0, [pc, #360]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b36:	f000 ff89 	bl	8002a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b3e:	4858      	ldr	r0, [pc, #352]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b40:	f001 f86b 	bl	8002c1a <HAL_ADC_PollForConversion>
	rideHeightFR = HAL_ADC_GetValue(&hadc1);
 8001b44:	4856      	ldr	r0, [pc, #344]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b46:	f001 f8f3 	bl	8002d30 <HAL_ADC_GetValue>
 8001b4a:	ee07 0a90 	vmov	s15, r0
 8001b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b52:	4b56      	ldr	r3, [pc, #344]	; (8001cac <pollSensorData+0x1dc>)
 8001b54:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001b58:	4851      	ldr	r0, [pc, #324]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b5a:	f001 f82b 	bl	8002bb4 <HAL_ADC_Stop>

	// get front left ride height
	ADC_Select_CH_RHFL();
 8001b5e:	f7ff fed7 	bl	8001910 <ADC_Select_CH_RHFL>
	HAL_ADC_Start(&hadc1);
 8001b62:	484f      	ldr	r0, [pc, #316]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b64:	f000 ff72 	bl	8002a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b6c:	484c      	ldr	r0, [pc, #304]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b6e:	f001 f854 	bl	8002c1a <HAL_ADC_PollForConversion>
	rideHeightFL = HAL_ADC_GetValue(&hadc1);
 8001b72:	484b      	ldr	r0, [pc, #300]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b74:	f001 f8dc 	bl	8002d30 <HAL_ADC_GetValue>
 8001b78:	ee07 0a90 	vmov	s15, r0
 8001b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b80:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <pollSensorData+0x1e0>)
 8001b82:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001b86:	4846      	ldr	r0, [pc, #280]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b88:	f001 f814 	bl	8002bb4 <HAL_ADC_Stop>

	// get pedal 0
	ADC_Select_CH_P0();
 8001b8c:	f7ff fee0 	bl	8001950 <ADC_Select_CH_P0>
	HAL_ADC_Start(&hadc1);
 8001b90:	4843      	ldr	r0, [pc, #268]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b92:	f000 ff5b 	bl	8002a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b9a:	4841      	ldr	r0, [pc, #260]	; (8001ca0 <pollSensorData+0x1d0>)
 8001b9c:	f001 f83d 	bl	8002c1a <HAL_ADC_PollForConversion>
	pedal0 = HAL_ADC_GetValue(&hadc1);
 8001ba0:	483f      	ldr	r0, [pc, #252]	; (8001ca0 <pollSensorData+0x1d0>)
 8001ba2:	f001 f8c5 	bl	8002d30 <HAL_ADC_GetValue>
 8001ba6:	ee07 0a90 	vmov	s15, r0
 8001baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <pollSensorData+0x1e4>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001bb4:	483a      	ldr	r0, [pc, #232]	; (8001ca0 <pollSensorData+0x1d0>)
 8001bb6:	f000 fffd 	bl	8002bb4 <HAL_ADC_Stop>

	// get pedal 1
	ADC_Select_CH_P1();
 8001bba:	f7ff fee9 	bl	8001990 <ADC_Select_CH_P1>
	HAL_ADC_Start(&hadc1);
 8001bbe:	4838      	ldr	r0, [pc, #224]	; (8001ca0 <pollSensorData+0x1d0>)
 8001bc0:	f000 ff44 	bl	8002a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001bc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bc8:	4835      	ldr	r0, [pc, #212]	; (8001ca0 <pollSensorData+0x1d0>)
 8001bca:	f001 f826 	bl	8002c1a <HAL_ADC_PollForConversion>
	pedal1 = HAL_ADC_GetValue(&hadc1);
 8001bce:	4834      	ldr	r0, [pc, #208]	; (8001ca0 <pollSensorData+0x1d0>)
 8001bd0:	f001 f8ae 	bl	8002d30 <HAL_ADC_GetValue>
 8001bd4:	ee07 0a90 	vmov	s15, r0
 8001bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <pollSensorData+0x1e8>)
 8001bde:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001be2:	482f      	ldr	r0, [pc, #188]	; (8001ca0 <pollSensorData+0x1d0>)
 8001be4:	f000 ffe6 	bl	8002bb4 <HAL_ADC_Stop>

	// get brake 0
	ADC_Select_CH_B0();
 8001be8:	f7ff fef2 	bl	80019d0 <ADC_Select_CH_B0>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001bec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bf0:	482b      	ldr	r0, [pc, #172]	; (8001ca0 <pollSensorData+0x1d0>)
 8001bf2:	f001 f812 	bl	8002c1a <HAL_ADC_PollForConversion>
	brake0 = HAL_ADC_GetValue(&hadc1);
 8001bf6:	482a      	ldr	r0, [pc, #168]	; (8001ca0 <pollSensorData+0x1d0>)
 8001bf8:	f001 f89a 	bl	8002d30 <HAL_ADC_GetValue>
 8001bfc:	ee07 0a90 	vmov	s15, r0
 8001c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <pollSensorData+0x1ec>)
 8001c06:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001c0a:	4825      	ldr	r0, [pc, #148]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c0c:	f000 ffd2 	bl	8002bb4 <HAL_ADC_Stop>

	// get brake 1
	ADC_Select_CH_B1();
 8001c10:	f7ff fefe 	bl	8001a10 <ADC_Select_CH_B1>
	HAL_ADC_Start(&hadc1);
 8001c14:	4822      	ldr	r0, [pc, #136]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c16:	f000 ff19 	bl	8002a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c1e:	4820      	ldr	r0, [pc, #128]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c20:	f000 fffb 	bl	8002c1a <HAL_ADC_PollForConversion>
	brake1 = HAL_ADC_GetValue(&hadc1);
 8001c24:	481e      	ldr	r0, [pc, #120]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c26:	f001 f883 	bl	8002d30 <HAL_ADC_GetValue>
 8001c2a:	ee07 0a90 	vmov	s15, r0
 8001c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <pollSensorData+0x1f0>)
 8001c34:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001c38:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c3a:	f000 ffbb 	bl	8002bb4 <HAL_ADC_Stop>

	// get coast regen
	ADC_Select_CH_CR();
 8001c3e:	f7ff ff07 	bl	8001a50 <ADC_Select_CH_CR>
	HAL_ADC_Start(&hadc1);
 8001c42:	4817      	ldr	r0, [pc, #92]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c44:	f000 ff02 	bl	8002a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c4c:	4814      	ldr	r0, [pc, #80]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c4e:	f000 ffe4 	bl	8002c1a <HAL_ADC_PollForConversion>
	coastRegen = HAL_ADC_GetValue(&hadc1);
 8001c52:	4813      	ldr	r0, [pc, #76]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c54:	f001 f86c 	bl	8002d30 <HAL_ADC_GetValue>
 8001c58:	ee07 0a90 	vmov	s15, r0
 8001c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <pollSensorData+0x1f4>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001c66:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c68:	f000 ffa4 	bl	8002bb4 <HAL_ADC_Stop>

	// get brake regen
	ADC_Select_CH_BR();
 8001c6c:	f7ff ff10 	bl	8001a90 <ADC_Select_CH_BR>
	HAL_ADC_Start(&hadc1);
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c72:	f000 feeb 	bl	8002a4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c7a:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c7c:	f000 ffcd 	bl	8002c1a <HAL_ADC_PollForConversion>
	brakeRegen = HAL_ADC_GetValue(&hadc1);
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c82:	f001 f855 	bl	8002d30 <HAL_ADC_GetValue>
 8001c86:	ee07 0a90 	vmov	s15, r0
 8001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <pollSensorData+0x1f8>)
 8001c90:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <pollSensorData+0x1d0>)
 8001c96:	f000 ff8d 	bl	8002bb4 <HAL_ADC_Stop>
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20004130 	.word	0x20004130
 8001ca4:	2000030c 	.word	0x2000030c
 8001ca8:	20000310 	.word	0x20000310
 8001cac:	2000031c 	.word	0x2000031c
 8001cb0:	20000320 	.word	0x20000320
 8001cb4:	2000412c 	.word	0x2000412c
 8001cb8:	200041e4 	.word	0x200041e4
 8001cbc:	20004098 	.word	0x20004098
 8001cc0:	200041a0 	.word	0x200041a0
 8001cc4:	20004198 	.word	0x20004198
 8001cc8:	2000419c 	.word	0x2000419c

08001ccc <welcomeScreen>:
/**
 * @brief welcome & boot screen
 * 
 */
void welcomeScreen()
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	lcdInit(&hi2c1, 0x27, 2, 16);       			// init lcd (i2c reference, LCD address, lines, rows)
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	2127      	movs	r1, #39	; 0x27
 8001cd6:	4814      	ldr	r0, [pc, #80]	; (8001d28 <welcomeScreen+0x5c>)
 8001cd8:	f7ff f8ae 	bl	8000e38 <lcdInit>
	lcdAutoscrollOff();								// turn off autoscroll
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2008      	movs	r0, #8
 8001ce0:	f7ff f95c 	bl	8000f9c <lcdCommand>
	lcdBacklightOn();								// turn on backlight
 8001ce4:	2008      	movs	r0, #8
 8001ce6:	f7ff fa47 	bl	8001178 <lcdBacklight>
	lcdDisplayClear();                  			// clear the screen
 8001cea:	2101      	movs	r1, #1
 8001cec:	2002      	movs	r0, #2
 8001cee:	f7ff f955 	bl	8000f9c <lcdCommand>
	lcdSetCursorPosition(2, 0);         			// set the cursor
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	f7ff fa69 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"welcome AERO!", 13);   	// print
 8001cfa:	210d      	movs	r1, #13
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <welcomeScreen+0x60>)
 8001cfe:	f7ff fa91 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(2, 1);         			// next line
 8001d02:	2101      	movs	r1, #1
 8001d04:	2002      	movs	r0, #2
 8001d06:	f7ff fa61 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"booting up...", 13);   	// print
 8001d0a:	210d      	movs	r1, #13
 8001d0c:	4808      	ldr	r0, [pc, #32]	; (8001d30 <welcomeScreen+0x64>)
 8001d0e:	f7ff fa89 	bl	8001224 <lcdPrintStr>
	HAL_Delay(3000);								// delay 3 seconds so the screen can be read
 8001d12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d16:	f000 fe31 	bl	800297c <HAL_Delay>
	lcdDisplayClear();								// clear the display so the other screens can be printed
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f7ff f93d 	bl	8000f9c <lcdCommand>
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200040d8 	.word	0x200040d8
 8001d2c:	0800745c 	.word	0x0800745c
 8001d30:	0800746c 	.word	0x0800746c
 8001d34:	00000000 	.word	0x00000000

08001d38 <racingHUD>:
/**
 * @brief racing hud: mph(est), battery%, drive direction, coast regen, brake regen
 *
 */
void racingHUD()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b090      	sub	sp, #64	; 0x40
 8001d3c:	af00      	add	r7, sp, #0
	// get wheel speed
	float averageWheelSpeed = (wheelSpeedFR + wheelSpeedFL) / 2;
 8001d3e:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <racingHUD+0x1b0>)
 8001d40:	ed93 7a00 	vldr	s14, [r3]
 8001d44:	4b69      	ldr	r3, [pc, #420]	; (8001eec <racingHUD+0x1b4>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d56:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// get current mph from wheel speed
	float currentMPH = ((averageWheelSpeed * WHEEL_DIAMETER) * (3.14159 * 60)) / 63360;
 8001d5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d5c:	f7fe fc1c 	bl	8000598 <__aeabi_f2d>
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	4b62      	ldr	r3, [pc, #392]	; (8001ef0 <racingHUD+0x1b8>)
 8001d66:	f7fe fc6f 	bl	8000648 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	a359      	add	r3, pc, #356	; (adr r3, 8001ed8 <racingHUD+0x1a0>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fc66 	bl	8000648 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	a356      	add	r3, pc, #344	; (adr r3, 8001ee0 <racingHUD+0x1a8>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe fd87 	bl	800089c <__aeabi_ddiv>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe fe69 	bl	8000a6c <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38

	// get battery percentage
	float batteryPercentage = (emusVoltage / MAX_PACK_VOLTAGE) * 100;
 8001d9e:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <racingHUD+0x1bc>)
 8001da0:	ed93 7a00 	vldr	s14, [r3]
 8001da4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001ef8 <racingHUD+0x1c0>
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001efc <racingHUD+0x1c4>
 8001db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	char speedStr[10];
	char coastStr[10];
	char brakeStr[10];

	// drive direction
	lcdSetCursorPosition(0, 0);									// position of drive direction
 8001db8:	2100      	movs	r1, #0
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff fa06 	bl	80011cc <lcdSetCursorPosition>
	if (direction) lcdPrintStr((uint8_t*)"FWD", 3);     		// print drive direction
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <racingHUD+0x1c8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <racingHUD+0x9a>
 8001dc8:	2103      	movs	r1, #3
 8001dca:	484e      	ldr	r0, [pc, #312]	; (8001f04 <racingHUD+0x1cc>)
 8001dcc:	f7ff fa2a 	bl	8001224 <lcdPrintStr>
 8001dd0:	e003      	b.n	8001dda <racingHUD+0xa2>
	else lcdPrintStr((uint8_t*)"RVS", 3);
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	484c      	ldr	r0, [pc, #304]	; (8001f08 <racingHUD+0x1d0>)
 8001dd6:	f7ff fa25 	bl	8001224 <lcdPrintStr>

	// battery percentage
	lcdSetCursorPosition(12, 0); 								// set cursor for battery percentage value
 8001dda:	2100      	movs	r1, #0
 8001ddc:	200c      	movs	r0, #12
 8001dde:	f7ff f9f5 	bl	80011cc <lcdSetCursorPosition>
	sprintf(battStr, "%.0d%%", (int)batteryPercentage); 		// sprintf it
 8001de2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dee:	ee17 2a90 	vmov	r2, s15
 8001df2:	4946      	ldr	r1, [pc, #280]	; (8001f0c <racingHUD+0x1d4>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f004 fef1 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)battStr, strlen(battStr));			// print the battery percentage value
 8001dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fa0e 	bl	8000220 <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fa08 	bl	8001224 <lcdPrintStr>

	// speedometer		
	lcdSetCursorPosition(7, 0);                     			// set cursor for mph value
 8001e14:	2100      	movs	r1, #0
 8001e16:	2007      	movs	r0, #7
 8001e18:	f7ff f9d8 	bl	80011cc <lcdSetCursorPosition>
	sprintf(speedStr, "%.0d", (int)currentMPH);					// sprintf it
 8001e1c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	ee17 2a90 	vmov	r2, s15
 8001e2c:	4938      	ldr	r1, [pc, #224]	; (8001f10 <racingHUD+0x1d8>)
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 fed4 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)speedStr, strlen(speedStr));			// print the current speed in MPH, cast to int to round to whole number
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe f9f1 	bl	8000220 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f9eb 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(7, 1);                     			// set cursor for units
 8001e4e:	2101      	movs	r1, #1
 8001e50:	2007      	movs	r0, #7
 8001e52:	f7ff f9bb 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"mph", 3);                    		// print units
 8001e56:	2103      	movs	r1, #3
 8001e58:	482e      	ldr	r0, [pc, #184]	; (8001f14 <racingHUD+0x1dc>)
 8001e5a:	f7ff f9e3 	bl	8001224 <lcdPrintStr>

	// coast regen		
	lcdSetCursorPosition(0, 1);                      			// set cursor for CR
 8001e5e:	2101      	movs	r1, #1
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff f9b3 	bl	80011cc <lcdSetCursorPosition>
	sprintf(coastStr, "C:%.0d%%", (int)coastRegen);				// sprintf it
 8001e66:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <racingHUD+0x1e0>)
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	ee17 2a90 	vmov	r2, s15
 8001e78:	4928      	ldr	r1, [pc, #160]	; (8001f1c <racingHUD+0x1e4>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 feae 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)coastStr, strlen(coastStr));  		// print coast regen value
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe f9cb 	bl	8000220 <strlen>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f9c5 	bl	8001224 <lcdPrintStr>

	// brake regen		
	lcdSetCursorPosition(11, 1);                     			// set cursor for BR
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	200b      	movs	r0, #11
 8001e9e:	f7ff f995 	bl	80011cc <lcdSetCursorPosition>
	sprintf(brakeStr, "B: %d%%", (int)brakeRegen);				// sprintf it
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <racingHUD+0x1e8>)
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	ee17 2a90 	vmov	r2, s15
 8001eb2:	491c      	ldr	r1, [pc, #112]	; (8001f24 <racingHUD+0x1ec>)
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f004 fe91 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)brakeStr, strlen(brakeStr));  		// print brake regen value
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe f9af 	bl	8000220 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f9aa 	bl	8001224 <lcdPrintStr>
}
 8001ed0:	bf00      	nop
 8001ed2:	3740      	adds	r7, #64	; 0x40
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	5119ce07 	.word	0x5119ce07
 8001edc:	40678fda 	.word	0x40678fda
 8001ee0:	00000000 	.word	0x00000000
 8001ee4:	40eef000 	.word	0x40eef000
 8001ee8:	2000030c 	.word	0x2000030c
 8001eec:	20000310 	.word	0x20000310
 8001ef0:	40348000 	.word	0x40348000
 8001ef4:	20000304 	.word	0x20000304
 8001ef8:	43848000 	.word	0x43848000
 8001efc:	42c80000 	.word	0x42c80000
 8001f00:	20000330 	.word	0x20000330
 8001f04:	0800747c 	.word	0x0800747c
 8001f08:	08007480 	.word	0x08007480
 8001f0c:	08007484 	.word	0x08007484
 8001f10:	0800748c 	.word	0x0800748c
 8001f14:	08007494 	.word	0x08007494
 8001f18:	20004198 	.word	0x20004198
 8001f1c:	08007498 	.word	0x08007498
 8001f20:	2000419c 	.word	0x2000419c
 8001f24:	080074a4 	.word	0x080074a4

08001f28 <electricalSettings>:
/**
 * @brief battery state, bus voltage, rinehart voltage, power mode
 * 
 */
void electricalSettings()
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
	// get battery percentage
	float batteryPercentage = (emusVoltage / MAX_PACK_VOLTAGE) * 100;
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <electricalSettings+0xfc>)
 8001f30:	ed93 7a00 	vldr	s14, [r3]
 8001f34:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002028 <electricalSettings+0x100>
 8001f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800202c <electricalSettings+0x104>
 8001f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f44:	edc7 7a07 	vstr	s15, [r7, #28]
	// init some char buffs for variables
	char battStr[10];
	char busVStr[10];

	// battery percentage
	lcdSetCursorPosition(0, 0);									// set cursor for battery title
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff f93e 	bl	80011cc <lcdSetCursorPosition>
	sprintf(battStr, "Batt:%d%%", (int)batteryPercentage);		// sprintf it
 8001f50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	ee17 2a90 	vmov	r2, s15
 8001f60:	4933      	ldr	r1, [pc, #204]	; (8002030 <electricalSettings+0x108>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 fe3a 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)battStr, strlen(battStr));			// print title
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe f957 	bl	8000220 <strlen>
 8001f72:	4603      	mov	r3, r0
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f951 	bl	8001224 <lcdPrintStr>

	// bus voltage
	lcdSetCursorPosition(11, 0);								// set cursor for bus voltage title
 8001f82:	2100      	movs	r1, #0
 8001f84:	200b      	movs	r0, #11
 8001f86:	f7ff f921 	bl	80011cc <lcdSetCursorPosition>
	sprintf(busVStr, "Bus:%d", (int)emusVoltage);				// sprintf it			
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <electricalSettings+0xfc>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	ee17 2a90 	vmov	r2, s15
 8001f9a:	4926      	ldr	r1, [pc, #152]	; (8002034 <electricalSettings+0x10c>)
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fe1d 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)busVStr, strlen(busVStr));			// print
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe f93b 	bl	8000220 <strlen>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f936 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(15, 1);                                // set cursor for units
 8001fb8:	2101      	movs	r1, #1
 8001fba:	200f      	movs	r0, #15
 8001fbc:	f7ff f906 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"V", 1);                              // print units
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	481d      	ldr	r0, [pc, #116]	; (8002038 <electricalSettings+0x110>)
 8001fc4:	f7ff f92e 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(15, 0);                                // set cursor for units
	lcdPrintStr("V");                                       	// print % sign
	*/

	// power mode
	lcdSetCursorPosition(0, 1);                                 // set cursor for mode text
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff f8fe 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"Mode:", 5);							// print mode text
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	481a      	ldr	r0, [pc, #104]	; (800203c <electricalSettings+0x114>)
 8001fd4:	f7ff f926 	bl	8001224 <lcdPrintStr>
	lcdSetCursorPosition(5, 1);                                 // set cursor current mode setting
 8001fd8:	2101      	movs	r1, #1
 8001fda:	2005      	movs	r0, #5
 8001fdc:	f7ff f8f6 	bl	80011cc <lcdSetCursorPosition>
	if (powerMode == TUTORIAL) lcdPrintStr((uint8_t*)"TUTR", 4);
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <electricalSettings+0x118>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d103      	bne.n	8001ff0 <electricalSettings+0xc8>
 8001fe8:	2104      	movs	r1, #4
 8001fea:	4816      	ldr	r0, [pc, #88]	; (8002044 <electricalSettings+0x11c>)
 8001fec:	f7ff f91a 	bl	8001224 <lcdPrintStr>
	if (powerMode == ECO) lcdPrintStr((uint8_t*)"ECO", 3);
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <electricalSettings+0x118>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d103      	bne.n	8002000 <electricalSettings+0xd8>
 8001ff8:	2103      	movs	r1, #3
 8001ffa:	4813      	ldr	r0, [pc, #76]	; (8002048 <electricalSettings+0x120>)
 8001ffc:	f7ff f912 	bl	8001224 <lcdPrintStr>
	if (powerMode == EXPERT) lcdPrintStr((uint8_t*)"EXPT", 4);
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <electricalSettings+0x118>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d104      	bne.n	8002012 <electricalSettings+0xea>
 8002008:	2104      	movs	r1, #4
 800200a:	4810      	ldr	r0, [pc, #64]	; (800204c <electricalSettings+0x124>)
 800200c:	f7ff f90a 	bl	8001224 <lcdPrintStr>
	else lcdPrintStr((uint8_t*)(uint8_t*)"ERR!", 4);
}
 8002010:	e003      	b.n	800201a <electricalSettings+0xf2>
	else lcdPrintStr((uint8_t*)(uint8_t*)"ERR!", 4);
 8002012:	2104      	movs	r1, #4
 8002014:	480e      	ldr	r0, [pc, #56]	; (8002050 <electricalSettings+0x128>)
 8002016:	f7ff f905 	bl	8001224 <lcdPrintStr>
}
 800201a:	bf00      	nop
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000304 	.word	0x20000304
 8002028:	43848000 	.word	0x43848000
 800202c:	42c80000 	.word	0x42c80000
 8002030:	080074ac 	.word	0x080074ac
 8002034:	080074b8 	.word	0x080074b8
 8002038:	080074c0 	.word	0x080074c0
 800203c:	080074c4 	.word	0x080074c4
 8002040:	20000000 	.word	0x20000000
 8002044:	080074cc 	.word	0x080074cc
 8002048:	080074d4 	.word	0x080074d4
 800204c:	080074d8 	.word	0x080074d8
 8002050:	080074e0 	.word	0x080074e0

08002054 <rideSettings>:
/**
 * @brief ride height, wheel rpm, coast regen, brake regen
 *
 */
void rideSettings()
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
	// init some char buffs for variables
	char rideStr[10];
	char wheelStr[10];

	// ride height
	lcdSetCursorPosition(0, 0);									// set cursor for front left ride height value
 800205a:	2100      	movs	r1, #0
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff f8b5 	bl	80011cc <lcdSetCursorPosition>
	sprintf(rideStr, "%d", (int)rideHeightFL);					// sprintf it
 8002062:	4b8a      	ldr	r3, [pc, #552]	; (800228c <rideSettings+0x238>)
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	ee17 2a90 	vmov	r2, s15
 8002074:	4986      	ldr	r1, [pc, #536]	; (8002290 <rideSettings+0x23c>)
 8002076:	4618      	mov	r0, r3
 8002078:	f004 fdb0 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));			// print front left ride height value
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe f8cd 	bl	8000220 <strlen>
 8002086:	4603      	mov	r3, r0
 8002088:	b2da      	uxtb	r2, r3
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f8c7 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(2, 0);				  					// spacer
 8002096:	2100      	movs	r1, #0
 8002098:	2002      	movs	r0, #2
 800209a:	f7ff f897 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"-", 1);						  		// spacer
 800209e:	2101      	movs	r1, #1
 80020a0:	487c      	ldr	r0, [pc, #496]	; (8002294 <rideSettings+0x240>)
 80020a2:	f7ff f8bf 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(3, 0);									// set cursor for front right ride height value
 80020a6:	2100      	movs	r1, #0
 80020a8:	2003      	movs	r0, #3
 80020aa:	f7ff f88f 	bl	80011cc <lcdSetCursorPosition>
	sprintf(rideStr, "%d", (int)rideHeightFR);					// sprintf it
 80020ae:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <rideSettings+0x244>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	ee17 2a90 	vmov	r2, s15
 80020c0:	4973      	ldr	r1, [pc, #460]	; (8002290 <rideSettings+0x23c>)
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 fd8a 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));			// print front right ride height value
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe f8a7 	bl	8000220 <strlen>
 80020d2:	4603      	mov	r3, r0
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f8a1 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(5, 0);									// set cursor for "<- Ride"
 80020e2:	2100      	movs	r1, #0
 80020e4:	2005      	movs	r0, #5
 80020e6:	f7ff f871 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"<-Ride", 6);							// print
 80020ea:	2106      	movs	r1, #6
 80020ec:	486b      	ldr	r0, [pc, #428]	; (800229c <rideSettings+0x248>)
 80020ee:	f7ff f899 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(0, 1);                  				// set cursor for back left ride height value
 80020f2:	2101      	movs	r1, #1
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff f869 	bl	80011cc <lcdSetCursorPosition>
	sprintf(rideStr, "%d", (int)rideHeightBL);					// sprintf it
 80020fa:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <rideSettings+0x24c>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	ee17 2a90 	vmov	r2, s15
 800210c:	4960      	ldr	r1, [pc, #384]	; (8002290 <rideSettings+0x23c>)
 800210e:	4618      	mov	r0, r3
 8002110:	f004 fd64 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));         	// print back left ride height value
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f881 	bl	8000220 <strlen>
 800211e:	4603      	mov	r3, r0
 8002120:	b2da      	uxtb	r2, r3
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff f87b 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(2, 1);				  					// spacer
 800212e:	2101      	movs	r1, #1
 8002130:	2002      	movs	r0, #2
 8002132:	f7ff f84b 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"-", 1);						  		// spacer
 8002136:	2101      	movs	r1, #1
 8002138:	4856      	ldr	r0, [pc, #344]	; (8002294 <rideSettings+0x240>)
 800213a:	f7ff f873 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(3, 1);                  				// set cursor for back right ride height value
 800213e:	2101      	movs	r1, #1
 8002140:	2003      	movs	r0, #3
 8002142:	f7ff f843 	bl	80011cc <lcdSetCursorPosition>
	sprintf(rideStr, "%d", (int)rideHeightBR);					// sprintf it
 8002146:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <rideSettings+0x250>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	ee17 2a90 	vmov	r2, s15
 8002158:	494d      	ldr	r1, [pc, #308]	; (8002290 <rideSettings+0x23c>)
 800215a:	4618      	mov	r0, r3
 800215c:	f004 fd3e 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));			// print back right ride height value
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f85b 	bl	8000220 <strlen>
 800216a:	4603      	mov	r3, r0
 800216c:	b2da      	uxtb	r2, r3
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f855 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(6, 1);                  				// set cursor for "RPM->"
 800217a:	2101      	movs	r1, #1
 800217c:	2006      	movs	r0, #6
 800217e:	f7ff f825 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"RPM->", 5);                   		// print the "RPM->"
 8002182:	2105      	movs	r1, #5
 8002184:	4848      	ldr	r0, [pc, #288]	; (80022a8 <rideSettings+0x254>)
 8002186:	f7ff f84d 	bl	8001224 <lcdPrintStr>

	// wheel speed
	lcdSetCursorPosition(11, 0);								// set cursor for front left wheelspeed value
 800218a:	2100      	movs	r1, #0
 800218c:	200b      	movs	r0, #11
 800218e:	f7ff f81d 	bl	80011cc <lcdSetCursorPosition>
	sprintf(wheelStr, "%d", (int)wheelSpeedFL);					// sprintf it
 8002192:	4b46      	ldr	r3, [pc, #280]	; (80022ac <rideSettings+0x258>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219c:	463b      	mov	r3, r7
 800219e:	ee17 2a90 	vmov	r2, s15
 80021a2:	493b      	ldr	r1, [pc, #236]	; (8002290 <rideSettings+0x23c>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fd19 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print front left wheelspeed value
 80021aa:	463b      	mov	r3, r7
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f837 	bl	8000220 <strlen>
 80021b2:	4603      	mov	r3, r0
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	463b      	mov	r3, r7
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f832 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(13, 0);								// spacer
 80021c0:	2100      	movs	r1, #0
 80021c2:	200d      	movs	r0, #13
 80021c4:	f7ff f802 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"-", 1);						  		// spacer
 80021c8:	2101      	movs	r1, #1
 80021ca:	4832      	ldr	r0, [pc, #200]	; (8002294 <rideSettings+0x240>)
 80021cc:	f7ff f82a 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(14, 0);                 				// set cursor for front right wheelspeed value
 80021d0:	2100      	movs	r1, #0
 80021d2:	200e      	movs	r0, #14
 80021d4:	f7fe fffa 	bl	80011cc <lcdSetCursorPosition>
	sprintf(wheelStr, "%d", (int)wheelSpeedFR);					// sprintf it
 80021d8:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <rideSettings+0x25c>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e2:	463b      	mov	r3, r7
 80021e4:	ee17 2a90 	vmov	r2, s15
 80021e8:	4929      	ldr	r1, [pc, #164]	; (8002290 <rideSettings+0x23c>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f004 fcf6 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print front right wheelspeed value
 80021f0:	463b      	mov	r3, r7
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f814 	bl	8000220 <strlen>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	463b      	mov	r3, r7
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff f80f 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(11, 1);                 				// set cursor for back left wheelspeed value
 8002206:	2101      	movs	r1, #1
 8002208:	200b      	movs	r0, #11
 800220a:	f7fe ffdf 	bl	80011cc <lcdSetCursorPosition>
	sprintf(wheelStr, "%d", (int)wheelSpeedBL);					// sprintf it
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <rideSettings+0x260>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002218:	463b      	mov	r3, r7
 800221a:	ee17 2a90 	vmov	r2, s15
 800221e:	491c      	ldr	r1, [pc, #112]	; (8002290 <rideSettings+0x23c>)
 8002220:	4618      	mov	r0, r3
 8002222:	f004 fcdb 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print back left wheelspeed value
 8002226:	463b      	mov	r3, r7
 8002228:	4618      	mov	r0, r3
 800222a:	f7fd fff9 	bl	8000220 <strlen>
 800222e:	4603      	mov	r3, r0
 8002230:	b2da      	uxtb	r2, r3
 8002232:	463b      	mov	r3, r7
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fff4 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(13, 1);								// set cursor for "-"
 800223c:	2101      	movs	r1, #1
 800223e:	200d      	movs	r0, #13
 8002240:	f7fe ffc4 	bl	80011cc <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)"-", 1);								// print the "-"
 8002244:	2101      	movs	r1, #1
 8002246:	4813      	ldr	r0, [pc, #76]	; (8002294 <rideSettings+0x240>)
 8002248:	f7fe ffec 	bl	8001224 <lcdPrintStr>

	lcdSetCursorPosition(14, 1);								// set cursor for back right wheelspeed value
 800224c:	2101      	movs	r1, #1
 800224e:	200e      	movs	r0, #14
 8002250:	f7fe ffbc 	bl	80011cc <lcdSetCursorPosition>
	sprintf(wheelStr, "%d", (int)wheelSpeedBR);					// sprintf it
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <rideSettings+0x264>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225e:	463b      	mov	r3, r7
 8002260:	ee17 2a90 	vmov	r2, s15
 8002264:	490a      	ldr	r1, [pc, #40]	; (8002290 <rideSettings+0x23c>)
 8002266:	4618      	mov	r0, r3
 8002268:	f004 fcb8 	bl	8006bdc <siprintf>
	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print value for back right wheelspeed value
 800226c:	463b      	mov	r3, r7
 800226e:	4618      	mov	r0, r3
 8002270:	f7fd ffd6 	bl	8000220 <strlen>
 8002274:	4603      	mov	r3, r0
 8002276:	b2da      	uxtb	r2, r3
 8002278:	463b      	mov	r3, r7
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe ffd1 	bl	8001224 <lcdPrintStr>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000320 	.word	0x20000320
 8002290:	080074e8 	.word	0x080074e8
 8002294:	080074ec 	.word	0x080074ec
 8002298:	2000031c 	.word	0x2000031c
 800229c:	080074f0 	.word	0x080074f0
 80022a0:	20000328 	.word	0x20000328
 80022a4:	20000324 	.word	0x20000324
 80022a8:	080074f8 	.word	0x080074f8
 80022ac:	20000310 	.word	0x20000310
 80022b0:	2000030c 	.word	0x2000030c
 80022b4:	20000318 	.word	0x20000318
 80022b8:	20000314 	.word	0x20000314

080022bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	; 0x30
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f003 f9b8 	bl	800563a <osDelay>

	// poll sensor data
	pollSensorData();
 80022ca:	f7ff fc01 	bl	8001ad0 <pollSensorData>

	// read can messages
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80022ce:	2102      	movs	r1, #2
 80022d0:	486e      	ldr	r0, [pc, #440]	; (800248c <StartDefaultTask+0x1d0>)
 80022d2:	f001 fb82 	bl	80039da <HAL_CAN_ActivateNotification>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <StartDefaultTask+0x24>
		Error_Handler();
 80022dc:	f000 f900 	bl	80024e0 <Error_Handler>

	// send can messages
	uint8_t csend0[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // Tx Buffer
 80022e0:	4a6b      	ldr	r2, [pc, #428]	; (8002490 <StartDefaultTask+0x1d4>)
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022ea:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_CAN_AddTxMessage(&hcan1, &txHeader0, csend0, &canMailbox); // Send Message
 80022ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022f2:	4b68      	ldr	r3, [pc, #416]	; (8002494 <StartDefaultTask+0x1d8>)
 80022f4:	4968      	ldr	r1, [pc, #416]	; (8002498 <StartDefaultTask+0x1dc>)
 80022f6:	4865      	ldr	r0, [pc, #404]	; (800248c <StartDefaultTask+0x1d0>)
 80022f8:	f001 f982 	bl	8003600 <HAL_CAN_AddTxMessage>

	uint8_t csend1[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; 	// add torque setting
 80022fc:	4a64      	ldr	r2, [pc, #400]	; (8002490 <StartDefaultTask+0x1d4>)
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002306:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_CAN_AddTxMessage(&hcan1, &txHeader1, csend1, &canMailbox); // Send Message
 800230a:	f107 021c 	add.w	r2, r7, #28
 800230e:	4b61      	ldr	r3, [pc, #388]	; (8002494 <StartDefaultTask+0x1d8>)
 8002310:	4962      	ldr	r1, [pc, #392]	; (800249c <StartDefaultTask+0x1e0>)
 8002312:	485e      	ldr	r0, [pc, #376]	; (800248c <StartDefaultTask+0x1d0>)
 8002314:	f001 f974 	bl	8003600 <HAL_CAN_AddTxMessage>

	uint8_t csend2[] = {wheelSpeedFL, wheelSpeedFR, rideHeightFL, rideHeightFR, brake0, brake1, pedal0, pedal1};
 8002318:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <StartDefaultTask+0x1e4>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002322:	edc7 7a00 	vstr	s15, [r7]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	753b      	strb	r3, [r7, #20]
 800232c:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <StartDefaultTask+0x1e8>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002336:	edc7 7a00 	vstr	s15, [r7]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	757b      	strb	r3, [r7, #21]
 8002340:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <StartDefaultTask+0x1ec>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234a:	edc7 7a00 	vstr	s15, [r7]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	75bb      	strb	r3, [r7, #22]
 8002354:	4b55      	ldr	r3, [pc, #340]	; (80024ac <StartDefaultTask+0x1f0>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235e:	edc7 7a00 	vstr	s15, [r7]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	75fb      	strb	r3, [r7, #23]
 8002368:	4b51      	ldr	r3, [pc, #324]	; (80024b0 <StartDefaultTask+0x1f4>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002372:	edc7 7a00 	vstr	s15, [r7]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	763b      	strb	r3, [r7, #24]
 800237c:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <StartDefaultTask+0x1f8>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002386:	edc7 7a00 	vstr	s15, [r7]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	767b      	strb	r3, [r7, #25]
 8002390:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <StartDefaultTask+0x1fc>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239a:	edc7 7a00 	vstr	s15, [r7]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	76bb      	strb	r3, [r7, #26]
 80023a4:	4b45      	ldr	r3, [pc, #276]	; (80024bc <StartDefaultTask+0x200>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ae:	edc7 7a00 	vstr	s15, [r7]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	76fb      	strb	r3, [r7, #27]
	HAL_CAN_AddTxMessage(&hcan1, &txHeader2, csend2, &canMailbox); // Send Message
 80023b8:	f107 0214 	add.w	r2, r7, #20
 80023bc:	4b35      	ldr	r3, [pc, #212]	; (8002494 <StartDefaultTask+0x1d8>)
 80023be:	4940      	ldr	r1, [pc, #256]	; (80024c0 <StartDefaultTask+0x204>)
 80023c0:	4832      	ldr	r0, [pc, #200]	; (800248c <StartDefaultTask+0x1d0>)
 80023c2:	f001 f91d 	bl	8003600 <HAL_CAN_AddTxMessage>

	uint8_t csend3[] = {coastRegen, brakeRegen, cooling, direction, 0x04, 0x05, 0x06, 0x07};
 80023c6:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <StartDefaultTask+0x208>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d0:	edc7 7a00 	vstr	s15, [r7]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	733b      	strb	r3, [r7, #12]
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <StartDefaultTask+0x20c>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e4:	edc7 7a00 	vstr	s15, [r7]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	737b      	strb	r3, [r7, #13]
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <StartDefaultTask+0x210>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	73bb      	strb	r3, [r7, #14]
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <StartDefaultTask+0x214>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	2304      	movs	r3, #4
 8002400:	743b      	strb	r3, [r7, #16]
 8002402:	2305      	movs	r3, #5
 8002404:	747b      	strb	r3, [r7, #17]
 8002406:	2306      	movs	r3, #6
 8002408:	74bb      	strb	r3, [r7, #18]
 800240a:	2307      	movs	r3, #7
 800240c:	74fb      	strb	r3, [r7, #19]
	HAL_CAN_AddTxMessage(&hcan1, &txHeader3, csend3, &canMailbox); // Send Message
 800240e:	f107 020c 	add.w	r2, r7, #12
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <StartDefaultTask+0x1d8>)
 8002414:	492f      	ldr	r1, [pc, #188]	; (80024d4 <StartDefaultTask+0x218>)
 8002416:	481d      	ldr	r0, [pc, #116]	; (800248c <StartDefaultTask+0x1d0>)
 8002418:	f001 f8f2 	bl	8003600 <HAL_CAN_AddTxMessage>


	// check for lcd button press to change screeens
	int oldScreen = currentScreen;
 800241c:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <StartDefaultTask+0x21c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_GPIO_ReadPin(GPIOB, PIN_LCD_BUTTON) == 0)
 8002422:	211b      	movs	r1, #27
 8002424:	482d      	ldr	r0, [pc, #180]	; (80024dc <StartDefaultTask+0x220>)
 8002426:	f002 f865 	bl	80044f4 <HAL_GPIO_ReadPin>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <StartDefaultTask+0x18c>
	{
		currentScreen++;
 8002430:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <StartDefaultTask+0x21c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <StartDefaultTask+0x21c>)
 8002438:	6013      	str	r3, [r2, #0]
		// loop back the first screen after reaching the last one
		if (currentScreen > RIDE_SETTINGS) currentScreen = RACING_HUD;
 800243a:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <StartDefaultTask+0x21c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	dd02      	ble.n	8002448 <StartDefaultTask+0x18c>
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <StartDefaultTask+0x21c>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
	}

	// clear screen if the screen mode has been changed
	if (currentScreen != oldScreen) lcdDisplayClear();
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <StartDefaultTask+0x21c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244e:	429a      	cmp	r2, r3
 8002450:	d003      	beq.n	800245a <StartDefaultTask+0x19e>
 8002452:	2101      	movs	r1, #1
 8002454:	2002      	movs	r0, #2
 8002456:	f7fe fda1 	bl	8000f9c <lcdCommand>

	// screen updates
	switch (currentScreen)
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <StartDefaultTask+0x21c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d009      	beq.n	8002476 <StartDefaultTask+0x1ba>
 8002462:	2b02      	cmp	r3, #2
 8002464:	dc0d      	bgt.n	8002482 <StartDefaultTask+0x1c6>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <StartDefaultTask+0x1b4>
 800246a:	2b01      	cmp	r3, #1
 800246c:	d006      	beq.n	800247c <StartDefaultTask+0x1c0>
 800246e:	e008      	b.n	8002482 <StartDefaultTask+0x1c6>
	{
		case RACING_HUD:
			racingHUD();
 8002470:	f7ff fc62 	bl	8001d38 <racingHUD>
		break;
 8002474:	e009      	b.n	800248a <StartDefaultTask+0x1ce>

		case ELECTRICAL_SETTINGS:
			electricalSettings();
 8002476:	f7ff fd57 	bl	8001f28 <electricalSettings>
		break;
 800247a:	e006      	b.n	800248a <StartDefaultTask+0x1ce>

		case RIDE_SETTINGS:
			rideSettings();
 800247c:	f7ff fdea 	bl	8002054 <rideSettings>
		break;
 8002480:	e003      	b.n	800248a <StartDefaultTask+0x1ce>

		default:
			// go to racing hud because were not supposed to be here
			currentScreen = RACING_HUD;
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <StartDefaultTask+0x21c>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
		break;
 8002488:	bf00      	nop
  {
 800248a:	e71b      	b.n	80022c4 <StartDefaultTask+0x8>
 800248c:	200041bc 	.word	0x200041bc
 8002490:	08007500 	.word	0x08007500
 8002494:	20004190 	.word	0x20004190
 8002498:	20004178 	.word	0x20004178
 800249c:	20004210 	.word	0x20004210
 80024a0:	20000310 	.word	0x20000310
 80024a4:	2000030c 	.word	0x2000030c
 80024a8:	20000320 	.word	0x20000320
 80024ac:	2000031c 	.word	0x2000031c
 80024b0:	20004098 	.word	0x20004098
 80024b4:	200041a0 	.word	0x200041a0
 80024b8:	2000412c 	.word	0x2000412c
 80024bc:	200041e4 	.word	0x200041e4
 80024c0:	200041a4 	.word	0x200041a4
 80024c4:	20004198 	.word	0x20004198
 80024c8:	2000419c 	.word	0x2000419c
 80024cc:	2000032c 	.word	0x2000032c
 80024d0:	20000330 	.word	0x20000330
 80024d4:	200040c0 	.word	0x200040c0
 80024d8:	20000334 	.word	0x20000334
 80024dc:	40020400 	.word	0x40020400

080024e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e4:	b672      	cpsid	i
}
 80024e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80024e8:	e7fe      	b.n	80024e8 <Error_Handler+0x8>
	...

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_MspInit+0x54>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_MspInit+0x54>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_MspInit+0x54>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_MspInit+0x54>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_MspInit+0x54>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_MspInit+0x54>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	210f      	movs	r1, #15
 800252e:	f06f 0001 	mvn.w	r0, #1
 8002532:	f001 fd82 	bl	800403a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a24      	ldr	r2, [pc, #144]	; (80025f4 <HAL_ADC_MspInit+0xb0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d141      	bne.n	80025ea <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_ADC_MspInit+0xb4>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <HAL_ADC_MspInit+0xb4>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	6453      	str	r3, [r2, #68]	; 0x44
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_ADC_MspInit+0xb4>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_ADC_MspInit+0xb4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_ADC_MspInit+0xb4>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_ADC_MspInit+0xb4>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_ADC_MspInit+0xb4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_ADC_MspInit+0xb4>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_ADC_MspInit+0xb4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80025ba:	23ff      	movs	r3, #255	; 0xff
 80025bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025be:	2303      	movs	r3, #3
 80025c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	480b      	ldr	r0, [pc, #44]	; (80025fc <HAL_ADC_MspInit+0xb8>)
 80025ce:	f001 fdfd 	bl	80041cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025d2:	2303      	movs	r3, #3
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025d6:	2303      	movs	r3, #3
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	4806      	ldr	r0, [pc, #24]	; (8002600 <HAL_ADC_MspInit+0xbc>)
 80025e6:	f001 fdf1 	bl	80041cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	; 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40012000 	.word	0x40012000
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400

08002604 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <HAL_CAN_MspInit+0xa4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d13c      	bne.n	80026a0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <HAL_CAN_MspInit+0xa8>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <HAL_CAN_MspInit+0xa8>)
 8002630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_CAN_MspInit+0xa8>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_CAN_MspInit+0xa8>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_CAN_MspInit+0xa8>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_CAN_MspInit+0xa8>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800265e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002670:	2309      	movs	r3, #9
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	; (80026b0 <HAL_CAN_MspInit+0xac>)
 800267c:	f001 fda6 	bl	80041cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2105      	movs	r1, #5
 8002684:	2013      	movs	r0, #19
 8002686:	f001 fcd8 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800268a:	2013      	movs	r0, #19
 800268c:	f001 fcf1 	bl	8004072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2105      	movs	r1, #5
 8002694:	2014      	movs	r0, #20
 8002696:	f001 fcd0 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800269a:	2014      	movs	r0, #20
 800269c:	f001 fce9 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40006400 	.word	0x40006400
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020000 	.word	0x40020000

080026b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_I2C_MspInit+0x84>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d12b      	bne.n	800272e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_I2C_MspInit+0x88>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a17      	ldr	r2, [pc, #92]	; (800273c <HAL_I2C_MspInit+0x88>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_I2C_MspInit+0x88>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026f2:	23c0      	movs	r3, #192	; 0xc0
 80026f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f6:	2312      	movs	r3, #18
 80026f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002702:	2304      	movs	r3, #4
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4619      	mov	r1, r3
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <HAL_I2C_MspInit+0x8c>)
 800270e:	f001 fd5d 	bl	80041cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_I2C_MspInit+0x88>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_I2C_MspInit+0x88>)
 800271c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_I2C_MspInit+0x88>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800272e:	bf00      	nop
 8002730:	3728      	adds	r7, #40	; 0x28
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40005400 	.word	0x40005400
 800273c:	40023800 	.word	0x40023800
 8002740:	40020400 	.word	0x40020400

08002744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <NMI_Handler+0x4>

0800274a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <HardFault_Handler+0x4>

08002750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <MemManage_Handler+0x4>

08002756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <UsageFault_Handler+0x4>

08002762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002774:	f000 f8e2 	bl	800293c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002778:	f003 fd70 	bl	800625c <xTaskGetSchedulerState>
 800277c:	4603      	mov	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002782:	f003 ffb1 	bl	80066e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <CAN1_TX_IRQHandler+0x10>)
 8002792:	f001 f948 	bl	8003a26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200041bc 	.word	0x200041bc

080027a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <CAN1_RX0_IRQHandler+0x10>)
 80027a6:	f001 f93e 	bl	8003a26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200041bc 	.word	0x200041bc

080027b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <_sbrk+0x5c>)
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <_sbrk+0x60>)
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <_sbrk+0x64>)
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <_sbrk+0x68>)
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <_sbrk+0x64>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d207      	bcs.n	80027f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e4:	f004 f9ba 	bl	8006b5c <__errno>
 80027e8:	4603      	mov	r3, r0
 80027ea:	220c      	movs	r2, #12
 80027ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	e009      	b.n	8002808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <_sbrk+0x64>)
 8002804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20050000 	.word	0x20050000
 8002814:	00000400 	.word	0x00000400
 8002818:	20000338 	.word	0x20000338
 800281c:	20004240 	.word	0x20004240

08002820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <SystemInit+0x20>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <SystemInit+0x20>)
 800282c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800287c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480d      	ldr	r0, [pc, #52]	; (8002880 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800284a:	490e      	ldr	r1, [pc, #56]	; (8002884 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800284c:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002860:	4c0b      	ldr	r4, [pc, #44]	; (8002890 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800286e:	f7ff ffd7 	bl	8002820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002872:	f004 f979 	bl	8006b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002876:	f7fe fd69 	bl	800134c <main>
  bx  lr    
 800287a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800287c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002884:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002888:	08007570 	.word	0x08007570
  ldr r2, =_sbss
 800288c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002890:	2000423c 	.word	0x2000423c

08002894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002894:	e7fe      	b.n	8002894 <ADC_IRQHandler>
	...

08002898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_Init+0x40>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <HAL_Init+0x40>)
 80028a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_Init+0x40>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <HAL_Init+0x40>)
 80028ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_Init+0x40>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	2003      	movs	r0, #3
 80028c2:	f001 fbaf 	bl	8004024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	200f      	movs	r0, #15
 80028c8:	f000 f808 	bl	80028dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028cc:	f7ff fe0e 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023c00 	.word	0x40023c00

080028dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_InitTick+0x54>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_InitTick+0x58>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 fbc7 	bl	800408e <HAL_SYSTICK_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00e      	b.n	8002928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d80a      	bhi.n	8002926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002910:	2200      	movs	r2, #0
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f001 fb8f 	bl	800403a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <HAL_InitTick+0x5c>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000004 	.word	0x20000004
 8002934:	2000000c 	.word	0x2000000c
 8002938:	20000008 	.word	0x20000008

0800293c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_IncTick+0x20>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_IncTick+0x24>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_IncTick+0x24>)
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	2000000c 	.word	0x2000000c
 8002960:	20004228 	.word	0x20004228

08002964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return uwTick;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_GetTick+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20004228 	.word	0x20004228

0800297c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff ffee 	bl	8002964 <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d005      	beq.n	80029a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_Delay+0x44>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029a2:	bf00      	nop
 80029a4:	f7ff ffde 	bl	8002964 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d8f7      	bhi.n	80029a4 <HAL_Delay+0x28>
  {
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000000c 	.word	0x2000000c

080029c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e033      	b.n	8002a42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff fdae 	bl	8002544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a0a:	f023 0302 	bic.w	r3, r3, #2
 8002a0e:	f043 0202 	orr.w	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 faca 	bl	8002fb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
 8002a32:	e001      	b.n	8002a38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_Start+0x1a>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e097      	b.n	8002b96 <HAL_ADC_Start+0x14a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d018      	beq.n	8002aae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8c:	4b45      	ldr	r3, [pc, #276]	; (8002ba4 <HAL_ADC_Start+0x158>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a45      	ldr	r2, [pc, #276]	; (8002ba8 <HAL_ADC_Start+0x15c>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0c9a      	lsrs	r2, r3, #18
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002aa0:	e002      	b.n	8002aa8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d15f      	bne.n	8002b7c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ae6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d106      	bne.n	8002b0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f023 0206 	bic.w	r2, r3, #6
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
 8002b08:	e002      	b.n	8002b10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b18:	4b24      	ldr	r3, [pc, #144]	; (8002bac <HAL_ADC_Start+0x160>)
 8002b1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d129      	bne.n	8002b94 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e020      	b.n	8002b94 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_ADC_Start+0x164>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d11b      	bne.n	8002b94 <HAL_ADC_Start+0x148>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d114      	bne.n	8002b94 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	e00b      	b.n	8002b94 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0210 	orr.w	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000004 	.word	0x20000004
 8002ba8:	431bde83 	.word	0x431bde83
 8002bac:	40012300 	.word	0x40012300
 8002bb0:	40012000 	.word	0x40012000

08002bb4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_Stop+0x16>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e021      	b.n	8002c0e <HAL_ADC_Stop+0x5a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c36:	d113      	bne.n	8002c60 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c46:	d10b      	bne.n	8002c60 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e063      	b.n	8002d28 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c60:	f7ff fe80 	bl	8002964 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c66:	e021      	b.n	8002cac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d01d      	beq.n	8002cac <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <HAL_ADC_PollForConversion+0x6c>
 8002c76:	f7ff fe75 	bl	8002964 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d212      	bcs.n	8002cac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d00b      	beq.n	8002cac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f043 0204 	orr.w	r2, r3, #4
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e03d      	b.n	8002d28 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d1d6      	bne.n	8002c68 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f06f 0212 	mvn.w	r2, #18
 8002cc2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d123      	bne.n	8002d26 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11f      	bne.n	8002d26 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d006      	beq.n	8002d02 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d111      	bne.n	8002d26 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1c>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e113      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x244>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d925      	bls.n	8002dc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68d9      	ldr	r1, [r3, #12]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b1e      	subs	r3, #30
 8002d8e:	2207      	movs	r2, #7
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43da      	mvns	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68d9      	ldr	r1, [r3, #12]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	4603      	mov	r3, r0
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4403      	add	r3, r0
 8002db6:	3b1e      	subs	r3, #30
 8002db8:	409a      	lsls	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	e022      	b.n	8002e0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6919      	ldr	r1, [r3, #16]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	2207      	movs	r2, #7
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	400a      	ands	r2, r1
 8002de6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6919      	ldr	r1, [r3, #16]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4403      	add	r3, r0
 8002e00:	409a      	lsls	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d824      	bhi.n	8002e5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	3b05      	subs	r3, #5
 8002e24:	221f      	movs	r2, #31
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	400a      	ands	r2, r1
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	4618      	mov	r0, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b05      	subs	r3, #5
 8002e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5a:	e04c      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b0c      	cmp	r3, #12
 8002e62:	d824      	bhi.n	8002eae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b23      	subs	r3, #35	; 0x23
 8002e76:	221f      	movs	r2, #31
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	400a      	ands	r2, r1
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b23      	subs	r3, #35	; 0x23
 8002ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002eac:	e023      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b41      	subs	r3, #65	; 0x41
 8002ec0:	221f      	movs	r2, #31
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	400a      	ands	r2, r1
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b41      	subs	r3, #65	; 0x41
 8002eea:	fa00 f203 	lsl.w	r2, r0, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef6:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <HAL_ADC_ConfigChannel+0x250>)
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <HAL_ADC_ConfigChannel+0x254>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10f      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x1d8>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b12      	cmp	r3, #18
 8002f0a:	d10b      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1d      	ldr	r2, [pc, #116]	; (8002fa0 <HAL_ADC_ConfigChannel+0x254>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d12b      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x23a>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <HAL_ADC_ConfigChannel+0x258>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d003      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x1f4>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b11      	cmp	r3, #17
 8002f3e:	d122      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a11      	ldr	r2, [pc, #68]	; (8002fa4 <HAL_ADC_ConfigChannel+0x258>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d111      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_ADC_ConfigChannel+0x25c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a11      	ldr	r2, [pc, #68]	; (8002fac <HAL_ADC_ConfigChannel+0x260>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	0c9a      	lsrs	r2, r3, #18
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f78:	e002      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f9      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40012300 	.word	0x40012300
 8002fa0:	40012000 	.word	0x40012000
 8002fa4:	10000012 	.word	0x10000012
 8002fa8:	20000004 	.word	0x20000004
 8002fac:	431bde83 	.word	0x431bde83

08002fb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb8:	4b79      	ldr	r3, [pc, #484]	; (80031a0 <ADC_Init+0x1f0>)
 8002fba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800302a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <ADC_Init+0x1f4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003056:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	e00f      	b.n	80030ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800309c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0202 	bic.w	r2, r2, #2
 80030bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7e1b      	ldrb	r3, [r3, #24]
 80030c8:	005a      	lsls	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	3b01      	subs	r3, #1
 8003108:	035a      	lsls	r2, r3, #13
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e007      	b.n	8003124 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003122:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	3b01      	subs	r3, #1
 8003140:	051a      	lsls	r2, r3, #20
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003166:	025a      	lsls	r2, r3, #9
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	029a      	lsls	r2, r3, #10
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40012300 	.word	0x40012300
 80031a4:	0f000001 	.word	0x0f000001

080031a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e0ed      	b.n	8003396 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fa1c 	bl	8002604 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031dc:	f7ff fbc2 	bl	8002964 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031e2:	e012      	b.n	800320a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031e4:	f7ff fbbe 	bl	8002964 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b0a      	cmp	r3, #10
 80031f0:	d90b      	bls.n	800320a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2205      	movs	r2, #5
 8003202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0c5      	b.n	8003396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0e5      	beq.n	80031e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0202 	bic.w	r2, r2, #2
 8003226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003228:	f7ff fb9c 	bl	8002964 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800322e:	e012      	b.n	8003256 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003230:	f7ff fb98 	bl	8002964 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b0a      	cmp	r3, #10
 800323c:	d90b      	bls.n	8003256 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2205      	movs	r2, #5
 800324e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e09f      	b.n	8003396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e5      	bne.n	8003230 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7e1b      	ldrb	r3, [r3, #24]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d108      	bne.n	800327e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e007      	b.n	800328e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7e5b      	ldrb	r3, [r3, #25]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e007      	b.n	80032b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7e9b      	ldrb	r3, [r3, #26]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d108      	bne.n	80032d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0220 	orr.w	r2, r2, #32
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e007      	b.n	80032e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0220 	bic.w	r2, r2, #32
 80032e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7edb      	ldrb	r3, [r3, #27]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0210 	bic.w	r2, r2, #16
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e007      	b.n	800330c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0210 	orr.w	r2, r2, #16
 800330a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7f1b      	ldrb	r3, [r3, #28]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d108      	bne.n	8003326 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0208 	orr.w	r2, r2, #8
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e007      	b.n	8003336 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0208 	bic.w	r2, r2, #8
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7f5b      	ldrb	r3, [r3, #29]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d108      	bne.n	8003350 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0204 	orr.w	r2, r2, #4
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e007      	b.n	8003360 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	ea42 0103 	orr.w	r1, r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <HAL_CAN_ConfigFilter+0x26>
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f040 80c7 	bne.w	8003554 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a69      	ldr	r2, [pc, #420]	; (8003570 <HAL_CAN_ConfigFilter+0x1d0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d001      	beq.n	80033d4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_CAN_ConfigFilter+0x1d4>)
 80033d2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4a63      	ldr	r2, [pc, #396]	; (8003574 <HAL_CAN_ConfigFilter+0x1d4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d111      	bne.n	8003410 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033f2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	431a      	orrs	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	2201      	movs	r2, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	401a      	ands	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d123      	bne.n	8003482 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	43db      	mvns	r3, r3
 8003444:	401a      	ands	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800345c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	3248      	adds	r2, #72	; 0x48
 8003462:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003476:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003478:	6979      	ldr	r1, [r7, #20]
 800347a:	3348      	adds	r3, #72	; 0x48
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d122      	bne.n	80034d0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	431a      	orrs	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3248      	adds	r2, #72	; 0x48
 80034b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034c6:	6979      	ldr	r1, [r7, #20]
 80034c8:	3348      	adds	r3, #72	; 0x48
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034ea:	e007      	b.n	80034fc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	43db      	mvns	r3, r3
 800350e:	401a      	ands	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003516:	e007      	b.n	8003528 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	431a      	orrs	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	431a      	orrs	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003546:	f023 0201 	bic.w	r2, r3, #1
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e006      	b.n	8003562 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40006c00 	.word	0x40006c00
 8003574:	40006400 	.word	0x40006400

08003578 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d12e      	bne.n	80035ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035a4:	f7ff f9de 	bl	8002964 <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035aa:	e012      	b.n	80035d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035ac:	f7ff f9da 	bl	8002964 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b0a      	cmp	r3, #10
 80035b8:	d90b      	bls.n	80035d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2205      	movs	r2, #5
 80035ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e012      	b.n	80035f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e5      	bne.n	80035ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e006      	b.n	80035f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
  }
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003614:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800361e:	7ffb      	ldrb	r3, [r7, #31]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d003      	beq.n	800362c <HAL_CAN_AddTxMessage+0x2c>
 8003624:	7ffb      	ldrb	r3, [r7, #31]
 8003626:	2b02      	cmp	r3, #2
 8003628:	f040 80b8 	bne.w	800379c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80a0 	beq.w	800378c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	0e1b      	lsrs	r3, r3, #24
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d907      	bls.n	800366c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e09e      	b.n	80037aa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800366c:	2201      	movs	r2, #1
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	409a      	lsls	r2, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10d      	bne.n	800369a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003688:	68f9      	ldr	r1, [r7, #12]
 800368a:	6809      	ldr	r1, [r1, #0]
 800368c:	431a      	orrs	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	3318      	adds	r3, #24
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	440b      	add	r3, r1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e00f      	b.n	80036ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80036ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3318      	adds	r3, #24
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	440b      	add	r3, r1
 80036b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3318      	adds	r3, #24
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	440b      	add	r3, r1
 80036ca:	3304      	adds	r3, #4
 80036cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	7d1b      	ldrb	r3, [r3, #20]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d111      	bne.n	80036fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	3318      	adds	r3, #24
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	6811      	ldr	r1, [r2, #0]
 80036ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	3318      	adds	r3, #24
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	440b      	add	r3, r1
 80036f6:	3304      	adds	r3, #4
 80036f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3307      	adds	r3, #7
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	061a      	lsls	r2, r3, #24
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3306      	adds	r3, #6
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3305      	adds	r3, #5
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	4313      	orrs	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	3204      	adds	r2, #4
 800371a:	7812      	ldrb	r2, [r2, #0]
 800371c:	4610      	mov	r0, r2
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	6811      	ldr	r1, [r2, #0]
 8003722:	ea43 0200 	orr.w	r2, r3, r0
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	440b      	add	r3, r1
 800372c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003730:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3303      	adds	r3, #3
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	061a      	lsls	r2, r3, #24
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3302      	adds	r3, #2
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3301      	adds	r3, #1
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	4313      	orrs	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	7812      	ldrb	r2, [r2, #0]
 8003752:	4610      	mov	r0, r2
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	6811      	ldr	r1, [r2, #0]
 8003758:	ea43 0200 	orr.w	r2, r3, r0
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	440b      	add	r3, r1
 8003762:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003766:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	3318      	adds	r3, #24
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4413      	add	r3, r2
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	6811      	ldr	r1, [r2, #0]
 800377a:	f043 0201 	orr.w	r2, r3, #1
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3318      	adds	r3, #24
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	440b      	add	r3, r1
 8003786:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e00e      	b.n	80037aa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e006      	b.n	80037aa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3724      	adds	r7, #36	; 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80037b6:	b480      	push	{r7}
 80037b8:	b087      	sub	sp, #28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d003      	beq.n	80037da <HAL_CAN_GetRxMessage+0x24>
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	f040 80f3 	bne.w	80039c0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10e      	bne.n	80037fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0e7      	b.n	80039ce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d107      	bne.n	800381c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0d8      	b.n	80039ce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	331b      	adds	r3, #27
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	4413      	add	r3, r2
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0204 	and.w	r2, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	331b      	adds	r3, #27
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	4413      	add	r3, r2
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0d5b      	lsrs	r3, r3, #21
 800384a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e00b      	b.n	800386c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	331b      	adds	r3, #27
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4413      	add	r3, r2
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	08db      	lsrs	r3, r3, #3
 8003864:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	331b      	adds	r3, #27
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4413      	add	r3, r2
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0202 	and.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	331b      	adds	r3, #27
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	4413      	add	r3, r2
 800388e:	3304      	adds	r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	331b      	adds	r3, #27
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	331b      	adds	r3, #27
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	4413      	add	r3, r2
 80038be:	3304      	adds	r3, #4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0a1a      	lsrs	r2, r3, #8
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	4413      	add	r3, r2
 8003904:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	0c1a      	lsrs	r2, r3, #16
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	3302      	adds	r3, #2
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4413      	add	r3, r2
 800391e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	0e1a      	lsrs	r2, r3, #24
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	3303      	adds	r3, #3
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	4413      	add	r3, r2
 8003938:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	3304      	adds	r3, #4
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	4413      	add	r3, r2
 8003950:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	0a1a      	lsrs	r2, r3, #8
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	3305      	adds	r3, #5
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	4413      	add	r3, r2
 800396a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	0c1a      	lsrs	r2, r3, #16
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	3306      	adds	r3, #6
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	4413      	add	r3, r2
 8003984:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0e1a      	lsrs	r2, r3, #24
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	3307      	adds	r3, #7
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0220 	orr.w	r2, r2, #32
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	e007      	b.n	80039bc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0220 	orr.w	r2, r2, #32
 80039ba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e006      	b.n	80039ce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d002      	beq.n	80039f8 <HAL_CAN_ActivateNotification+0x1e>
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d109      	bne.n	8003a0c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6959      	ldr	r1, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e006      	b.n	8003a1a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b08a      	sub	sp, #40	; 0x28
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d07c      	beq.n	8003b66 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d023      	beq.n	8003abe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f983 	bl	8003d94 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a8e:	e016      	b.n	8003abe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	e00c      	b.n	8003abe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab6:	e002      	b.n	8003abe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f989 	bl	8003dd0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d024      	beq.n	8003b12 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ad0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f963 	bl	8003da8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003ae2:	e016      	b.n	8003b12 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
 8003af6:	e00c      	b.n	8003b12 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	e002      	b.n	8003b12 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f969 	bl	8003de4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d024      	beq.n	8003b66 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f943 	bl	8003dbc <HAL_CAN_TxMailbox2CompleteCallback>
 8003b36:	e016      	b.n	8003b66 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4a:	e00c      	b.n	8003b66 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	e002      	b.n	8003b66 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f949 	bl	8003df8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00c      	beq.n	8003b8a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2210      	movs	r2, #16
 8003b88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00b      	beq.n	8003bac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f930 	bl	8003e0c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fd fdf1 	bl	80017ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2210      	movs	r2, #16
 8003bec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00b      	beq.n	8003c10 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2208      	movs	r2, #8
 8003c08:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f912 	bl	8003e34 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8f9 	bl	8003e20 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2210      	movs	r2, #16
 8003c48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8fc 	bl	8003e48 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d006      	beq.n	8003c72 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8f5 	bl	8003e5c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d07b      	beq.n	8003d74 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d072      	beq.n	8003d6c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d043      	beq.n	8003d6c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d03e      	beq.n	8003d6c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf4:	2b60      	cmp	r3, #96	; 0x60
 8003cf6:	d02b      	beq.n	8003d50 <HAL_CAN_IRQHandler+0x32a>
 8003cf8:	2b60      	cmp	r3, #96	; 0x60
 8003cfa:	d82e      	bhi.n	8003d5a <HAL_CAN_IRQHandler+0x334>
 8003cfc:	2b50      	cmp	r3, #80	; 0x50
 8003cfe:	d022      	beq.n	8003d46 <HAL_CAN_IRQHandler+0x320>
 8003d00:	2b50      	cmp	r3, #80	; 0x50
 8003d02:	d82a      	bhi.n	8003d5a <HAL_CAN_IRQHandler+0x334>
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d019      	beq.n	8003d3c <HAL_CAN_IRQHandler+0x316>
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d826      	bhi.n	8003d5a <HAL_CAN_IRQHandler+0x334>
 8003d0c:	2b30      	cmp	r3, #48	; 0x30
 8003d0e:	d010      	beq.n	8003d32 <HAL_CAN_IRQHandler+0x30c>
 8003d10:	2b30      	cmp	r3, #48	; 0x30
 8003d12:	d822      	bhi.n	8003d5a <HAL_CAN_IRQHandler+0x334>
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d002      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x2f8>
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d005      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d1c:	e01d      	b.n	8003d5a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	f043 0308 	orr.w	r3, r3, #8
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d26:	e019      	b.n	8003d5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	f043 0310 	orr.w	r3, r3, #16
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d30:	e014      	b.n	8003d5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	f043 0320 	orr.w	r3, r3, #32
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d3a:	e00f      	b.n	8003d5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d44:	e00a      	b.n	8003d5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d4e:	e005      	b.n	8003d5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d58:	e000      	b.n	8003d5c <HAL_CAN_IRQHandler+0x336>
            break;
 8003d5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2204      	movs	r2, #4
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f872 	bl	8003e70 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	3728      	adds	r7, #40	; 0x28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb6:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	60d3      	str	r3, [r2, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 0307 	and.w	r3, r3, #7
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	db0b      	blt.n	8003f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	4907      	ldr	r1, [pc, #28]	; (8003f20 <__NVIC_EnableIRQ+0x38>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2001      	movs	r0, #1
 8003f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e100 	.word	0xe000e100

08003f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db0a      	blt.n	8003f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	490c      	ldr	r1, [pc, #48]	; (8003f70 <__NVIC_SetPriority+0x4c>)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	0112      	lsls	r2, r2, #4
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	440b      	add	r3, r1
 8003f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f4c:	e00a      	b.n	8003f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4908      	ldr	r1, [pc, #32]	; (8003f74 <__NVIC_SetPriority+0x50>)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	0112      	lsls	r2, r2, #4
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	440b      	add	r3, r1
 8003f62:	761a      	strb	r2, [r3, #24]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000e100 	.word	0xe000e100
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f1c3 0307 	rsb	r3, r3, #7
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	bf28      	it	cs
 8003f96:	2304      	movcs	r3, #4
 8003f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d902      	bls.n	8003fa8 <NVIC_EncodePriority+0x30>
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3b03      	subs	r3, #3
 8003fa6:	e000      	b.n	8003faa <NVIC_EncodePriority+0x32>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	401a      	ands	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43d9      	mvns	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd0:	4313      	orrs	r3, r2
         );
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3724      	adds	r7, #36	; 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff0:	d301      	bcc.n	8003ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00f      	b.n	8004016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <SysTick_Config+0x40>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffe:	210f      	movs	r1, #15
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	f7ff ff8e 	bl	8003f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <SysTick_Config+0x40>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <SysTick_Config+0x40>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	e000e010 	.word	0xe000e010

08004024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff29 	bl	8003e84 <__NVIC_SetPriorityGrouping>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	4603      	mov	r3, r0
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800404c:	f7ff ff3e 	bl	8003ecc <__NVIC_GetPriorityGrouping>
 8004050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	6978      	ldr	r0, [r7, #20]
 8004058:	f7ff ff8e 	bl	8003f78 <NVIC_EncodePriority>
 800405c:	4602      	mov	r2, r0
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff5d 	bl	8003f24 <__NVIC_SetPriority>
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff31 	bl	8003ee8 <__NVIC_EnableIRQ>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffa2 	bl	8003fe0 <SysTick_Config>
 800409c:	4603      	mov	r3, r0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_DMA_Start_IT+0x26>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e040      	b.n	800414e <HAL_DMA_Start_IT+0xa8>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d12f      	bne.n	8004140 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f83a 	bl	800416e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	223f      	movs	r2, #63	; 0x3f
 8004100:	409a      	lsls	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0216 	orr.w	r2, r2, #22
 8004114:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0208 	orr.w	r2, r2, #8
 800412c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e005      	b.n	800414c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004148:	2302      	movs	r3, #2
 800414a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800418a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d108      	bne.n	80041ae <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041ac:	e007      	b.n	80041be <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	60da      	str	r2, [r3, #12]
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e165      	b.n	80044b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e8:	2201      	movs	r2, #1
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	429a      	cmp	r2, r3
 8004202:	f040 8154 	bne.w	80044ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d005      	beq.n	800421e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800421a:	2b02      	cmp	r3, #2
 800421c:	d130      	bne.n	8004280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2203      	movs	r2, #3
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004254:	2201      	movs	r2, #1
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 0201 	and.w	r2, r3, #1
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b03      	cmp	r3, #3
 800428a:	d017      	beq.n	80042bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	2203      	movs	r2, #3
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d123      	bne.n	8004310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	08da      	lsrs	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3208      	adds	r2, #8
 80042d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	220f      	movs	r2, #15
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	08da      	lsrs	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3208      	adds	r2, #8
 800430a:	69b9      	ldr	r1, [r7, #24]
 800430c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2203      	movs	r2, #3
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0203 	and.w	r2, r3, #3
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80ae 	beq.w	80044ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	4b5d      	ldr	r3, [pc, #372]	; (80044cc <HAL_GPIO_Init+0x300>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	4a5c      	ldr	r2, [pc, #368]	; (80044cc <HAL_GPIO_Init+0x300>)
 800435c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004360:	6453      	str	r3, [r2, #68]	; 0x44
 8004362:	4b5a      	ldr	r3, [pc, #360]	; (80044cc <HAL_GPIO_Init+0x300>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436e:	4a58      	ldr	r2, [pc, #352]	; (80044d0 <HAL_GPIO_Init+0x304>)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	220f      	movs	r2, #15
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a4f      	ldr	r2, [pc, #316]	; (80044d4 <HAL_GPIO_Init+0x308>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d025      	beq.n	80043e6 <HAL_GPIO_Init+0x21a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a4e      	ldr	r2, [pc, #312]	; (80044d8 <HAL_GPIO_Init+0x30c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01f      	beq.n	80043e2 <HAL_GPIO_Init+0x216>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4d      	ldr	r2, [pc, #308]	; (80044dc <HAL_GPIO_Init+0x310>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d019      	beq.n	80043de <HAL_GPIO_Init+0x212>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a4c      	ldr	r2, [pc, #304]	; (80044e0 <HAL_GPIO_Init+0x314>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_GPIO_Init+0x20e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a4b      	ldr	r2, [pc, #300]	; (80044e4 <HAL_GPIO_Init+0x318>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00d      	beq.n	80043d6 <HAL_GPIO_Init+0x20a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4a      	ldr	r2, [pc, #296]	; (80044e8 <HAL_GPIO_Init+0x31c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <HAL_GPIO_Init+0x206>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a49      	ldr	r2, [pc, #292]	; (80044ec <HAL_GPIO_Init+0x320>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_GPIO_Init+0x202>
 80043ca:	2306      	movs	r3, #6
 80043cc:	e00c      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e00a      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043d2:	2305      	movs	r3, #5
 80043d4:	e008      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043d6:	2304      	movs	r3, #4
 80043d8:	e006      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043da:	2303      	movs	r3, #3
 80043dc:	e004      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043de:	2302      	movs	r3, #2
 80043e0:	e002      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043e6:	2300      	movs	r3, #0
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	f002 0203 	and.w	r2, r2, #3
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	4093      	lsls	r3, r2
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f8:	4935      	ldr	r1, [pc, #212]	; (80044d0 <HAL_GPIO_Init+0x304>)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004406:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800442a:	4a31      	ldr	r2, [pc, #196]	; (80044f0 <HAL_GPIO_Init+0x324>)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004430:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004454:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445a:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <HAL_GPIO_Init+0x324>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800447e:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004484:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a8:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <HAL_GPIO_Init+0x324>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	f67f ae96 	bls.w	80041e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40013800 	.word	0x40013800
 80044d4:	40020000 	.word	0x40020000
 80044d8:	40020400 	.word	0x40020400
 80044dc:	40020800 	.word	0x40020800
 80044e0:	40020c00 	.word	0x40020c00
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40021400 	.word	0x40021400
 80044ec:	40021800 	.word	0x40021800
 80044f0:	40013c00 	.word	0x40013c00

080044f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	887b      	ldrh	r3, [r7, #2]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
 8004510:	e001      	b.n	8004516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	807b      	strh	r3, [r7, #2]
 8004530:	4613      	mov	r3, r2
 8004532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004534:	787b      	ldrb	r3, [r7, #1]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800453a:	887a      	ldrh	r2, [r7, #2]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004540:	e003      	b.n	800454a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004542:	887b      	ldrh	r3, [r7, #2]
 8004544:	041a      	lsls	r2, r3, #16
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	619a      	str	r2, [r3, #24]
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e12b      	b.n	80047c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fe f898 	bl	80026b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	; 0x24
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045bc:	f000 fd3a 	bl	8005034 <HAL_RCC_GetPCLK1Freq>
 80045c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4a81      	ldr	r2, [pc, #516]	; (80047cc <HAL_I2C_Init+0x274>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d807      	bhi.n	80045dc <HAL_I2C_Init+0x84>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a80      	ldr	r2, [pc, #512]	; (80047d0 <HAL_I2C_Init+0x278>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	bf94      	ite	ls
 80045d4:	2301      	movls	r3, #1
 80045d6:	2300      	movhi	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e006      	b.n	80045ea <HAL_I2C_Init+0x92>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a7d      	ldr	r2, [pc, #500]	; (80047d4 <HAL_I2C_Init+0x27c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf94      	ite	ls
 80045e4:	2301      	movls	r3, #1
 80045e6:	2300      	movhi	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0e7      	b.n	80047c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a78      	ldr	r2, [pc, #480]	; (80047d8 <HAL_I2C_Init+0x280>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	0c9b      	lsrs	r3, r3, #18
 80045fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a6a      	ldr	r2, [pc, #424]	; (80047cc <HAL_I2C_Init+0x274>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d802      	bhi.n	800462c <HAL_I2C_Init+0xd4>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3301      	adds	r3, #1
 800462a:	e009      	b.n	8004640 <HAL_I2C_Init+0xe8>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	4a69      	ldr	r2, [pc, #420]	; (80047dc <HAL_I2C_Init+0x284>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	3301      	adds	r3, #1
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	430b      	orrs	r3, r1
 8004646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	495c      	ldr	r1, [pc, #368]	; (80047cc <HAL_I2C_Init+0x274>)
 800465c:	428b      	cmp	r3, r1
 800465e:	d819      	bhi.n	8004694 <HAL_I2C_Init+0x13c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e59      	subs	r1, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fbb1 f3f3 	udiv	r3, r1, r3
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004674:	400b      	ands	r3, r1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_I2C_Init+0x138>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1e59      	subs	r1, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	fbb1 f3f3 	udiv	r3, r1, r3
 8004688:	3301      	adds	r3, #1
 800468a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468e:	e051      	b.n	8004734 <HAL_I2C_Init+0x1dc>
 8004690:	2304      	movs	r3, #4
 8004692:	e04f      	b.n	8004734 <HAL_I2C_Init+0x1dc>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d111      	bne.n	80046c0 <HAL_I2C_Init+0x168>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	440b      	add	r3, r1
 80046aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e012      	b.n	80046e6 <HAL_I2C_Init+0x18e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1e58      	subs	r0, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	0099      	lsls	r1, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_Init+0x196>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e022      	b.n	8004734 <HAL_I2C_Init+0x1dc>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10e      	bne.n	8004714 <HAL_I2C_Init+0x1bc>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1e58      	subs	r0, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	460b      	mov	r3, r1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	440b      	add	r3, r1
 8004704:	fbb0 f3f3 	udiv	r3, r0, r3
 8004708:	3301      	adds	r3, #1
 800470a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004712:	e00f      	b.n	8004734 <HAL_I2C_Init+0x1dc>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1e58      	subs	r0, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6859      	ldr	r1, [r3, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	0099      	lsls	r1, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	fbb0 f3f3 	udiv	r3, r0, r3
 800472a:	3301      	adds	r3, #1
 800472c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	6809      	ldr	r1, [r1, #0]
 8004738:	4313      	orrs	r3, r2
 800473a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6911      	ldr	r1, [r2, #16]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68d2      	ldr	r2, [r2, #12]
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	430b      	orrs	r3, r1
 8004776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	000186a0 	.word	0x000186a0
 80047d0:	001e847f 	.word	0x001e847f
 80047d4:	003d08ff 	.word	0x003d08ff
 80047d8:	431bde83 	.word	0x431bde83
 80047dc:	10624dd3 	.word	0x10624dd3

080047e0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	461a      	mov	r2, r3
 80047ec:	460b      	mov	r3, r1
 80047ee:	817b      	strh	r3, [r7, #10]
 80047f0:	4613      	mov	r3, r2
 80047f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b20      	cmp	r3, #32
 8004802:	f040 810d 	bne.w	8004a20 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004806:	4b89      	ldr	r3, [pc, #548]	; (8004a2c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	08db      	lsrs	r3, r3, #3
 800480c:	4a88      	ldr	r2, [pc, #544]	; (8004a30 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	0a1a      	lsrs	r2, r3, #8
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009a      	lsls	r2, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3b01      	subs	r3, #1
 8004824:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d116      	bne.n	800485a <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0e3      	b.n	8004a22 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b02      	cmp	r3, #2
 8004866:	d0db      	beq.n	8004820 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_I2C_Master_Transmit_DMA+0x96>
 8004872:	2302      	movs	r3, #2
 8004874:	e0d5      	b.n	8004a22 <HAL_I2C_Master_Transmit_DMA+0x242>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d007      	beq.n	800489c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2221      	movs	r2, #33	; 0x21
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2210      	movs	r2, #16
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	893a      	ldrh	r2, [r7, #8]
 80048cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a56      	ldr	r2, [pc, #344]	; (8004a34 <HAL_I2C_Master_Transmit_DMA+0x254>)
 80048dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80048de:	897a      	ldrh	r2, [r7, #10]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d07b      	beq.n	80049e4 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d02a      	beq.n	800494a <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	4a4f      	ldr	r2, [pc, #316]	; (8004a38 <HAL_I2C_Master_Transmit_DMA+0x258>)
 80048fa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004900:	4a4e      	ldr	r2, [pc, #312]	; (8004a3c <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8004902:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004908:	2200      	movs	r2, #0
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	2200      	movs	r2, #0
 8004912:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004918:	2200      	movs	r2, #0
 800491a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004920:	2200      	movs	r2, #0
 8004922:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	4619      	mov	r1, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3310      	adds	r3, #16
 8004934:	461a      	mov	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	f7ff fbb4 	bl	80040a6 <HAL_DMA_Start_IT>
 800493e:	4603      	mov	r3, r0
 8004940:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d139      	bne.n	80049bc <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8004948:	e013      	b.n	8004972 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e057      	b.n	8004a22 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004988:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004998:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049a8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e02f      	b.n	8004a1c <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f043 0210 	orr.w	r2, r3, #16
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e01e      	b.n	8004a22 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049f2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a02:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004a1a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000004 	.word	0x20000004
 8004a30:	14f8b589 	.word	0x14f8b589
 8004a34:	ffff0000 	.word	0xffff0000
 8004a38:	08004ac1 	.word	0x08004ac1
 8004a3c:	08004c6b 	.word	0x08004c6b

08004a40 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004adc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004af2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	2200      	movs	r2, #0
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	2200      	movs	r2, #0
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004b1a:	2b21      	cmp	r3, #33	; 0x21
 8004b1c:	d007      	beq.n	8004b2e <I2C_DMAXferCplt+0x6e>
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004b24:	2b22      	cmp	r3, #34	; 0x22
 8004b26:	d131      	bne.n	8004b8c <I2C_DMAXferCplt+0xcc>
 8004b28:	7cbb      	ldrb	r3, [r7, #18]
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d12e      	bne.n	8004b8c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2200      	movs	r2, #0
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	2b29      	cmp	r3, #41	; 0x29
 8004b48:	d10a      	bne.n	8004b60 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2221      	movs	r2, #33	; 0x21
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2228      	movs	r2, #40	; 0x28
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b58:	6978      	ldr	r0, [r7, #20]
 8004b5a:	f7ff ff7b 	bl	8004a54 <HAL_I2C_SlaveTxCpltCallback>
 8004b5e:	e00c      	b.n	8004b7a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	2b2a      	cmp	r3, #42	; 0x2a
 8004b64:	d109      	bne.n	8004b7a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2222      	movs	r2, #34	; 0x22
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2228      	movs	r2, #40	; 0x28
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b74:	6978      	ldr	r0, [r7, #20]
 8004b76:	f7ff ff77 	bl	8004a68 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004b88:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b8a:	e06a      	b.n	8004c62 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d064      	beq.n	8004c62 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d107      	bne.n	8004bb2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bc0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bc8:	d009      	beq.n	8004bde <I2C_DMAXferCplt+0x11e>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d006      	beq.n	8004bde <I2C_DMAXferCplt+0x11e>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bd6:	d002      	beq.n	8004bde <I2C_DMAXferCplt+0x11e>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d107      	bne.n	8004bee <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bfc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c0c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004c1c:	6978      	ldr	r0, [r7, #20]
 8004c1e:	f7ff ff37 	bl	8004a90 <HAL_I2C_ErrorCallback>
}
 8004c22:	e01e      	b.n	8004c62 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d10a      	bne.n	8004c4e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004c46:	6978      	ldr	r0, [r7, #20]
 8004c48:	f7ff ff18 	bl	8004a7c <HAL_I2C_MemRxCpltCallback>
}
 8004c4c:	e009      	b.n	8004c62 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2212      	movs	r2, #18
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c5c:	6978      	ldr	r0, [r7, #20]
 8004c5e:	f7ff feef 	bl	8004a40 <HAL_I2C_MasterRxCpltCallback>
}
 8004c62:	bf00      	nop
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c84:	2200      	movs	r2, #0
 8004c86:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	2200      	movs	r2, #0
 8004c96:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fa5c 	bl	8004156 <HAL_DMA_GetError>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d01b      	beq.n	8004cdc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f043 0210 	orr.w	r2, r3, #16
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff feda 	bl	8004a90 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0cc      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d90c      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b63      	ldr	r3, [pc, #396]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0b8      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4a58      	ldr	r2, [pc, #352]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d50:	4b53      	ldr	r3, [pc, #332]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d5c:	4b50      	ldr	r3, [pc, #320]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	494d      	ldr	r1, [pc, #308]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d044      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	4b47      	ldr	r3, [pc, #284]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d119      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d003      	beq.n	8004da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da2:	4b3f      	ldr	r3, [pc, #252]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e06f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db2:	4b3b      	ldr	r3, [pc, #236]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e067      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4934      	ldr	r1, [pc, #208]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd4:	f7fd fdc6 	bl	8002964 <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	e00a      	b.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ddc:	f7fd fdc2 	bl	8002964 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e04f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 020c 	and.w	r2, r3, #12
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d1eb      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d20c      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e032      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4916      	ldr	r1, [pc, #88]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	490e      	ldr	r1, [pc, #56]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e6a:	f000 f821 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	490a      	ldr	r1, [pc, #40]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	5ccb      	ldrb	r3, [r1, r3]
 8004e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd fd26 	bl	80028dc <HAL_InitTick>

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023c00 	.word	0x40023c00
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	08007514 	.word	0x08007514
 8004ea8:	20000004 	.word	0x20000004
 8004eac:	20000008 	.word	0x20000008

08004eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb0:	b5b0      	push	{r4, r5, r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	6079      	str	r1, [r7, #4]
 8004eba:	2100      	movs	r1, #0
 8004ebc:	60f9      	str	r1, [r7, #12]
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec6:	4952      	ldr	r1, [pc, #328]	; (8005010 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ec8:	6889      	ldr	r1, [r1, #8]
 8004eca:	f001 010c 	and.w	r1, r1, #12
 8004ece:	2908      	cmp	r1, #8
 8004ed0:	d00d      	beq.n	8004eee <HAL_RCC_GetSysClockFreq+0x3e>
 8004ed2:	2908      	cmp	r1, #8
 8004ed4:	f200 8094 	bhi.w	8005000 <HAL_RCC_GetSysClockFreq+0x150>
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x32>
 8004edc:	2904      	cmp	r1, #4
 8004ede:	d003      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x38>
 8004ee0:	e08e      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ee2:	4b4c      	ldr	r3, [pc, #304]	; (8005014 <HAL_RCC_GetSysClockFreq+0x164>)
 8004ee4:	60bb      	str	r3, [r7, #8]
       break;
 8004ee6:	e08e      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ee8:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <HAL_RCC_GetSysClockFreq+0x168>)
 8004eea:	60bb      	str	r3, [r7, #8]
      break;
 8004eec:	e08b      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eee:	4948      	ldr	r1, [pc, #288]	; (8005010 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ef0:	6849      	ldr	r1, [r1, #4]
 8004ef2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004ef6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ef8:	4945      	ldr	r1, [pc, #276]	; (8005010 <HAL_RCC_GetSysClockFreq+0x160>)
 8004efa:	6849      	ldr	r1, [r1, #4]
 8004efc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d024      	beq.n	8004f4e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f04:	4942      	ldr	r1, [pc, #264]	; (8005010 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f06:	6849      	ldr	r1, [r1, #4]
 8004f08:	0989      	lsrs	r1, r1, #6
 8004f0a:	4608      	mov	r0, r1
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004f14:	f04f 0500 	mov.w	r5, #0
 8004f18:	ea00 0204 	and.w	r2, r0, r4
 8004f1c:	ea01 0305 	and.w	r3, r1, r5
 8004f20:	493d      	ldr	r1, [pc, #244]	; (8005018 <HAL_RCC_GetSysClockFreq+0x168>)
 8004f22:	fb01 f003 	mul.w	r0, r1, r3
 8004f26:	2100      	movs	r1, #0
 8004f28:	fb01 f102 	mul.w	r1, r1, r2
 8004f2c:	1844      	adds	r4, r0, r1
 8004f2e:	493a      	ldr	r1, [pc, #232]	; (8005018 <HAL_RCC_GetSysClockFreq+0x168>)
 8004f30:	fba2 0101 	umull	r0, r1, r2, r1
 8004f34:	1863      	adds	r3, r4, r1
 8004f36:	4619      	mov	r1, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	f7fb fde4 	bl	8000b0c <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4613      	mov	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e04a      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4e:	4b30      	ldr	r3, [pc, #192]	; (8005010 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	461a      	mov	r2, r3
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f5e:	f04f 0100 	mov.w	r1, #0
 8004f62:	ea02 0400 	and.w	r4, r2, r0
 8004f66:	ea03 0501 	and.w	r5, r3, r1
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	014b      	lsls	r3, r1, #5
 8004f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f7c:	0142      	lsls	r2, r0, #5
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	1b00      	subs	r0, r0, r4
 8004f84:	eb61 0105 	sbc.w	r1, r1, r5
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	018b      	lsls	r3, r1, #6
 8004f92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f96:	0182      	lsls	r2, r0, #6
 8004f98:	1a12      	subs	r2, r2, r0
 8004f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f9e:	f04f 0000 	mov.w	r0, #0
 8004fa2:	f04f 0100 	mov.w	r1, #0
 8004fa6:	00d9      	lsls	r1, r3, #3
 8004fa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fac:	00d0      	lsls	r0, r2, #3
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	1912      	adds	r2, r2, r4
 8004fb4:	eb45 0303 	adc.w	r3, r5, r3
 8004fb8:	f04f 0000 	mov.w	r0, #0
 8004fbc:	f04f 0100 	mov.w	r1, #0
 8004fc0:	0299      	lsls	r1, r3, #10
 8004fc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fc6:	0290      	lsls	r0, r2, #10
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	f7fb fd98 	bl	8000b0c <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <HAL_RCC_GetSysClockFreq+0x160>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	60bb      	str	r3, [r7, #8]
      break;
 8004ffe:	e002      	b.n	8005006 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCC_GetSysClockFreq+0x164>)
 8005002:	60bb      	str	r3, [r7, #8]
      break;
 8005004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005006:	68bb      	ldr	r3, [r7, #8]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bdb0      	pop	{r4, r5, r7, pc}
 8005010:	40023800 	.word	0x40023800
 8005014:	00f42400 	.word	0x00f42400
 8005018:	017d7840 	.word	0x017d7840

0800501c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005020:	4b03      	ldr	r3, [pc, #12]	; (8005030 <HAL_RCC_GetHCLKFreq+0x14>)
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000004 	.word	0x20000004

08005034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005038:	f7ff fff0 	bl	800501c <HAL_RCC_GetHCLKFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	0a9b      	lsrs	r3, r3, #10
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	4903      	ldr	r1, [pc, #12]	; (8005058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40023800 	.word	0x40023800
 8005058:	08007524 	.word	0x08007524

0800505c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e270      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d075      	beq.n	8005166 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800507a:	4ba3      	ldr	r3, [pc, #652]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b04      	cmp	r3, #4
 8005084:	d00c      	beq.n	80050a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005086:	4ba0      	ldr	r3, [pc, #640]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800508e:	2b08      	cmp	r3, #8
 8005090:	d112      	bne.n	80050b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005092:	4b9d      	ldr	r3, [pc, #628]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509e:	d10b      	bne.n	80050b8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a0:	4b99      	ldr	r3, [pc, #612]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d05b      	beq.n	8005164 <HAL_RCC_OscConfig+0x108>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d157      	bne.n	8005164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e24b      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x74>
 80050c2:	4b91      	ldr	r3, [pc, #580]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a90      	ldr	r2, [pc, #576]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e01d      	b.n	800510c <HAL_RCC_OscConfig+0xb0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x98>
 80050da:	4b8b      	ldr	r3, [pc, #556]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a8a      	ldr	r2, [pc, #552]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a87      	ldr	r2, [pc, #540]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0xb0>
 80050f4:	4b84      	ldr	r3, [pc, #528]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a83      	ldr	r2, [pc, #524]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b81      	ldr	r3, [pc, #516]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a80      	ldr	r2, [pc, #512]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fd fc26 	bl	8002964 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511c:	f7fd fc22 	bl	8002964 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	; 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e210      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b76      	ldr	r3, [pc, #472]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0xc0>
 800513a:	e014      	b.n	8005166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fd fc12 	bl	8002964 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd fc0e 	bl	8002964 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e1fc      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005156:	4b6c      	ldr	r3, [pc, #432]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0xe8>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d063      	beq.n	800523a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005172:	4b65      	ldr	r3, [pc, #404]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800517e:	4b62      	ldr	r3, [pc, #392]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005186:	2b08      	cmp	r3, #8
 8005188:	d11c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518a:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d116      	bne.n	80051c4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	4b5c      	ldr	r3, [pc, #368]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <HAL_RCC_OscConfig+0x152>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e1d0      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ae:	4b56      	ldr	r3, [pc, #344]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4952      	ldr	r1, [pc, #328]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c2:	e03a      	b.n	800523a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051cc:	4b4f      	ldr	r3, [pc, #316]	; (800530c <HAL_RCC_OscConfig+0x2b0>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fd fbc7 	bl	8002964 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051da:	f7fd fbc3 	bl	8002964 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e1b1      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ec:	4b46      	ldr	r3, [pc, #280]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f8:	4b43      	ldr	r3, [pc, #268]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4940      	ldr	r1, [pc, #256]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	4313      	orrs	r3, r2
 800520a:	600b      	str	r3, [r1, #0]
 800520c:	e015      	b.n	800523a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800520e:	4b3f      	ldr	r3, [pc, #252]	; (800530c <HAL_RCC_OscConfig+0x2b0>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fd fba6 	bl	8002964 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800521c:	f7fd fba2 	bl	8002964 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e190      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522e:	4b36      	ldr	r3, [pc, #216]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d030      	beq.n	80052a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524e:	4b30      	ldr	r3, [pc, #192]	; (8005310 <HAL_RCC_OscConfig+0x2b4>)
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fd fb86 	bl	8002964 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800525c:	f7fd fb82 	bl	8002964 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e170      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526e:	4b26      	ldr	r3, [pc, #152]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 8005270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x200>
 800527a:	e015      	b.n	80052a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800527c:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCC_OscConfig+0x2b4>)
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005282:	f7fd fb6f 	bl	8002964 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800528a:	f7fd fb6b 	bl	8002964 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e159      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 800529e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80a0 	beq.w	80053f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10f      	bne.n	80052e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	4a0e      	ldr	r2, [pc, #56]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6413      	str	r3, [r2, #64]	; 0x40
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_RCC_OscConfig+0x2b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d121      	bne.n	8005336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <HAL_RCC_OscConfig+0x2b8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a07      	ldr	r2, [pc, #28]	; (8005314 <HAL_RCC_OscConfig+0x2b8>)
 80052f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fe:	f7fd fb31 	bl	8002964 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	e011      	b.n	800532a <HAL_RCC_OscConfig+0x2ce>
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
 800530c:	42470000 	.word	0x42470000
 8005310:	42470e80 	.word	0x42470e80
 8005314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005318:	f7fd fb24 	bl	8002964 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e112      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532a:	4b8b      	ldr	r3, [pc, #556]	; (8005558 <HAL_RCC_OscConfig+0x4fc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f0      	beq.n	8005318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d106      	bne.n	800534c <HAL_RCC_OscConfig+0x2f0>
 800533e:	4b87      	ldr	r3, [pc, #540]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	4a86      	ldr	r2, [pc, #536]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6713      	str	r3, [r2, #112]	; 0x70
 800534a:	e01c      	b.n	8005386 <HAL_RCC_OscConfig+0x32a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b05      	cmp	r3, #5
 8005352:	d10c      	bne.n	800536e <HAL_RCC_OscConfig+0x312>
 8005354:	4b81      	ldr	r3, [pc, #516]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	4a80      	ldr	r2, [pc, #512]	; (800555c <HAL_RCC_OscConfig+0x500>)
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	6713      	str	r3, [r2, #112]	; 0x70
 8005360:	4b7e      	ldr	r3, [pc, #504]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a7d      	ldr	r2, [pc, #500]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	e00b      	b.n	8005386 <HAL_RCC_OscConfig+0x32a>
 800536e:	4b7b      	ldr	r3, [pc, #492]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	4a7a      	ldr	r2, [pc, #488]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	6713      	str	r3, [r2, #112]	; 0x70
 800537a:	4b78      	ldr	r3, [pc, #480]	; (800555c <HAL_RCC_OscConfig+0x500>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	4a77      	ldr	r2, [pc, #476]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d015      	beq.n	80053ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538e:	f7fd fae9 	bl	8002964 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005394:	e00a      	b.n	80053ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fd fae5 	bl	8002964 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e0d1      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ac:	4b6b      	ldr	r3, [pc, #428]	; (800555c <HAL_RCC_OscConfig+0x500>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0ee      	beq.n	8005396 <HAL_RCC_OscConfig+0x33a>
 80053b8:	e014      	b.n	80053e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ba:	f7fd fad3 	bl	8002964 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c0:	e00a      	b.n	80053d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c2:	f7fd facf 	bl	8002964 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e0bb      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d8:	4b60      	ldr	r3, [pc, #384]	; (800555c <HAL_RCC_OscConfig+0x500>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ee      	bne.n	80053c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d105      	bne.n	80053f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ea:	4b5c      	ldr	r3, [pc, #368]	; (800555c <HAL_RCC_OscConfig+0x500>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	4a5b      	ldr	r2, [pc, #364]	; (800555c <HAL_RCC_OscConfig+0x500>)
 80053f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80a7 	beq.w	800554e <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005400:	4b56      	ldr	r3, [pc, #344]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 030c 	and.w	r3, r3, #12
 8005408:	2b08      	cmp	r3, #8
 800540a:	d060      	beq.n	80054ce <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d145      	bne.n	80054a0 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005414:	4b52      	ldr	r3, [pc, #328]	; (8005560 <HAL_RCC_OscConfig+0x504>)
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fd faa3 	bl	8002964 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005422:	f7fd fa9f 	bl	8002964 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e08d      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005434:	4b49      	ldr	r3, [pc, #292]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f0      	bne.n	8005422 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	019b      	lsls	r3, r3, #6
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	3b01      	subs	r3, #1
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	061b      	lsls	r3, r3, #24
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	071b      	lsls	r3, r3, #28
 800546c:	493b      	ldr	r1, [pc, #236]	; (800555c <HAL_RCC_OscConfig+0x500>)
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005472:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <HAL_RCC_OscConfig+0x504>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7fd fa74 	bl	8002964 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005480:	f7fd fa70 	bl	8002964 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e05e      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005492:	4b32      	ldr	r3, [pc, #200]	; (800555c <HAL_RCC_OscConfig+0x500>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x424>
 800549e:	e056      	b.n	800554e <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a0:	4b2f      	ldr	r3, [pc, #188]	; (8005560 <HAL_RCC_OscConfig+0x504>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a6:	f7fd fa5d 	bl	8002964 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ae:	f7fd fa59 	bl	8002964 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e047      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c0:	4b26      	ldr	r3, [pc, #152]	; (800555c <HAL_RCC_OscConfig+0x500>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f0      	bne.n	80054ae <HAL_RCC_OscConfig+0x452>
 80054cc:	e03f      	b.n	800554e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e03a      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054da:	4b20      	ldr	r3, [pc, #128]	; (800555c <HAL_RCC_OscConfig+0x500>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d030      	beq.n	800554a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d129      	bne.n	800554a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d122      	bne.n	800554a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800550a:	4013      	ands	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005510:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005512:	4293      	cmp	r3, r2
 8005514:	d119      	bne.n	800554a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	3b01      	subs	r3, #1
 8005524:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d10f      	bne.n	800554a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005536:	429a      	cmp	r2, r3
 8005538:	d107      	bne.n	800554a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005546:	429a      	cmp	r2, r3
 8005548:	d001      	beq.n	800554e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40007000 	.word	0x40007000
 800555c:	40023800 	.word	0x40023800
 8005560:	42470060 	.word	0x42470060

08005564 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005576:	2b84      	cmp	r3, #132	; 0x84
 8005578:	d005      	beq.n	8005586 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800557a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	3303      	adds	r3, #3
 8005584:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005598:	f000 fb5c 	bl	8005c54 <vTaskStartScheduler>
  
  return osOK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a4:	b089      	sub	sp, #36	; 0x24
 80055a6:	af04      	add	r7, sp, #16
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d020      	beq.n	80055f6 <osThreadCreate+0x54>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01c      	beq.n	80055f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685c      	ldr	r4, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681d      	ldr	r5, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691e      	ldr	r6, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ffc8 	bl	8005564 <makeFreeRtosPriority>
 80055d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055de:	9202      	str	r2, [sp, #8]
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	9100      	str	r1, [sp, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	4632      	mov	r2, r6
 80055e8:	4629      	mov	r1, r5
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 f8ed 	bl	80057ca <xTaskCreateStatic>
 80055f0:	4603      	mov	r3, r0
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e01c      	b.n	8005630 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685c      	ldr	r4, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005602:	b29e      	uxth	r6, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ffaa 	bl	8005564 <makeFreeRtosPriority>
 8005610:	4602      	mov	r2, r0
 8005612:	f107 030c 	add.w	r3, r7, #12
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	9200      	str	r2, [sp, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	4632      	mov	r2, r6
 800561e:	4629      	mov	r1, r5
 8005620:	4620      	mov	r0, r4
 8005622:	f000 f92f 	bl	8005884 <xTaskCreate>
 8005626:	4603      	mov	r3, r0
 8005628:	2b01      	cmp	r3, #1
 800562a:	d001      	beq.n	8005630 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	e000      	b.n	8005632 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800563a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <osDelay+0x16>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	e000      	b.n	8005652 <osDelay+0x18>
 8005650:	2301      	movs	r3, #1
 8005652:	4618      	mov	r0, r3
 8005654:	f000 faca 	bl	8005bec <vTaskDelay>
  
  return osOK;
 8005658:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f103 0208 	add.w	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f04f 32ff 	mov.w	r2, #4294967295
 800567a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f103 0208 	add.w	r2, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f103 0208 	add.w	r2, r3, #8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	601a      	str	r2, [r3, #0]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d103      	bne.n	8005724 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e00c      	b.n	800573e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3308      	adds	r3, #8
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e002      	b.n	8005732 <vListInsert+0x2e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d2f6      	bcs.n	800572c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	601a      	str	r2, [r3, #0]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6892      	ldr	r2, [r2, #8]
 800578c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6852      	ldr	r2, [r2, #4]
 8005796:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d103      	bne.n	80057aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	1e5a      	subs	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b08e      	sub	sp, #56	; 0x38
 80057ce:	af04      	add	r7, sp, #16
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <xTaskCreateStatic+0x46>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	61fb      	str	r3, [r7, #28]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005810:	2354      	movs	r3, #84	; 0x54
 8005812:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b54      	cmp	r3, #84	; 0x54
 8005818:	d00a      	beq.n	8005830 <xTaskCreateStatic+0x66>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	61bb      	str	r3, [r7, #24]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005830:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01e      	beq.n	8005876 <xTaskCreateStatic+0xac>
 8005838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01b      	beq.n	8005876 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005846:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005850:	2300      	movs	r3, #0
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	9302      	str	r3, [sp, #8]
 8005858:	f107 0314 	add.w	r3, r7, #20
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f850 	bl	800590e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800586e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005870:	f000 f8d4 	bl	8005a1c <prvAddNewTaskToReadyList>
 8005874:	e001      	b.n	800587a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800587a:	697b      	ldr	r3, [r7, #20]
	}
 800587c:	4618      	mov	r0, r3
 800587e:	3728      	adds	r7, #40	; 0x28
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08c      	sub	sp, #48	; 0x30
 8005888:	af04      	add	r7, sp, #16
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4618      	mov	r0, r3
 800589a:	f000 ff75 	bl	8006788 <pvPortMalloc>
 800589e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00e      	beq.n	80058c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058a6:	2054      	movs	r0, #84	; 0x54
 80058a8:	f000 ff6e 	bl	8006788 <pvPortMalloc>
 80058ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30
 80058ba:	e005      	b.n	80058c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058bc:	6978      	ldr	r0, [r7, #20]
 80058be:	f001 f82f 	bl	8006920 <vPortFree>
 80058c2:	e001      	b.n	80058c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d017      	beq.n	80058fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	2300      	movs	r3, #0
 80058da:	9303      	str	r3, [sp, #12]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	9302      	str	r3, [sp, #8]
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f80e 	bl	800590e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058f2:	69f8      	ldr	r0, [r7, #28]
 80058f4:	f000 f892 	bl	8005a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058f8:	2301      	movs	r3, #1
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	e002      	b.n	8005904 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005902:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005904:	69bb      	ldr	r3, [r7, #24]
	}
 8005906:	4618      	mov	r0, r3
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b088      	sub	sp, #32
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
 800591a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005926:	3b01      	subs	r3, #1
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	f023 0307 	bic.w	r3, r3, #7
 8005934:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	617b      	str	r3, [r7, #20]
}
 8005952:	bf00      	nop
 8005954:	e7fe      	b.n	8005954 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01f      	beq.n	800599c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800595c:	2300      	movs	r3, #0
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	e012      	b.n	8005988 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	7819      	ldrb	r1, [r3, #0]
 800596a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	4413      	add	r3, r2
 8005970:	3334      	adds	r3, #52	; 0x34
 8005972:	460a      	mov	r2, r1
 8005974:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d006      	beq.n	8005990 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3301      	adds	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b0f      	cmp	r3, #15
 800598c:	d9e9      	bls.n	8005962 <prvInitialiseNewTask+0x54>
 800598e:	e000      	b.n	8005992 <prvInitialiseNewTask+0x84>
			{
				break;
 8005990:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800599a:	e003      	b.n	80059a4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	2b06      	cmp	r3, #6
 80059a8:	d901      	bls.n	80059ae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059aa:	2306      	movs	r3, #6
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	2200      	movs	r2, #0
 80059be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	3304      	adds	r3, #4
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff fe6c 	bl	80056a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	3318      	adds	r3, #24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff fe67 	bl	80056a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	f1c3 0207 	rsb	r2, r3, #7
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	2200      	movs	r2, #0
 80059ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	69b8      	ldr	r0, [r7, #24]
 80059fe:	f000 fcb1 	bl	8006364 <pxPortInitialiseStack>
 8005a02:	4602      	mov	r2, r0
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a14:	bf00      	nop
 8005a16:	3720      	adds	r7, #32
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a24:	f000 fdce 	bl	80065c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a28:	4b2a      	ldr	r3, [pc, #168]	; (8005ad4 <prvAddNewTaskToReadyList+0xb8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	4a29      	ldr	r2, [pc, #164]	; (8005ad4 <prvAddNewTaskToReadyList+0xb8>)
 8005a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a32:	4b29      	ldr	r3, [pc, #164]	; (8005ad8 <prvAddNewTaskToReadyList+0xbc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a3a:	4a27      	ldr	r2, [pc, #156]	; (8005ad8 <prvAddNewTaskToReadyList+0xbc>)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a40:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <prvAddNewTaskToReadyList+0xb8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d110      	bne.n	8005a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a48:	f000 fb4a 	bl	80060e0 <prvInitialiseTaskLists>
 8005a4c:	e00d      	b.n	8005a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a4e:	4b23      	ldr	r3, [pc, #140]	; (8005adc <prvAddNewTaskToReadyList+0xc0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a56:	4b20      	ldr	r3, [pc, #128]	; (8005ad8 <prvAddNewTaskToReadyList+0xbc>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d802      	bhi.n	8005a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a64:	4a1c      	ldr	r2, [pc, #112]	; (8005ad8 <prvAddNewTaskToReadyList+0xbc>)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <prvAddNewTaskToReadyList+0xc4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <prvAddNewTaskToReadyList+0xc4>)
 8005a72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	2201      	movs	r2, #1
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	4b19      	ldr	r3, [pc, #100]	; (8005ae4 <prvAddNewTaskToReadyList+0xc8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <prvAddNewTaskToReadyList+0xc8>)
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <prvAddNewTaskToReadyList+0xcc>)
 8005a94:	441a      	add	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	f7ff fe0d 	bl	80056bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005aa2:	f000 fdbf 	bl	8006624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <prvAddNewTaskToReadyList+0xc0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aae:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <prvAddNewTaskToReadyList+0xbc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d207      	bcs.n	8005acc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <prvAddNewTaskToReadyList+0xd0>)
 8005abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	2000043c 	.word	0x2000043c
 8005ad8:	2000033c 	.word	0x2000033c
 8005adc:	20000448 	.word	0x20000448
 8005ae0:	20000458 	.word	0x20000458
 8005ae4:	20000444 	.word	0x20000444
 8005ae8:	20000340 	.word	0x20000340
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <vTaskDelayUntil+0x2a>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	617b      	str	r3, [r7, #20]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <vTaskDelayUntil+0x46>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	613b      	str	r3, [r7, #16]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005b36:	4b2a      	ldr	r3, [pc, #168]	; (8005be0 <vTaskDelayUntil+0xf0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <vTaskDelayUntil+0x64>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	60fb      	str	r3, [r7, #12]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005b54:	f000 f8de 	bl	8005d14 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005b58:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <vTaskDelayUntil+0xf4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	4413      	add	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6a3a      	ldr	r2, [r7, #32]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d20b      	bcs.n	8005b8a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d211      	bcs.n	8005ba0 <vTaskDelayUntil+0xb0>
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d90d      	bls.n	8005ba0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
 8005b88:	e00a      	b.n	8005ba0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d303      	bcc.n	8005b9c <vTaskDelayUntil+0xac>
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d901      	bls.n	8005ba0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d006      	beq.n	8005bba <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fb6f 	bl	8006298 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005bba:	f000 f8b9 	bl	8005d30 <xTaskResumeAll>
 8005bbe:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d107      	bne.n	8005bd6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <vTaskDelayUntil+0xf8>)
 8005bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bd6:	bf00      	nop
 8005bd8:	3728      	adds	r7, #40	; 0x28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000464 	.word	0x20000464
 8005be4:	20000440 	.word	0x20000440
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d017      	beq.n	8005c2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <vTaskDelay+0x60>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <vTaskDelay+0x30>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60bb      	str	r3, [r7, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c1c:	f000 f87a 	bl	8005d14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fb38 	bl	8006298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c28:	f000 f882 	bl	8005d30 <xTaskResumeAll>
 8005c2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d107      	bne.n	8005c44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c34:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <vTaskDelay+0x64>)
 8005c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000464 	.word	0x20000464
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	; 0x28
 8005c58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c62:	463a      	mov	r2, r7
 8005c64:	1d39      	adds	r1, r7, #4
 8005c66:	f107 0308 	add.w	r3, r7, #8
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fb f8ca 	bl	8000e04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	9202      	str	r2, [sp, #8]
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	460a      	mov	r2, r1
 8005c82:	491e      	ldr	r1, [pc, #120]	; (8005cfc <vTaskStartScheduler+0xa8>)
 8005c84:	481e      	ldr	r0, [pc, #120]	; (8005d00 <vTaskStartScheduler+0xac>)
 8005c86:	f7ff fda0 	bl	80057ca <xTaskCreateStatic>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <vTaskStartScheduler+0xb0>)
 8005c8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c90:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <vTaskStartScheduler+0xb0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	e001      	b.n	8005ca2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d116      	bne.n	8005cd6 <vTaskStartScheduler+0x82>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	613b      	str	r3, [r7, #16]
}
 8005cba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cbc:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <vTaskStartScheduler+0xb4>)
 8005cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cc4:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <vTaskStartScheduler+0xb8>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cca:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <vTaskStartScheduler+0xbc>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cd0:	f000 fbd6 	bl	8006480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cd4:	e00e      	b.n	8005cf4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d10a      	bne.n	8005cf4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60fb      	str	r3, [r7, #12]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <vTaskStartScheduler+0x9e>
}
 8005cf4:	bf00      	nop
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	08007508 	.word	0x08007508
 8005d00:	080060b1 	.word	0x080060b1
 8005d04:	20000460 	.word	0x20000460
 8005d08:	2000045c 	.word	0x2000045c
 8005d0c:	20000448 	.word	0x20000448
 8005d10:	20000440 	.word	0x20000440

08005d14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d18:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <vTaskSuspendAll+0x18>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4a03      	ldr	r2, [pc, #12]	; (8005d2c <vTaskSuspendAll+0x18>)
 8005d20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d22:	bf00      	nop
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	20000464 	.word	0x20000464

08005d30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d3e:	4b41      	ldr	r3, [pc, #260]	; (8005e44 <xTaskResumeAll+0x114>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <xTaskResumeAll+0x2c>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	603b      	str	r3, [r7, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d5c:	f000 fc32 	bl	80065c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d60:	4b38      	ldr	r3, [pc, #224]	; (8005e44 <xTaskResumeAll+0x114>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	4a37      	ldr	r2, [pc, #220]	; (8005e44 <xTaskResumeAll+0x114>)
 8005d68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d6a:	4b36      	ldr	r3, [pc, #216]	; (8005e44 <xTaskResumeAll+0x114>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d161      	bne.n	8005e36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d72:	4b35      	ldr	r3, [pc, #212]	; (8005e48 <xTaskResumeAll+0x118>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d05d      	beq.n	8005e36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d7a:	e02e      	b.n	8005dda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7c:	4b33      	ldr	r3, [pc, #204]	; (8005e4c <xTaskResumeAll+0x11c>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3318      	adds	r3, #24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fcf4 	bl	8005776 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3304      	adds	r3, #4
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fcef 	bl	8005776 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <xTaskResumeAll+0x120>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <xTaskResumeAll+0x120>)
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a27      	ldr	r2, [pc, #156]	; (8005e54 <xTaskResumeAll+0x124>)
 8005db8:	441a      	add	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	f7ff fc7b 	bl	80056bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dca:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <xTaskResumeAll+0x128>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d302      	bcc.n	8005dda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005dd4:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <xTaskResumeAll+0x12c>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dda:	4b1c      	ldr	r3, [pc, #112]	; (8005e4c <xTaskResumeAll+0x11c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1cc      	bne.n	8005d7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005de8:	f000 fa18 	bl	800621c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dec:	4b1c      	ldr	r3, [pc, #112]	; (8005e60 <xTaskResumeAll+0x130>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d010      	beq.n	8005e1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005df8:	f000 f846 	bl	8005e88 <xTaskIncrementTick>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005e02:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <xTaskResumeAll+0x12c>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f1      	bne.n	8005df8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005e14:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <xTaskResumeAll+0x130>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e1a:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <xTaskResumeAll+0x12c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e22:	2301      	movs	r3, #1
 8005e24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <xTaskResumeAll+0x134>)
 8005e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e36:	f000 fbf5 	bl	8006624 <vPortExitCritical>

	return xAlreadyYielded;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000464 	.word	0x20000464
 8005e48:	2000043c 	.word	0x2000043c
 8005e4c:	200003fc 	.word	0x200003fc
 8005e50:	20000444 	.word	0x20000444
 8005e54:	20000340 	.word	0x20000340
 8005e58:	2000033c 	.word	0x2000033c
 8005e5c:	20000450 	.word	0x20000450
 8005e60:	2000044c 	.word	0x2000044c
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e6e:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <xTaskGetTickCount+0x1c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e74:	687b      	ldr	r3, [r7, #4]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000440 	.word	0x20000440

08005e88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e92:	4b4e      	ldr	r3, [pc, #312]	; (8005fcc <xTaskIncrementTick+0x144>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 808e 	bne.w	8005fb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e9c:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <xTaskIncrementTick+0x148>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ea4:	4a4a      	ldr	r2, [pc, #296]	; (8005fd0 <xTaskIncrementTick+0x148>)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d120      	bne.n	8005ef2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005eb0:	4b48      	ldr	r3, [pc, #288]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	603b      	str	r3, [r7, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <xTaskIncrementTick+0x46>
 8005ed0:	4b40      	ldr	r3, [pc, #256]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	4b40      	ldr	r3, [pc, #256]	; (8005fd8 <xTaskIncrementTick+0x150>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a3e      	ldr	r2, [pc, #248]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	4a3e      	ldr	r2, [pc, #248]	; (8005fd8 <xTaskIncrementTick+0x150>)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	4b3d      	ldr	r3, [pc, #244]	; (8005fdc <xTaskIncrementTick+0x154>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	4a3c      	ldr	r2, [pc, #240]	; (8005fdc <xTaskIncrementTick+0x154>)
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	f000 f995 	bl	800621c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ef2:	4b3b      	ldr	r3, [pc, #236]	; (8005fe0 <xTaskIncrementTick+0x158>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d348      	bcc.n	8005f8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005efc:	4b35      	ldr	r3, [pc, #212]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d104      	bne.n	8005f10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f06:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <xTaskIncrementTick+0x158>)
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0c:	601a      	str	r2, [r3, #0]
					break;
 8005f0e:	e03e      	b.n	8005f8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f10:	4b30      	ldr	r3, [pc, #192]	; (8005fd4 <xTaskIncrementTick+0x14c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d203      	bcs.n	8005f30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f28:	4a2d      	ldr	r2, [pc, #180]	; (8005fe0 <xTaskIncrementTick+0x158>)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f2e:	e02e      	b.n	8005f8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff fc1e 	bl	8005776 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	3318      	adds	r3, #24
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fc15 	bl	8005776 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	2201      	movs	r2, #1
 8005f52:	409a      	lsls	r2, r3
 8005f54:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <xTaskIncrementTick+0x15c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	4a22      	ldr	r2, [pc, #136]	; (8005fe4 <xTaskIncrementTick+0x15c>)
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <xTaskIncrementTick+0x160>)
 8005f6c:	441a      	add	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f7ff fba1 	bl	80056bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <xTaskIncrementTick+0x164>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d3b9      	bcc.n	8005efc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f8c:	e7b6      	b.n	8005efc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f8e:	4b17      	ldr	r3, [pc, #92]	; (8005fec <xTaskIncrementTick+0x164>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f94:	4914      	ldr	r1, [pc, #80]	; (8005fe8 <xTaskIncrementTick+0x160>)
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d901      	bls.n	8005faa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <xTaskIncrementTick+0x168>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	e004      	b.n	8005fc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <xTaskIncrementTick+0x16c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	4a0d      	ldr	r2, [pc, #52]	; (8005ff4 <xTaskIncrementTick+0x16c>)
 8005fc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005fc2:	697b      	ldr	r3, [r7, #20]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20000464 	.word	0x20000464
 8005fd0:	20000440 	.word	0x20000440
 8005fd4:	200003f4 	.word	0x200003f4
 8005fd8:	200003f8 	.word	0x200003f8
 8005fdc:	20000454 	.word	0x20000454
 8005fe0:	2000045c 	.word	0x2000045c
 8005fe4:	20000444 	.word	0x20000444
 8005fe8:	20000340 	.word	0x20000340
 8005fec:	2000033c 	.word	0x2000033c
 8005ff0:	20000450 	.word	0x20000450
 8005ff4:	2000044c 	.word	0x2000044c

08005ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ffe:	4b27      	ldr	r3, [pc, #156]	; (800609c <vTaskSwitchContext+0xa4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006006:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <vTaskSwitchContext+0xa8>)
 8006008:	2201      	movs	r2, #1
 800600a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800600c:	e03f      	b.n	800608e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800600e:	4b24      	ldr	r3, [pc, #144]	; (80060a0 <vTaskSwitchContext+0xa8>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006014:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <vTaskSwitchContext+0xac>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	fab3 f383 	clz	r3, r3
 8006020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006022:	7afb      	ldrb	r3, [r7, #11]
 8006024:	f1c3 031f 	rsb	r3, r3, #31
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	491f      	ldr	r1, [pc, #124]	; (80060a8 <vTaskSwitchContext+0xb0>)
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <vTaskSwitchContext+0x5c>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	607b      	str	r3, [r7, #4]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <vTaskSwitchContext+0x5a>
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <vTaskSwitchContext+0xb0>)
 8006060:	4413      	add	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3308      	adds	r3, #8
 8006076:	429a      	cmp	r2, r3
 8006078:	d104      	bne.n	8006084 <vTaskSwitchContext+0x8c>
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	4a08      	ldr	r2, [pc, #32]	; (80060ac <vTaskSwitchContext+0xb4>)
 800608c:	6013      	str	r3, [r2, #0]
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000464 	.word	0x20000464
 80060a0:	20000450 	.word	0x20000450
 80060a4:	20000444 	.word	0x20000444
 80060a8:	20000340 	.word	0x20000340
 80060ac:	2000033c 	.word	0x2000033c

080060b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060b8:	f000 f852 	bl	8006160 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <prvIdleTask+0x28>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d9f9      	bls.n	80060b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <prvIdleTask+0x2c>)
 80060c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060d4:	e7f0      	b.n	80060b8 <prvIdleTask+0x8>
 80060d6:	bf00      	nop
 80060d8:	20000340 	.word	0x20000340
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	e00c      	b.n	8006106 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4a12      	ldr	r2, [pc, #72]	; (8006140 <prvInitialiseTaskLists+0x60>)
 80060f8:	4413      	add	r3, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fab1 	bl	8005662 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3301      	adds	r3, #1
 8006104:	607b      	str	r3, [r7, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b06      	cmp	r3, #6
 800610a:	d9ef      	bls.n	80060ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800610c:	480d      	ldr	r0, [pc, #52]	; (8006144 <prvInitialiseTaskLists+0x64>)
 800610e:	f7ff faa8 	bl	8005662 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006112:	480d      	ldr	r0, [pc, #52]	; (8006148 <prvInitialiseTaskLists+0x68>)
 8006114:	f7ff faa5 	bl	8005662 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006118:	480c      	ldr	r0, [pc, #48]	; (800614c <prvInitialiseTaskLists+0x6c>)
 800611a:	f7ff faa2 	bl	8005662 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800611e:	480c      	ldr	r0, [pc, #48]	; (8006150 <prvInitialiseTaskLists+0x70>)
 8006120:	f7ff fa9f 	bl	8005662 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006124:	480b      	ldr	r0, [pc, #44]	; (8006154 <prvInitialiseTaskLists+0x74>)
 8006126:	f7ff fa9c 	bl	8005662 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800612a:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <prvInitialiseTaskLists+0x78>)
 800612c:	4a05      	ldr	r2, [pc, #20]	; (8006144 <prvInitialiseTaskLists+0x64>)
 800612e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006130:	4b0a      	ldr	r3, [pc, #40]	; (800615c <prvInitialiseTaskLists+0x7c>)
 8006132:	4a05      	ldr	r2, [pc, #20]	; (8006148 <prvInitialiseTaskLists+0x68>)
 8006134:	601a      	str	r2, [r3, #0]
}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000340 	.word	0x20000340
 8006144:	200003cc 	.word	0x200003cc
 8006148:	200003e0 	.word	0x200003e0
 800614c:	200003fc 	.word	0x200003fc
 8006150:	20000410 	.word	0x20000410
 8006154:	20000428 	.word	0x20000428
 8006158:	200003f4 	.word	0x200003f4
 800615c:	200003f8 	.word	0x200003f8

08006160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006166:	e019      	b.n	800619c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006168:	f000 fa2c 	bl	80065c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800616c:	4b10      	ldr	r3, [pc, #64]	; (80061b0 <prvCheckTasksWaitingTermination+0x50>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff fafc 	bl	8005776 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800617e:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <prvCheckTasksWaitingTermination+0x54>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3b01      	subs	r3, #1
 8006184:	4a0b      	ldr	r2, [pc, #44]	; (80061b4 <prvCheckTasksWaitingTermination+0x54>)
 8006186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006188:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <prvCheckTasksWaitingTermination+0x58>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3b01      	subs	r3, #1
 800618e:	4a0a      	ldr	r2, [pc, #40]	; (80061b8 <prvCheckTasksWaitingTermination+0x58>)
 8006190:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006192:	f000 fa47 	bl	8006624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f810 	bl	80061bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800619c:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <prvCheckTasksWaitingTermination+0x58>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e1      	bne.n	8006168 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000410 	.word	0x20000410
 80061b4:	2000043c 	.word	0x2000043c
 80061b8:	20000424 	.word	0x20000424

080061bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d108      	bne.n	80061e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fba4 	bl	8006920 <vPortFree>
				vPortFree( pxTCB );
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fba1 	bl	8006920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061de:	e018      	b.n	8006212 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d103      	bne.n	80061f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fb98 	bl	8006920 <vPortFree>
	}
 80061f0:	e00f      	b.n	8006212 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d00a      	beq.n	8006212 <prvDeleteTCB+0x56>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	60fb      	str	r3, [r7, #12]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <prvDeleteTCB+0x54>
	}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <prvResetNextTaskUnblockTime+0x38>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <prvResetNextTaskUnblockTime+0x3c>)
 800622e:	f04f 32ff 	mov.w	r2, #4294967295
 8006232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006234:	e008      	b.n	8006248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <prvResetNextTaskUnblockTime+0x38>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a04      	ldr	r2, [pc, #16]	; (8006258 <prvResetNextTaskUnblockTime+0x3c>)
 8006246:	6013      	str	r3, [r2, #0]
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	200003f4 	.word	0x200003f4
 8006258:	2000045c 	.word	0x2000045c

0800625c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <xTaskGetSchedulerState+0x34>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800626a:	2301      	movs	r3, #1
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	e008      	b.n	8006282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006270:	4b08      	ldr	r3, [pc, #32]	; (8006294 <xTaskGetSchedulerState+0x38>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d102      	bne.n	800627e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006278:	2302      	movs	r3, #2
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	e001      	b.n	8006282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006282:	687b      	ldr	r3, [r7, #4]
	}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000448 	.word	0x20000448
 8006294:	20000464 	.word	0x20000464

08006298 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062a2:	4b29      	ldr	r3, [pc, #164]	; (8006348 <prvAddCurrentTaskToDelayedList+0xb0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a8:	4b28      	ldr	r3, [pc, #160]	; (800634c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff fa61 	bl	8005776 <uxListRemove>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	2201      	movs	r2, #1
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43da      	mvns	r2, r3
 80062c8:	4b21      	ldr	r3, [pc, #132]	; (8006350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4013      	ands	r3, r2
 80062ce:	4a20      	ldr	r2, [pc, #128]	; (8006350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d10a      	bne.n	80062f0 <prvAddCurrentTaskToDelayedList+0x58>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e0:	4b1a      	ldr	r3, [pc, #104]	; (800634c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	481a      	ldr	r0, [pc, #104]	; (8006354 <prvAddCurrentTaskToDelayedList+0xbc>)
 80062ea:	f7ff f9e7 	bl	80056bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062ee:	e026      	b.n	800633e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4413      	add	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062f8:	4b14      	ldr	r3, [pc, #80]	; (800634c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	429a      	cmp	r2, r3
 8006306:	d209      	bcs.n	800631c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006308:	4b13      	ldr	r3, [pc, #76]	; (8006358 <prvAddCurrentTaskToDelayedList+0xc0>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <prvAddCurrentTaskToDelayedList+0xb4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3304      	adds	r3, #4
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f7ff f9f5 	bl	8005704 <vListInsert>
}
 800631a:	e010      	b.n	800633e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800631c:	4b0f      	ldr	r3, [pc, #60]	; (800635c <prvAddCurrentTaskToDelayedList+0xc4>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7ff f9eb 	bl	8005704 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800632e:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	429a      	cmp	r2, r3
 8006336:	d202      	bcs.n	800633e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006338:	4a09      	ldr	r2, [pc, #36]	; (8006360 <prvAddCurrentTaskToDelayedList+0xc8>)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6013      	str	r3, [r2, #0]
}
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000440 	.word	0x20000440
 800634c:	2000033c 	.word	0x2000033c
 8006350:	20000444 	.word	0x20000444
 8006354:	20000428 	.word	0x20000428
 8006358:	200003f8 	.word	0x200003f8
 800635c:	200003f4 	.word	0x200003f4
 8006360:	2000045c 	.word	0x2000045c

08006364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3b04      	subs	r3, #4
 8006374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800637c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3b04      	subs	r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f023 0201 	bic.w	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b04      	subs	r3, #4
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006394:	4a0c      	ldr	r2, [pc, #48]	; (80063c8 <pxPortInitialiseStack+0x64>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b14      	subs	r3, #20
 800639e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3b04      	subs	r3, #4
 80063aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f06f 0202 	mvn.w	r2, #2
 80063b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3b20      	subs	r3, #32
 80063b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ba:	68fb      	ldr	r3, [r7, #12]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	080063cd 	.word	0x080063cd

080063cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063d6:	4b12      	ldr	r3, [pc, #72]	; (8006420 <prvTaskExitError+0x54>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d00a      	beq.n	80063f6 <prvTaskExitError+0x2a>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60fb      	str	r3, [r7, #12]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <prvTaskExitError+0x28>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60bb      	str	r3, [r7, #8]
}
 8006408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800640a:	bf00      	nop
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0fc      	beq.n	800640c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006412:	bf00      	nop
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	20000010 	.word	0x20000010
	...

08006430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <pxCurrentTCBConst2>)
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	f380 8809 	msr	PSP, r0
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f380 8811 	msr	BASEPRI, r0
 800644a:	4770      	bx	lr
 800644c:	f3af 8000 	nop.w

08006450 <pxCurrentTCBConst2>:
 8006450:	2000033c 	.word	0x2000033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <prvPortStartFirstTask+0x24>)
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	6800      	ldr	r0, [r0, #0]
 800645e:	f380 8808 	msr	MSP, r0
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8814 	msr	CONTROL, r0
 800646a:	b662      	cpsie	i
 800646c:	b661      	cpsie	f
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	df00      	svc	0
 8006478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800647a:	bf00      	nop
 800647c:	e000ed08 	.word	0xe000ed08

08006480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006486:	4b46      	ldr	r3, [pc, #280]	; (80065a0 <xPortStartScheduler+0x120>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a46      	ldr	r2, [pc, #280]	; (80065a4 <xPortStartScheduler+0x124>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10a      	bne.n	80064a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064a6:	4b3e      	ldr	r3, [pc, #248]	; (80065a0 <xPortStartScheduler+0x120>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a3f      	ldr	r2, [pc, #252]	; (80065a8 <xPortStartScheduler+0x128>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10a      	bne.n	80064c6 <xPortStartScheduler+0x46>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064c6:	4b39      	ldr	r3, [pc, #228]	; (80065ac <xPortStartScheduler+0x12c>)
 80064c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4b31      	ldr	r3, [pc, #196]	; (80065b0 <xPortStartScheduler+0x130>)
 80064ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064ee:	4b31      	ldr	r3, [pc, #196]	; (80065b4 <xPortStartScheduler+0x134>)
 80064f0:	2207      	movs	r2, #7
 80064f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064f4:	e009      	b.n	800650a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064f6:	4b2f      	ldr	r3, [pc, #188]	; (80065b4 <xPortStartScheduler+0x134>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	4a2d      	ldr	r2, [pc, #180]	; (80065b4 <xPortStartScheduler+0x134>)
 80064fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	b2db      	uxtb	r3, r3
 8006508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006512:	2b80      	cmp	r3, #128	; 0x80
 8006514:	d0ef      	beq.n	80064f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006516:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <xPortStartScheduler+0x134>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f1c3 0307 	rsb	r3, r3, #7
 800651e:	2b04      	cmp	r3, #4
 8006520:	d00a      	beq.n	8006538 <xPortStartScheduler+0xb8>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	60bb      	str	r3, [r7, #8]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006538:	4b1e      	ldr	r3, [pc, #120]	; (80065b4 <xPortStartScheduler+0x134>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <xPortStartScheduler+0x134>)
 8006540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <xPortStartScheduler+0x134>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <xPortStartScheduler+0x134>)
 800654c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006556:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <xPortStartScheduler+0x138>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a17      	ldr	r2, [pc, #92]	; (80065b8 <xPortStartScheduler+0x138>)
 800655c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006562:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <xPortStartScheduler+0x138>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a14      	ldr	r2, [pc, #80]	; (80065b8 <xPortStartScheduler+0x138>)
 8006568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800656c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800656e:	f000 f8dd 	bl	800672c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006572:	4b12      	ldr	r3, [pc, #72]	; (80065bc <xPortStartScheduler+0x13c>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006578:	f000 f8fc 	bl	8006774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <xPortStartScheduler+0x140>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <xPortStartScheduler+0x140>)
 8006582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006588:	f7ff ff66 	bl	8006458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800658c:	f7ff fd34 	bl	8005ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8006590:	f7ff ff1c 	bl	80063cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	e000ed00 	.word	0xe000ed00
 80065a4:	410fc271 	.word	0x410fc271
 80065a8:	410fc270 	.word	0x410fc270
 80065ac:	e000e400 	.word	0xe000e400
 80065b0:	20000468 	.word	0x20000468
 80065b4:	2000046c 	.word	0x2000046c
 80065b8:	e000ed20 	.word	0xe000ed20
 80065bc:	20000010 	.word	0x20000010
 80065c0:	e000ef34 	.word	0xe000ef34

080065c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	607b      	str	r3, [r7, #4]
}
 80065dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065de:	4b0f      	ldr	r3, [pc, #60]	; (800661c <vPortEnterCritical+0x58>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	4a0d      	ldr	r2, [pc, #52]	; (800661c <vPortEnterCritical+0x58>)
 80065e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <vPortEnterCritical+0x58>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10f      	bne.n	8006610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <vPortEnterCritical+0x5c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <vPortEnterCritical+0x4c>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	603b      	str	r3, [r7, #0]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <vPortEnterCritical+0x4a>
	}
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	20000010 	.word	0x20000010
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800662a:	4b12      	ldr	r3, [pc, #72]	; (8006674 <vPortExitCritical+0x50>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <vPortExitCritical+0x24>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	607b      	str	r3, [r7, #4]
}
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006648:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <vPortExitCritical+0x50>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3b01      	subs	r3, #1
 800664e:	4a09      	ldr	r2, [pc, #36]	; (8006674 <vPortExitCritical+0x50>)
 8006650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006652:	4b08      	ldr	r3, [pc, #32]	; (8006674 <vPortExitCritical+0x50>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <vPortExitCritical+0x42>
 800665a:	2300      	movs	r3, #0
 800665c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000010 	.word	0x20000010
	...

08006680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006680:	f3ef 8009 	mrs	r0, PSP
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <pxCurrentTCBConst>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	f01e 0f10 	tst.w	lr, #16
 8006690:	bf08      	it	eq
 8006692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669a:	6010      	str	r0, [r2, #0]
 800669c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066a4:	f380 8811 	msr	BASEPRI, r0
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f7ff fca2 	bl	8005ff8 <vTaskSwitchContext>
 80066b4:	f04f 0000 	mov.w	r0, #0
 80066b8:	f380 8811 	msr	BASEPRI, r0
 80066bc:	bc09      	pop	{r0, r3}
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	6808      	ldr	r0, [r1, #0]
 80066c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c6:	f01e 0f10 	tst.w	lr, #16
 80066ca:	bf08      	it	eq
 80066cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066d0:	f380 8809 	msr	PSP, r0
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst>:
 80066e0:	2000033c 	.word	0x2000033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	607b      	str	r3, [r7, #4]
}
 8006700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006702:	f7ff fbc1 	bl	8005e88 <xTaskIncrementTick>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <xPortSysTickHandler+0x40>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f383 8811 	msr	BASEPRI, r3
}
 800671e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <vPortSetupTimerInterrupt+0x34>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006736:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <vPortSetupTimerInterrupt+0x38>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <vPortSetupTimerInterrupt+0x3c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0a      	ldr	r2, [pc, #40]	; (800676c <vPortSetupTimerInterrupt+0x40>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	099b      	lsrs	r3, r3, #6
 8006748:	4a09      	ldr	r2, [pc, #36]	; (8006770 <vPortSetupTimerInterrupt+0x44>)
 800674a:	3b01      	subs	r3, #1
 800674c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800674e:	4b04      	ldr	r3, [pc, #16]	; (8006760 <vPortSetupTimerInterrupt+0x34>)
 8006750:	2207      	movs	r2, #7
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	e000e010 	.word	0xe000e010
 8006764:	e000e018 	.word	0xe000e018
 8006768:	20000004 	.word	0x20000004
 800676c:	10624dd3 	.word	0x10624dd3
 8006770:	e000e014 	.word	0xe000e014

08006774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006784 <vPortEnableVFP+0x10>
 8006778:	6801      	ldr	r1, [r0, #0]
 800677a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800677e:	6001      	str	r1, [r0, #0]
 8006780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006782:	bf00      	nop
 8006784:	e000ed88 	.word	0xe000ed88

08006788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08a      	sub	sp, #40	; 0x28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006794:	f7ff fabe 	bl	8005d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006798:	4b5b      	ldr	r3, [pc, #364]	; (8006908 <pvPortMalloc+0x180>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067a0:	f000 f920 	bl	80069e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067a4:	4b59      	ldr	r3, [pc, #356]	; (800690c <pvPortMalloc+0x184>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f040 8093 	bne.w	80068d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01d      	beq.n	80067f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067b8:	2208      	movs	r2, #8
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4413      	add	r3, r2
 80067be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d014      	beq.n	80067f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f023 0307 	bic.w	r3, r3, #7
 80067d0:	3308      	adds	r3, #8
 80067d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <pvPortMalloc+0x6c>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	617b      	str	r3, [r7, #20]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d06e      	beq.n	80068d8 <pvPortMalloc+0x150>
 80067fa:	4b45      	ldr	r3, [pc, #276]	; (8006910 <pvPortMalloc+0x188>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	429a      	cmp	r2, r3
 8006802:	d869      	bhi.n	80068d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006804:	4b43      	ldr	r3, [pc, #268]	; (8006914 <pvPortMalloc+0x18c>)
 8006806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006808:	4b42      	ldr	r3, [pc, #264]	; (8006914 <pvPortMalloc+0x18c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800680e:	e004      	b.n	800681a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	429a      	cmp	r2, r3
 8006822:	d903      	bls.n	800682c <pvPortMalloc+0xa4>
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1f1      	bne.n	8006810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800682c:	4b36      	ldr	r3, [pc, #216]	; (8006908 <pvPortMalloc+0x180>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006832:	429a      	cmp	r2, r3
 8006834:	d050      	beq.n	80068d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2208      	movs	r2, #8
 800683c:	4413      	add	r3, r2
 800683e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	1ad2      	subs	r2, r2, r3
 8006850:	2308      	movs	r3, #8
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	429a      	cmp	r2, r3
 8006856:	d91f      	bls.n	8006898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <pvPortMalloc+0xf8>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	613b      	str	r3, [r7, #16]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006892:	69b8      	ldr	r0, [r7, #24]
 8006894:	f000 f908 	bl	8006aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006898:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <pvPortMalloc+0x188>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	4a1b      	ldr	r2, [pc, #108]	; (8006910 <pvPortMalloc+0x188>)
 80068a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068a6:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <pvPortMalloc+0x188>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <pvPortMalloc+0x190>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d203      	bcs.n	80068ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068b2:	4b17      	ldr	r3, [pc, #92]	; (8006910 <pvPortMalloc+0x188>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a18      	ldr	r2, [pc, #96]	; (8006918 <pvPortMalloc+0x190>)
 80068b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <pvPortMalloc+0x184>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068ce:	4b13      	ldr	r3, [pc, #76]	; (800691c <pvPortMalloc+0x194>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	4a11      	ldr	r2, [pc, #68]	; (800691c <pvPortMalloc+0x194>)
 80068d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068d8:	f7ff fa2a 	bl	8005d30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <pvPortMalloc+0x174>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	60fb      	str	r3, [r7, #12]
}
 80068f8:	bf00      	nop
 80068fa:	e7fe      	b.n	80068fa <pvPortMalloc+0x172>
	return pvReturn;
 80068fc:	69fb      	ldr	r3, [r7, #28]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3728      	adds	r7, #40	; 0x28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20004078 	.word	0x20004078
 800690c:	2000408c 	.word	0x2000408c
 8006910:	2000407c 	.word	0x2000407c
 8006914:	20004070 	.word	0x20004070
 8006918:	20004080 	.word	0x20004080
 800691c:	20004084 	.word	0x20004084

08006920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d04d      	beq.n	80069ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006932:	2308      	movs	r3, #8
 8006934:	425b      	negs	r3, r3
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4413      	add	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	4b24      	ldr	r3, [pc, #144]	; (80069d8 <vPortFree+0xb8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4013      	ands	r3, r2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <vPortFree+0x44>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60fb      	str	r3, [r7, #12]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <vPortFree+0x62>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60bb      	str	r3, [r7, #8]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <vPortFree+0xb8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4013      	ands	r3, r2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01e      	beq.n	80069ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d11a      	bne.n	80069ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <vPortFree+0xb8>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	43db      	mvns	r3, r3
 80069a2:	401a      	ands	r2, r3
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069a8:	f7ff f9b4 	bl	8005d14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <vPortFree+0xbc>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4413      	add	r3, r2
 80069b6:	4a09      	ldr	r2, [pc, #36]	; (80069dc <vPortFree+0xbc>)
 80069b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069ba:	6938      	ldr	r0, [r7, #16]
 80069bc:	f000 f874 	bl	8006aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <vPortFree+0xc0>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	4a06      	ldr	r2, [pc, #24]	; (80069e0 <vPortFree+0xc0>)
 80069c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069ca:	f7ff f9b1 	bl	8005d30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069ce:	bf00      	nop
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	2000408c 	.word	0x2000408c
 80069dc:	2000407c 	.word	0x2000407c
 80069e0:	20004088 	.word	0x20004088

080069e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069f0:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <prvHeapInit+0xac>)
 80069f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00c      	beq.n	8006a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3307      	adds	r3, #7
 8006a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0307 	bic.w	r3, r3, #7
 8006a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	4a1f      	ldr	r2, [pc, #124]	; (8006a90 <prvHeapInit+0xac>)
 8006a14:	4413      	add	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	; (8006a94 <prvHeapInit+0xb0>)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a22:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <prvHeapInit+0xb0>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a30:	2208      	movs	r2, #8
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1a9b      	subs	r3, r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0307 	bic.w	r3, r3, #7
 8006a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a15      	ldr	r2, [pc, #84]	; (8006a98 <prvHeapInit+0xb4>)
 8006a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a46:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <prvHeapInit+0xb4>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a4e:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <prvHeapInit+0xb4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <prvHeapInit+0xb4>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <prvHeapInit+0xb8>)
 8006a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4a09      	ldr	r2, [pc, #36]	; (8006aa0 <prvHeapInit+0xbc>)
 8006a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a7c:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <prvHeapInit+0xc0>)
 8006a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	20000470 	.word	0x20000470
 8006a94:	20004070 	.word	0x20004070
 8006a98:	20004078 	.word	0x20004078
 8006a9c:	20004080 	.word	0x20004080
 8006aa0:	2000407c 	.word	0x2000407c
 8006aa4:	2000408c 	.word	0x2000408c

08006aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ab0:	4b28      	ldr	r3, [pc, #160]	; (8006b54 <prvInsertBlockIntoFreeList+0xac>)
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e002      	b.n	8006abc <prvInsertBlockIntoFreeList+0x14>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d8f7      	bhi.n	8006ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d108      	bne.n	8006aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	441a      	add	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d118      	bne.n	8006b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <prvInsertBlockIntoFreeList+0xb0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d00d      	beq.n	8006b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	441a      	add	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	e008      	b.n	8006b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <prvInsertBlockIntoFreeList+0xb0>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e003      	b.n	8006b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d002      	beq.n	8006b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20004070 	.word	0x20004070
 8006b58:	20004078 	.word	0x20004078

08006b5c <__errno>:
 8006b5c:	4b01      	ldr	r3, [pc, #4]	; (8006b64 <__errno+0x8>)
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000014 	.word	0x20000014

08006b68 <__libc_init_array>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4d0d      	ldr	r5, [pc, #52]	; (8006ba0 <__libc_init_array+0x38>)
 8006b6c:	4c0d      	ldr	r4, [pc, #52]	; (8006ba4 <__libc_init_array+0x3c>)
 8006b6e:	1b64      	subs	r4, r4, r5
 8006b70:	10a4      	asrs	r4, r4, #2
 8006b72:	2600      	movs	r6, #0
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	d109      	bne.n	8006b8c <__libc_init_array+0x24>
 8006b78:	4d0b      	ldr	r5, [pc, #44]	; (8006ba8 <__libc_init_array+0x40>)
 8006b7a:	4c0c      	ldr	r4, [pc, #48]	; (8006bac <__libc_init_array+0x44>)
 8006b7c:	f000 fc4e 	bl	800741c <_init>
 8006b80:	1b64      	subs	r4, r4, r5
 8006b82:	10a4      	asrs	r4, r4, #2
 8006b84:	2600      	movs	r6, #0
 8006b86:	42a6      	cmp	r6, r4
 8006b88:	d105      	bne.n	8006b96 <__libc_init_array+0x2e>
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b90:	4798      	blx	r3
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7ee      	b.n	8006b74 <__libc_init_array+0xc>
 8006b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9a:	4798      	blx	r3
 8006b9c:	3601      	adds	r6, #1
 8006b9e:	e7f2      	b.n	8006b86 <__libc_init_array+0x1e>
 8006ba0:	08007568 	.word	0x08007568
 8006ba4:	08007568 	.word	0x08007568
 8006ba8:	08007568 	.word	0x08007568
 8006bac:	0800756c 	.word	0x0800756c

08006bb0 <memcpy>:
 8006bb0:	440a      	add	r2, r1
 8006bb2:	4291      	cmp	r1, r2
 8006bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb8:	d100      	bne.n	8006bbc <memcpy+0xc>
 8006bba:	4770      	bx	lr
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc6:	4291      	cmp	r1, r2
 8006bc8:	d1f9      	bne.n	8006bbe <memcpy+0xe>
 8006bca:	bd10      	pop	{r4, pc}

08006bcc <memset>:
 8006bcc:	4402      	add	r2, r0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <memset+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7f9      	b.n	8006bd0 <memset+0x4>

08006bdc <siprintf>:
 8006bdc:	b40e      	push	{r1, r2, r3}
 8006bde:	b500      	push	{lr}
 8006be0:	b09c      	sub	sp, #112	; 0x70
 8006be2:	ab1d      	add	r3, sp, #116	; 0x74
 8006be4:	9002      	str	r0, [sp, #8]
 8006be6:	9006      	str	r0, [sp, #24]
 8006be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bec:	4809      	ldr	r0, [pc, #36]	; (8006c14 <siprintf+0x38>)
 8006bee:	9107      	str	r1, [sp, #28]
 8006bf0:	9104      	str	r1, [sp, #16]
 8006bf2:	4909      	ldr	r1, [pc, #36]	; (8006c18 <siprintf+0x3c>)
 8006bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf8:	9105      	str	r1, [sp, #20]
 8006bfa:	6800      	ldr	r0, [r0, #0]
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	a902      	add	r1, sp, #8
 8006c00:	f000 f868 	bl	8006cd4 <_svfiprintf_r>
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	b01c      	add	sp, #112	; 0x70
 8006c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c10:	b003      	add	sp, #12
 8006c12:	4770      	bx	lr
 8006c14:	20000014 	.word	0x20000014
 8006c18:	ffff0208 	.word	0xffff0208

08006c1c <__ssputs_r>:
 8006c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c20:	688e      	ldr	r6, [r1, #8]
 8006c22:	429e      	cmp	r6, r3
 8006c24:	4682      	mov	sl, r0
 8006c26:	460c      	mov	r4, r1
 8006c28:	4690      	mov	r8, r2
 8006c2a:	461f      	mov	r7, r3
 8006c2c:	d838      	bhi.n	8006ca0 <__ssputs_r+0x84>
 8006c2e:	898a      	ldrh	r2, [r1, #12]
 8006c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c34:	d032      	beq.n	8006c9c <__ssputs_r+0x80>
 8006c36:	6825      	ldr	r5, [r4, #0]
 8006c38:	6909      	ldr	r1, [r1, #16]
 8006c3a:	eba5 0901 	sub.w	r9, r5, r1
 8006c3e:	6965      	ldr	r5, [r4, #20]
 8006c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c48:	3301      	adds	r3, #1
 8006c4a:	444b      	add	r3, r9
 8006c4c:	106d      	asrs	r5, r5, #1
 8006c4e:	429d      	cmp	r5, r3
 8006c50:	bf38      	it	cc
 8006c52:	461d      	movcc	r5, r3
 8006c54:	0553      	lsls	r3, r2, #21
 8006c56:	d531      	bpl.n	8006cbc <__ssputs_r+0xa0>
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f000 fb39 	bl	80072d0 <_malloc_r>
 8006c5e:	4606      	mov	r6, r0
 8006c60:	b950      	cbnz	r0, 8006c78 <__ssputs_r+0x5c>
 8006c62:	230c      	movs	r3, #12
 8006c64:	f8ca 3000 	str.w	r3, [sl]
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c6e:	81a3      	strh	r3, [r4, #12]
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c78:	6921      	ldr	r1, [r4, #16]
 8006c7a:	464a      	mov	r2, r9
 8006c7c:	f7ff ff98 	bl	8006bb0 <memcpy>
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	6126      	str	r6, [r4, #16]
 8006c8e:	6165      	str	r5, [r4, #20]
 8006c90:	444e      	add	r6, r9
 8006c92:	eba5 0509 	sub.w	r5, r5, r9
 8006c96:	6026      	str	r6, [r4, #0]
 8006c98:	60a5      	str	r5, [r4, #8]
 8006c9a:	463e      	mov	r6, r7
 8006c9c:	42be      	cmp	r6, r7
 8006c9e:	d900      	bls.n	8006ca2 <__ssputs_r+0x86>
 8006ca0:	463e      	mov	r6, r7
 8006ca2:	4632      	mov	r2, r6
 8006ca4:	6820      	ldr	r0, [r4, #0]
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	f000 faa8 	bl	80071fc <memmove>
 8006cac:	68a3      	ldr	r3, [r4, #8]
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	1b9b      	subs	r3, r3, r6
 8006cb2:	4432      	add	r2, r6
 8006cb4:	60a3      	str	r3, [r4, #8]
 8006cb6:	6022      	str	r2, [r4, #0]
 8006cb8:	2000      	movs	r0, #0
 8006cba:	e7db      	b.n	8006c74 <__ssputs_r+0x58>
 8006cbc:	462a      	mov	r2, r5
 8006cbe:	f000 fb61 	bl	8007384 <_realloc_r>
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1e1      	bne.n	8006c8c <__ssputs_r+0x70>
 8006cc8:	6921      	ldr	r1, [r4, #16]
 8006cca:	4650      	mov	r0, sl
 8006ccc:	f000 fab0 	bl	8007230 <_free_r>
 8006cd0:	e7c7      	b.n	8006c62 <__ssputs_r+0x46>
	...

08006cd4 <_svfiprintf_r>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	4698      	mov	r8, r3
 8006cda:	898b      	ldrh	r3, [r1, #12]
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	b09d      	sub	sp, #116	; 0x74
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	d50e      	bpl.n	8006d06 <_svfiprintf_r+0x32>
 8006ce8:	690b      	ldr	r3, [r1, #16]
 8006cea:	b963      	cbnz	r3, 8006d06 <_svfiprintf_r+0x32>
 8006cec:	2140      	movs	r1, #64	; 0x40
 8006cee:	f000 faef 	bl	80072d0 <_malloc_r>
 8006cf2:	6028      	str	r0, [r5, #0]
 8006cf4:	6128      	str	r0, [r5, #16]
 8006cf6:	b920      	cbnz	r0, 8006d02 <_svfiprintf_r+0x2e>
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	e0d1      	b.n	8006ea6 <_svfiprintf_r+0x1d2>
 8006d02:	2340      	movs	r3, #64	; 0x40
 8006d04:	616b      	str	r3, [r5, #20]
 8006d06:	2300      	movs	r3, #0
 8006d08:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0a:	2320      	movs	r3, #32
 8006d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d14:	2330      	movs	r3, #48	; 0x30
 8006d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ec0 <_svfiprintf_r+0x1ec>
 8006d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d1e:	f04f 0901 	mov.w	r9, #1
 8006d22:	4623      	mov	r3, r4
 8006d24:	469a      	mov	sl, r3
 8006d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d2a:	b10a      	cbz	r2, 8006d30 <_svfiprintf_r+0x5c>
 8006d2c:	2a25      	cmp	r2, #37	; 0x25
 8006d2e:	d1f9      	bne.n	8006d24 <_svfiprintf_r+0x50>
 8006d30:	ebba 0b04 	subs.w	fp, sl, r4
 8006d34:	d00b      	beq.n	8006d4e <_svfiprintf_r+0x7a>
 8006d36:	465b      	mov	r3, fp
 8006d38:	4622      	mov	r2, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f7ff ff6d 	bl	8006c1c <__ssputs_r>
 8006d42:	3001      	adds	r0, #1
 8006d44:	f000 80aa 	beq.w	8006e9c <_svfiprintf_r+0x1c8>
 8006d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d4a:	445a      	add	r2, fp
 8006d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80a2 	beq.w	8006e9c <_svfiprintf_r+0x1c8>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d62:	f10a 0a01 	add.w	sl, sl, #1
 8006d66:	9304      	str	r3, [sp, #16]
 8006d68:	9307      	str	r3, [sp, #28]
 8006d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d70:	4654      	mov	r4, sl
 8006d72:	2205      	movs	r2, #5
 8006d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d78:	4851      	ldr	r0, [pc, #324]	; (8006ec0 <_svfiprintf_r+0x1ec>)
 8006d7a:	f7f9 fa59 	bl	8000230 <memchr>
 8006d7e:	9a04      	ldr	r2, [sp, #16]
 8006d80:	b9d8      	cbnz	r0, 8006dba <_svfiprintf_r+0xe6>
 8006d82:	06d0      	lsls	r0, r2, #27
 8006d84:	bf44      	itt	mi
 8006d86:	2320      	movmi	r3, #32
 8006d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d8c:	0711      	lsls	r1, r2, #28
 8006d8e:	bf44      	itt	mi
 8006d90:	232b      	movmi	r3, #43	; 0x2b
 8006d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d96:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9c:	d015      	beq.n	8006dca <_svfiprintf_r+0xf6>
 8006d9e:	9a07      	ldr	r2, [sp, #28]
 8006da0:	4654      	mov	r4, sl
 8006da2:	2000      	movs	r0, #0
 8006da4:	f04f 0c0a 	mov.w	ip, #10
 8006da8:	4621      	mov	r1, r4
 8006daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dae:	3b30      	subs	r3, #48	; 0x30
 8006db0:	2b09      	cmp	r3, #9
 8006db2:	d94e      	bls.n	8006e52 <_svfiprintf_r+0x17e>
 8006db4:	b1b0      	cbz	r0, 8006de4 <_svfiprintf_r+0x110>
 8006db6:	9207      	str	r2, [sp, #28]
 8006db8:	e014      	b.n	8006de4 <_svfiprintf_r+0x110>
 8006dba:	eba0 0308 	sub.w	r3, r0, r8
 8006dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	46a2      	mov	sl, r4
 8006dc8:	e7d2      	b.n	8006d70 <_svfiprintf_r+0x9c>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	1d19      	adds	r1, r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	9103      	str	r1, [sp, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bfbb      	ittet	lt
 8006dd6:	425b      	neglt	r3, r3
 8006dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8006ddc:	9307      	strge	r3, [sp, #28]
 8006dde:	9307      	strlt	r3, [sp, #28]
 8006de0:	bfb8      	it	lt
 8006de2:	9204      	strlt	r2, [sp, #16]
 8006de4:	7823      	ldrb	r3, [r4, #0]
 8006de6:	2b2e      	cmp	r3, #46	; 0x2e
 8006de8:	d10c      	bne.n	8006e04 <_svfiprintf_r+0x130>
 8006dea:	7863      	ldrb	r3, [r4, #1]
 8006dec:	2b2a      	cmp	r3, #42	; 0x2a
 8006dee:	d135      	bne.n	8006e5c <_svfiprintf_r+0x188>
 8006df0:	9b03      	ldr	r3, [sp, #12]
 8006df2:	1d1a      	adds	r2, r3, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	9203      	str	r2, [sp, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfb8      	it	lt
 8006dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e00:	3402      	adds	r4, #2
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ed0 <_svfiprintf_r+0x1fc>
 8006e08:	7821      	ldrb	r1, [r4, #0]
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	f7f9 fa0f 	bl	8000230 <memchr>
 8006e12:	b140      	cbz	r0, 8006e26 <_svfiprintf_r+0x152>
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	eba0 000a 	sub.w	r0, r0, sl
 8006e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e1e:	9b04      	ldr	r3, [sp, #16]
 8006e20:	4303      	orrs	r3, r0
 8006e22:	3401      	adds	r4, #1
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2a:	4826      	ldr	r0, [pc, #152]	; (8006ec4 <_svfiprintf_r+0x1f0>)
 8006e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e30:	2206      	movs	r2, #6
 8006e32:	f7f9 f9fd 	bl	8000230 <memchr>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d038      	beq.n	8006eac <_svfiprintf_r+0x1d8>
 8006e3a:	4b23      	ldr	r3, [pc, #140]	; (8006ec8 <_svfiprintf_r+0x1f4>)
 8006e3c:	bb1b      	cbnz	r3, 8006e86 <_svfiprintf_r+0x1b2>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	3307      	adds	r3, #7
 8006e42:	f023 0307 	bic.w	r3, r3, #7
 8006e46:	3308      	adds	r3, #8
 8006e48:	9303      	str	r3, [sp, #12]
 8006e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4c:	4433      	add	r3, r6
 8006e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e50:	e767      	b.n	8006d22 <_svfiprintf_r+0x4e>
 8006e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e56:	460c      	mov	r4, r1
 8006e58:	2001      	movs	r0, #1
 8006e5a:	e7a5      	b.n	8006da8 <_svfiprintf_r+0xd4>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	3401      	adds	r4, #1
 8006e60:	9305      	str	r3, [sp, #20]
 8006e62:	4619      	mov	r1, r3
 8006e64:	f04f 0c0a 	mov.w	ip, #10
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e6e:	3a30      	subs	r2, #48	; 0x30
 8006e70:	2a09      	cmp	r2, #9
 8006e72:	d903      	bls.n	8006e7c <_svfiprintf_r+0x1a8>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0c5      	beq.n	8006e04 <_svfiprintf_r+0x130>
 8006e78:	9105      	str	r1, [sp, #20]
 8006e7a:	e7c3      	b.n	8006e04 <_svfiprintf_r+0x130>
 8006e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e80:	4604      	mov	r4, r0
 8006e82:	2301      	movs	r3, #1
 8006e84:	e7f0      	b.n	8006e68 <_svfiprintf_r+0x194>
 8006e86:	ab03      	add	r3, sp, #12
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	462a      	mov	r2, r5
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <_svfiprintf_r+0x1f8>)
 8006e8e:	a904      	add	r1, sp, #16
 8006e90:	4638      	mov	r0, r7
 8006e92:	f3af 8000 	nop.w
 8006e96:	1c42      	adds	r2, r0, #1
 8006e98:	4606      	mov	r6, r0
 8006e9a:	d1d6      	bne.n	8006e4a <_svfiprintf_r+0x176>
 8006e9c:	89ab      	ldrh	r3, [r5, #12]
 8006e9e:	065b      	lsls	r3, r3, #25
 8006ea0:	f53f af2c 	bmi.w	8006cfc <_svfiprintf_r+0x28>
 8006ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea6:	b01d      	add	sp, #116	; 0x74
 8006ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eac:	ab03      	add	r3, sp, #12
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <_svfiprintf_r+0x1f8>)
 8006eb4:	a904      	add	r1, sp, #16
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	f000 f87a 	bl	8006fb0 <_printf_i>
 8006ebc:	e7eb      	b.n	8006e96 <_svfiprintf_r+0x1c2>
 8006ebe:	bf00      	nop
 8006ec0:	0800752c 	.word	0x0800752c
 8006ec4:	08007536 	.word	0x08007536
 8006ec8:	00000000 	.word	0x00000000
 8006ecc:	08006c1d 	.word	0x08006c1d
 8006ed0:	08007532 	.word	0x08007532

08006ed4 <_printf_common>:
 8006ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed8:	4616      	mov	r6, r2
 8006eda:	4699      	mov	r9, r3
 8006edc:	688a      	ldr	r2, [r1, #8]
 8006ede:	690b      	ldr	r3, [r1, #16]
 8006ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	bfb8      	it	lt
 8006ee8:	4613      	movlt	r3, r2
 8006eea:	6033      	str	r3, [r6, #0]
 8006eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	b10a      	cbz	r2, 8006efa <_printf_common+0x26>
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	6033      	str	r3, [r6, #0]
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	0699      	lsls	r1, r3, #26
 8006efe:	bf42      	ittt	mi
 8006f00:	6833      	ldrmi	r3, [r6, #0]
 8006f02:	3302      	addmi	r3, #2
 8006f04:	6033      	strmi	r3, [r6, #0]
 8006f06:	6825      	ldr	r5, [r4, #0]
 8006f08:	f015 0506 	ands.w	r5, r5, #6
 8006f0c:	d106      	bne.n	8006f1c <_printf_common+0x48>
 8006f0e:	f104 0a19 	add.w	sl, r4, #25
 8006f12:	68e3      	ldr	r3, [r4, #12]
 8006f14:	6832      	ldr	r2, [r6, #0]
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	42ab      	cmp	r3, r5
 8006f1a:	dc26      	bgt.n	8006f6a <_printf_common+0x96>
 8006f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f20:	1e13      	subs	r3, r2, #0
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	bf18      	it	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	0692      	lsls	r2, r2, #26
 8006f2a:	d42b      	bmi.n	8006f84 <_printf_common+0xb0>
 8006f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f30:	4649      	mov	r1, r9
 8006f32:	4638      	mov	r0, r7
 8006f34:	47c0      	blx	r8
 8006f36:	3001      	adds	r0, #1
 8006f38:	d01e      	beq.n	8006f78 <_printf_common+0xa4>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	68e5      	ldr	r5, [r4, #12]
 8006f3e:	6832      	ldr	r2, [r6, #0]
 8006f40:	f003 0306 	and.w	r3, r3, #6
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	bf08      	it	eq
 8006f48:	1aad      	subeq	r5, r5, r2
 8006f4a:	68a3      	ldr	r3, [r4, #8]
 8006f4c:	6922      	ldr	r2, [r4, #16]
 8006f4e:	bf0c      	ite	eq
 8006f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f54:	2500      	movne	r5, #0
 8006f56:	4293      	cmp	r3, r2
 8006f58:	bfc4      	itt	gt
 8006f5a:	1a9b      	subgt	r3, r3, r2
 8006f5c:	18ed      	addgt	r5, r5, r3
 8006f5e:	2600      	movs	r6, #0
 8006f60:	341a      	adds	r4, #26
 8006f62:	42b5      	cmp	r5, r6
 8006f64:	d11a      	bne.n	8006f9c <_printf_common+0xc8>
 8006f66:	2000      	movs	r0, #0
 8006f68:	e008      	b.n	8006f7c <_printf_common+0xa8>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4652      	mov	r2, sl
 8006f6e:	4649      	mov	r1, r9
 8006f70:	4638      	mov	r0, r7
 8006f72:	47c0      	blx	r8
 8006f74:	3001      	adds	r0, #1
 8006f76:	d103      	bne.n	8006f80 <_printf_common+0xac>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f80:	3501      	adds	r5, #1
 8006f82:	e7c6      	b.n	8006f12 <_printf_common+0x3e>
 8006f84:	18e1      	adds	r1, r4, r3
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	2030      	movs	r0, #48	; 0x30
 8006f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f8e:	4422      	add	r2, r4
 8006f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f98:	3302      	adds	r3, #2
 8006f9a:	e7c7      	b.n	8006f2c <_printf_common+0x58>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	47c0      	blx	r8
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d0e6      	beq.n	8006f78 <_printf_common+0xa4>
 8006faa:	3601      	adds	r6, #1
 8006fac:	e7d9      	b.n	8006f62 <_printf_common+0x8e>
	...

08006fb0 <_printf_i>:
 8006fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	4691      	mov	r9, r2
 8006fb8:	7e27      	ldrb	r7, [r4, #24]
 8006fba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fbc:	2f78      	cmp	r7, #120	; 0x78
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	469a      	mov	sl, r3
 8006fc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fc6:	d807      	bhi.n	8006fd8 <_printf_i+0x28>
 8006fc8:	2f62      	cmp	r7, #98	; 0x62
 8006fca:	d80a      	bhi.n	8006fe2 <_printf_i+0x32>
 8006fcc:	2f00      	cmp	r7, #0
 8006fce:	f000 80d8 	beq.w	8007182 <_printf_i+0x1d2>
 8006fd2:	2f58      	cmp	r7, #88	; 0x58
 8006fd4:	f000 80a3 	beq.w	800711e <_printf_i+0x16e>
 8006fd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fe0:	e03a      	b.n	8007058 <_printf_i+0xa8>
 8006fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fe6:	2b15      	cmp	r3, #21
 8006fe8:	d8f6      	bhi.n	8006fd8 <_printf_i+0x28>
 8006fea:	a001      	add	r0, pc, #4	; (adr r0, 8006ff0 <_printf_i+0x40>)
 8006fec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ff0:	08007049 	.word	0x08007049
 8006ff4:	0800705d 	.word	0x0800705d
 8006ff8:	08006fd9 	.word	0x08006fd9
 8006ffc:	08006fd9 	.word	0x08006fd9
 8007000:	08006fd9 	.word	0x08006fd9
 8007004:	08006fd9 	.word	0x08006fd9
 8007008:	0800705d 	.word	0x0800705d
 800700c:	08006fd9 	.word	0x08006fd9
 8007010:	08006fd9 	.word	0x08006fd9
 8007014:	08006fd9 	.word	0x08006fd9
 8007018:	08006fd9 	.word	0x08006fd9
 800701c:	08007169 	.word	0x08007169
 8007020:	0800708d 	.word	0x0800708d
 8007024:	0800714b 	.word	0x0800714b
 8007028:	08006fd9 	.word	0x08006fd9
 800702c:	08006fd9 	.word	0x08006fd9
 8007030:	0800718b 	.word	0x0800718b
 8007034:	08006fd9 	.word	0x08006fd9
 8007038:	0800708d 	.word	0x0800708d
 800703c:	08006fd9 	.word	0x08006fd9
 8007040:	08006fd9 	.word	0x08006fd9
 8007044:	08007153 	.word	0x08007153
 8007048:	680b      	ldr	r3, [r1, #0]
 800704a:	1d1a      	adds	r2, r3, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	600a      	str	r2, [r1, #0]
 8007050:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007058:	2301      	movs	r3, #1
 800705a:	e0a3      	b.n	80071a4 <_printf_i+0x1f4>
 800705c:	6825      	ldr	r5, [r4, #0]
 800705e:	6808      	ldr	r0, [r1, #0]
 8007060:	062e      	lsls	r6, r5, #24
 8007062:	f100 0304 	add.w	r3, r0, #4
 8007066:	d50a      	bpl.n	800707e <_printf_i+0xce>
 8007068:	6805      	ldr	r5, [r0, #0]
 800706a:	600b      	str	r3, [r1, #0]
 800706c:	2d00      	cmp	r5, #0
 800706e:	da03      	bge.n	8007078 <_printf_i+0xc8>
 8007070:	232d      	movs	r3, #45	; 0x2d
 8007072:	426d      	negs	r5, r5
 8007074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007078:	485e      	ldr	r0, [pc, #376]	; (80071f4 <_printf_i+0x244>)
 800707a:	230a      	movs	r3, #10
 800707c:	e019      	b.n	80070b2 <_printf_i+0x102>
 800707e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007082:	6805      	ldr	r5, [r0, #0]
 8007084:	600b      	str	r3, [r1, #0]
 8007086:	bf18      	it	ne
 8007088:	b22d      	sxthne	r5, r5
 800708a:	e7ef      	b.n	800706c <_printf_i+0xbc>
 800708c:	680b      	ldr	r3, [r1, #0]
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	1d18      	adds	r0, r3, #4
 8007092:	6008      	str	r0, [r1, #0]
 8007094:	0628      	lsls	r0, r5, #24
 8007096:	d501      	bpl.n	800709c <_printf_i+0xec>
 8007098:	681d      	ldr	r5, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0xf2>
 800709c:	0669      	lsls	r1, r5, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0xe8>
 80070a0:	881d      	ldrh	r5, [r3, #0]
 80070a2:	4854      	ldr	r0, [pc, #336]	; (80071f4 <_printf_i+0x244>)
 80070a4:	2f6f      	cmp	r7, #111	; 0x6f
 80070a6:	bf0c      	ite	eq
 80070a8:	2308      	moveq	r3, #8
 80070aa:	230a      	movne	r3, #10
 80070ac:	2100      	movs	r1, #0
 80070ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070b2:	6866      	ldr	r6, [r4, #4]
 80070b4:	60a6      	str	r6, [r4, #8]
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	bfa2      	ittt	ge
 80070ba:	6821      	ldrge	r1, [r4, #0]
 80070bc:	f021 0104 	bicge.w	r1, r1, #4
 80070c0:	6021      	strge	r1, [r4, #0]
 80070c2:	b90d      	cbnz	r5, 80070c8 <_printf_i+0x118>
 80070c4:	2e00      	cmp	r6, #0
 80070c6:	d04d      	beq.n	8007164 <_printf_i+0x1b4>
 80070c8:	4616      	mov	r6, r2
 80070ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80070ce:	fb03 5711 	mls	r7, r3, r1, r5
 80070d2:	5dc7      	ldrb	r7, [r0, r7]
 80070d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070d8:	462f      	mov	r7, r5
 80070da:	42bb      	cmp	r3, r7
 80070dc:	460d      	mov	r5, r1
 80070de:	d9f4      	bls.n	80070ca <_printf_i+0x11a>
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d10b      	bne.n	80070fc <_printf_i+0x14c>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	07df      	lsls	r7, r3, #31
 80070e8:	d508      	bpl.n	80070fc <_printf_i+0x14c>
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	6861      	ldr	r1, [r4, #4]
 80070ee:	4299      	cmp	r1, r3
 80070f0:	bfde      	ittt	le
 80070f2:	2330      	movle	r3, #48	; 0x30
 80070f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070fc:	1b92      	subs	r2, r2, r6
 80070fe:	6122      	str	r2, [r4, #16]
 8007100:	f8cd a000 	str.w	sl, [sp]
 8007104:	464b      	mov	r3, r9
 8007106:	aa03      	add	r2, sp, #12
 8007108:	4621      	mov	r1, r4
 800710a:	4640      	mov	r0, r8
 800710c:	f7ff fee2 	bl	8006ed4 <_printf_common>
 8007110:	3001      	adds	r0, #1
 8007112:	d14c      	bne.n	80071ae <_printf_i+0x1fe>
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	b004      	add	sp, #16
 800711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711e:	4835      	ldr	r0, [pc, #212]	; (80071f4 <_printf_i+0x244>)
 8007120:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	680e      	ldr	r6, [r1, #0]
 8007128:	061f      	lsls	r7, r3, #24
 800712a:	f856 5b04 	ldr.w	r5, [r6], #4
 800712e:	600e      	str	r6, [r1, #0]
 8007130:	d514      	bpl.n	800715c <_printf_i+0x1ac>
 8007132:	07d9      	lsls	r1, r3, #31
 8007134:	bf44      	itt	mi
 8007136:	f043 0320 	orrmi.w	r3, r3, #32
 800713a:	6023      	strmi	r3, [r4, #0]
 800713c:	b91d      	cbnz	r5, 8007146 <_printf_i+0x196>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	f023 0320 	bic.w	r3, r3, #32
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	2310      	movs	r3, #16
 8007148:	e7b0      	b.n	80070ac <_printf_i+0xfc>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	f043 0320 	orr.w	r3, r3, #32
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	2378      	movs	r3, #120	; 0x78
 8007154:	4828      	ldr	r0, [pc, #160]	; (80071f8 <_printf_i+0x248>)
 8007156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800715a:	e7e3      	b.n	8007124 <_printf_i+0x174>
 800715c:	065e      	lsls	r6, r3, #25
 800715e:	bf48      	it	mi
 8007160:	b2ad      	uxthmi	r5, r5
 8007162:	e7e6      	b.n	8007132 <_printf_i+0x182>
 8007164:	4616      	mov	r6, r2
 8007166:	e7bb      	b.n	80070e0 <_printf_i+0x130>
 8007168:	680b      	ldr	r3, [r1, #0]
 800716a:	6826      	ldr	r6, [r4, #0]
 800716c:	6960      	ldr	r0, [r4, #20]
 800716e:	1d1d      	adds	r5, r3, #4
 8007170:	600d      	str	r5, [r1, #0]
 8007172:	0635      	lsls	r5, r6, #24
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	d501      	bpl.n	800717c <_printf_i+0x1cc>
 8007178:	6018      	str	r0, [r3, #0]
 800717a:	e002      	b.n	8007182 <_printf_i+0x1d2>
 800717c:	0671      	lsls	r1, r6, #25
 800717e:	d5fb      	bpl.n	8007178 <_printf_i+0x1c8>
 8007180:	8018      	strh	r0, [r3, #0]
 8007182:	2300      	movs	r3, #0
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	4616      	mov	r6, r2
 8007188:	e7ba      	b.n	8007100 <_printf_i+0x150>
 800718a:	680b      	ldr	r3, [r1, #0]
 800718c:	1d1a      	adds	r2, r3, #4
 800718e:	600a      	str	r2, [r1, #0]
 8007190:	681e      	ldr	r6, [r3, #0]
 8007192:	6862      	ldr	r2, [r4, #4]
 8007194:	2100      	movs	r1, #0
 8007196:	4630      	mov	r0, r6
 8007198:	f7f9 f84a 	bl	8000230 <memchr>
 800719c:	b108      	cbz	r0, 80071a2 <_printf_i+0x1f2>
 800719e:	1b80      	subs	r0, r0, r6
 80071a0:	6060      	str	r0, [r4, #4]
 80071a2:	6863      	ldr	r3, [r4, #4]
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	2300      	movs	r3, #0
 80071a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ac:	e7a8      	b.n	8007100 <_printf_i+0x150>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	4632      	mov	r2, r6
 80071b2:	4649      	mov	r1, r9
 80071b4:	4640      	mov	r0, r8
 80071b6:	47d0      	blx	sl
 80071b8:	3001      	adds	r0, #1
 80071ba:	d0ab      	beq.n	8007114 <_printf_i+0x164>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	079b      	lsls	r3, r3, #30
 80071c0:	d413      	bmi.n	80071ea <_printf_i+0x23a>
 80071c2:	68e0      	ldr	r0, [r4, #12]
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	4298      	cmp	r0, r3
 80071c8:	bfb8      	it	lt
 80071ca:	4618      	movlt	r0, r3
 80071cc:	e7a4      	b.n	8007118 <_printf_i+0x168>
 80071ce:	2301      	movs	r3, #1
 80071d0:	4632      	mov	r2, r6
 80071d2:	4649      	mov	r1, r9
 80071d4:	4640      	mov	r0, r8
 80071d6:	47d0      	blx	sl
 80071d8:	3001      	adds	r0, #1
 80071da:	d09b      	beq.n	8007114 <_printf_i+0x164>
 80071dc:	3501      	adds	r5, #1
 80071de:	68e3      	ldr	r3, [r4, #12]
 80071e0:	9903      	ldr	r1, [sp, #12]
 80071e2:	1a5b      	subs	r3, r3, r1
 80071e4:	42ab      	cmp	r3, r5
 80071e6:	dcf2      	bgt.n	80071ce <_printf_i+0x21e>
 80071e8:	e7eb      	b.n	80071c2 <_printf_i+0x212>
 80071ea:	2500      	movs	r5, #0
 80071ec:	f104 0619 	add.w	r6, r4, #25
 80071f0:	e7f5      	b.n	80071de <_printf_i+0x22e>
 80071f2:	bf00      	nop
 80071f4:	0800753d 	.word	0x0800753d
 80071f8:	0800754e 	.word	0x0800754e

080071fc <memmove>:
 80071fc:	4288      	cmp	r0, r1
 80071fe:	b510      	push	{r4, lr}
 8007200:	eb01 0402 	add.w	r4, r1, r2
 8007204:	d902      	bls.n	800720c <memmove+0x10>
 8007206:	4284      	cmp	r4, r0
 8007208:	4623      	mov	r3, r4
 800720a:	d807      	bhi.n	800721c <memmove+0x20>
 800720c:	1e43      	subs	r3, r0, #1
 800720e:	42a1      	cmp	r1, r4
 8007210:	d008      	beq.n	8007224 <memmove+0x28>
 8007212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800721a:	e7f8      	b.n	800720e <memmove+0x12>
 800721c:	4402      	add	r2, r0
 800721e:	4601      	mov	r1, r0
 8007220:	428a      	cmp	r2, r1
 8007222:	d100      	bne.n	8007226 <memmove+0x2a>
 8007224:	bd10      	pop	{r4, pc}
 8007226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800722a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800722e:	e7f7      	b.n	8007220 <memmove+0x24>

08007230 <_free_r>:
 8007230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007232:	2900      	cmp	r1, #0
 8007234:	d048      	beq.n	80072c8 <_free_r+0x98>
 8007236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800723a:	9001      	str	r0, [sp, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f1a1 0404 	sub.w	r4, r1, #4
 8007242:	bfb8      	it	lt
 8007244:	18e4      	addlt	r4, r4, r3
 8007246:	f000 f8d3 	bl	80073f0 <__malloc_lock>
 800724a:	4a20      	ldr	r2, [pc, #128]	; (80072cc <_free_r+0x9c>)
 800724c:	9801      	ldr	r0, [sp, #4]
 800724e:	6813      	ldr	r3, [r2, #0]
 8007250:	4615      	mov	r5, r2
 8007252:	b933      	cbnz	r3, 8007262 <_free_r+0x32>
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	6014      	str	r4, [r2, #0]
 8007258:	b003      	add	sp, #12
 800725a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800725e:	f000 b8cd 	b.w	80073fc <__malloc_unlock>
 8007262:	42a3      	cmp	r3, r4
 8007264:	d90b      	bls.n	800727e <_free_r+0x4e>
 8007266:	6821      	ldr	r1, [r4, #0]
 8007268:	1862      	adds	r2, r4, r1
 800726a:	4293      	cmp	r3, r2
 800726c:	bf04      	itt	eq
 800726e:	681a      	ldreq	r2, [r3, #0]
 8007270:	685b      	ldreq	r3, [r3, #4]
 8007272:	6063      	str	r3, [r4, #4]
 8007274:	bf04      	itt	eq
 8007276:	1852      	addeq	r2, r2, r1
 8007278:	6022      	streq	r2, [r4, #0]
 800727a:	602c      	str	r4, [r5, #0]
 800727c:	e7ec      	b.n	8007258 <_free_r+0x28>
 800727e:	461a      	mov	r2, r3
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	b10b      	cbz	r3, 8007288 <_free_r+0x58>
 8007284:	42a3      	cmp	r3, r4
 8007286:	d9fa      	bls.n	800727e <_free_r+0x4e>
 8007288:	6811      	ldr	r1, [r2, #0]
 800728a:	1855      	adds	r5, r2, r1
 800728c:	42a5      	cmp	r5, r4
 800728e:	d10b      	bne.n	80072a8 <_free_r+0x78>
 8007290:	6824      	ldr	r4, [r4, #0]
 8007292:	4421      	add	r1, r4
 8007294:	1854      	adds	r4, r2, r1
 8007296:	42a3      	cmp	r3, r4
 8007298:	6011      	str	r1, [r2, #0]
 800729a:	d1dd      	bne.n	8007258 <_free_r+0x28>
 800729c:	681c      	ldr	r4, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	6053      	str	r3, [r2, #4]
 80072a2:	4421      	add	r1, r4
 80072a4:	6011      	str	r1, [r2, #0]
 80072a6:	e7d7      	b.n	8007258 <_free_r+0x28>
 80072a8:	d902      	bls.n	80072b0 <_free_r+0x80>
 80072aa:	230c      	movs	r3, #12
 80072ac:	6003      	str	r3, [r0, #0]
 80072ae:	e7d3      	b.n	8007258 <_free_r+0x28>
 80072b0:	6825      	ldr	r5, [r4, #0]
 80072b2:	1961      	adds	r1, r4, r5
 80072b4:	428b      	cmp	r3, r1
 80072b6:	bf04      	itt	eq
 80072b8:	6819      	ldreq	r1, [r3, #0]
 80072ba:	685b      	ldreq	r3, [r3, #4]
 80072bc:	6063      	str	r3, [r4, #4]
 80072be:	bf04      	itt	eq
 80072c0:	1949      	addeq	r1, r1, r5
 80072c2:	6021      	streq	r1, [r4, #0]
 80072c4:	6054      	str	r4, [r2, #4]
 80072c6:	e7c7      	b.n	8007258 <_free_r+0x28>
 80072c8:	b003      	add	sp, #12
 80072ca:	bd30      	pop	{r4, r5, pc}
 80072cc:	20004090 	.word	0x20004090

080072d0 <_malloc_r>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	1ccd      	adds	r5, r1, #3
 80072d4:	f025 0503 	bic.w	r5, r5, #3
 80072d8:	3508      	adds	r5, #8
 80072da:	2d0c      	cmp	r5, #12
 80072dc:	bf38      	it	cc
 80072de:	250c      	movcc	r5, #12
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	4606      	mov	r6, r0
 80072e4:	db01      	blt.n	80072ea <_malloc_r+0x1a>
 80072e6:	42a9      	cmp	r1, r5
 80072e8:	d903      	bls.n	80072f2 <_malloc_r+0x22>
 80072ea:	230c      	movs	r3, #12
 80072ec:	6033      	str	r3, [r6, #0]
 80072ee:	2000      	movs	r0, #0
 80072f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f2:	f000 f87d 	bl	80073f0 <__malloc_lock>
 80072f6:	4921      	ldr	r1, [pc, #132]	; (800737c <_malloc_r+0xac>)
 80072f8:	680a      	ldr	r2, [r1, #0]
 80072fa:	4614      	mov	r4, r2
 80072fc:	b99c      	cbnz	r4, 8007326 <_malloc_r+0x56>
 80072fe:	4f20      	ldr	r7, [pc, #128]	; (8007380 <_malloc_r+0xb0>)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	b923      	cbnz	r3, 800730e <_malloc_r+0x3e>
 8007304:	4621      	mov	r1, r4
 8007306:	4630      	mov	r0, r6
 8007308:	f000 f862 	bl	80073d0 <_sbrk_r>
 800730c:	6038      	str	r0, [r7, #0]
 800730e:	4629      	mov	r1, r5
 8007310:	4630      	mov	r0, r6
 8007312:	f000 f85d 	bl	80073d0 <_sbrk_r>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	d123      	bne.n	8007362 <_malloc_r+0x92>
 800731a:	230c      	movs	r3, #12
 800731c:	6033      	str	r3, [r6, #0]
 800731e:	4630      	mov	r0, r6
 8007320:	f000 f86c 	bl	80073fc <__malloc_unlock>
 8007324:	e7e3      	b.n	80072ee <_malloc_r+0x1e>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	1b5b      	subs	r3, r3, r5
 800732a:	d417      	bmi.n	800735c <_malloc_r+0x8c>
 800732c:	2b0b      	cmp	r3, #11
 800732e:	d903      	bls.n	8007338 <_malloc_r+0x68>
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	441c      	add	r4, r3
 8007334:	6025      	str	r5, [r4, #0]
 8007336:	e004      	b.n	8007342 <_malloc_r+0x72>
 8007338:	6863      	ldr	r3, [r4, #4]
 800733a:	42a2      	cmp	r2, r4
 800733c:	bf0c      	ite	eq
 800733e:	600b      	streq	r3, [r1, #0]
 8007340:	6053      	strne	r3, [r2, #4]
 8007342:	4630      	mov	r0, r6
 8007344:	f000 f85a 	bl	80073fc <__malloc_unlock>
 8007348:	f104 000b 	add.w	r0, r4, #11
 800734c:	1d23      	adds	r3, r4, #4
 800734e:	f020 0007 	bic.w	r0, r0, #7
 8007352:	1ac2      	subs	r2, r0, r3
 8007354:	d0cc      	beq.n	80072f0 <_malloc_r+0x20>
 8007356:	1a1b      	subs	r3, r3, r0
 8007358:	50a3      	str	r3, [r4, r2]
 800735a:	e7c9      	b.n	80072f0 <_malloc_r+0x20>
 800735c:	4622      	mov	r2, r4
 800735e:	6864      	ldr	r4, [r4, #4]
 8007360:	e7cc      	b.n	80072fc <_malloc_r+0x2c>
 8007362:	1cc4      	adds	r4, r0, #3
 8007364:	f024 0403 	bic.w	r4, r4, #3
 8007368:	42a0      	cmp	r0, r4
 800736a:	d0e3      	beq.n	8007334 <_malloc_r+0x64>
 800736c:	1a21      	subs	r1, r4, r0
 800736e:	4630      	mov	r0, r6
 8007370:	f000 f82e 	bl	80073d0 <_sbrk_r>
 8007374:	3001      	adds	r0, #1
 8007376:	d1dd      	bne.n	8007334 <_malloc_r+0x64>
 8007378:	e7cf      	b.n	800731a <_malloc_r+0x4a>
 800737a:	bf00      	nop
 800737c:	20004090 	.word	0x20004090
 8007380:	20004094 	.word	0x20004094

08007384 <_realloc_r>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	4607      	mov	r7, r0
 8007388:	4614      	mov	r4, r2
 800738a:	460e      	mov	r6, r1
 800738c:	b921      	cbnz	r1, 8007398 <_realloc_r+0x14>
 800738e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007392:	4611      	mov	r1, r2
 8007394:	f7ff bf9c 	b.w	80072d0 <_malloc_r>
 8007398:	b922      	cbnz	r2, 80073a4 <_realloc_r+0x20>
 800739a:	f7ff ff49 	bl	8007230 <_free_r>
 800739e:	4625      	mov	r5, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a4:	f000 f830 	bl	8007408 <_malloc_usable_size_r>
 80073a8:	42a0      	cmp	r0, r4
 80073aa:	d20f      	bcs.n	80073cc <_realloc_r+0x48>
 80073ac:	4621      	mov	r1, r4
 80073ae:	4638      	mov	r0, r7
 80073b0:	f7ff ff8e 	bl	80072d0 <_malloc_r>
 80073b4:	4605      	mov	r5, r0
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d0f2      	beq.n	80073a0 <_realloc_r+0x1c>
 80073ba:	4631      	mov	r1, r6
 80073bc:	4622      	mov	r2, r4
 80073be:	f7ff fbf7 	bl	8006bb0 <memcpy>
 80073c2:	4631      	mov	r1, r6
 80073c4:	4638      	mov	r0, r7
 80073c6:	f7ff ff33 	bl	8007230 <_free_r>
 80073ca:	e7e9      	b.n	80073a0 <_realloc_r+0x1c>
 80073cc:	4635      	mov	r5, r6
 80073ce:	e7e7      	b.n	80073a0 <_realloc_r+0x1c>

080073d0 <_sbrk_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d06      	ldr	r5, [pc, #24]	; (80073ec <_sbrk_r+0x1c>)
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	f7fb f9ea 	bl	80027b4 <_sbrk>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_sbrk_r+0x1a>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_sbrk_r+0x1a>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	2000422c 	.word	0x2000422c

080073f0 <__malloc_lock>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__malloc_lock+0x8>)
 80073f2:	f000 b811 	b.w	8007418 <__retarget_lock_acquire_recursive>
 80073f6:	bf00      	nop
 80073f8:	20004234 	.word	0x20004234

080073fc <__malloc_unlock>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__malloc_unlock+0x8>)
 80073fe:	f000 b80c 	b.w	800741a <__retarget_lock_release_recursive>
 8007402:	bf00      	nop
 8007404:	20004234 	.word	0x20004234

08007408 <_malloc_usable_size_r>:
 8007408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740c:	1f18      	subs	r0, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	bfbc      	itt	lt
 8007412:	580b      	ldrlt	r3, [r1, r0]
 8007414:	18c0      	addlt	r0, r0, r3
 8007416:	4770      	bx	lr

08007418 <__retarget_lock_acquire_recursive>:
 8007418:	4770      	bx	lr

0800741a <__retarget_lock_release_recursive>:
 800741a:	4770      	bx	lr

0800741c <_init>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr

08007428 <_fini>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr
