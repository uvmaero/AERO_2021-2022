ARM GAS  /tmp/cc7QEIJt.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB226:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Dash Control Board Firmware
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   * 
   9:Core/Src/main.c ****   * This is the code for the dash board. This reads all of the sensor data, reads and 
  10:Core/Src/main.c ****   * sends CAN messages, and drives the LCD screen on the dashboard.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  13:Core/Src/main.c ****   * All rights reserved.
  14:Core/Src/main.c ****   *
  15:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  16:Core/Src/main.c ****   * in the root directory of this software component.
  17:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  18:Core/Src/main.c ****   *
  19:Core/Src/main.c ****   ******************************************************************************
  20:Core/Src/main.c ****   */
  21:Core/Src/main.c **** /* USER CODE END Header */
  22:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  23:Core/Src/main.c **** #include "main.h"
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/main.c **** #include <math.h>
  28:Core/Src/main.c **** #include <stdio.h>
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END Includes */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/cc7QEIJt.s 			page 2


  32:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/main.c **** /* USER CODE END PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** // inputs
  40:Core/Src/main.c **** #define ADC_BUF_LEN 4				      // length of dma adc buffer
  41:Core/Src/main.c **** #define MAX_PEDAL_SKEW 36         // this is the square of the difference allowed
  42:Core/Src/main.c **** #define MAX_COMMAND_TORQUE 100    // Nm of torque allowed. Pedal scales this value
  43:Core/Src/main.c **** #define ADC_BIT_SIZE 1024         // 10 bit sample, so it's 1024 values
  44:Core/Src/main.c **** /* USER CODE END PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PM */
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  52:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** TIM_HandleTypeDef htim13;
  57:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE BEGIN PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** // pedal conversion ratio
  62:Core/Src/main.c **** float torque_conversion_ratio = (float)MAX_COMMAND_TORQUE / ADC_BIT_SIZE;
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** // CAN
  65:Core/Src/main.c **** CAN_RxHeaderTypeDef rxHeader; 					      // CAN Bus Receive Header
  66:Core/Src/main.c **** CAN_TxHeaderTypeDef txHeader1; 					      // CAN Bus Transmit Header Torque Setting
  67:Core/Src/main.c **** CAN_TxHeaderTypeDef txHeader2; 					      // CAN Bus Transmit Header DAQ Data
  68:Core/Src/main.c **** CAN_TxHeaderTypeDef txHeader3; 					      // CAN Bus Transmit Header Control Data
  69:Core/Src/main.c **** uint8_t rxData[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // CAN Bus Receive Buffer
  70:Core/Src/main.c **** uint8_t txData[8];
  71:Core/Src/main.c **** CAN_FilterTypeDef filter_rcb; 					        // CAN Bus Filter
  72:Core/Src/main.c **** uint32_t txMailbox; 							            // CAN Bus Mail box variable
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** // rinehart & emus  
  75:Core/Src/main.c **** float rinehartVoltage = 0;				  		      // voltage in rinehart
  76:Core/Src/main.c **** float emusVoltage = 0;				  			        // emus bus voltage
  77:Core/Src/main.c **** int readyToDrive = 0;							            // ready to drive (0 = no, 1 = yes)
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** // inputs 
  80:Core/Src/main.c **** float coastRegen, brakeRegen;			    	      // coast and brake regen values 
  81:Core/Src/main.c **** uint8_t pedal0=0, pedal1=0;                 			  // pedal values
  82:Core/Src/main.c **** uint8_t pedal_average;
  83:Core/Src/main.c **** uint8_t brake0=0, brake1=0;                		  	  // brake values
  84:Core/Src/main.c **** uint8_t brake_average;
  85:Core/Src/main.c **** uint8_t coastMap, brakeMap;						        // maps for coast and brake regen
  86:Core/Src/main.c **** float wheelSpeedFR = 0;               			  // read from sensor input
  87:Core/Src/main.c **** float wheelSpeedFL = 0;               			  // read from sensor input
  88:Core/Src/main.c **** float wheelSpeedBR = 0;               			  // this needs to be retrieved from CAN
ARM GAS  /tmp/cc7QEIJt.s 			page 3


  89:Core/Src/main.c **** float wheelSpeedBL = 0;               			  // this needs to be retrieved from CAN
  90:Core/Src/main.c **** float rideHeightFR = 0;               			  // read from sensor input
  91:Core/Src/main.c **** float rideHeightFL = 0;               			  // read from sensor input
  92:Core/Src/main.c **** float rideHeightBR = 0;               			  // this needs to be retrieved from CAN
  93:Core/Src/main.c **** float rideHeightBL = 0;               			  // this needs to be retrieved from CAN
  94:Core/Src/main.c **** uint8_t startButton = 0;             				  // start button state (0 is not active)
  95:Core/Src/main.c **** uint16_t adc_buf[ADC_BUF_LEN];                // adc buffer for dma
  96:Core/Src/main.c **** uint8_t faultAMS = 0;                         // updated from RCB CAN
  97:Core/Src/main.c **** uint8_t faultIMD = 0;                         // updated from RCB CAN
  98:Core/Src/main.c **** uint16_t commandedTorque = 0;                  // amount of torque we're requesting from Rinehart
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** // outputs
 101:Core/Src/main.c **** uint8_t startButtonState = 0;              			  // RTD button LED toggle (0 is off)
 102:Core/Src/main.c **** uint8_t coolingState = 0;                     		// cooling toggle (0 is off)
 103:Core/Src/main.c **** uint8_t direction = 0;		                		    // drive direction (0 is forwards)
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END PV */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 108:Core/Src/main.c **** void SystemClock_Config(void);
 109:Core/Src/main.c **** static void MX_GPIO_Init(void);
 110:Core/Src/main.c **** static void MX_ADC1_Init(void);
 111:Core/Src/main.c **** static void MX_CAN1_Init(void);
 112:Core/Src/main.c **** static void MX_DMA_Init(void);
 113:Core/Src/main.c **** static void MX_TIM13_Init(void);
 114:Core/Src/main.c **** static void MX_TIM14_Init(void);
 115:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /* USER CODE END PFP */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 120:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** // compares accelerator pedal, 0 if above skew value
 123:Core/Src/main.c **** uint8_t accel_pedal_compare(uint8_t pedal0, uint8_t pedal1); 
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** /* USER CODE END 0 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /**
 128:Core/Src/main.c ****   * @brief  The application entry point.
 129:Core/Src/main.c ****   * @retval int
 130:Core/Src/main.c ****   */
 131:Core/Src/main.c **** int main(void)
 132:Core/Src/main.c **** {
 133:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 134:Core/Src/main.c ****   /* USER CODE END 1 */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 139:Core/Src/main.c ****   HAL_Init();
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 142:Core/Src/main.c ****   /* USER CODE END Init */
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* Configure the system clock */
 145:Core/Src/main.c ****   SystemClock_Config();
ARM GAS  /tmp/cc7QEIJt.s 			page 4


 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 148:Core/Src/main.c ****   /* USER CODE END SysInit */
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /* Initialize all configured peripherals */
 151:Core/Src/main.c ****   MX_GPIO_Init();
 152:Core/Src/main.c ****   MX_ADC1_Init();
 153:Core/Src/main.c ****   MX_CAN1_Init();
 154:Core/Src/main.c ****   MX_DMA_Init();
 155:Core/Src/main.c ****   MX_TIM13_Init();
 156:Core/Src/main.c ****   MX_TIM14_Init();
 157:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** 	// init the CAN mailbox for Rinehart Command Torque Parameters
 160:Core/Src/main.c **** 	txHeader1.DLC = 8; // Number of bites to be transmitted max- 8
 161:Core/Src/main.c **** 	txHeader1.IDE = CAN_ID_STD;
 162:Core/Src/main.c **** 	txHeader1.RTR = CAN_RTR_DATA;
 163:Core/Src/main.c **** 	txHeader1.StdId = 0xC0;
 164:Core/Src/main.c **** 	txHeader1.ExtId = 0;
 165:Core/Src/main.c **** 	txHeader1.TransmitGlobalTime = DISABLE;
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** 	// init the CAN mailbox for DAQ Data
 168:Core/Src/main.c **** 	txHeader2.DLC = 8; // Number of bites to be transmitted max- 8
 169:Core/Src/main.c **** 	txHeader2.IDE = CAN_ID_STD;
 170:Core/Src/main.c **** 	txHeader2.RTR = CAN_RTR_DATA;
 171:Core/Src/main.c **** 	txHeader2.StdId = 0x92;
 172:Core/Src/main.c **** 	txHeader2.ExtId = 0;
 173:Core/Src/main.c **** 	txHeader2.TransmitGlobalTime = DISABLE;
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** 	// init the CAN mailbox for Control Data
 176:Core/Src/main.c **** 	txHeader3.DLC = 8; // Number of bites to be transmitted max- 8
 177:Core/Src/main.c **** 	txHeader3.IDE = CAN_ID_STD;
 178:Core/Src/main.c **** 	txHeader3.RTR = CAN_RTR_DATA;
 179:Core/Src/main.c **** 	txHeader3.StdId = 0x93;
 180:Core/Src/main.c **** 	txHeader3.ExtId = 0;
 181:Core/Src/main.c **** 	txHeader3.TransmitGlobalTime = DISABLE;
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** 	HAL_CAN_ConfigFilter(&hcan1, &filter_rcb); // Initialize CAN Filter
 184:Core/Src/main.c **** 	HAL_CAN_Start(&hcan1); // Initialize CAN Bus
 185:Core/Src/main.c **** 	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Inte
 186:Core/Src/main.c **** 
 187:Core/Src/main.c **** 	// start the dma adc conversion
 188:Core/Src/main.c **** 	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 189:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13); // start the timer interupt
 190:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14); // start the timer interupt
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* USER CODE END 2 */
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* Infinite loop */
 196:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 197:Core/Src/main.c ****   while (1)
 198:Core/Src/main.c ****   {
 199:Core/Src/main.c **** 	// all of the main loop code is in the defaultTask function as the infinite loop is in there
 200:Core/Src/main.c ****     /* USER CODE END WHILE */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
ARM GAS  /tmp/cc7QEIJt.s 			page 5


 203:Core/Src/main.c ****   }
 204:Core/Src/main.c ****   /* USER CODE END 3 */
 205:Core/Src/main.c **** }
 206:Core/Src/main.c **** 
 207:Core/Src/main.c **** /**
 208:Core/Src/main.c ****   * @brief System Clock Configuration
 209:Core/Src/main.c ****   * @retval None
 210:Core/Src/main.c ****   */
 211:Core/Src/main.c **** void SystemClock_Config(void)
 212:Core/Src/main.c **** {
 213:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 214:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 217:Core/Src/main.c ****   */
 218:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 220:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 221:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 224:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 225:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 233:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 234:Core/Src/main.c ****   {
 235:Core/Src/main.c ****     Error_Handler();
 236:Core/Src/main.c ****   }
 237:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 238:Core/Src/main.c ****   */
 239:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 240:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 241:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 242:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 243:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 244:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 247:Core/Src/main.c ****   {
 248:Core/Src/main.c ****     Error_Handler();
 249:Core/Src/main.c ****   }
 250:Core/Src/main.c **** }
 251:Core/Src/main.c **** 
 252:Core/Src/main.c **** /**
 253:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 254:Core/Src/main.c ****   * @param None
 255:Core/Src/main.c ****   * @retval None
 256:Core/Src/main.c ****   */
 257:Core/Src/main.c **** static void MX_ADC1_Init(void)
 258:Core/Src/main.c **** {
 259:Core/Src/main.c **** 
ARM GAS  /tmp/cc7QEIJt.s 			page 6


 260:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 261:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 266:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 267:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 268:Core/Src/main.c ****   */
 269:Core/Src/main.c ****   hadc1.Instance = ADC1;
 270:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 271:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 272:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 273:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 274:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 275:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 276:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 277:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 278:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 279:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 280:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 281:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 282:Core/Src/main.c ****   {
 283:Core/Src/main.c ****     Error_Handler();
 284:Core/Src/main.c ****   }
 285:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 286:Core/Src/main.c ****   */
 287:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 288:Core/Src/main.c ****   sConfig.Rank = 1;
 289:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 290:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****     Error_Handler();
 293:Core/Src/main.c ****   }
 294:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 295:Core/Src/main.c ****   */
 296:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 297:Core/Src/main.c ****   sConfig.Rank = 2;
 298:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 299:Core/Src/main.c ****   {
 300:Core/Src/main.c ****     Error_Handler();
 301:Core/Src/main.c ****   }
 302:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 303:Core/Src/main.c ****   */
 304:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 305:Core/Src/main.c ****   sConfig.Rank = 3;
 306:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 307:Core/Src/main.c ****   {
 308:Core/Src/main.c ****     Error_Handler();
 309:Core/Src/main.c ****   }
 310:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 311:Core/Src/main.c ****   */
 312:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
 313:Core/Src/main.c ****   sConfig.Rank = 4;
 314:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 315:Core/Src/main.c ****   {
 316:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/cc7QEIJt.s 			page 7


 317:Core/Src/main.c ****   }
 318:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 319:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c **** }
 322:Core/Src/main.c **** 
 323:Core/Src/main.c **** /**
 324:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 325:Core/Src/main.c ****   * @param None
 326:Core/Src/main.c ****   * @retval None
 327:Core/Src/main.c ****   */
 328:Core/Src/main.c **** static void MX_CAN1_Init(void)
 329:Core/Src/main.c **** {
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 332:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 335:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 336:Core/Src/main.c ****   hcan1.Instance = CAN1;
 337:Core/Src/main.c ****   hcan1.Init.Prescaler = 5;
 338:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 339:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 340:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 341:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 342:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 343:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 344:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 345:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 346:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 347:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 348:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 349:Core/Src/main.c ****   {
 350:Core/Src/main.c ****     Error_Handler();
 351:Core/Src/main.c ****   }
 352:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****     // init the CAN filter
 355:Core/Src/main.c **** 	filter_rcb.FilterBank = 0;
 356:Core/Src/main.c **** 	filter_rcb.FilterMode = CAN_FILTERMODE_IDMASK;
 357:Core/Src/main.c **** 	filter_rcb.FilterFIFOAssignment = CAN_RX_FIFO0;
 358:Core/Src/main.c **** 	filter_rcb.FilterIdHigh = 0x0FF << 5;
 359:Core/Src/main.c **** 	filter_rcb.FilterIdLow = 0x082 << 5;
 360:Core/Src/main.c **** 	filter_rcb.FilterMaskIdHigh = 0x082 << 5;
 361:Core/Src/main.c **** 	filter_rcb.FilterMaskIdLow = 0xFFF << 5;
 362:Core/Src/main.c **** 	filter_rcb.FilterScale = CAN_FILTERSCALE_32BIT;
 363:Core/Src/main.c **** 	filter_rcb.FilterActivation = ENABLE;
 364:Core/Src/main.c **** 	filter_rcb.SlaveStartFilterBank = 0;
 365:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c **** }
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** /**
 370:Core/Src/main.c ****   * @brief TIM13 Initialization Function
 371:Core/Src/main.c ****   * @param None
 372:Core/Src/main.c ****   * @retval None
 373:Core/Src/main.c ****   */
ARM GAS  /tmp/cc7QEIJt.s 			page 8


 374:Core/Src/main.c **** static void MX_TIM13_Init(void)
 375:Core/Src/main.c **** {
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 0 */
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /* USER CODE END TIM13_Init 0 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 1 */
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /* USER CODE END TIM13_Init 1 */
 384:Core/Src/main.c ****   htim13.Instance = TIM13;
 385:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 386:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 387:Core/Src/main.c ****   htim13.Init.Period = 1000-1;
 388:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 389:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 390:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 391:Core/Src/main.c ****   {
 392:Core/Src/main.c ****     Error_Handler();
 393:Core/Src/main.c ****   }
 394:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 2 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE END TIM13_Init 2 */
 397:Core/Src/main.c **** 
 398:Core/Src/main.c **** }
 399:Core/Src/main.c **** 
 400:Core/Src/main.c **** /**
 401:Core/Src/main.c ****   * @brief TIM14 Initialization Function
 402:Core/Src/main.c ****   * @param None
 403:Core/Src/main.c ****   * @retval None
 404:Core/Src/main.c ****   */
 405:Core/Src/main.c **** static void MX_TIM14_Init(void)
 406:Core/Src/main.c **** {
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
 413:Core/Src/main.c **** 
 414:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
 415:Core/Src/main.c ****   htim14.Instance = TIM14;
 416:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 417:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 418:Core/Src/main.c ****   htim14.Init.Period = 500-1;
 419:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 420:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 421:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 422:Core/Src/main.c ****   {
 423:Core/Src/main.c ****     Error_Handler();
 424:Core/Src/main.c ****   }
 425:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
 428:Core/Src/main.c **** 
 429:Core/Src/main.c **** }
 430:Core/Src/main.c **** 
ARM GAS  /tmp/cc7QEIJt.s 			page 9


 431:Core/Src/main.c **** /**
 432:Core/Src/main.c ****   * Enable DMA controller clock
 433:Core/Src/main.c ****   */
 434:Core/Src/main.c **** static void MX_DMA_Init(void)
 435:Core/Src/main.c **** {
 436:Core/Src/main.c **** 
 437:Core/Src/main.c ****   /* DMA controller clock enable */
 438:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 439:Core/Src/main.c **** 
 440:Core/Src/main.c ****   /* DMA interrupt init */
 441:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 442:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 443:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 444:Core/Src/main.c **** 
 445:Core/Src/main.c **** }
 446:Core/Src/main.c **** 
 447:Core/Src/main.c **** /**
 448:Core/Src/main.c ****   * @brief GPIO Initialization Function
 449:Core/Src/main.c ****   * @param None
 450:Core/Src/main.c ****   * @retval None
 451:Core/Src/main.c ****   */
 452:Core/Src/main.c **** static void MX_GPIO_Init(void)
 453:Core/Src/main.c **** {
  28              		.loc 1 453 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 56
 454:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 454 3 view .LVU1
  44              		.loc 1 454 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0394     		str	r4, [sp, #12]
  47 0008 0494     		str	r4, [sp, #16]
  48 000a 0594     		str	r4, [sp, #20]
  49 000c 0694     		str	r4, [sp, #24]
  50 000e 0794     		str	r4, [sp, #28]
 455:Core/Src/main.c **** 
 456:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 457:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 457 3 is_stmt 1 view .LVU3
  52              	.LBB4:
  53              		.loc 1 457 3 view .LVU4
  54 0010 0094     		str	r4, [sp]
  55              		.loc 1 457 3 view .LVU5
  56 0012 264B     		ldr	r3, .L3
  57 0014 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/cc7QEIJt.s 			page 10


  58 0016 42F08002 		orr	r2, r2, #128
  59 001a 1A63     		str	r2, [r3, #48]
  60              		.loc 1 457 3 view .LVU6
  61 001c 1A6B     		ldr	r2, [r3, #48]
  62 001e 02F08002 		and	r2, r2, #128
  63 0022 0092     		str	r2, [sp]
  64              		.loc 1 457 3 view .LVU7
  65 0024 009A     		ldr	r2, [sp]
  66              	.LBE4:
  67              		.loc 1 457 3 view .LVU8
 458:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  68              		.loc 1 458 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 458 3 view .LVU10
  71 0026 0194     		str	r4, [sp, #4]
  72              		.loc 1 458 3 view .LVU11
  73 0028 1A6B     		ldr	r2, [r3, #48]
  74 002a 42F00102 		orr	r2, r2, #1
  75 002e 1A63     		str	r2, [r3, #48]
  76              		.loc 1 458 3 view .LVU12
  77 0030 1A6B     		ldr	r2, [r3, #48]
  78 0032 02F00102 		and	r2, r2, #1
  79 0036 0192     		str	r2, [sp, #4]
  80              		.loc 1 458 3 view .LVU13
  81 0038 019A     		ldr	r2, [sp, #4]
  82              	.LBE5:
  83              		.loc 1 458 3 view .LVU14
 459:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  84              		.loc 1 459 3 view .LVU15
  85              	.LBB6:
  86              		.loc 1 459 3 view .LVU16
  87 003a 0294     		str	r4, [sp, #8]
  88              		.loc 1 459 3 view .LVU17
  89 003c 1A6B     		ldr	r2, [r3, #48]
  90 003e 42F00202 		orr	r2, r2, #2
  91 0042 1A63     		str	r2, [r3, #48]
  92              		.loc 1 459 3 view .LVU18
  93 0044 1B6B     		ldr	r3, [r3, #48]
  94 0046 03F00203 		and	r3, r3, #2
  95 004a 0293     		str	r3, [sp, #8]
  96              		.loc 1 459 3 view .LVU19
  97 004c 029B     		ldr	r3, [sp, #8]
  98              	.LBE6:
  99              		.loc 1 459 3 view .LVU20
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 462:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_8, GPIO_PIN_RESET);
 100              		.loc 1 462 3 view .LVU21
 101 004e 184D     		ldr	r5, .L3+4
 102 0050 2246     		mov	r2, r4
 103 0052 40F20451 		movw	r1, #1284
 104 0056 2846     		mov	r0, r5
 105 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 106              	.LVL0:
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 465:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
ARM GAS  /tmp/cc7QEIJt.s 			page 11


 107              		.loc 1 465 3 view .LVU22
 108 005c 154E     		ldr	r6, .L3+8
 109 005e 2246     		mov	r2, r4
 110 0060 4FF48061 		mov	r1, #1024
 111 0064 3046     		mov	r0, r6
 112 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 113              	.LVL1:
 466:Core/Src/main.c **** 
 467:Core/Src/main.c ****   /*Configure GPIO pins : PB2 PB10 PB8 */
 468:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_8;
 114              		.loc 1 468 3 view .LVU23
 115              		.loc 1 468 23 is_stmt 0 view .LVU24
 116 006a 40F20453 		movw	r3, #1284
 117 006e 0393     		str	r3, [sp, #12]
 469:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 469 3 is_stmt 1 view .LVU25
 119              		.loc 1 469 24 is_stmt 0 view .LVU26
 120 0070 0127     		movs	r7, #1
 121 0072 0497     		str	r7, [sp, #16]
 470:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 122              		.loc 1 470 3 is_stmt 1 view .LVU27
 123              		.loc 1 470 24 is_stmt 0 view .LVU28
 124 0074 0594     		str	r4, [sp, #20]
 471:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 471 3 is_stmt 1 view .LVU29
 126              		.loc 1 471 25 is_stmt 0 view .LVU30
 127 0076 0694     		str	r4, [sp, #24]
 472:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 128              		.loc 1 472 3 is_stmt 1 view .LVU31
 129 0078 03A9     		add	r1, sp, #12
 130 007a 2846     		mov	r0, r5
 131 007c FFF7FEFF 		bl	HAL_GPIO_Init
 132              	.LVL2:
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /*Configure GPIO pins : PB12 PB13 PB15 */
 475:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 133              		.loc 1 475 3 view .LVU32
 134              		.loc 1 475 23 is_stmt 0 view .LVU33
 135 0080 4FF43043 		mov	r3, #45056
 136 0084 0393     		str	r3, [sp, #12]
 476:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 137              		.loc 1 476 3 is_stmt 1 view .LVU34
 138              		.loc 1 476 24 is_stmt 0 view .LVU35
 139 0086 0494     		str	r4, [sp, #16]
 477:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 140              		.loc 1 477 3 is_stmt 1 view .LVU36
 141              		.loc 1 477 24 is_stmt 0 view .LVU37
 142 0088 0594     		str	r4, [sp, #20]
 478:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 143              		.loc 1 478 3 is_stmt 1 view .LVU38
 144 008a 03A9     		add	r1, sp, #12
 145 008c 2846     		mov	r0, r5
 146 008e FFF7FEFF 		bl	HAL_GPIO_Init
 147              	.LVL3:
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   /*Configure GPIO pin : PA10 */
 481:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
ARM GAS  /tmp/cc7QEIJt.s 			page 12


 148              		.loc 1 481 3 view .LVU39
 149              		.loc 1 481 23 is_stmt 0 view .LVU40
 150 0092 4FF48063 		mov	r3, #1024
 151 0096 0393     		str	r3, [sp, #12]
 482:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 152              		.loc 1 482 3 is_stmt 1 view .LVU41
 153              		.loc 1 482 24 is_stmt 0 view .LVU42
 154 0098 0497     		str	r7, [sp, #16]
 483:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 155              		.loc 1 483 3 is_stmt 1 view .LVU43
 156              		.loc 1 483 24 is_stmt 0 view .LVU44
 157 009a 0594     		str	r4, [sp, #20]
 484:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 158              		.loc 1 484 3 is_stmt 1 view .LVU45
 159              		.loc 1 484 25 is_stmt 0 view .LVU46
 160 009c 0694     		str	r4, [sp, #24]
 485:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 161              		.loc 1 485 3 is_stmt 1 view .LVU47
 162 009e 03A9     		add	r1, sp, #12
 163 00a0 3046     		mov	r0, r6
 164 00a2 FFF7FEFF 		bl	HAL_GPIO_Init
 165              	.LVL4:
 486:Core/Src/main.c **** 
 487:Core/Src/main.c **** }
 166              		.loc 1 487 1 is_stmt 0 view .LVU48
 167 00a6 09B0     		add	sp, sp, #36
 168              	.LCFI2:
 169              		.cfi_def_cfa_offset 20
 170              		@ sp needed
 171 00a8 F0BD     		pop	{r4, r5, r6, r7, pc}
 172              	.L4:
 173 00aa 00BF     		.align	2
 174              	.L3:
 175 00ac 00380240 		.word	1073887232
 176 00b0 00040240 		.word	1073873920
 177 00b4 00000240 		.word	1073872896
 178              		.cfi_endproc
 179              	.LFE226:
 181              		.section	.text.MX_DMA_Init,"ax",%progbits
 182              		.align	1
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu fpv4-sp-d16
 188              	MX_DMA_Init:
 189              	.LFB225:
 435:Core/Src/main.c **** 
 190              		.loc 1 435 1 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 8
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194 0000 00B5     		push	{lr}
 195              	.LCFI3:
 196              		.cfi_def_cfa_offset 4
 197              		.cfi_offset 14, -4
 198 0002 83B0     		sub	sp, sp, #12
 199              	.LCFI4:
ARM GAS  /tmp/cc7QEIJt.s 			page 13


 200              		.cfi_def_cfa_offset 16
 438:Core/Src/main.c **** 
 201              		.loc 1 438 3 view .LVU50
 202              	.LBB7:
 438:Core/Src/main.c **** 
 203              		.loc 1 438 3 view .LVU51
 204 0004 0021     		movs	r1, #0
 205 0006 0191     		str	r1, [sp, #4]
 438:Core/Src/main.c **** 
 206              		.loc 1 438 3 view .LVU52
 207 0008 094B     		ldr	r3, .L7
 208 000a 1A6B     		ldr	r2, [r3, #48]
 209 000c 42F48002 		orr	r2, r2, #4194304
 210 0010 1A63     		str	r2, [r3, #48]
 438:Core/Src/main.c **** 
 211              		.loc 1 438 3 view .LVU53
 212 0012 1B6B     		ldr	r3, [r3, #48]
 213 0014 03F48003 		and	r3, r3, #4194304
 214 0018 0193     		str	r3, [sp, #4]
 438:Core/Src/main.c **** 
 215              		.loc 1 438 3 view .LVU54
 216 001a 019B     		ldr	r3, [sp, #4]
 217              	.LBE7:
 438:Core/Src/main.c **** 
 218              		.loc 1 438 3 view .LVU55
 442:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 219              		.loc 1 442 3 view .LVU56
 220 001c 0A46     		mov	r2, r1
 221 001e 3820     		movs	r0, #56
 222 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 223              	.LVL5:
 443:Core/Src/main.c **** 
 224              		.loc 1 443 3 view .LVU57
 225 0024 3820     		movs	r0, #56
 226 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 227              	.LVL6:
 445:Core/Src/main.c **** 
 228              		.loc 1 445 1 is_stmt 0 view .LVU58
 229 002a 03B0     		add	sp, sp, #12
 230              	.LCFI5:
 231              		.cfi_def_cfa_offset 4
 232              		@ sp needed
 233 002c 5DF804FB 		ldr	pc, [sp], #4
 234              	.L8:
 235              		.align	2
 236              	.L7:
 237 0030 00380240 		.word	1073887232
 238              		.cfi_endproc
 239              	.LFE225:
 241              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 242              		.align	1
 243              		.global	HAL_TIM_PeriodElapsedCallback
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	HAL_TIM_PeriodElapsedCallback:
ARM GAS  /tmp/cc7QEIJt.s 			page 14


 250              	.LVL7:
 251              	.LFB228:
 488:Core/Src/main.c **** 
 489:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 490:Core/Src/main.c **** 
 491:Core/Src/main.c **** // *** functions *** //
 492:Core/Src/main.c **** 
 493:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
 494:Core/Src/main.c **** {
 495:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 496:Core/Src/main.c ****     Error_Handler();
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   // get sensor data from rcb
 499:Core/Src/main.c ****   if (rxHeader.StdId == 0x81)
 500:Core/Src/main.c ****   {
 501:Core/Src/main.c **** 	  wheelSpeedBL = rxData[0];
 502:Core/Src/main.c **** 	  wheelSpeedBR = rxData[1];
 503:Core/Src/main.c **** 	  rideHeightBL = rxData[2];
 504:Core/Src/main.c **** 	  rideHeightBR = rxData[3];
 505:Core/Src/main.c ****   }
 506:Core/Src/main.c **** 
 507:Core/Src/main.c ****   // get ready to drive from high voltage for precharge complete
 508:Core/Src/main.c ****   if (rxHeader.StdId == 0x87){
 509:Core/Src/main.c **** 	  readyToDrive = rxData[0]; // 0 is NO, 1 is YES
 510:Core/Src/main.c ****   }
 511:Core/Src/main.c **** 
 512:Core/Src/main.c ****   // data from RCB for fault lights
 513:Core/Src/main.c ****   if (rxHeader.StdId == 0x82){
 514:Core/Src/main.c ****     faultAMS = rxData[1];
 515:Core/Src/main.c ****     faultIMD = rxData[0];
 516:Core/Src/main.c ****   }
 517:Core/Src/main.c **** }
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 252              		.loc 1 519 60 is_stmt 1 view -0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		.loc 1 519 60 is_stmt 0 view .LVU60
 257 0000 38B5     		push	{r3, r4, r5, lr}
 258              	.LCFI6:
 259              		.cfi_def_cfa_offset 16
 260              		.cfi_offset 3, -16
 261              		.cfi_offset 4, -12
 262              		.cfi_offset 5, -8
 263              		.cfi_offset 14, -4
 264 0002 0446     		mov	r4, r0
 520:Core/Src/main.c **** 
 521:Core/Src/main.c **** // 10Hz timer
 522:Core/Src/main.c **** // update indicator lights and  send switch values to RCB
 523:Core/Src/main.c **** if (htim == &htim13){
 265              		.loc 1 523 1 is_stmt 1 view .LVU61
 266              		.loc 1 523 4 is_stmt 0 view .LVU62
 267 0004 1C4B     		ldr	r3, .L15
 268 0006 9842     		cmp	r0, r3
 269 0008 03D0     		beq	.L13
 270              	.LVL8:
ARM GAS  /tmp/cc7QEIJt.s 			page 15


 271              	.L10:
 524:Core/Src/main.c **** 
 525:Core/Src/main.c ****   // read switches
 526:Core/Src/main.c ****   coolingState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 527:Core/Src/main.c ****   direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 528:Core/Src/main.c **** 
 529:Core/Src/main.c **** 
 530:Core/Src/main.c ****   // write fault lights
 531:Core/Src/main.c ****   // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, faultAMS);
 532:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, faultIMD);
 533:Core/Src/main.c ****   
 534:Core/Src/main.c **** //   txData[0] = 0; // regen pot
 535:Core/Src/main.c **** //   txData[1] = 0; // brake pot
 536:Core/Src/main.c **** //   txData[2] = coolingState << 1; // cooling
 537:Core/Src/main.c **** //   txData[3] = direction; // direction (1 is OFF, pulled up)
 538:Core/Src/main.c **** //   txData[4] = 0; // brake light
 539:Core/Src/main.c **** 
 540:Core/Src/main.c **** 
 541:Core/Src/main.c **** //   HAL_CAN_AddTxMessage(&hcan1, &txHeader3, txData, &txMailbox);
 542:Core/Src/main.c **** }
 543:Core/Src/main.c **** 
 544:Core/Src/main.c **** // 20Hz timer
 545:Core/Src/main.c **** // send Rinehart Parameter Command Torque Things
 546:Core/Src/main.c **** if (htim == &htim14){
 272              		.loc 1 546 1 is_stmt 1 view .LVU63
 273              		.loc 1 546 4 is_stmt 0 view .LVU64
 274 000a 1C4B     		ldr	r3, .L15+4
 275 000c 9C42     		cmp	r4, r3
 276 000e 16D0     		beq	.L14
 277              	.L9:
 547:Core/Src/main.c **** 
 548:Core/Src/main.c ****   // call functions to average pedal and brake
 549:Core/Src/main.c ****   // brake sampling
 550:Core/Src/main.c ****   // brake_average = (brake0 + brake1) / 2;
 551:Core/Src/main.c **** 
 552:Core/Src/main.c ****   // pedal_average = accel_pedal_compare(pedal0, pedal1);
 553:Core/Src/main.c ****   // commandedTorque = (int)(pedal_average * torque_conversion_ratio); // commanded torque
 554:Core/Src/main.c **** 
 555:Core/Src/main.c **** 
 556:Core/Src/main.c ****   // define variables
 557:Core/Src/main.c ****   txData[0] = commandedTorque >> 8;     // MSB, 2 byte
 558:Core/Src/main.c ****   txData[1] = commandedTorque && 0xFF;  // LSB, 2 byte
 559:Core/Src/main.c ****   txData[2] = pedal_average;
 560:Core/Src/main.c ****   txData[3] = adc_buf[0];
 561:Core/Src/main.c ****   txData[4] = adc_buf[1];
 562:Core/Src/main.c ****   txData[5] = 10;
 563:Core/Src/main.c ****   txData[6] = adc_buf[2];
 564:Core/Src/main.c ****   txData[7] = adc_buf[3];
 565:Core/Src/main.c **** 
 566:Core/Src/main.c **** 
 567:Core/Src/main.c ****   HAL_CAN_AddTxMessage(&hcan1, &txHeader1, txData, &txMailbox);
 568:Core/Src/main.c **** 
 569:Core/Src/main.c **** }
 570:Core/Src/main.c **** 
 571:Core/Src/main.c **** }
 278              		.loc 1 571 1 view .LVU65
 279 0010 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/cc7QEIJt.s 			page 16


 280              	.LVL9:
 281              	.L13:
 526:Core/Src/main.c ****   direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 282              		.loc 1 526 3 is_stmt 1 view .LVU66
 526:Core/Src/main.c ****   direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 283              		.loc 1 526 18 is_stmt 0 view .LVU67
 284 0012 1B4D     		ldr	r5, .L15+8
 285 0014 4FF48051 		mov	r1, #4096
 286 0018 2846     		mov	r0, r5
 287              	.LVL10:
 526:Core/Src/main.c ****   direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 288              		.loc 1 526 18 view .LVU68
 289 001a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 290              	.LVL11:
 526:Core/Src/main.c ****   direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 291              		.loc 1 526 16 view .LVU69
 292 001e 194B     		ldr	r3, .L15+12
 293 0020 1870     		strb	r0, [r3]
 527:Core/Src/main.c **** 
 294              		.loc 1 527 3 is_stmt 1 view .LVU70
 527:Core/Src/main.c **** 
 295              		.loc 1 527 15 is_stmt 0 view .LVU71
 296 0022 4FF40051 		mov	r1, #8192
 297 0026 2846     		mov	r0, r5
 298 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 299              	.LVL12:
 527:Core/Src/main.c **** 
 300              		.loc 1 527 13 view .LVU72
 301 002c 164B     		ldr	r3, .L15+16
 302 002e 1870     		strb	r0, [r3]
 532:Core/Src/main.c ****   
 303              		.loc 1 532 3 is_stmt 1 view .LVU73
 304 0030 164B     		ldr	r3, .L15+20
 305 0032 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 306 0034 0421     		movs	r1, #4
 307 0036 2846     		mov	r0, r5
 308 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 309              	.LVL13:
 310 003c E5E7     		b	.L10
 311              	.L14:
 557:Core/Src/main.c ****   txData[1] = commandedTorque && 0xFF;  // LSB, 2 byte
 312              		.loc 1 557 3 view .LVU74
 557:Core/Src/main.c ****   txData[1] = commandedTorque && 0xFF;  // LSB, 2 byte
 313              		.loc 1 557 13 is_stmt 0 view .LVU75
 314 003e 144B     		ldr	r3, .L15+24
 315 0040 1B88     		ldrh	r3, [r3]
 316 0042 144A     		ldr	r2, .L15+28
 317 0044 190A     		lsrs	r1, r3, #8
 318 0046 1170     		strb	r1, [r2]
 558:Core/Src/main.c ****   txData[2] = pedal_average;
 319              		.loc 1 558 3 is_stmt 1 view .LVU76
 558:Core/Src/main.c ****   txData[2] = pedal_average;
 320              		.loc 1 558 31 is_stmt 0 view .LVU77
 321 0048 003B     		subs	r3, r3, #0
 322 004a 18BF     		it	ne
 323 004c 0123     		movne	r3, #1
 558:Core/Src/main.c ****   txData[2] = pedal_average;
ARM GAS  /tmp/cc7QEIJt.s 			page 17


 324              		.loc 1 558 13 view .LVU78
 325 004e 5370     		strb	r3, [r2, #1]
 559:Core/Src/main.c ****   txData[3] = adc_buf[0];
 326              		.loc 1 559 3 is_stmt 1 view .LVU79
 559:Core/Src/main.c ****   txData[3] = adc_buf[0];
 327              		.loc 1 559 13 is_stmt 0 view .LVU80
 328 0050 114B     		ldr	r3, .L15+32
 329 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 330 0054 9370     		strb	r3, [r2, #2]
 560:Core/Src/main.c ****   txData[4] = adc_buf[1];
 331              		.loc 1 560 3 is_stmt 1 view .LVU81
 560:Core/Src/main.c ****   txData[4] = adc_buf[1];
 332              		.loc 1 560 22 is_stmt 0 view .LVU82
 333 0056 114B     		ldr	r3, .L15+36
 334 0058 1988     		ldrh	r1, [r3]
 560:Core/Src/main.c ****   txData[4] = adc_buf[1];
 335              		.loc 1 560 13 view .LVU83
 336 005a D170     		strb	r1, [r2, #3]
 561:Core/Src/main.c ****   txData[5] = 10;
 337              		.loc 1 561 3 is_stmt 1 view .LVU84
 561:Core/Src/main.c ****   txData[5] = 10;
 338              		.loc 1 561 22 is_stmt 0 view .LVU85
 339 005c 5988     		ldrh	r1, [r3, #2]
 561:Core/Src/main.c ****   txData[5] = 10;
 340              		.loc 1 561 13 view .LVU86
 341 005e 1171     		strb	r1, [r2, #4]
 562:Core/Src/main.c ****   txData[6] = adc_buf[2];
 342              		.loc 1 562 3 is_stmt 1 view .LVU87
 562:Core/Src/main.c ****   txData[6] = adc_buf[2];
 343              		.loc 1 562 13 is_stmt 0 view .LVU88
 344 0060 0A21     		movs	r1, #10
 345 0062 5171     		strb	r1, [r2, #5]
 563:Core/Src/main.c ****   txData[7] = adc_buf[3];
 346              		.loc 1 563 3 is_stmt 1 view .LVU89
 563:Core/Src/main.c ****   txData[7] = adc_buf[3];
 347              		.loc 1 563 22 is_stmt 0 view .LVU90
 348 0064 9988     		ldrh	r1, [r3, #4]
 563:Core/Src/main.c ****   txData[7] = adc_buf[3];
 349              		.loc 1 563 13 view .LVU91
 350 0066 9171     		strb	r1, [r2, #6]
 564:Core/Src/main.c **** 
 351              		.loc 1 564 3 is_stmt 1 view .LVU92
 564:Core/Src/main.c **** 
 352              		.loc 1 564 22 is_stmt 0 view .LVU93
 353 0068 DB88     		ldrh	r3, [r3, #6]
 564:Core/Src/main.c **** 
 354              		.loc 1 564 13 view .LVU94
 355 006a D371     		strb	r3, [r2, #7]
 567:Core/Src/main.c **** 
 356              		.loc 1 567 3 is_stmt 1 view .LVU95
 357 006c 0C4B     		ldr	r3, .L15+40
 358 006e 0D49     		ldr	r1, .L15+44
 359 0070 0D48     		ldr	r0, .L15+48
 360 0072 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 361              	.LVL14:
 362              		.loc 1 571 1 is_stmt 0 view .LVU96
 363 0076 CBE7     		b	.L9
ARM GAS  /tmp/cc7QEIJt.s 			page 18


 364              	.L16:
 365              		.align	2
 366              	.L15:
 367 0078 00000000 		.word	htim13
 368 007c 00000000 		.word	htim14
 369 0080 00040240 		.word	1073873920
 370 0084 00000000 		.word	.LANCHOR0
 371 0088 00000000 		.word	.LANCHOR1
 372 008c 00000000 		.word	.LANCHOR2
 373 0090 00000000 		.word	.LANCHOR3
 374 0094 00000000 		.word	txData
 375 0098 00000000 		.word	pedal_average
 376 009c 00000000 		.word	adc_buf
 377 00a0 00000000 		.word	txMailbox
 378 00a4 00000000 		.word	txHeader1
 379 00a8 00000000 		.word	hcan1
 380              		.cfi_endproc
 381              	.LFE228:
 383              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 384              		.align	1
 385              		.global	HAL_ADC_ConvCpltCallback
 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 389              		.fpu fpv4-sp-d16
 391              	HAL_ADC_ConvCpltCallback:
 392              	.LVL15:
 393              	.LFB229:
 572:Core/Src/main.c **** 
 573:Core/Src/main.c **** // interrupt for the DMA
 574:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 394              		.loc 1 574 55 is_stmt 1 view -0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 575:Core/Src/main.c **** 
 576:Core/Src/main.c ****   brake0 = adc_buf[0];
 399              		.loc 1 576 3 view .LVU98
 400              		.loc 1 576 19 is_stmt 0 view .LVU99
 401 0000 064B     		ldr	r3, .L18
 402 0002 1988     		ldrh	r1, [r3]
 403              		.loc 1 576 10 view .LVU100
 404 0004 064A     		ldr	r2, .L18+4
 405 0006 1170     		strb	r1, [r2]
 577:Core/Src/main.c ****   brake1 = adc_buf[1];
 406              		.loc 1 577 3 is_stmt 1 view .LVU101
 407              		.loc 1 577 19 is_stmt 0 view .LVU102
 408 0008 5988     		ldrh	r1, [r3, #2]
 409              		.loc 1 577 10 view .LVU103
 410 000a 064A     		ldr	r2, .L18+8
 411 000c 1170     		strb	r1, [r2]
 578:Core/Src/main.c ****   pedal0 = adc_buf[2];
 412              		.loc 1 578 3 is_stmt 1 view .LVU104
 413              		.loc 1 578 19 is_stmt 0 view .LVU105
 414 000e 9988     		ldrh	r1, [r3, #4]
 415              		.loc 1 578 10 view .LVU106
ARM GAS  /tmp/cc7QEIJt.s 			page 19


 416 0010 054A     		ldr	r2, .L18+12
 417 0012 1170     		strb	r1, [r2]
 579:Core/Src/main.c ****   pedal1 = adc_buf[3];
 418              		.loc 1 579 3 is_stmt 1 view .LVU107
 419              		.loc 1 579 19 is_stmt 0 view .LVU108
 420 0014 DA88     		ldrh	r2, [r3, #6]
 421              		.loc 1 579 10 view .LVU109
 422 0016 054B     		ldr	r3, .L18+16
 423 0018 1A70     		strb	r2, [r3]
 580:Core/Src/main.c **** 
 581:Core/Src/main.c **** }
 424              		.loc 1 581 1 view .LVU110
 425 001a 7047     		bx	lr
 426              	.L19:
 427              		.align	2
 428              	.L18:
 429 001c 00000000 		.word	adc_buf
 430 0020 00000000 		.word	.LANCHOR4
 431 0024 00000000 		.word	.LANCHOR5
 432 0028 00000000 		.word	.LANCHOR6
 433 002c 00000000 		.word	.LANCHOR7
 434              		.cfi_endproc
 435              	.LFE229:
 437              		.section	.text.Error_Handler,"ax",%progbits
 438              		.align	1
 439              		.global	Error_Handler
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	Error_Handler:
 446              	.LFB230:
 582:Core/Src/main.c **** 
 583:Core/Src/main.c **** // /**
 584:Core/Src/main.c **** //  * @brief welcome & boot screen
 585:Core/Src/main.c **** //  * 
 586:Core/Src/main.c **** //  */
 587:Core/Src/main.c **** // void welcomeScreen()
 588:Core/Src/main.c **** // {
 589:Core/Src/main.c **** // 	lcdInit(&hi2c1, 0x27, 2, 16);       			// init lcd (i2c reference, LCD address, lines, rows)
 590:Core/Src/main.c **** // 	lcdAutoscrollOff();								// turn off autoscroll
 591:Core/Src/main.c **** // 	lcdBacklightOn();								// turn on backlight
 592:Core/Src/main.c **** // 	lcdDisplayClear();                  			// clear the screen
 593:Core/Src/main.c **** // 	lcdSetCursorPosition(2, 0);         			// set the cursor
 594:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"welcome AERO!", 13);   	// print
 595:Core/Src/main.c **** // 	lcdSetCursorPosition(2, 1);         			// next line
 596:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"booting up...", 13);   	// print
 597:Core/Src/main.c **** // 	HAL_Delay(3000);								// delay 3 seconds so the screen can be read
 598:Core/Src/main.c **** // 	lcdDisplayClear();								// clear the display so the other screens can be printed
 599:Core/Src/main.c **** // }
 600:Core/Src/main.c **** 
 601:Core/Src/main.c **** 
 602:Core/Src/main.c **** // /**
 603:Core/Src/main.c **** //  * @brief racing hud: mph(est), battery%, drive direction, coast regen, brake regen
 604:Core/Src/main.c **** //  *
 605:Core/Src/main.c **** //  */
 606:Core/Src/main.c **** // void racingHUD()
ARM GAS  /tmp/cc7QEIJt.s 			page 20


 607:Core/Src/main.c **** // {
 608:Core/Src/main.c **** // 	// get wheel speed
 609:Core/Src/main.c **** // 	float averageWheelSpeed = (wheelSpeedFR + wheelSpeedFL) / 2;
 610:Core/Src/main.c **** 
 611:Core/Src/main.c **** // 	// get current mph from wheel speed
 612:Core/Src/main.c **** // 	float currentMPH = ((averageWheelSpeed * WHEEL_DIAMETER) * (3.14159 * 60)) / 63360;
 613:Core/Src/main.c **** 
 614:Core/Src/main.c **** // 	// get battery percentage
 615:Core/Src/main.c **** // 	float batteryPercentage = (emusVoltage / MAX_PACK_VOLTAGE) * 100;
 616:Core/Src/main.c **** 
 617:Core/Src/main.c **** // 	// init some char buffs for variables
 618:Core/Src/main.c **** // 	char battStr[10];
 619:Core/Src/main.c **** // 	char speedStr[10];
 620:Core/Src/main.c **** // 	char coastStr[10];
 621:Core/Src/main.c **** // 	char brakeStr[10];
 622:Core/Src/main.c **** 
 623:Core/Src/main.c **** // 	// drive direction
 624:Core/Src/main.c **** // 	lcdSetCursorPosition(0, 0);									// position of drive direction
 625:Core/Src/main.c **** // 	if (direction) lcdPrintStr((uint8_t*)"FWD", 3);     		// print drive direction
 626:Core/Src/main.c **** // 	else lcdPrintStr((uint8_t*)"RVS", 3);
 627:Core/Src/main.c **** 
 628:Core/Src/main.c **** // 	// battery percentage
 629:Core/Src/main.c **** // 	lcdSetCursorPosition(12, 0); 								// set cursor for battery percentage value
 630:Core/Src/main.c **** // 	sprintf(battStr, "%.0d%%", (int)batteryPercentage); 		// sprintf it
 631:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)battStr, strlen(battStr));			// print the battery percentage value
 632:Core/Src/main.c **** 
 633:Core/Src/main.c **** // 	// speedometer		
 634:Core/Src/main.c **** // 	lcdSetCursorPosition(7, 0);                     			// set cursor for mph value
 635:Core/Src/main.c **** // 	sprintf(speedStr, "%.0d", (int)currentMPH);					// sprintf it
 636:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)speedStr, strlen(speedStr));			// print the current speed in MPH, cast to
 637:Core/Src/main.c **** // 	lcdSetCursorPosition(7, 1);                     			// set cursor for units
 638:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"mph", 3);                    		// print units
 639:Core/Src/main.c **** 
 640:Core/Src/main.c **** // 	// coast regen		
 641:Core/Src/main.c **** // 	lcdSetCursorPosition(0, 1);                      			// set cursor for CR
 642:Core/Src/main.c **** // 	sprintf(coastStr, "C:%.0d%%", (int)coastRegen);				// sprintf it
 643:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)coastStr, strlen(coastStr));  		// print coast regen value
 644:Core/Src/main.c **** 
 645:Core/Src/main.c **** // 	// brake regen		
 646:Core/Src/main.c **** // 	lcdSetCursorPosition(11, 1);                     			// set cursor for BR
 647:Core/Src/main.c **** // 	sprintf(brakeStr, "B: %d%%", (int)brakeRegen);				// sprintf it
 648:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)brakeStr, strlen(brakeStr));  		// print brake regen value
 649:Core/Src/main.c **** // }
 650:Core/Src/main.c **** 
 651:Core/Src/main.c **** 
 652:Core/Src/main.c **** // /**
 653:Core/Src/main.c **** //  * @brief battery state, bus voltage, rinehart voltage, power mode
 654:Core/Src/main.c **** //  * 
 655:Core/Src/main.c **** //  */
 656:Core/Src/main.c **** // void electricalSettings()
 657:Core/Src/main.c **** // {
 658:Core/Src/main.c **** // 	// get battery percentage
 659:Core/Src/main.c **** // 	float batteryPercentage = (emusVoltage / MAX_PACK_VOLTAGE) * 100;
 660:Core/Src/main.c **** 
 661:Core/Src/main.c **** // 	// init some char buffs for variables
 662:Core/Src/main.c **** // 	char battStr[10];
 663:Core/Src/main.c **** // 	char busVStr[10];
ARM GAS  /tmp/cc7QEIJt.s 			page 21


 664:Core/Src/main.c **** 
 665:Core/Src/main.c **** // 	// battery percentage
 666:Core/Src/main.c **** // 	lcdSetCursorPosition(0, 0);									// set cursor for battery title
 667:Core/Src/main.c **** // 	sprintf(battStr, "Batt:%d%%", (int)batteryPercentage);		// sprintf it
 668:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)battStr, strlen(battStr));			// print title
 669:Core/Src/main.c **** 
 670:Core/Src/main.c **** // 	// bus voltage
 671:Core/Src/main.c **** // 	lcdSetCursorPosition(11, 0);								// set cursor for bus voltage title
 672:Core/Src/main.c **** // 	sprintf(busVStr, "Bus:%d", (int)emusVoltage);				// sprintf it			
 673:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)busVStr, strlen(busVStr));			// print
 674:Core/Src/main.c **** // 	lcdSetCursorPosition(15, 1);                                // set cursor for units
 675:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"V", 1);                              // print units
 676:Core/Src/main.c **** 
 677:Core/Src/main.c **** // 	/*	not planning on using this for the time being
 678:Core/Src/main.c **** // 	// rinehart voltage
 679:Core/Src/main.c **** // 	lcdSetCursorPosition(12, 0);                                // set cursor for rinehart voltage 
 680:Core/Src/main.c **** // 	lcdPrintStr(rinehartVoltage);                           	// print the rinehart voltage value
 681:Core/Src/main.c **** // 	lcdSetCursorPosition(15, 0);                                // set cursor for units
 682:Core/Src/main.c **** // 	lcdPrintStr("V");                                       	// print % sign
 683:Core/Src/main.c **** // 	*/
 684:Core/Src/main.c **** 
 685:Core/Src/main.c **** // 	// power mode
 686:Core/Src/main.c **** // 	lcdSetCursorPosition(0, 1);                                 // set cursor for mode text
 687:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"Mode:", 5);							// print mode text
 688:Core/Src/main.c **** // 	lcdSetCursorPosition(5, 1);                                 // set cursor current mode setting
 689:Core/Src/main.c **** // 	if (powerMode == TUTORIAL) lcdPrintStr((uint8_t*)"TUTR", 4);
 690:Core/Src/main.c **** // 	if (powerMode == ECO) lcdPrintStr((uint8_t*)"ECO", 3);
 691:Core/Src/main.c **** // 	if (powerMode == EXPERT) lcdPrintStr((uint8_t*)"EXPT", 4);
 692:Core/Src/main.c **** // 	else lcdPrintStr((uint8_t*)(uint8_t*)"ERR!", 4);
 693:Core/Src/main.c **** // }
 694:Core/Src/main.c **** 
 695:Core/Src/main.c **** 
 696:Core/Src/main.c **** // /**
 697:Core/Src/main.c **** //  * @brief ride height, wheel rpm, coast regen, brake regen
 698:Core/Src/main.c **** //  *
 699:Core/Src/main.c **** //  */
 700:Core/Src/main.c **** // void rideSettings()
 701:Core/Src/main.c **** // {
 702:Core/Src/main.c **** // 	// init some char buffs for variables
 703:Core/Src/main.c **** // 	char rideStr[10];
 704:Core/Src/main.c **** // 	char wheelStr[10];
 705:Core/Src/main.c **** 
 706:Core/Src/main.c **** // 	// ride height
 707:Core/Src/main.c **** // 	lcdSetCursorPosition(0, 0);									// set cursor for front left ride height value
 708:Core/Src/main.c **** // 	sprintf(rideStr, "%d", (int)rideHeightFL);					// sprintf it
 709:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));			// print front left ride height value
 710:Core/Src/main.c **** 
 711:Core/Src/main.c **** // 	lcdSetCursorPosition(2, 0);				  					// spacer
 712:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"-", 1);						  		// spacer
 713:Core/Src/main.c **** 
 714:Core/Src/main.c **** // 	lcdSetCursorPosition(3, 0);									// set cursor for front right ride height value
 715:Core/Src/main.c **** // 	sprintf(rideStr, "%d", (int)rideHeightFR);					// sprintf it
 716:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));			// print front right ride height value
 717:Core/Src/main.c **** 
 718:Core/Src/main.c **** // 	lcdSetCursorPosition(5, 0);									// set cursor for "<- Ride"
 719:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"<-Ride", 6);							// print
 720:Core/Src/main.c **** 
ARM GAS  /tmp/cc7QEIJt.s 			page 22


 721:Core/Src/main.c **** // 	lcdSetCursorPosition(0, 1);                  				// set cursor for back left ride height value
 722:Core/Src/main.c **** // 	sprintf(rideStr, "%d", (int)rideHeightBL);					// sprintf it
 723:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));         	// print back left ride height value
 724:Core/Src/main.c **** 
 725:Core/Src/main.c **** // 	lcdSetCursorPosition(2, 1);				  					// spacer
 726:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"-", 1);						  		// spacer
 727:Core/Src/main.c **** 
 728:Core/Src/main.c **** // 	lcdSetCursorPosition(3, 1);                  				// set cursor for back right ride height value
 729:Core/Src/main.c **** // 	sprintf(rideStr, "%d", (int)rideHeightBR);					// sprintf it
 730:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)rideStr, strlen(rideStr));			// print back right ride height value
 731:Core/Src/main.c **** 
 732:Core/Src/main.c **** // 	lcdSetCursorPosition(6, 1);                  				// set cursor for "RPM->"
 733:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"RPM->", 5);                   		// print the "RPM->"
 734:Core/Src/main.c **** 
 735:Core/Src/main.c **** // 	// wheel speed
 736:Core/Src/main.c **** // 	lcdSetCursorPosition(11, 0);								// set cursor for front left wheelspeed value
 737:Core/Src/main.c **** // 	sprintf(wheelStr, "%d", (int)wheelSpeedFL);					// sprintf it
 738:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print front left wheelspeed value
 739:Core/Src/main.c **** 
 740:Core/Src/main.c **** // 	lcdSetCursorPosition(13, 0);								// spacer
 741:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"-", 1);						  		// spacer
 742:Core/Src/main.c **** 
 743:Core/Src/main.c **** // 	lcdSetCursorPosition(14, 0);                 				// set cursor for front right wheelspeed value
 744:Core/Src/main.c **** // 	sprintf(wheelStr, "%d", (int)wheelSpeedFR);					// sprintf it
 745:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print front right wheelspeed value
 746:Core/Src/main.c **** 
 747:Core/Src/main.c **** // 	lcdSetCursorPosition(11, 1);                 				// set cursor for back left wheelspeed value
 748:Core/Src/main.c **** // 	sprintf(wheelStr, "%d", (int)wheelSpeedBL);					// sprintf it
 749:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print back left wheelspeed value
 750:Core/Src/main.c **** 
 751:Core/Src/main.c **** // 	lcdSetCursorPosition(13, 1);								// set cursor for "-"
 752:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)"-", 1);								// print the "-"
 753:Core/Src/main.c **** 
 754:Core/Src/main.c **** // 	lcdSetCursorPosition(14, 1);								// set cursor for back right wheelspeed value
 755:Core/Src/main.c **** // 	sprintf(wheelStr, "%d", (int)wheelSpeedBR);					// sprintf it
 756:Core/Src/main.c **** // 	lcdPrintStr((uint8_t*)wheelStr, strlen(wheelStr));			// print value for back right wheelspeed v
 757:Core/Src/main.c **** // }
 758:Core/Src/main.c **** 
 759:Core/Src/main.c **** /* USER CODE END 4 */
 760:Core/Src/main.c **** 
 761:Core/Src/main.c **** /**
 762:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 763:Core/Src/main.c ****   * @retval None
 764:Core/Src/main.c ****   */
 765:Core/Src/main.c **** void Error_Handler(void)
 766:Core/Src/main.c **** {
 447              		.loc 1 766 1 is_stmt 1 view -0
 448              		.cfi_startproc
 449              		@ Volatile: function does not return.
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 767:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 768:Core/Src/main.c **** 	/* User can add his own implementation to report the HAL error return state */
 769:Core/Src/main.c **** 	__disable_irq();
 453              		.loc 1 769 2 view .LVU112
 454              	.LBB8:
ARM GAS  /tmp/cc7QEIJt.s 			page 23


 455              	.LBI8:
 456              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
ARM GAS  /tmp/cc7QEIJt.s 			page 24


  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc7QEIJt.s 			page 25


 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 457              		.loc 2 140 27 view .LVU113
 458              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 459              		.loc 2 142 3 view .LVU114
 460              		.syntax unified
 461              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 462 0000 72B6     		cpsid i
 463              	@ 0 "" 2
 464              		.thumb
 465              		.syntax unified
 466              	.L21:
 467              	.LBE9:
 468              	.LBE8:
 770:Core/Src/main.c **** 	while (1)
 469              		.loc 1 770 2 discriminator 1 view .LVU115
 771:Core/Src/main.c **** 	{
 772:Core/Src/main.c **** 	}
 470              		.loc 1 772 2 discriminator 1 view .LVU116
 770:Core/Src/main.c **** 	while (1)
 471              		.loc 1 770 8 discriminator 1 view .LVU117
 472 0002 FEE7     		b	.L21
 473              		.cfi_endproc
 474              	.LFE230:
 476              		.section	.text.MX_ADC1_Init,"ax",%progbits
 477              		.align	1
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
ARM GAS  /tmp/cc7QEIJt.s 			page 26


 481              		.fpu fpv4-sp-d16
 483              	MX_ADC1_Init:
 484              	.LFB221:
 258:Core/Src/main.c **** 
 485              		.loc 1 258 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 16
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489 0000 00B5     		push	{lr}
 490              	.LCFI7:
 491              		.cfi_def_cfa_offset 4
 492              		.cfi_offset 14, -4
 493 0002 85B0     		sub	sp, sp, #20
 494              	.LCFI8:
 495              		.cfi_def_cfa_offset 24
 263:Core/Src/main.c **** 
 496              		.loc 1 263 3 view .LVU119
 263:Core/Src/main.c **** 
 497              		.loc 1 263 26 is_stmt 0 view .LVU120
 498 0004 0023     		movs	r3, #0
 499 0006 0093     		str	r3, [sp]
 500 0008 0193     		str	r3, [sp, #4]
 501 000a 0293     		str	r3, [sp, #8]
 502 000c 0393     		str	r3, [sp, #12]
 269:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 503              		.loc 1 269 3 is_stmt 1 view .LVU121
 269:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 504              		.loc 1 269 18 is_stmt 0 view .LVU122
 505 000e 2548     		ldr	r0, .L34
 506 0010 254A     		ldr	r2, .L34+4
 507 0012 0260     		str	r2, [r0]
 270:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 508              		.loc 1 270 3 is_stmt 1 view .LVU123
 270:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 509              		.loc 1 270 29 is_stmt 0 view .LVU124
 510 0014 4FF48032 		mov	r2, #65536
 511 0018 4260     		str	r2, [r0, #4]
 271:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 512              		.loc 1 271 3 is_stmt 1 view .LVU125
 271:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 513              		.loc 1 271 25 is_stmt 0 view .LVU126
 514 001a 8360     		str	r3, [r0, #8]
 272:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 515              		.loc 1 272 3 is_stmt 1 view .LVU127
 272:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 516              		.loc 1 272 27 is_stmt 0 view .LVU128
 517 001c 0122     		movs	r2, #1
 518 001e 0261     		str	r2, [r0, #16]
 273:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 519              		.loc 1 273 3 is_stmt 1 view .LVU129
 273:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 520              		.loc 1 273 33 is_stmt 0 view .LVU130
 521 0020 0276     		strb	r2, [r0, #24]
 274:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 522              		.loc 1 274 3 is_stmt 1 view .LVU131
 274:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 523              		.loc 1 274 36 is_stmt 0 view .LVU132
ARM GAS  /tmp/cc7QEIJt.s 			page 27


 524 0022 80F82030 		strb	r3, [r0, #32]
 275:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 525              		.loc 1 275 3 is_stmt 1 view .LVU133
 275:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 526              		.loc 1 275 35 is_stmt 0 view .LVU134
 527 0026 C362     		str	r3, [r0, #44]
 276:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 528              		.loc 1 276 3 is_stmt 1 view .LVU135
 276:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 529              		.loc 1 276 31 is_stmt 0 view .LVU136
 530 0028 2049     		ldr	r1, .L34+8
 531 002a 8162     		str	r1, [r0, #40]
 277:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 532              		.loc 1 277 3 is_stmt 1 view .LVU137
 277:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 533              		.loc 1 277 24 is_stmt 0 view .LVU138
 534 002c C360     		str	r3, [r0, #12]
 278:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 535              		.loc 1 278 3 is_stmt 1 view .LVU139
 278:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 536              		.loc 1 278 30 is_stmt 0 view .LVU140
 537 002e 0421     		movs	r1, #4
 538 0030 C161     		str	r1, [r0, #28]
 279:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 539              		.loc 1 279 3 is_stmt 1 view .LVU141
 279:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 540              		.loc 1 279 36 is_stmt 0 view .LVU142
 541 0032 80F83020 		strb	r2, [r0, #48]
 280:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 542              		.loc 1 280 3 is_stmt 1 view .LVU143
 280:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 543              		.loc 1 280 27 is_stmt 0 view .LVU144
 544 0036 4361     		str	r3, [r0, #20]
 281:Core/Src/main.c ****   {
 545              		.loc 1 281 3 is_stmt 1 view .LVU145
 281:Core/Src/main.c ****   {
 546              		.loc 1 281 7 is_stmt 0 view .LVU146
 547 0038 FFF7FEFF 		bl	HAL_ADC_Init
 548              	.LVL16:
 281:Core/Src/main.c ****   {
 549              		.loc 1 281 6 view .LVU147
 550 003c 40BB     		cbnz	r0, .L29
 287:Core/Src/main.c ****   sConfig.Rank = 1;
 551              		.loc 1 287 3 is_stmt 1 view .LVU148
 287:Core/Src/main.c ****   sConfig.Rank = 1;
 552              		.loc 1 287 19 is_stmt 0 view .LVU149
 553 003e 0423     		movs	r3, #4
 554 0040 0093     		str	r3, [sp]
 288:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 555              		.loc 1 288 3 is_stmt 1 view .LVU150
 288:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 556              		.loc 1 288 16 is_stmt 0 view .LVU151
 557 0042 0123     		movs	r3, #1
 558 0044 0193     		str	r3, [sp, #4]
 289:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 559              		.loc 1 289 3 is_stmt 1 view .LVU152
 289:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/cc7QEIJt.s 			page 28


 560              		.loc 1 289 24 is_stmt 0 view .LVU153
 561 0046 0023     		movs	r3, #0
 562 0048 0293     		str	r3, [sp, #8]
 290:Core/Src/main.c ****   {
 563              		.loc 1 290 3 is_stmt 1 view .LVU154
 290:Core/Src/main.c ****   {
 564              		.loc 1 290 7 is_stmt 0 view .LVU155
 565 004a 6946     		mov	r1, sp
 566 004c 1548     		ldr	r0, .L34
 567 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 568              	.LVL17:
 290:Core/Src/main.c ****   {
 569              		.loc 1 290 6 view .LVU156
 570 0052 F8B9     		cbnz	r0, .L30
 296:Core/Src/main.c ****   sConfig.Rank = 2;
 571              		.loc 1 296 3 is_stmt 1 view .LVU157
 296:Core/Src/main.c ****   sConfig.Rank = 2;
 572              		.loc 1 296 19 is_stmt 0 view .LVU158
 573 0054 0523     		movs	r3, #5
 574 0056 0093     		str	r3, [sp]
 297:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 575              		.loc 1 297 3 is_stmt 1 view .LVU159
 297:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 576              		.loc 1 297 16 is_stmt 0 view .LVU160
 577 0058 0223     		movs	r3, #2
 578 005a 0193     		str	r3, [sp, #4]
 298:Core/Src/main.c ****   {
 579              		.loc 1 298 3 is_stmt 1 view .LVU161
 298:Core/Src/main.c ****   {
 580              		.loc 1 298 7 is_stmt 0 view .LVU162
 581 005c 6946     		mov	r1, sp
 582 005e 1148     		ldr	r0, .L34
 583 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 584              	.LVL18:
 298:Core/Src/main.c ****   {
 585              		.loc 1 298 6 view .LVU163
 586 0064 C0B9     		cbnz	r0, .L31
 304:Core/Src/main.c ****   sConfig.Rank = 3;
 587              		.loc 1 304 3 is_stmt 1 view .LVU164
 304:Core/Src/main.c ****   sConfig.Rank = 3;
 588              		.loc 1 304 19 is_stmt 0 view .LVU165
 589 0066 0623     		movs	r3, #6
 590 0068 0093     		str	r3, [sp]
 305:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 591              		.loc 1 305 3 is_stmt 1 view .LVU166
 305:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 592              		.loc 1 305 16 is_stmt 0 view .LVU167
 593 006a 0323     		movs	r3, #3
 594 006c 0193     		str	r3, [sp, #4]
 306:Core/Src/main.c ****   {
 595              		.loc 1 306 3 is_stmt 1 view .LVU168
 306:Core/Src/main.c ****   {
 596              		.loc 1 306 7 is_stmt 0 view .LVU169
 597 006e 6946     		mov	r1, sp
 598 0070 0C48     		ldr	r0, .L34
 599 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 600              	.LVL19:
ARM GAS  /tmp/cc7QEIJt.s 			page 29


 306:Core/Src/main.c ****   {
 601              		.loc 1 306 6 view .LVU170
 602 0076 88B9     		cbnz	r0, .L32
 312:Core/Src/main.c ****   sConfig.Rank = 4;
 603              		.loc 1 312 3 is_stmt 1 view .LVU171
 312:Core/Src/main.c ****   sConfig.Rank = 4;
 604              		.loc 1 312 19 is_stmt 0 view .LVU172
 605 0078 0723     		movs	r3, #7
 606 007a 0093     		str	r3, [sp]
 313:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 607              		.loc 1 313 3 is_stmt 1 view .LVU173
 313:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 608              		.loc 1 313 16 is_stmt 0 view .LVU174
 609 007c 0423     		movs	r3, #4
 610 007e 0193     		str	r3, [sp, #4]
 314:Core/Src/main.c ****   {
 611              		.loc 1 314 3 is_stmt 1 view .LVU175
 314:Core/Src/main.c ****   {
 612              		.loc 1 314 7 is_stmt 0 view .LVU176
 613 0080 6946     		mov	r1, sp
 614 0082 0848     		ldr	r0, .L34
 615 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 616              	.LVL20:
 314:Core/Src/main.c ****   {
 617              		.loc 1 314 6 view .LVU177
 618 0088 50B9     		cbnz	r0, .L33
 321:Core/Src/main.c **** 
 619              		.loc 1 321 1 view .LVU178
 620 008a 05B0     		add	sp, sp, #20
 621              	.LCFI9:
 622              		.cfi_remember_state
 623              		.cfi_def_cfa_offset 4
 624              		@ sp needed
 625 008c 5DF804FB 		ldr	pc, [sp], #4
 626              	.L29:
 627              	.LCFI10:
 628              		.cfi_restore_state
 283:Core/Src/main.c ****   }
 629              		.loc 1 283 5 is_stmt 1 view .LVU179
 630 0090 FFF7FEFF 		bl	Error_Handler
 631              	.LVL21:
 632              	.L30:
 292:Core/Src/main.c ****   }
 633              		.loc 1 292 5 view .LVU180
 634 0094 FFF7FEFF 		bl	Error_Handler
 635              	.LVL22:
 636              	.L31:
 300:Core/Src/main.c ****   }
 637              		.loc 1 300 5 view .LVU181
 638 0098 FFF7FEFF 		bl	Error_Handler
 639              	.LVL23:
 640              	.L32:
 308:Core/Src/main.c ****   }
 641              		.loc 1 308 5 view .LVU182
 642 009c FFF7FEFF 		bl	Error_Handler
 643              	.LVL24:
 644              	.L33:
ARM GAS  /tmp/cc7QEIJt.s 			page 30


 316:Core/Src/main.c ****   }
 645              		.loc 1 316 5 view .LVU183
 646 00a0 FFF7FEFF 		bl	Error_Handler
 647              	.LVL25:
 648              	.L35:
 649              		.align	2
 650              	.L34:
 651 00a4 00000000 		.word	hadc1
 652 00a8 00200140 		.word	1073815552
 653 00ac 0100000F 		.word	251658241
 654              		.cfi_endproc
 655              	.LFE221:
 657              		.section	.text.MX_CAN1_Init,"ax",%progbits
 658              		.align	1
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu fpv4-sp-d16
 664              	MX_CAN1_Init:
 665              	.LFB222:
 329:Core/Src/main.c **** 
 666              		.loc 1 329 1 view -0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670 0000 08B5     		push	{r3, lr}
 671              	.LCFI11:
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 3, -8
 674              		.cfi_offset 14, -4
 336:Core/Src/main.c ****   hcan1.Init.Prescaler = 5;
 675              		.loc 1 336 3 view .LVU185
 336:Core/Src/main.c ****   hcan1.Init.Prescaler = 5;
 676              		.loc 1 336 18 is_stmt 0 view .LVU186
 677 0002 1648     		ldr	r0, .L40
 678 0004 164B     		ldr	r3, .L40+4
 679 0006 0360     		str	r3, [r0]
 337:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 680              		.loc 1 337 3 is_stmt 1 view .LVU187
 337:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 681              		.loc 1 337 24 is_stmt 0 view .LVU188
 682 0008 0523     		movs	r3, #5
 683 000a 4360     		str	r3, [r0, #4]
 338:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 684              		.loc 1 338 3 is_stmt 1 view .LVU189
 338:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 685              		.loc 1 338 19 is_stmt 0 view .LVU190
 686 000c 0023     		movs	r3, #0
 687 000e 8360     		str	r3, [r0, #8]
 339:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 688              		.loc 1 339 3 is_stmt 1 view .LVU191
 339:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 689              		.loc 1 339 28 is_stmt 0 view .LVU192
 690 0010 C360     		str	r3, [r0, #12]
 340:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 691              		.loc 1 340 3 is_stmt 1 view .LVU193
 340:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
ARM GAS  /tmp/cc7QEIJt.s 			page 31


 692              		.loc 1 340 23 is_stmt 0 view .LVU194
 693 0012 4FF46022 		mov	r2, #917504
 694 0016 0261     		str	r2, [r0, #16]
 341:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 695              		.loc 1 341 3 is_stmt 1 view .LVU195
 341:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 696              		.loc 1 341 23 is_stmt 0 view .LVU196
 697 0018 4FF48012 		mov	r2, #1048576
 698 001c 4261     		str	r2, [r0, #20]
 342:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 699              		.loc 1 342 3 is_stmt 1 view .LVU197
 342:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 700              		.loc 1 342 32 is_stmt 0 view .LVU198
 701 001e 0376     		strb	r3, [r0, #24]
 343:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 702              		.loc 1 343 3 is_stmt 1 view .LVU199
 343:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 703              		.loc 1 343 25 is_stmt 0 view .LVU200
 704 0020 4376     		strb	r3, [r0, #25]
 344:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 705              		.loc 1 344 3 is_stmt 1 view .LVU201
 344:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 706              		.loc 1 344 25 is_stmt 0 view .LVU202
 707 0022 0122     		movs	r2, #1
 708 0024 8276     		strb	r2, [r0, #26]
 345:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 709              		.loc 1 345 3 is_stmt 1 view .LVU203
 345:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 710              		.loc 1 345 33 is_stmt 0 view .LVU204
 711 0026 C276     		strb	r2, [r0, #27]
 346:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 712              		.loc 1 346 3 is_stmt 1 view .LVU205
 346:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 713              		.loc 1 346 32 is_stmt 0 view .LVU206
 714 0028 0377     		strb	r3, [r0, #28]
 347:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 715              		.loc 1 347 3 is_stmt 1 view .LVU207
 347:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 716              		.loc 1 347 35 is_stmt 0 view .LVU208
 717 002a 4377     		strb	r3, [r0, #29]
 348:Core/Src/main.c ****   {
 718              		.loc 1 348 3 is_stmt 1 view .LVU209
 348:Core/Src/main.c ****   {
 719              		.loc 1 348 7 is_stmt 0 view .LVU210
 720 002c FFF7FEFF 		bl	HAL_CAN_Init
 721              	.LVL26:
 348:Core/Src/main.c ****   {
 722              		.loc 1 348 6 view .LVU211
 723 0030 90B9     		cbnz	r0, .L39
 355:Core/Src/main.c **** 	filter_rcb.FilterMode = CAN_FILTERMODE_IDMASK;
 724              		.loc 1 355 2 is_stmt 1 view .LVU212
 355:Core/Src/main.c **** 	filter_rcb.FilterMode = CAN_FILTERMODE_IDMASK;
 725              		.loc 1 355 24 is_stmt 0 view .LVU213
 726 0032 0C4B     		ldr	r3, .L40+8
 727 0034 0022     		movs	r2, #0
 728 0036 5A61     		str	r2, [r3, #20]
 356:Core/Src/main.c **** 	filter_rcb.FilterFIFOAssignment = CAN_RX_FIFO0;
ARM GAS  /tmp/cc7QEIJt.s 			page 32


 729              		.loc 1 356 2 is_stmt 1 view .LVU214
 356:Core/Src/main.c **** 	filter_rcb.FilterFIFOAssignment = CAN_RX_FIFO0;
 730              		.loc 1 356 24 is_stmt 0 view .LVU215
 731 0038 9A61     		str	r2, [r3, #24]
 357:Core/Src/main.c **** 	filter_rcb.FilterIdHigh = 0x0FF << 5;
 732              		.loc 1 357 2 is_stmt 1 view .LVU216
 357:Core/Src/main.c **** 	filter_rcb.FilterIdHigh = 0x0FF << 5;
 733              		.loc 1 357 34 is_stmt 0 view .LVU217
 734 003a 1A61     		str	r2, [r3, #16]
 358:Core/Src/main.c **** 	filter_rcb.FilterIdLow = 0x082 << 5;
 735              		.loc 1 358 2 is_stmt 1 view .LVU218
 358:Core/Src/main.c **** 	filter_rcb.FilterIdLow = 0x082 << 5;
 736              		.loc 1 358 26 is_stmt 0 view .LVU219
 737 003c 4FF4FF51 		mov	r1, #8160
 738 0040 1960     		str	r1, [r3]
 359:Core/Src/main.c **** 	filter_rcb.FilterMaskIdHigh = 0x082 << 5;
 739              		.loc 1 359 2 is_stmt 1 view .LVU220
 359:Core/Src/main.c **** 	filter_rcb.FilterMaskIdHigh = 0x082 << 5;
 740              		.loc 1 359 25 is_stmt 0 view .LVU221
 741 0042 4FF48251 		mov	r1, #4160
 742 0046 5960     		str	r1, [r3, #4]
 360:Core/Src/main.c **** 	filter_rcb.FilterMaskIdLow = 0xFFF << 5;
 743              		.loc 1 360 2 is_stmt 1 view .LVU222
 360:Core/Src/main.c **** 	filter_rcb.FilterMaskIdLow = 0xFFF << 5;
 744              		.loc 1 360 30 is_stmt 0 view .LVU223
 745 0048 9960     		str	r1, [r3, #8]
 361:Core/Src/main.c **** 	filter_rcb.FilterScale = CAN_FILTERSCALE_32BIT;
 746              		.loc 1 361 2 is_stmt 1 view .LVU224
 361:Core/Src/main.c **** 	filter_rcb.FilterScale = CAN_FILTERSCALE_32BIT;
 747              		.loc 1 361 29 is_stmt 0 view .LVU225
 748 004a 0749     		ldr	r1, .L40+12
 749 004c D960     		str	r1, [r3, #12]
 362:Core/Src/main.c **** 	filter_rcb.FilterActivation = ENABLE;
 750              		.loc 1 362 2 is_stmt 1 view .LVU226
 362:Core/Src/main.c **** 	filter_rcb.FilterActivation = ENABLE;
 751              		.loc 1 362 25 is_stmt 0 view .LVU227
 752 004e 0121     		movs	r1, #1
 753 0050 D961     		str	r1, [r3, #28]
 363:Core/Src/main.c **** 	filter_rcb.SlaveStartFilterBank = 0;
 754              		.loc 1 363 2 is_stmt 1 view .LVU228
 363:Core/Src/main.c **** 	filter_rcb.SlaveStartFilterBank = 0;
 755              		.loc 1 363 30 is_stmt 0 view .LVU229
 756 0052 1962     		str	r1, [r3, #32]
 364:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 757              		.loc 1 364 2 is_stmt 1 view .LVU230
 364:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 758              		.loc 1 364 34 is_stmt 0 view .LVU231
 759 0054 5A62     		str	r2, [r3, #36]
 367:Core/Src/main.c **** 
 760              		.loc 1 367 1 view .LVU232
 761 0056 08BD     		pop	{r3, pc}
 762              	.L39:
 350:Core/Src/main.c ****   }
 763              		.loc 1 350 5 is_stmt 1 view .LVU233
 764 0058 FFF7FEFF 		bl	Error_Handler
 765              	.LVL27:
 766              	.L41:
ARM GAS  /tmp/cc7QEIJt.s 			page 33


 767              		.align	2
 768              	.L40:
 769 005c 00000000 		.word	hcan1
 770 0060 00640040 		.word	1073767424
 771 0064 00000000 		.word	filter_rcb
 772 0068 E0FF0100 		.word	131040
 773              		.cfi_endproc
 774              	.LFE222:
 776              		.section	.text.MX_TIM13_Init,"ax",%progbits
 777              		.align	1
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	MX_TIM13_Init:
 784              	.LFB223:
 375:Core/Src/main.c **** 
 785              		.loc 1 375 1 view -0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789 0000 08B5     		push	{r3, lr}
 790              	.LCFI12:
 791              		.cfi_def_cfa_offset 8
 792              		.cfi_offset 3, -8
 793              		.cfi_offset 14, -4
 384:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 794              		.loc 1 384 3 view .LVU235
 384:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 795              		.loc 1 384 19 is_stmt 0 view .LVU236
 796 0002 0948     		ldr	r0, .L46
 797 0004 094B     		ldr	r3, .L46+4
 798 0006 0360     		str	r3, [r0]
 385:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 799              		.loc 1 385 3 is_stmt 1 view .LVU237
 385:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800              		.loc 1 385 25 is_stmt 0 view .LVU238
 801 0008 42F22733 		movw	r3, #8999
 802 000c 4360     		str	r3, [r0, #4]
 386:Core/Src/main.c ****   htim13.Init.Period = 1000-1;
 803              		.loc 1 386 3 is_stmt 1 view .LVU239
 386:Core/Src/main.c ****   htim13.Init.Period = 1000-1;
 804              		.loc 1 386 27 is_stmt 0 view .LVU240
 805 000e 0023     		movs	r3, #0
 806 0010 8360     		str	r3, [r0, #8]
 387:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 807              		.loc 1 387 3 is_stmt 1 view .LVU241
 387:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 808              		.loc 1 387 22 is_stmt 0 view .LVU242
 809 0012 40F2E732 		movw	r2, #999
 810 0016 C260     		str	r2, [r0, #12]
 388:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 811              		.loc 1 388 3 is_stmt 1 view .LVU243
 388:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 812              		.loc 1 388 29 is_stmt 0 view .LVU244
 813 0018 0361     		str	r3, [r0, #16]
 389:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
ARM GAS  /tmp/cc7QEIJt.s 			page 34


 814              		.loc 1 389 3 is_stmt 1 view .LVU245
 389:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 815              		.loc 1 389 33 is_stmt 0 view .LVU246
 816 001a 8361     		str	r3, [r0, #24]
 390:Core/Src/main.c ****   {
 817              		.loc 1 390 3 is_stmt 1 view .LVU247
 390:Core/Src/main.c ****   {
 818              		.loc 1 390 7 is_stmt 0 view .LVU248
 819 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 820              	.LVL28:
 390:Core/Src/main.c ****   {
 821              		.loc 1 390 6 view .LVU249
 822 0020 00B9     		cbnz	r0, .L45
 398:Core/Src/main.c **** 
 823              		.loc 1 398 1 view .LVU250
 824 0022 08BD     		pop	{r3, pc}
 825              	.L45:
 392:Core/Src/main.c ****   }
 826              		.loc 1 392 5 is_stmt 1 view .LVU251
 827 0024 FFF7FEFF 		bl	Error_Handler
 828              	.LVL29:
 829              	.L47:
 830              		.align	2
 831              	.L46:
 832 0028 00000000 		.word	htim13
 833 002c 001C0040 		.word	1073748992
 834              		.cfi_endproc
 835              	.LFE223:
 837              		.section	.text.MX_TIM14_Init,"ax",%progbits
 838              		.align	1
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 842              		.fpu fpv4-sp-d16
 844              	MX_TIM14_Init:
 845              	.LFB224:
 406:Core/Src/main.c **** 
 846              		.loc 1 406 1 view -0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 850 0000 08B5     		push	{r3, lr}
 851              	.LCFI13:
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 3, -8
 854              		.cfi_offset 14, -4
 415:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 855              		.loc 1 415 3 view .LVU253
 415:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 856              		.loc 1 415 19 is_stmt 0 view .LVU254
 857 0002 0948     		ldr	r0, .L52
 858 0004 094B     		ldr	r3, .L52+4
 859 0006 0360     		str	r3, [r0]
 416:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 860              		.loc 1 416 3 is_stmt 1 view .LVU255
 416:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 861              		.loc 1 416 25 is_stmt 0 view .LVU256
ARM GAS  /tmp/cc7QEIJt.s 			page 35


 862 0008 42F22733 		movw	r3, #8999
 863 000c 4360     		str	r3, [r0, #4]
 417:Core/Src/main.c ****   htim14.Init.Period = 500-1;
 864              		.loc 1 417 3 is_stmt 1 view .LVU257
 417:Core/Src/main.c ****   htim14.Init.Period = 500-1;
 865              		.loc 1 417 27 is_stmt 0 view .LVU258
 866 000e 0023     		movs	r3, #0
 867 0010 8360     		str	r3, [r0, #8]
 418:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 868              		.loc 1 418 3 is_stmt 1 view .LVU259
 418:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 869              		.loc 1 418 22 is_stmt 0 view .LVU260
 870 0012 40F2F312 		movw	r2, #499
 871 0016 C260     		str	r2, [r0, #12]
 419:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 872              		.loc 1 419 3 is_stmt 1 view .LVU261
 419:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 873              		.loc 1 419 29 is_stmt 0 view .LVU262
 874 0018 0361     		str	r3, [r0, #16]
 420:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 875              		.loc 1 420 3 is_stmt 1 view .LVU263
 420:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 876              		.loc 1 420 33 is_stmt 0 view .LVU264
 877 001a 8361     		str	r3, [r0, #24]
 421:Core/Src/main.c ****   {
 878              		.loc 1 421 3 is_stmt 1 view .LVU265
 421:Core/Src/main.c ****   {
 879              		.loc 1 421 7 is_stmt 0 view .LVU266
 880 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 881              	.LVL30:
 421:Core/Src/main.c ****   {
 882              		.loc 1 421 6 view .LVU267
 883 0020 00B9     		cbnz	r0, .L51
 429:Core/Src/main.c **** 
 884              		.loc 1 429 1 view .LVU268
 885 0022 08BD     		pop	{r3, pc}
 886              	.L51:
 423:Core/Src/main.c ****   }
 887              		.loc 1 423 5 is_stmt 1 view .LVU269
 888 0024 FFF7FEFF 		bl	Error_Handler
 889              	.LVL31:
 890              	.L53:
 891              		.align	2
 892              	.L52:
 893 0028 00000000 		.word	htim14
 894 002c 00200040 		.word	1073750016
 895              		.cfi_endproc
 896              	.LFE224:
 898              		.section	.text.SystemClock_Config,"ax",%progbits
 899              		.align	1
 900              		.global	SystemClock_Config
 901              		.syntax unified
 902              		.thumb
 903              		.thumb_func
 904              		.fpu fpv4-sp-d16
 906              	SystemClock_Config:
 907              	.LFB220:
ARM GAS  /tmp/cc7QEIJt.s 			page 36


 212:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 908              		.loc 1 212 1 view -0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 80
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 912 0000 00B5     		push	{lr}
 913              	.LCFI14:
 914              		.cfi_def_cfa_offset 4
 915              		.cfi_offset 14, -4
 916 0002 95B0     		sub	sp, sp, #84
 917              	.LCFI15:
 918              		.cfi_def_cfa_offset 88
 213:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 919              		.loc 1 213 3 view .LVU271
 213:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 920              		.loc 1 213 22 is_stmt 0 view .LVU272
 921 0004 3422     		movs	r2, #52
 922 0006 0021     		movs	r1, #0
 923 0008 07A8     		add	r0, sp, #28
 924 000a FFF7FEFF 		bl	memset
 925              	.LVL32:
 214:Core/Src/main.c **** 
 926              		.loc 1 214 3 is_stmt 1 view .LVU273
 214:Core/Src/main.c **** 
 927              		.loc 1 214 22 is_stmt 0 view .LVU274
 928 000e 0023     		movs	r3, #0
 929 0010 0293     		str	r3, [sp, #8]
 930 0012 0393     		str	r3, [sp, #12]
 931 0014 0493     		str	r3, [sp, #16]
 932 0016 0593     		str	r3, [sp, #20]
 933 0018 0693     		str	r3, [sp, #24]
 218:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 934              		.loc 1 218 3 is_stmt 1 view .LVU275
 935              	.LBB10:
 218:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 936              		.loc 1 218 3 view .LVU276
 937 001a 0093     		str	r3, [sp]
 218:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 938              		.loc 1 218 3 view .LVU277
 939 001c 1E4A     		ldr	r2, .L60
 940 001e 116C     		ldr	r1, [r2, #64]
 941 0020 41F08051 		orr	r1, r1, #268435456
 942 0024 1164     		str	r1, [r2, #64]
 218:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 943              		.loc 1 218 3 view .LVU278
 944 0026 126C     		ldr	r2, [r2, #64]
 945 0028 02F08052 		and	r2, r2, #268435456
 946 002c 0092     		str	r2, [sp]
 218:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 947              		.loc 1 218 3 view .LVU279
 948 002e 009A     		ldr	r2, [sp]
 949              	.LBE10:
 218:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 950              		.loc 1 218 3 view .LVU280
 219:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 951              		.loc 1 219 3 view .LVU281
 952              	.LBB11:
ARM GAS  /tmp/cc7QEIJt.s 			page 37


 219:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 953              		.loc 1 219 3 view .LVU282
 954 0030 0193     		str	r3, [sp, #4]
 219:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 955              		.loc 1 219 3 view .LVU283
 956 0032 1A4A     		ldr	r2, .L60+4
 957 0034 1168     		ldr	r1, [r2]
 958 0036 41F44041 		orr	r1, r1, #49152
 959 003a 1160     		str	r1, [r2]
 219:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 960              		.loc 1 219 3 view .LVU284
 961 003c 1268     		ldr	r2, [r2]
 962 003e 02F44042 		and	r2, r2, #49152
 963 0042 0192     		str	r2, [sp, #4]
 219:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 964              		.loc 1 219 3 view .LVU285
 965 0044 019A     		ldr	r2, [sp, #4]
 966              	.LBE11:
 219:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 967              		.loc 1 219 3 view .LVU286
 223:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 968              		.loc 1 223 3 view .LVU287
 223:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 969              		.loc 1 223 36 is_stmt 0 view .LVU288
 970 0046 0222     		movs	r2, #2
 971 0048 0792     		str	r2, [sp, #28]
 224:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 972              		.loc 1 224 3 is_stmt 1 view .LVU289
 224:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 973              		.loc 1 224 30 is_stmt 0 view .LVU290
 974 004a 0121     		movs	r1, #1
 975 004c 0A91     		str	r1, [sp, #40]
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 976              		.loc 1 225 3 is_stmt 1 view .LVU291
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 977              		.loc 1 225 41 is_stmt 0 view .LVU292
 978 004e 1021     		movs	r1, #16
 979 0050 0B91     		str	r1, [sp, #44]
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 980              		.loc 1 226 3 is_stmt 1 view .LVU293
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 981              		.loc 1 226 34 is_stmt 0 view .LVU294
 982 0052 0D92     		str	r2, [sp, #52]
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 983              		.loc 1 227 3 is_stmt 1 view .LVU295
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 984              		.loc 1 227 35 is_stmt 0 view .LVU296
 985 0054 0E93     		str	r3, [sp, #56]
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 986              		.loc 1 228 3 is_stmt 1 view .LVU297
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 987              		.loc 1 228 30 is_stmt 0 view .LVU298
 988 0056 0823     		movs	r3, #8
 989 0058 0F93     		str	r3, [sp, #60]
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 990              		.loc 1 229 3 is_stmt 1 view .LVU299
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
ARM GAS  /tmp/cc7QEIJt.s 			page 38


 991              		.loc 1 229 30 is_stmt 0 view .LVU300
 992 005a 5A23     		movs	r3, #90
 993 005c 1093     		str	r3, [sp, #64]
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 994              		.loc 1 230 3 is_stmt 1 view .LVU301
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 995              		.loc 1 230 30 is_stmt 0 view .LVU302
 996 005e 1192     		str	r2, [sp, #68]
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 997              		.loc 1 231 3 is_stmt 1 view .LVU303
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 998              		.loc 1 231 30 is_stmt 0 view .LVU304
 999 0060 1292     		str	r2, [sp, #72]
 232:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1000              		.loc 1 232 3 is_stmt 1 view .LVU305
 232:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1001              		.loc 1 232 30 is_stmt 0 view .LVU306
 1002 0062 1392     		str	r2, [sp, #76]
 233:Core/Src/main.c ****   {
 1003              		.loc 1 233 3 is_stmt 1 view .LVU307
 233:Core/Src/main.c ****   {
 1004              		.loc 1 233 7 is_stmt 0 view .LVU308
 1005 0064 07A8     		add	r0, sp, #28
 1006 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1007              	.LVL33:
 233:Core/Src/main.c ****   {
 1008              		.loc 1 233 6 view .LVU309
 1009 006a 88B9     		cbnz	r0, .L58
 239:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1010              		.loc 1 239 3 is_stmt 1 view .LVU310
 239:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1011              		.loc 1 239 31 is_stmt 0 view .LVU311
 1012 006c 0F23     		movs	r3, #15
 1013 006e 0293     		str	r3, [sp, #8]
 241:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1014              		.loc 1 241 3 is_stmt 1 view .LVU312
 241:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1015              		.loc 1 241 34 is_stmt 0 view .LVU313
 1016 0070 0223     		movs	r3, #2
 1017 0072 0393     		str	r3, [sp, #12]
 242:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1018              		.loc 1 242 3 is_stmt 1 view .LVU314
 242:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1019              		.loc 1 242 35 is_stmt 0 view .LVU315
 1020 0074 0023     		movs	r3, #0
 1021 0076 0493     		str	r3, [sp, #16]
 243:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1022              		.loc 1 243 3 is_stmt 1 view .LVU316
 243:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1023              		.loc 1 243 36 is_stmt 0 view .LVU317
 1024 0078 4FF48052 		mov	r2, #4096
 1025 007c 0592     		str	r2, [sp, #20]
 244:Core/Src/main.c **** 
 1026              		.loc 1 244 3 is_stmt 1 view .LVU318
 244:Core/Src/main.c **** 
 1027              		.loc 1 244 36 is_stmt 0 view .LVU319
 1028 007e 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/cc7QEIJt.s 			page 39


 246:Core/Src/main.c ****   {
 1029              		.loc 1 246 3 is_stmt 1 view .LVU320
 246:Core/Src/main.c ****   {
 1030              		.loc 1 246 7 is_stmt 0 view .LVU321
 1031 0080 0321     		movs	r1, #3
 1032 0082 02A8     		add	r0, sp, #8
 1033 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1034              	.LVL34:
 246:Core/Src/main.c ****   {
 1035              		.loc 1 246 6 view .LVU322
 1036 0088 20B9     		cbnz	r0, .L59
 250:Core/Src/main.c **** 
 1037              		.loc 1 250 1 view .LVU323
 1038 008a 15B0     		add	sp, sp, #84
 1039              	.LCFI16:
 1040              		.cfi_remember_state
 1041              		.cfi_def_cfa_offset 4
 1042              		@ sp needed
 1043 008c 5DF804FB 		ldr	pc, [sp], #4
 1044              	.L58:
 1045              	.LCFI17:
 1046              		.cfi_restore_state
 235:Core/Src/main.c ****   }
 1047              		.loc 1 235 5 is_stmt 1 view .LVU324
 1048 0090 FFF7FEFF 		bl	Error_Handler
 1049              	.LVL35:
 1050              	.L59:
 248:Core/Src/main.c ****   }
 1051              		.loc 1 248 5 view .LVU325
 1052 0094 FFF7FEFF 		bl	Error_Handler
 1053              	.LVL36:
 1054              	.L61:
 1055              		.align	2
 1056              	.L60:
 1057 0098 00380240 		.word	1073887232
 1058 009c 00700040 		.word	1073770496
 1059              		.cfi_endproc
 1060              	.LFE220:
 1062              		.section	.text.main,"ax",%progbits
 1063              		.align	1
 1064              		.global	main
 1065              		.syntax unified
 1066              		.thumb
 1067              		.thumb_func
 1068              		.fpu fpv4-sp-d16
 1070              	main:
 1071              	.LFB219:
 132:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1072              		.loc 1 132 1 view -0
 1073              		.cfi_startproc
 1074              		@ Volatile: function does not return.
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077 0000 08B5     		push	{r3, lr}
 1078              	.LCFI18:
 1079              		.cfi_def_cfa_offset 8
 1080              		.cfi_offset 3, -8
ARM GAS  /tmp/cc7QEIJt.s 			page 40


 1081              		.cfi_offset 14, -4
 139:Core/Src/main.c **** 
 1082              		.loc 1 139 3 view .LVU327
 1083 0002 FFF7FEFF 		bl	HAL_Init
 1084              	.LVL37:
 145:Core/Src/main.c **** 
 1085              		.loc 1 145 3 view .LVU328
 1086 0006 FFF7FEFF 		bl	SystemClock_Config
 1087              	.LVL38:
 151:Core/Src/main.c ****   MX_ADC1_Init();
 1088              		.loc 1 151 3 view .LVU329
 1089 000a FFF7FEFF 		bl	MX_GPIO_Init
 1090              	.LVL39:
 152:Core/Src/main.c ****   MX_CAN1_Init();
 1091              		.loc 1 152 3 view .LVU330
 1092 000e FFF7FEFF 		bl	MX_ADC1_Init
 1093              	.LVL40:
 153:Core/Src/main.c ****   MX_DMA_Init();
 1094              		.loc 1 153 3 view .LVU331
 1095 0012 FFF7FEFF 		bl	MX_CAN1_Init
 1096              	.LVL41:
 154:Core/Src/main.c ****   MX_TIM13_Init();
 1097              		.loc 1 154 3 view .LVU332
 1098 0016 FFF7FEFF 		bl	MX_DMA_Init
 1099              	.LVL42:
 155:Core/Src/main.c ****   MX_TIM14_Init();
 1100              		.loc 1 155 3 view .LVU333
 1101 001a FFF7FEFF 		bl	MX_TIM13_Init
 1102              	.LVL43:
 156:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1103              		.loc 1 156 3 view .LVU334
 1104 001e FFF7FEFF 		bl	MX_TIM14_Init
 1105              	.LVL44:
 160:Core/Src/main.c **** 	txHeader1.IDE = CAN_ID_STD;
 1106              		.loc 1 160 2 view .LVU335
 160:Core/Src/main.c **** 	txHeader1.IDE = CAN_ID_STD;
 1107              		.loc 1 160 16 is_stmt 0 view .LVU336
 1108 0022 194A     		ldr	r2, .L65
 1109 0024 0821     		movs	r1, #8
 1110 0026 1161     		str	r1, [r2, #16]
 161:Core/Src/main.c **** 	txHeader1.RTR = CAN_RTR_DATA;
 1111              		.loc 1 161 2 is_stmt 1 view .LVU337
 161:Core/Src/main.c **** 	txHeader1.RTR = CAN_RTR_DATA;
 1112              		.loc 1 161 16 is_stmt 0 view .LVU338
 1113 0028 0023     		movs	r3, #0
 1114 002a 9360     		str	r3, [r2, #8]
 162:Core/Src/main.c **** 	txHeader1.StdId = 0xC0;
 1115              		.loc 1 162 2 is_stmt 1 view .LVU339
 162:Core/Src/main.c **** 	txHeader1.StdId = 0xC0;
 1116              		.loc 1 162 16 is_stmt 0 view .LVU340
 1117 002c D360     		str	r3, [r2, #12]
 163:Core/Src/main.c **** 	txHeader1.ExtId = 0;
 1118              		.loc 1 163 2 is_stmt 1 view .LVU341
 163:Core/Src/main.c **** 	txHeader1.ExtId = 0;
 1119              		.loc 1 163 18 is_stmt 0 view .LVU342
 1120 002e C020     		movs	r0, #192
 1121 0030 1060     		str	r0, [r2]
ARM GAS  /tmp/cc7QEIJt.s 			page 41


 164:Core/Src/main.c **** 	txHeader1.TransmitGlobalTime = DISABLE;
 1122              		.loc 1 164 2 is_stmt 1 view .LVU343
 164:Core/Src/main.c **** 	txHeader1.TransmitGlobalTime = DISABLE;
 1123              		.loc 1 164 18 is_stmt 0 view .LVU344
 1124 0032 5360     		str	r3, [r2, #4]
 165:Core/Src/main.c **** 
 1125              		.loc 1 165 2 is_stmt 1 view .LVU345
 165:Core/Src/main.c **** 
 1126              		.loc 1 165 31 is_stmt 0 view .LVU346
 1127 0034 1375     		strb	r3, [r2, #20]
 168:Core/Src/main.c **** 	txHeader2.IDE = CAN_ID_STD;
 1128              		.loc 1 168 2 is_stmt 1 view .LVU347
 168:Core/Src/main.c **** 	txHeader2.IDE = CAN_ID_STD;
 1129              		.loc 1 168 16 is_stmt 0 view .LVU348
 1130 0036 154A     		ldr	r2, .L65+4
 1131 0038 1161     		str	r1, [r2, #16]
 169:Core/Src/main.c **** 	txHeader2.RTR = CAN_RTR_DATA;
 1132              		.loc 1 169 2 is_stmt 1 view .LVU349
 169:Core/Src/main.c **** 	txHeader2.RTR = CAN_RTR_DATA;
 1133              		.loc 1 169 16 is_stmt 0 view .LVU350
 1134 003a 9360     		str	r3, [r2, #8]
 170:Core/Src/main.c **** 	txHeader2.StdId = 0x92;
 1135              		.loc 1 170 2 is_stmt 1 view .LVU351
 170:Core/Src/main.c **** 	txHeader2.StdId = 0x92;
 1136              		.loc 1 170 16 is_stmt 0 view .LVU352
 1137 003c D360     		str	r3, [r2, #12]
 171:Core/Src/main.c **** 	txHeader2.ExtId = 0;
 1138              		.loc 1 171 2 is_stmt 1 view .LVU353
 171:Core/Src/main.c **** 	txHeader2.ExtId = 0;
 1139              		.loc 1 171 18 is_stmt 0 view .LVU354
 1140 003e 9220     		movs	r0, #146
 1141 0040 1060     		str	r0, [r2]
 172:Core/Src/main.c **** 	txHeader2.TransmitGlobalTime = DISABLE;
 1142              		.loc 1 172 2 is_stmt 1 view .LVU355
 172:Core/Src/main.c **** 	txHeader2.TransmitGlobalTime = DISABLE;
 1143              		.loc 1 172 18 is_stmt 0 view .LVU356
 1144 0042 5360     		str	r3, [r2, #4]
 173:Core/Src/main.c **** 
 1145              		.loc 1 173 2 is_stmt 1 view .LVU357
 173:Core/Src/main.c **** 
 1146              		.loc 1 173 31 is_stmt 0 view .LVU358
 1147 0044 1375     		strb	r3, [r2, #20]
 176:Core/Src/main.c **** 	txHeader3.IDE = CAN_ID_STD;
 1148              		.loc 1 176 2 is_stmt 1 view .LVU359
 176:Core/Src/main.c **** 	txHeader3.IDE = CAN_ID_STD;
 1149              		.loc 1 176 16 is_stmt 0 view .LVU360
 1150 0046 124A     		ldr	r2, .L65+8
 1151 0048 1161     		str	r1, [r2, #16]
 177:Core/Src/main.c **** 	txHeader3.RTR = CAN_RTR_DATA;
 1152              		.loc 1 177 2 is_stmt 1 view .LVU361
 177:Core/Src/main.c **** 	txHeader3.RTR = CAN_RTR_DATA;
 1153              		.loc 1 177 16 is_stmt 0 view .LVU362
 1154 004a 9360     		str	r3, [r2, #8]
 178:Core/Src/main.c **** 	txHeader3.StdId = 0x93;
 1155              		.loc 1 178 2 is_stmt 1 view .LVU363
 178:Core/Src/main.c **** 	txHeader3.StdId = 0x93;
 1156              		.loc 1 178 16 is_stmt 0 view .LVU364
ARM GAS  /tmp/cc7QEIJt.s 			page 42


 1157 004c D360     		str	r3, [r2, #12]
 179:Core/Src/main.c **** 	txHeader3.ExtId = 0;
 1158              		.loc 1 179 2 is_stmt 1 view .LVU365
 179:Core/Src/main.c **** 	txHeader3.ExtId = 0;
 1159              		.loc 1 179 18 is_stmt 0 view .LVU366
 1160 004e 9321     		movs	r1, #147
 1161 0050 1160     		str	r1, [r2]
 180:Core/Src/main.c **** 	txHeader3.TransmitGlobalTime = DISABLE;
 1162              		.loc 1 180 2 is_stmt 1 view .LVU367
 180:Core/Src/main.c **** 	txHeader3.TransmitGlobalTime = DISABLE;
 1163              		.loc 1 180 18 is_stmt 0 view .LVU368
 1164 0052 5360     		str	r3, [r2, #4]
 181:Core/Src/main.c **** 
 1165              		.loc 1 181 2 is_stmt 1 view .LVU369
 181:Core/Src/main.c **** 
 1166              		.loc 1 181 31 is_stmt 0 view .LVU370
 1167 0054 1375     		strb	r3, [r2, #20]
 183:Core/Src/main.c **** 	HAL_CAN_Start(&hcan1); // Initialize CAN Bus
 1168              		.loc 1 183 2 is_stmt 1 view .LVU371
 1169 0056 0F4C     		ldr	r4, .L65+12
 1170 0058 0F49     		ldr	r1, .L65+16
 1171 005a 2046     		mov	r0, r4
 1172 005c FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1173              	.LVL45:
 184:Core/Src/main.c **** 	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Inte
 1174              		.loc 1 184 2 view .LVU372
 1175 0060 2046     		mov	r0, r4
 1176 0062 FFF7FEFF 		bl	HAL_CAN_Start
 1177              	.LVL46:
 185:Core/Src/main.c **** 
 1178              		.loc 1 185 2 view .LVU373
 1179 0066 0221     		movs	r1, #2
 1180 0068 2046     		mov	r0, r4
 1181 006a FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1182              	.LVL47:
 188:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13); // start the timer interupt
 1183              		.loc 1 188 2 view .LVU374
 1184 006e 0422     		movs	r2, #4
 1185 0070 0A49     		ldr	r1, .L65+20
 1186 0072 0B48     		ldr	r0, .L65+24
 1187 0074 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1188              	.LVL48:
 189:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14); // start the timer interupt
 1189              		.loc 1 189 3 view .LVU375
 1190 0078 0A48     		ldr	r0, .L65+28
 1191 007a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1192              	.LVL49:
 190:Core/Src/main.c **** 
 1193              		.loc 1 190 3 view .LVU376
 1194 007e 0A48     		ldr	r0, .L65+32
 1195 0080 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1196              	.LVL50:
 1197              	.L63:
 197:Core/Src/main.c ****   {
 1198              		.loc 1 197 3 discriminator 1 view .LVU377
 203:Core/Src/main.c ****   /* USER CODE END 3 */
 1199              		.loc 1 203 3 discriminator 1 view .LVU378
ARM GAS  /tmp/cc7QEIJt.s 			page 43


 197:Core/Src/main.c ****   {
 1200              		.loc 1 197 9 discriminator 1 view .LVU379
 1201 0084 FEE7     		b	.L63
 1202              	.L66:
 1203 0086 00BF     		.align	2
 1204              	.L65:
 1205 0088 00000000 		.word	txHeader1
 1206 008c 00000000 		.word	txHeader2
 1207 0090 00000000 		.word	txHeader3
 1208 0094 00000000 		.word	hcan1
 1209 0098 00000000 		.word	filter_rcb
 1210 009c 00000000 		.word	adc_buf
 1211 00a0 00000000 		.word	hadc1
 1212 00a4 00000000 		.word	htim13
 1213 00a8 00000000 		.word	htim14
 1214              		.cfi_endproc
 1215              	.LFE219:
 1217              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1218              		.align	1
 1219              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 1220              		.syntax unified
 1221              		.thumb
 1222              		.thumb_func
 1223              		.fpu fpv4-sp-d16
 1225              	HAL_CAN_RxFifo0MsgPendingCallback:
 1226              	.LVL51:
 1227              	.LFB227:
 494:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 1228              		.loc 1 494 1 view -0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 0
 1231              		@ frame_needed = 0, uses_anonymous_args = 0
 494:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 1232              		.loc 1 494 1 is_stmt 0 view .LVU381
 1233 0000 08B5     		push	{r3, lr}
 1234              	.LCFI19:
 1235              		.cfi_def_cfa_offset 8
 1236              		.cfi_offset 3, -8
 1237              		.cfi_offset 14, -4
 495:Core/Src/main.c ****     Error_Handler();
 1238              		.loc 1 495 3 is_stmt 1 view .LVU382
 495:Core/Src/main.c ****     Error_Handler();
 1239              		.loc 1 495 7 is_stmt 0 view .LVU383
 1240 0002 204B     		ldr	r3, .L77
 1241 0004 204A     		ldr	r2, .L77+4
 1242 0006 0021     		movs	r1, #0
 1243 0008 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1244              	.LVL52:
 495:Core/Src/main.c ****     Error_Handler();
 1245              		.loc 1 495 6 view .LVU384
 1246 000c 40B9     		cbnz	r0, .L73
 499:Core/Src/main.c ****   {
 1247              		.loc 1 499 3 is_stmt 1 view .LVU385
 499:Core/Src/main.c ****   {
 1248              		.loc 1 499 15 is_stmt 0 view .LVU386
 1249 000e 1E4B     		ldr	r3, .L77+4
 1250 0010 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc7QEIJt.s 			page 44


 499:Core/Src/main.c ****   {
 1251              		.loc 1 499 6 view .LVU387
 1252 0012 812B     		cmp	r3, #129
 1253 0014 06D0     		beq	.L74
 1254              	.L69:
 508:Core/Src/main.c **** 	  readyToDrive = rxData[0]; // 0 is NO, 1 is YES
 1255              		.loc 1 508 3 is_stmt 1 view .LVU388
 508:Core/Src/main.c **** 	  readyToDrive = rxData[0]; // 0 is NO, 1 is YES
 1256              		.loc 1 508 6 is_stmt 0 view .LVU389
 1257 0016 872B     		cmp	r3, #135
 1258 0018 26D0     		beq	.L75
 1259              	.L70:
 513:Core/Src/main.c ****     faultAMS = rxData[1];
 1260              		.loc 1 513 3 is_stmt 1 view .LVU390
 513:Core/Src/main.c ****     faultAMS = rxData[1];
 1261              		.loc 1 513 6 is_stmt 0 view .LVU391
 1262 001a 822B     		cmp	r3, #130
 1263 001c 29D0     		beq	.L76
 1264              	.L67:
 517:Core/Src/main.c **** 
 1265              		.loc 1 517 1 view .LVU392
 1266 001e 08BD     		pop	{r3, pc}
 1267              	.L73:
 496:Core/Src/main.c **** 
 1268              		.loc 1 496 5 is_stmt 1 view .LVU393
 1269 0020 FFF7FEFF 		bl	Error_Handler
 1270              	.LVL53:
 1271              	.L74:
 501:Core/Src/main.c **** 	  wheelSpeedBR = rxData[1];
 1272              		.loc 1 501 4 view .LVU394
 501:Core/Src/main.c **** 	  wheelSpeedBR = rxData[1];
 1273              		.loc 1 501 25 is_stmt 0 view .LVU395
 1274 0024 174A     		ldr	r2, .L77
 1275 0026 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1276 0028 07EE901A 		vmov	s15, r1	@ int
 501:Core/Src/main.c **** 	  wheelSpeedBR = rxData[1];
 1277              		.loc 1 501 17 view .LVU396
 1278 002c F8EE677A 		vcvt.f32.u32	s15, s15
 1279 0030 1649     		ldr	r1, .L77+8
 1280 0032 C1ED007A 		vstr.32	s15, [r1]
 502:Core/Src/main.c **** 	  rideHeightBL = rxData[2];
 1281              		.loc 1 502 4 is_stmt 1 view .LVU397
 502:Core/Src/main.c **** 	  rideHeightBL = rxData[2];
 1282              		.loc 1 502 25 is_stmt 0 view .LVU398
 1283 0036 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1284 0038 07EE901A 		vmov	s15, r1	@ int
 502:Core/Src/main.c **** 	  rideHeightBL = rxData[2];
 1285              		.loc 1 502 17 view .LVU399
 1286 003c F8EE677A 		vcvt.f32.u32	s15, s15
 1287 0040 1349     		ldr	r1, .L77+12
 1288 0042 C1ED007A 		vstr.32	s15, [r1]
 503:Core/Src/main.c **** 	  rideHeightBR = rxData[3];
 1289              		.loc 1 503 4 is_stmt 1 view .LVU400
 503:Core/Src/main.c **** 	  rideHeightBR = rxData[3];
 1290              		.loc 1 503 25 is_stmt 0 view .LVU401
 1291 0046 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 1292 0048 07EE901A 		vmov	s15, r1	@ int
ARM GAS  /tmp/cc7QEIJt.s 			page 45


 503:Core/Src/main.c **** 	  rideHeightBR = rxData[3];
 1293              		.loc 1 503 17 view .LVU402
 1294 004c F8EE677A 		vcvt.f32.u32	s15, s15
 1295 0050 1049     		ldr	r1, .L77+16
 1296 0052 C1ED007A 		vstr.32	s15, [r1]
 504:Core/Src/main.c ****   }
 1297              		.loc 1 504 4 is_stmt 1 view .LVU403
 504:Core/Src/main.c ****   }
 1298              		.loc 1 504 25 is_stmt 0 view .LVU404
 1299 0056 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 1300 0058 07EE902A 		vmov	s15, r2	@ int
 504:Core/Src/main.c ****   }
 1301              		.loc 1 504 17 view .LVU405
 1302 005c F8EE677A 		vcvt.f32.u32	s15, s15
 1303 0060 0D4A     		ldr	r2, .L77+20
 1304 0062 C2ED007A 		vstr.32	s15, [r2]
 1305 0066 D6E7     		b	.L69
 1306              	.L75:
 509:Core/Src/main.c ****   }
 1307              		.loc 1 509 4 is_stmt 1 view .LVU406
 509:Core/Src/main.c ****   }
 1308              		.loc 1 509 25 is_stmt 0 view .LVU407
 1309 0068 064A     		ldr	r2, .L77
 1310 006a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 509:Core/Src/main.c ****   }
 1311              		.loc 1 509 17 view .LVU408
 1312 006c 0B4A     		ldr	r2, .L77+24
 1313 006e 1160     		str	r1, [r2]
 1314 0070 D3E7     		b	.L70
 1315              	.L76:
 514:Core/Src/main.c ****     faultIMD = rxData[0];
 1316              		.loc 1 514 5 is_stmt 1 view .LVU409
 514:Core/Src/main.c ****     faultIMD = rxData[0];
 1317              		.loc 1 514 22 is_stmt 0 view .LVU410
 1318 0072 044B     		ldr	r3, .L77
 1319 0074 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 514:Core/Src/main.c ****     faultIMD = rxData[0];
 1320              		.loc 1 514 14 view .LVU411
 1321 0076 0A4A     		ldr	r2, .L77+28
 1322 0078 1170     		strb	r1, [r2]
 515:Core/Src/main.c ****   }
 1323              		.loc 1 515 5 is_stmt 1 view .LVU412
 515:Core/Src/main.c ****   }
 1324              		.loc 1 515 22 is_stmt 0 view .LVU413
 1325 007a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 515:Core/Src/main.c ****   }
 1326              		.loc 1 515 14 view .LVU414
 1327 007c 094B     		ldr	r3, .L77+32
 1328 007e 1A70     		strb	r2, [r3]
 517:Core/Src/main.c **** 
 1329              		.loc 1 517 1 view .LVU415
 1330 0080 CDE7     		b	.L67
 1331              	.L78:
 1332 0082 00BF     		.align	2
 1333              	.L77:
 1334 0084 00000000 		.word	.LANCHOR8
 1335 0088 00000000 		.word	rxHeader
ARM GAS  /tmp/cc7QEIJt.s 			page 46


 1336 008c 00000000 		.word	.LANCHOR9
 1337 0090 00000000 		.word	.LANCHOR10
 1338 0094 00000000 		.word	.LANCHOR11
 1339 0098 00000000 		.word	.LANCHOR12
 1340 009c 00000000 		.word	.LANCHOR13
 1341 00a0 00000000 		.word	.LANCHOR14
 1342 00a4 00000000 		.word	.LANCHOR2
 1343              		.cfi_endproc
 1344              	.LFE227:
 1346              		.global	direction
 1347              		.global	coolingState
 1348              		.global	startButtonState
 1349              		.global	commandedTorque
 1350              		.global	faultIMD
 1351              		.global	faultAMS
 1352              		.comm	adc_buf,8,4
 1353              		.global	startButton
 1354              		.global	rideHeightBL
 1355              		.global	rideHeightBR
 1356              		.global	rideHeightFL
 1357              		.global	rideHeightFR
 1358              		.global	wheelSpeedBL
 1359              		.global	wheelSpeedBR
 1360              		.global	wheelSpeedFL
 1361              		.global	wheelSpeedFR
 1362              		.comm	brakeMap,1,1
 1363              		.comm	coastMap,1,1
 1364              		.comm	brake_average,1,1
 1365              		.global	brake1
 1366              		.global	brake0
 1367              		.comm	pedal_average,1,1
 1368              		.global	pedal1
 1369              		.global	pedal0
 1370              		.comm	brakeRegen,4,4
 1371              		.comm	coastRegen,4,4
 1372              		.global	readyToDrive
 1373              		.global	emusVoltage
 1374              		.global	rinehartVoltage
 1375              		.comm	txMailbox,4,4
 1376              		.comm	filter_rcb,40,4
 1377              		.comm	txData,8,4
 1378              		.global	rxData
 1379              		.comm	txHeader3,24,4
 1380              		.comm	txHeader2,24,4
 1381              		.comm	txHeader1,24,4
 1382              		.comm	rxHeader,28,4
 1383              		.global	torque_conversion_ratio
 1384              		.comm	htim14,72,4
 1385              		.comm	htim13,72,4
 1386              		.comm	hcan1,40,4
 1387              		.comm	hdma_adc1,96,4
 1388              		.comm	hadc1,72,4
 1389              		.section	.bss.brake0,"aw",%nobits
 1390              		.set	.LANCHOR4,. + 0
 1393              	brake0:
 1394 0000 00       		.space	1
 1395              		.section	.bss.brake1,"aw",%nobits
ARM GAS  /tmp/cc7QEIJt.s 			page 47


 1396              		.set	.LANCHOR5,. + 0
 1399              	brake1:
 1400 0000 00       		.space	1
 1401              		.section	.bss.commandedTorque,"aw",%nobits
 1402              		.align	1
 1403              		.set	.LANCHOR3,. + 0
 1406              	commandedTorque:
 1407 0000 0000     		.space	2
 1408              		.section	.bss.coolingState,"aw",%nobits
 1409              		.set	.LANCHOR0,. + 0
 1412              	coolingState:
 1413 0000 00       		.space	1
 1414              		.section	.bss.direction,"aw",%nobits
 1415              		.set	.LANCHOR1,. + 0
 1418              	direction:
 1419 0000 00       		.space	1
 1420              		.section	.bss.emusVoltage,"aw",%nobits
 1421              		.align	2
 1424              	emusVoltage:
 1425 0000 00000000 		.space	4
 1426              		.section	.bss.faultAMS,"aw",%nobits
 1427              		.set	.LANCHOR14,. + 0
 1430              	faultAMS:
 1431 0000 00       		.space	1
 1432              		.section	.bss.faultIMD,"aw",%nobits
 1433              		.set	.LANCHOR2,. + 0
 1436              	faultIMD:
 1437 0000 00       		.space	1
 1438              		.section	.bss.pedal0,"aw",%nobits
 1439              		.set	.LANCHOR6,. + 0
 1442              	pedal0:
 1443 0000 00       		.space	1
 1444              		.section	.bss.pedal1,"aw",%nobits
 1445              		.set	.LANCHOR7,. + 0
 1448              	pedal1:
 1449 0000 00       		.space	1
 1450              		.section	.bss.readyToDrive,"aw",%nobits
 1451              		.align	2
 1452              		.set	.LANCHOR13,. + 0
 1455              	readyToDrive:
 1456 0000 00000000 		.space	4
 1457              		.section	.bss.rideHeightBL,"aw",%nobits
 1458              		.align	2
 1459              		.set	.LANCHOR11,. + 0
 1462              	rideHeightBL:
 1463 0000 00000000 		.space	4
 1464              		.section	.bss.rideHeightBR,"aw",%nobits
 1465              		.align	2
 1466              		.set	.LANCHOR12,. + 0
 1469              	rideHeightBR:
 1470 0000 00000000 		.space	4
 1471              		.section	.bss.rideHeightFL,"aw",%nobits
 1472              		.align	2
 1475              	rideHeightFL:
 1476 0000 00000000 		.space	4
 1477              		.section	.bss.rideHeightFR,"aw",%nobits
 1478              		.align	2
ARM GAS  /tmp/cc7QEIJt.s 			page 48


 1481              	rideHeightFR:
 1482 0000 00000000 		.space	4
 1483              		.section	.bss.rinehartVoltage,"aw",%nobits
 1484              		.align	2
 1487              	rinehartVoltage:
 1488 0000 00000000 		.space	4
 1489              		.section	.bss.rxData,"aw",%nobits
 1490              		.align	2
 1491              		.set	.LANCHOR8,. + 0
 1494              	rxData:
 1495 0000 00000000 		.space	8
 1495      00000000 
 1496              		.section	.bss.startButton,"aw",%nobits
 1499              	startButton:
 1500 0000 00       		.space	1
 1501              		.section	.bss.startButtonState,"aw",%nobits
 1504              	startButtonState:
 1505 0000 00       		.space	1
 1506              		.section	.bss.wheelSpeedBL,"aw",%nobits
 1507              		.align	2
 1508              		.set	.LANCHOR9,. + 0
 1511              	wheelSpeedBL:
 1512 0000 00000000 		.space	4
 1513              		.section	.bss.wheelSpeedBR,"aw",%nobits
 1514              		.align	2
 1515              		.set	.LANCHOR10,. + 0
 1518              	wheelSpeedBR:
 1519 0000 00000000 		.space	4
 1520              		.section	.bss.wheelSpeedFL,"aw",%nobits
 1521              		.align	2
 1524              	wheelSpeedFL:
 1525 0000 00000000 		.space	4
 1526              		.section	.bss.wheelSpeedFR,"aw",%nobits
 1527              		.align	2
 1530              	wheelSpeedFR:
 1531 0000 00000000 		.space	4
 1532              		.section	.data.torque_conversion_ratio,"aw"
 1533              		.align	2
 1536              	torque_conversion_ratio:
 1537 0000 0000C83D 		.word	1036517376
 1538              		.text
 1539              	.Letext0:
 1540              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1541              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1542              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1543              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1544              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1545              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1546              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1547              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1548              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1549              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1550              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1551              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1552              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1553              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1554              		.file 17 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
ARM GAS  /tmp/cc7QEIJt.s 			page 49


 1555              		.file 18 "/usr/include/newlib/sys/_types.h"
 1556              		.file 19 "/usr/include/newlib/sys/reent.h"
 1557              		.file 20 "/usr/include/newlib/sys/lock.h"
 1558              		.file 21 "/usr/include/newlib/math.h"
 1559              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1560              		.file 23 "<built-in>"
ARM GAS  /tmp/cc7QEIJt.s 			page 50


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc7QEIJt.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc7QEIJt.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc7QEIJt.s:175    .text.MX_GPIO_Init:00000000000000ac $d
     /tmp/cc7QEIJt.s:182    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc7QEIJt.s:188    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc7QEIJt.s:237    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc7QEIJt.s:242    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc7QEIJt.s:249    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc7QEIJt.s:367    .text.HAL_TIM_PeriodElapsedCallback:0000000000000078 $d
                            *COM*:0000000000000048 htim13
                            *COM*:0000000000000048 htim14
                            *COM*:0000000000000008 txData
                            *COM*:0000000000000001 pedal_average
                            *COM*:0000000000000008 adc_buf
                            *COM*:0000000000000004 txMailbox
                            *COM*:0000000000000018 txHeader1
                            *COM*:0000000000000028 hcan1
     /tmp/cc7QEIJt.s:384    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc7QEIJt.s:391    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc7QEIJt.s:429    .text.HAL_ADC_ConvCpltCallback:000000000000001c $d
     /tmp/cc7QEIJt.s:438    .text.Error_Handler:0000000000000000 $t
     /tmp/cc7QEIJt.s:445    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc7QEIJt.s:477    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc7QEIJt.s:483    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc7QEIJt.s:651    .text.MX_ADC1_Init:00000000000000a4 $d
                            *COM*:0000000000000048 hadc1
     /tmp/cc7QEIJt.s:658    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cc7QEIJt.s:664    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cc7QEIJt.s:769    .text.MX_CAN1_Init:000000000000005c $d
                            *COM*:0000000000000028 filter_rcb
     /tmp/cc7QEIJt.s:777    .text.MX_TIM13_Init:0000000000000000 $t
     /tmp/cc7QEIJt.s:783    .text.MX_TIM13_Init:0000000000000000 MX_TIM13_Init
     /tmp/cc7QEIJt.s:832    .text.MX_TIM13_Init:0000000000000028 $d
     /tmp/cc7QEIJt.s:838    .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/cc7QEIJt.s:844    .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/cc7QEIJt.s:893    .text.MX_TIM14_Init:0000000000000028 $d
     /tmp/cc7QEIJt.s:899    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc7QEIJt.s:906    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc7QEIJt.s:1057   .text.SystemClock_Config:0000000000000098 $d
     /tmp/cc7QEIJt.s:1063   .text.main:0000000000000000 $t
     /tmp/cc7QEIJt.s:1070   .text.main:0000000000000000 main
     /tmp/cc7QEIJt.s:1205   .text.main:0000000000000088 $d
                            *COM*:0000000000000018 txHeader2
                            *COM*:0000000000000018 txHeader3
     /tmp/cc7QEIJt.s:1218   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cc7QEIJt.s:1225   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cc7QEIJt.s:1334   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000084 $d
                            *COM*:000000000000001c rxHeader
     /tmp/cc7QEIJt.s:1418   .bss.direction:0000000000000000 direction
     /tmp/cc7QEIJt.s:1412   .bss.coolingState:0000000000000000 coolingState
     /tmp/cc7QEIJt.s:1504   .bss.startButtonState:0000000000000000 startButtonState
     /tmp/cc7QEIJt.s:1406   .bss.commandedTorque:0000000000000000 commandedTorque
     /tmp/cc7QEIJt.s:1436   .bss.faultIMD:0000000000000000 faultIMD
     /tmp/cc7QEIJt.s:1430   .bss.faultAMS:0000000000000000 faultAMS
     /tmp/cc7QEIJt.s:1499   .bss.startButton:0000000000000000 startButton
ARM GAS  /tmp/cc7QEIJt.s 			page 51


     /tmp/cc7QEIJt.s:1462   .bss.rideHeightBL:0000000000000000 rideHeightBL
     /tmp/cc7QEIJt.s:1469   .bss.rideHeightBR:0000000000000000 rideHeightBR
     /tmp/cc7QEIJt.s:1475   .bss.rideHeightFL:0000000000000000 rideHeightFL
     /tmp/cc7QEIJt.s:1481   .bss.rideHeightFR:0000000000000000 rideHeightFR
     /tmp/cc7QEIJt.s:1511   .bss.wheelSpeedBL:0000000000000000 wheelSpeedBL
     /tmp/cc7QEIJt.s:1518   .bss.wheelSpeedBR:0000000000000000 wheelSpeedBR
     /tmp/cc7QEIJt.s:1524   .bss.wheelSpeedFL:0000000000000000 wheelSpeedFL
     /tmp/cc7QEIJt.s:1530   .bss.wheelSpeedFR:0000000000000000 wheelSpeedFR
                            *COM*:0000000000000001 brakeMap
                            *COM*:0000000000000001 coastMap
                            *COM*:0000000000000001 brake_average
     /tmp/cc7QEIJt.s:1399   .bss.brake1:0000000000000000 brake1
     /tmp/cc7QEIJt.s:1393   .bss.brake0:0000000000000000 brake0
     /tmp/cc7QEIJt.s:1448   .bss.pedal1:0000000000000000 pedal1
     /tmp/cc7QEIJt.s:1442   .bss.pedal0:0000000000000000 pedal0
                            *COM*:0000000000000004 brakeRegen
                            *COM*:0000000000000004 coastRegen
     /tmp/cc7QEIJt.s:1455   .bss.readyToDrive:0000000000000000 readyToDrive
     /tmp/cc7QEIJt.s:1424   .bss.emusVoltage:0000000000000000 emusVoltage
     /tmp/cc7QEIJt.s:1487   .bss.rinehartVoltage:0000000000000000 rinehartVoltage
     /tmp/cc7QEIJt.s:1494   .bss.rxData:0000000000000000 rxData
     /tmp/cc7QEIJt.s:1536   .data.torque_conversion_ratio:0000000000000000 torque_conversion_ratio
                            *COM*:0000000000000060 hdma_adc1
     /tmp/cc7QEIJt.s:1394   .bss.brake0:0000000000000000 $d
     /tmp/cc7QEIJt.s:1400   .bss.brake1:0000000000000000 $d
     /tmp/cc7QEIJt.s:1402   .bss.commandedTorque:0000000000000000 $d
     /tmp/cc7QEIJt.s:1413   .bss.coolingState:0000000000000000 $d
     /tmp/cc7QEIJt.s:1419   .bss.direction:0000000000000000 $d
     /tmp/cc7QEIJt.s:1421   .bss.emusVoltage:0000000000000000 $d
     /tmp/cc7QEIJt.s:1431   .bss.faultAMS:0000000000000000 $d
     /tmp/cc7QEIJt.s:1437   .bss.faultIMD:0000000000000000 $d
     /tmp/cc7QEIJt.s:1443   .bss.pedal0:0000000000000000 $d
     /tmp/cc7QEIJt.s:1449   .bss.pedal1:0000000000000000 $d
     /tmp/cc7QEIJt.s:1451   .bss.readyToDrive:0000000000000000 $d
     /tmp/cc7QEIJt.s:1458   .bss.rideHeightBL:0000000000000000 $d
     /tmp/cc7QEIJt.s:1465   .bss.rideHeightBR:0000000000000000 $d
     /tmp/cc7QEIJt.s:1472   .bss.rideHeightFL:0000000000000000 $d
     /tmp/cc7QEIJt.s:1478   .bss.rideHeightFR:0000000000000000 $d
     /tmp/cc7QEIJt.s:1484   .bss.rinehartVoltage:0000000000000000 $d
     /tmp/cc7QEIJt.s:1490   .bss.rxData:0000000000000000 $d
     /tmp/cc7QEIJt.s:1500   .bss.startButton:0000000000000000 $d
     /tmp/cc7QEIJt.s:1505   .bss.startButtonState:0000000000000000 $d
     /tmp/cc7QEIJt.s:1507   .bss.wheelSpeedBL:0000000000000000 $d
     /tmp/cc7QEIJt.s:1514   .bss.wheelSpeedBR:0000000000000000 $d
     /tmp/cc7QEIJt.s:1521   .bss.wheelSpeedFL:0000000000000000 $d
     /tmp/cc7QEIJt.s:1527   .bss.wheelSpeedFR:0000000000000000 $d
     /tmp/cc7QEIJt.s:1533   .data.torque_conversion_ratio:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_ReadPin
HAL_CAN_AddTxMessage
HAL_ADC_Init
HAL_ADC_ConfigChannel
ARM GAS  /tmp/cc7QEIJt.s 			page 52


HAL_CAN_Init
HAL_TIM_Base_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_ADC_Start_DMA
HAL_TIM_Base_Start_IT
HAL_CAN_GetRxMessage
