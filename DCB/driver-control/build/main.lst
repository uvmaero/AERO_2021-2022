ARM GAS  /tmp/ccf4ijSD.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB223:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccf4ijSD.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** #define ADC_BUF_LEN               4
  35:Core/Src/main.c **** #define MAX_PEDAL_SKEW            100
  36:Core/Src/main.c **** #define PEDAL_MAX                 600 // max pedal found from Accelerator test 12bit ADC
  37:Core/Src/main.c **** #define PEDAL_MIN                 128 // max pedal found from Accelerator test 12bit ADC
  38:Core/Src/main.c **** #define PEDAL_DEADBAND                 10 // max pedal found from Accelerator test 12bit ADC
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE END PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  49:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** TIM_HandleTypeDef htim13;
  54:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE BEGIN PV */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** // CAN transmitting
  59:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader;               // either daq or control idk which one address 
  60:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader2;              // rinehart command message address
  61:Core/Src/main.c **** uint8_t TxData[8];
  62:Core/Src/main.c **** uint32_t TxMailbox;
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** // CAN reciving 
  65:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
  66:Core/Src/main.c **** uint8_t RxData[8];
  67:Core/Src/main.c **** CAN_FilterTypeDef filter0;                  // filter for __________
  68:Core/Src/main.c **** CAN_FilterTypeDef filter1;                  // fiter for ___________
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** // signal variables (0 = off | 1 = on)
  71:Core/Src/main.c **** uint8_t imdFault = 0;             
  72:Core/Src/main.c **** uint8_t bmsFault = 0;
  73:Core/Src/main.c **** uint8_t switch_cooling = 0;
  74:Core/Src/main.c **** uint8_t switch_direction = 0;               // 0 = forward | 1 = reverse (this changes requires an 
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** // analog pins
  77:Core/Src/main.c **** uint16_t adc_buf[ADC_BUF_LEN];
  78:Core/Src/main.c **** uint16_t pedal0 = 0;
  79:Core/Src/main.c **** uint16_t pedal1 = 1;
  80:Core/Src/main.c **** uint16_t pedalAverage = 0;
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** // state variables (0 = off | 1 = on)
  83:Core/Src/main.c **** uint8_t ready_to_drive = 0;                 // 0 until precharge is done
  84:Core/Src/main.c **** uint8_t buzzerState = 0;                    // for controlling the buzzer
  85:Core/Src/main.c **** uint8_t buzzerCounter = 0;                  // counter for how long the buzzer has been buzzing
  86:Core/Src/main.c **** uint8_t enableInverter = 0;                 // stores state of inverter, can only be 1 after buzzer
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** // rinehart commands
ARM GAS  /tmp/ccf4ijSD.s 			page 3


  89:Core/Src/main.c **** uint16_t commandedTorque = 0;               // torque request sent to rinehart, init with 0 to prev
  90:Core/Src/main.c **** uint16_t command_torque_limit = 0;          // max torque allowed to be requested from rinehart, in
  91:Core/Src/main.c **** enum mode                                   // create an enumeration for the drive modes
  92:Core/Src/main.c **** {
  93:Core/Src/main.c ****   SLOW,       // 50% power 
  94:Core/Src/main.c ****   ECO,        // 75% power
  95:Core/Src/main.c ****   FAST        // 100% power 
  96:Core/Src/main.c **** };
  97:Core/Src/main.c **** int driveMode = ECO;                        // set the inital drive mode of the car
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* USER CODE END PV */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 102:Core/Src/main.c **** void SystemClock_Config(void);
 103:Core/Src/main.c **** static void MX_GPIO_Init(void);
 104:Core/Src/main.c **** static void MX_CAN1_Init(void);
 105:Core/Src/main.c **** static void MX_DMA_Init(void);
 106:Core/Src/main.c **** static void MX_ADC1_Init(void);
 107:Core/Src/main.c **** static void MX_TIM14_Init(void);
 108:Core/Src/main.c **** static void MX_TIM13_Init(void);
 109:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 110:Core/Src/main.c **** uint16_t pedal_conversion(uint16_t pedal0, uint16_t pedal1);
 111:Core/Src/main.c **** long mapValue(long x, long in_min, long in_max, long out_min, long out_max);
 112:Core/Src/main.c **** uint16_t getCommandedTorque();
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /* USER CODE END PFP */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 117:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /* USER CODE END 0 */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /**
 122:Core/Src/main.c ****   * @brief  The application entry point.
 123:Core/Src/main.c ****   * @retval int
 124:Core/Src/main.c ****   */
 125:Core/Src/main.c **** int main(void)
 126:Core/Src/main.c **** {
 127:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   // define TX header
 130:Core/Src/main.c ****   TxHeader.StdId = 0x093;
 131:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 132:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 133:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 134:Core/Src/main.c ****   TxHeader.DLC = 8;
 135:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 136:Core/Src/main.c ****   
 137:Core/Src/main.c ****   // Rinehart command message
 138:Core/Src/main.c ****   TxHeader2.StdId = 0x0C0;
 139:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 140:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 141:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 142:Core/Src/main.c ****   TxHeader2.DLC = 8;
 143:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE END 1 */
ARM GAS  /tmp/ccf4ijSD.s 			page 4


 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 150:Core/Src/main.c ****   HAL_Init();
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* USER CODE END Init */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* Configure the system clock */
 157:Core/Src/main.c ****   SystemClock_Config();
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   /* USER CODE END SysInit */
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /* Initialize all configured peripherals */
 164:Core/Src/main.c ****   MX_GPIO_Init();
 165:Core/Src/main.c ****   MX_CAN1_Init();
 166:Core/Src/main.c ****   MX_DMA_Init();
 167:Core/Src/main.c ****   MX_ADC1_Init();
 168:Core/Src/main.c ****   MX_TIM14_Init();
 169:Core/Src/main.c ****   MX_TIM13_Init();
 170:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   // start interrupts
 173:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 174:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 175:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 176:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 177:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* USER CODE END 2 */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* Infinite loop */
 182:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 183:Core/Src/main.c ****   while (1)
 184:Core/Src/main.c ****   {
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****     /* USER CODE END WHILE */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 189:Core/Src/main.c ****   }
 190:Core/Src/main.c ****   /* USER CODE END 3 */
 191:Core/Src/main.c **** }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** /**
 194:Core/Src/main.c ****   * @brief System Clock Configuration
 195:Core/Src/main.c ****   * @retval None
 196:Core/Src/main.c ****   */
 197:Core/Src/main.c **** void SystemClock_Config(void)
 198:Core/Src/main.c **** {
 199:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 200:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
ARM GAS  /tmp/ccf4ijSD.s 			page 5


 203:Core/Src/main.c ****   */
 204:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 205:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 206:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 207:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 211:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 219:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 220:Core/Src/main.c ****   {
 221:Core/Src/main.c ****     Error_Handler();
 222:Core/Src/main.c ****   }
 223:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 224:Core/Src/main.c ****   */
 225:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 226:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 227:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 228:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 229:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 230:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 233:Core/Src/main.c ****   {
 234:Core/Src/main.c ****     Error_Handler();
 235:Core/Src/main.c ****   }
 236:Core/Src/main.c **** }
 237:Core/Src/main.c **** 
 238:Core/Src/main.c **** /**
 239:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 240:Core/Src/main.c ****   * @param None
 241:Core/Src/main.c ****   * @retval None
 242:Core/Src/main.c ****   */
 243:Core/Src/main.c **** static void MX_ADC1_Init(void)
 244:Core/Src/main.c **** {
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 255:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 256:Core/Src/main.c ****   */
 257:Core/Src/main.c ****   hadc1.Instance = ADC1;
 258:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 259:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
ARM GAS  /tmp/ccf4ijSD.s 			page 6


 260:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 261:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 262:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 263:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 264:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 265:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 266:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 267:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 268:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 269:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 270:Core/Src/main.c ****   {
 271:Core/Src/main.c ****     Error_Handler();
 272:Core/Src/main.c ****   }
 273:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 274:Core/Src/main.c ****   */
 275:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 276:Core/Src/main.c ****   sConfig.Rank = 1;
 277:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 278:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 279:Core/Src/main.c ****   {
 280:Core/Src/main.c ****     Error_Handler();
 281:Core/Src/main.c ****   }
 282:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 283:Core/Src/main.c ****   */
 284:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 285:Core/Src/main.c ****   sConfig.Rank = 2;
 286:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 287:Core/Src/main.c ****   {
 288:Core/Src/main.c ****     Error_Handler();
 289:Core/Src/main.c ****   }
 290:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 291:Core/Src/main.c ****   */
 292:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 293:Core/Src/main.c ****   sConfig.Rank = 3;
 294:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 295:Core/Src/main.c ****   {
 296:Core/Src/main.c ****     Error_Handler();
 297:Core/Src/main.c ****   }
 298:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 299:Core/Src/main.c ****   */
 300:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
 301:Core/Src/main.c ****   sConfig.Rank = 4;
 302:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 303:Core/Src/main.c ****   {
 304:Core/Src/main.c ****     Error_Handler();
 305:Core/Src/main.c ****   }
 306:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** }
 311:Core/Src/main.c **** 
 312:Core/Src/main.c **** /**
 313:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 314:Core/Src/main.c ****   * @param None
 315:Core/Src/main.c ****   * @retval None
 316:Core/Src/main.c ****   */
ARM GAS  /tmp/ccf4ijSD.s 			page 7


 317:Core/Src/main.c **** static void MX_CAN1_Init(void)
 318:Core/Src/main.c **** {
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 327:Core/Src/main.c ****   hcan1.Instance = CAN1;
 328:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 329:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 330:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 331:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 332:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 333:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 334:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 335:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 336:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 337:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 338:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 339:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 340:Core/Src/main.c ****   {
 341:Core/Src/main.c ****     Error_Handler();
 342:Core/Src/main.c ****   }
 343:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****   filter0.FilterIdHigh = 0x082 << 5;
 346:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 347:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 348:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 349:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 350:Core/Src/main.c ****   filter0.FilterBank = 1;
 351:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 352:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 353:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 354:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan1, &filter0);
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   // listen for HVB
 359:Core/Src/main.c ****   filter1.FilterIdHigh = 0x087 << 5;
 360:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 361:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x087 << 5;
 362:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 363:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 364:Core/Src/main.c ****   filter1.FilterBank = 2;
 365:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 366:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 367:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 368:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan1, &filter1);
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 373:Core/Src/main.c **** 
ARM GAS  /tmp/ccf4ijSD.s 			page 8


 374:Core/Src/main.c **** }
 375:Core/Src/main.c **** 
 376:Core/Src/main.c **** /**
 377:Core/Src/main.c ****   * @brief TIM13 Initialization Function
 378:Core/Src/main.c ****   * @param None
 379:Core/Src/main.c ****   * @retval None
 380:Core/Src/main.c ****   */
 381:Core/Src/main.c **** static void MX_TIM13_Init(void)
 382:Core/Src/main.c **** {
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 0 */
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /* USER CODE END TIM13_Init 0 */
 387:Core/Src/main.c **** 
 388:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 1 */
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE END TIM13_Init 1 */
 391:Core/Src/main.c ****   htim13.Instance = TIM13;
 392:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 393:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 394:Core/Src/main.c ****   htim13.Init.Period = 500-1;
 395:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 396:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 397:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 398:Core/Src/main.c ****   {
 399:Core/Src/main.c ****     Error_Handler();
 400:Core/Src/main.c ****   }
 401:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 2 */
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /* USER CODE END TIM13_Init 2 */
 404:Core/Src/main.c **** 
 405:Core/Src/main.c **** }
 406:Core/Src/main.c **** 
 407:Core/Src/main.c **** /**
 408:Core/Src/main.c ****   * @brief TIM14 Initialization Function
 409:Core/Src/main.c ****   * @param None
 410:Core/Src/main.c ****   * @retval None
 411:Core/Src/main.c ****   */
 412:Core/Src/main.c **** static void MX_TIM14_Init(void)
 413:Core/Src/main.c **** {
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
 416:Core/Src/main.c **** 
 417:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
 420:Core/Src/main.c **** 
 421:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
 422:Core/Src/main.c ****   htim14.Instance = TIM14;
 423:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 424:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 425:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 426:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 427:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 428:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 429:Core/Src/main.c ****   {
 430:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccf4ijSD.s 			page 9


 431:Core/Src/main.c ****   }
 432:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c **** }
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** /**
 439:Core/Src/main.c ****   * Enable DMA controller clock
 440:Core/Src/main.c ****   */
 441:Core/Src/main.c **** static void MX_DMA_Init(void)
 442:Core/Src/main.c **** {
 443:Core/Src/main.c **** 
 444:Core/Src/main.c ****   /* DMA controller clock enable */
 445:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* DMA interrupt init */
 448:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 449:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 450:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 451:Core/Src/main.c **** 
 452:Core/Src/main.c **** }
 453:Core/Src/main.c **** 
 454:Core/Src/main.c **** /**
 455:Core/Src/main.c ****   * @brief GPIO Initialization Function
 456:Core/Src/main.c ****   * @param None
 457:Core/Src/main.c ****   * @retval None
 458:Core/Src/main.c ****   */
 459:Core/Src/main.c **** static void MX_GPIO_Init(void)
 460:Core/Src/main.c **** {
  28              		.loc 1 460 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 56
 461:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 461 3 view .LVU1
  44              		.loc 1 461 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0394     		str	r4, [sp, #12]
  47 0008 0494     		str	r4, [sp, #16]
  48 000a 0594     		str	r4, [sp, #20]
  49 000c 0694     		str	r4, [sp, #24]
  50 000e 0794     		str	r4, [sp, #28]
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 464:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
ARM GAS  /tmp/ccf4ijSD.s 			page 10


  51              		.loc 1 464 3 is_stmt 1 view .LVU3
  52              	.LBB4:
  53              		.loc 1 464 3 view .LVU4
  54 0010 0094     		str	r4, [sp]
  55              		.loc 1 464 3 view .LVU5
  56 0012 2B4B     		ldr	r3, .L3
  57 0014 1A6B     		ldr	r2, [r3, #48]
  58 0016 42F08002 		orr	r2, r2, #128
  59 001a 1A63     		str	r2, [r3, #48]
  60              		.loc 1 464 3 view .LVU6
  61 001c 1A6B     		ldr	r2, [r3, #48]
  62 001e 02F08002 		and	r2, r2, #128
  63 0022 0092     		str	r2, [sp]
  64              		.loc 1 464 3 view .LVU7
  65 0024 009A     		ldr	r2, [sp]
  66              	.LBE4:
  67              		.loc 1 464 3 view .LVU8
 465:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  68              		.loc 1 465 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 465 3 view .LVU10
  71 0026 0194     		str	r4, [sp, #4]
  72              		.loc 1 465 3 view .LVU11
  73 0028 1A6B     		ldr	r2, [r3, #48]
  74 002a 42F00102 		orr	r2, r2, #1
  75 002e 1A63     		str	r2, [r3, #48]
  76              		.loc 1 465 3 view .LVU12
  77 0030 1A6B     		ldr	r2, [r3, #48]
  78 0032 02F00102 		and	r2, r2, #1
  79 0036 0192     		str	r2, [sp, #4]
  80              		.loc 1 465 3 view .LVU13
  81 0038 019A     		ldr	r2, [sp, #4]
  82              	.LBE5:
  83              		.loc 1 465 3 view .LVU14
 466:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  84              		.loc 1 466 3 view .LVU15
  85              	.LBB6:
  86              		.loc 1 466 3 view .LVU16
  87 003a 0294     		str	r4, [sp, #8]
  88              		.loc 1 466 3 view .LVU17
  89 003c 1A6B     		ldr	r2, [r3, #48]
  90 003e 42F00202 		orr	r2, r2, #2
  91 0042 1A63     		str	r2, [r3, #48]
  92              		.loc 1 466 3 view .LVU18
  93 0044 1B6B     		ldr	r3, [r3, #48]
  94 0046 03F00203 		and	r3, r3, #2
  95 004a 0293     		str	r3, [sp, #8]
  96              		.loc 1 466 3 view .LVU19
  97 004c 029B     		ldr	r3, [sp, #8]
  98              	.LBE6:
  99              		.loc 1 466 3 view .LVU20
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 469:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 100              		.loc 1 469 3 view .LVU21
 101 004e 1D4D     		ldr	r5, .L3+4
 102 0050 2246     		mov	r2, r4
ARM GAS  /tmp/ccf4ijSD.s 			page 11


 103 0052 4FF48271 		mov	r1, #260
 104 0056 2846     		mov	r0, r5
 105 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 106              	.LVL0:
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 472:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 107              		.loc 1 472 3 view .LVU22
 108 005c 1A4E     		ldr	r6, .L3+8
 109 005e 2246     		mov	r2, r4
 110 0060 4FF48061 		mov	r1, #1024
 111 0064 3046     		mov	r0, r6
 112 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 113              	.LVL1:
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /*Configure GPIO pins : PB2 PB8 */
 475:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 114              		.loc 1 475 3 view .LVU23
 115              		.loc 1 475 23 is_stmt 0 view .LVU24
 116 006a 4FF48273 		mov	r3, #260
 117 006e 0393     		str	r3, [sp, #12]
 476:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 476 3 is_stmt 1 view .LVU25
 119              		.loc 1 476 24 is_stmt 0 view .LVU26
 120 0070 0127     		movs	r7, #1
 121 0072 0497     		str	r7, [sp, #16]
 477:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 122              		.loc 1 477 3 is_stmt 1 view .LVU27
 123              		.loc 1 477 24 is_stmt 0 view .LVU28
 124 0074 0594     		str	r4, [sp, #20]
 478:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 478 3 is_stmt 1 view .LVU29
 126              		.loc 1 478 25 is_stmt 0 view .LVU30
 127 0076 0694     		str	r4, [sp, #24]
 479:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 128              		.loc 1 479 3 is_stmt 1 view .LVU31
 129 0078 03A9     		add	r1, sp, #12
 130 007a 2846     		mov	r0, r5
 131 007c FFF7FEFF 		bl	HAL_GPIO_Init
 132              	.LVL2:
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /*Configure GPIO pin : PB15 */
 482:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 133              		.loc 1 482 3 view .LVU32
 134              		.loc 1 482 23 is_stmt 0 view .LVU33
 135 0080 4FF40043 		mov	r3, #32768
 136 0084 0393     		str	r3, [sp, #12]
 483:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 137              		.loc 1 483 3 is_stmt 1 view .LVU34
 138              		.loc 1 483 24 is_stmt 0 view .LVU35
 139 0086 4FF48813 		mov	r3, #1114112
 140 008a 0493     		str	r3, [sp, #16]
 484:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 141              		.loc 1 484 3 is_stmt 1 view .LVU36
 142              		.loc 1 484 24 is_stmt 0 view .LVU37
 143 008c 0594     		str	r4, [sp, #20]
 485:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
ARM GAS  /tmp/ccf4ijSD.s 			page 12


 144              		.loc 1 485 3 is_stmt 1 view .LVU38
 145 008e 03A9     		add	r1, sp, #12
 146 0090 2846     		mov	r0, r5
 147 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 148              	.LVL3:
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   /*Configure GPIO pin : PA10 */
 488:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 149              		.loc 1 488 3 view .LVU39
 150              		.loc 1 488 23 is_stmt 0 view .LVU40
 151 0096 4FF48063 		mov	r3, #1024
 152 009a 0393     		str	r3, [sp, #12]
 489:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 153              		.loc 1 489 3 is_stmt 1 view .LVU41
 154              		.loc 1 489 24 is_stmt 0 view .LVU42
 155 009c 0497     		str	r7, [sp, #16]
 490:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 156              		.loc 1 490 3 is_stmt 1 view .LVU43
 157              		.loc 1 490 24 is_stmt 0 view .LVU44
 158 009e 0594     		str	r4, [sp, #20]
 491:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 159              		.loc 1 491 3 is_stmt 1 view .LVU45
 160              		.loc 1 491 25 is_stmt 0 view .LVU46
 161 00a0 0694     		str	r4, [sp, #24]
 492:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 162              		.loc 1 492 3 is_stmt 1 view .LVU47
 163 00a2 03A9     		add	r1, sp, #12
 164 00a4 3046     		mov	r0, r6
 165 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 166              	.LVL4:
 493:Core/Src/main.c **** 
 494:Core/Src/main.c ****   /* EXTI interrupt init*/
 495:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 167              		.loc 1 495 3 view .LVU48
 168 00aa 2246     		mov	r2, r4
 169 00ac 2146     		mov	r1, r4
 170 00ae 2820     		movs	r0, #40
 171 00b0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 172              	.LVL5:
 496:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 173              		.loc 1 496 3 view .LVU49
 174 00b4 2820     		movs	r0, #40
 175 00b6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 176              	.LVL6:
 497:Core/Src/main.c **** 
 498:Core/Src/main.c **** }
 177              		.loc 1 498 1 is_stmt 0 view .LVU50
 178 00ba 09B0     		add	sp, sp, #36
 179              	.LCFI2:
 180              		.cfi_def_cfa_offset 20
 181              		@ sp needed
 182 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 183              	.L4:
 184 00be 00BF     		.align	2
 185              	.L3:
 186 00c0 00380240 		.word	1073887232
 187 00c4 00040240 		.word	1073873920
ARM GAS  /tmp/ccf4ijSD.s 			page 13


 188 00c8 00000240 		.word	1073872896
 189              		.cfi_endproc
 190              	.LFE223:
 192              		.section	.text.MX_DMA_Init,"ax",%progbits
 193              		.align	1
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	MX_DMA_Init:
 200              	.LFB222:
 442:Core/Src/main.c **** 
 201              		.loc 1 442 1 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 8
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 00B5     		push	{lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 14, -4
 209 0002 83B0     		sub	sp, sp, #12
 210              	.LCFI4:
 211              		.cfi_def_cfa_offset 16
 445:Core/Src/main.c **** 
 212              		.loc 1 445 3 view .LVU52
 213              	.LBB7:
 445:Core/Src/main.c **** 
 214              		.loc 1 445 3 view .LVU53
 215 0004 0021     		movs	r1, #0
 216 0006 0191     		str	r1, [sp, #4]
 445:Core/Src/main.c **** 
 217              		.loc 1 445 3 view .LVU54
 218 0008 094B     		ldr	r3, .L7
 219 000a 1A6B     		ldr	r2, [r3, #48]
 220 000c 42F48002 		orr	r2, r2, #4194304
 221 0010 1A63     		str	r2, [r3, #48]
 445:Core/Src/main.c **** 
 222              		.loc 1 445 3 view .LVU55
 223 0012 1B6B     		ldr	r3, [r3, #48]
 224 0014 03F48003 		and	r3, r3, #4194304
 225 0018 0193     		str	r3, [sp, #4]
 445:Core/Src/main.c **** 
 226              		.loc 1 445 3 view .LVU56
 227 001a 019B     		ldr	r3, [sp, #4]
 228              	.LBE7:
 445:Core/Src/main.c **** 
 229              		.loc 1 445 3 view .LVU57
 449:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 449 3 view .LVU58
 231 001c 0A46     		mov	r2, r1
 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL7:
 450:Core/Src/main.c **** 
 235              		.loc 1 450 3 view .LVU59
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
ARM GAS  /tmp/ccf4ijSD.s 			page 14


 238              	.LVL8:
 452:Core/Src/main.c **** 
 239              		.loc 1 452 1 is_stmt 0 view .LVU60
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE222:
 252              		.section	.text.mapValue,"ax",%progbits
 253              		.align	1
 254              		.global	mapValue
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu fpv4-sp-d16
 260              	mapValue:
 261              	.LVL9:
 262              	.LFB224:
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 501:Core/Src/main.c **** 
 502:Core/Src/main.c **** // re-map function
 503:Core/Src/main.c **** long mapValue(long x, long in_min, long in_max, long out_min, long out_max) {
 263              		.loc 1 503 77 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 4, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 268              		.loc 1 503 77 is_stmt 0 view .LVU62
 269 0000 10B4     		push	{r4}
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 4
 272              		.cfi_offset 4, -4
 504:Core/Src/main.c ****   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 273              		.loc 1 504 3 is_stmt 1 view .LVU63
 274              		.loc 1 504 13 is_stmt 0 view .LVU64
 275 0002 401A     		subs	r0, r0, r1
 276              	.LVL10:
 277              		.loc 1 504 34 view .LVU65
 278 0004 019C     		ldr	r4, [sp, #4]
 279 0006 E41A     		subs	r4, r4, r3
 280              		.loc 1 504 23 view .LVU66
 281 0008 04FB00F4 		mul	r4, r4, r0
 282              		.loc 1 504 55 view .LVU67
 283 000c 511A     		subs	r1, r2, r1
 284              	.LVL11:
 285              		.loc 1 504 45 view .LVU68
 286 000e 94FBF1F4 		sdiv	r4, r4, r1
 505:Core/Src/main.c **** }
 287              		.loc 1 505 1 view .LVU69
 288 0012 E018     		adds	r0, r4, r3
ARM GAS  /tmp/ccf4ijSD.s 			page 15


 289 0014 5DF8044B 		ldr	r4, [sp], #4
 290              	.LCFI7:
 291              		.cfi_restore 4
 292              		.cfi_def_cfa_offset 0
 293              	.LVL12:
 294              		.loc 1 505 1 view .LVU70
 295 0018 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE224:
 299              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 300              		.align	1
 301              		.global	HAL_GPIO_EXTI_Callback
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	HAL_GPIO_EXTI_Callback:
 308              	.LVL13:
 309              	.LFB227:
 506:Core/Src/main.c **** 
 507:Core/Src/main.c **** 
 508:Core/Src/main.c **** // function to re-map the pedal value to a torque value based on the drive mode
 509:Core/Src/main.c **** uint16_t getCommandedTorque()
 510:Core/Src/main.c **** {
 511:Core/Src/main.c ****   // get the pedal average
 512:Core/Src/main.c ****   pedalAverage = pedal_conversion(pedal0, pedal1);
 513:Core/Src/main.c **** 
 514:Core/Src/main.c ****   // drive mode logic
 515:Core/Src/main.c ****   switch (driveMode)
 516:Core/Src/main.c ****   {
 517:Core/Src/main.c ****     case SLOW:
 518:Core/Src/main.c ****       command_torque_limit = 50;
 519:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, command_torque_limit);
 520:Core/Src/main.c ****       return commandedTorque;
 521:Core/Src/main.c ****     break;
 522:Core/Src/main.c **** 
 523:Core/Src/main.c ****     case ECO:
 524:Core/Src/main.c ****       command_torque_limit = 75;
 525:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, command_torque_limit);
 526:Core/Src/main.c ****       return commandedTorque;
 527:Core/Src/main.c ****     break;
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****     case FAST:
 530:Core/Src/main.c ****       command_torque_limit = 100;   // do not change this to more than 100 
 531:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, command_torque_limit);
 532:Core/Src/main.c ****       return commandedTorque;
 533:Core/Src/main.c ****     break;
 534:Core/Src/main.c ****     
 535:Core/Src/main.c ****     // error state, set the mode to ECO
 536:Core/Src/main.c ****     default:
 537:Core/Src/main.c ****       // set the state to ECO for next time
 538:Core/Src/main.c ****       driveMode = ECO;
 539:Core/Src/main.c **** 
 540:Core/Src/main.c ****       // we don't want to send a torque if we are in an undefined state
 541:Core/Src/main.c ****       return commandedTorque = 0;
 542:Core/Src/main.c ****     break;
 543:Core/Src/main.c ****   }
ARM GAS  /tmp/ccf4ijSD.s 			page 16


 544:Core/Src/main.c **** }
 545:Core/Src/main.c **** 
 546:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 547:Core/Src/main.c **** {
 548:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 549:Core/Src/main.c ****     Error_Handler();
 550:Core/Src/main.c ****   }
 551:Core/Src/main.c **** 
 552:Core/Src/main.c ****   // read CAN data from Rear Control Board
 553:Core/Src/main.c ****   if (RxHeader.StdId == 0x082){
 554:Core/Src/main.c ****       imdFault = RxData[0];
 555:Core/Src/main.c ****       bmsFault = RxData[1];
 556:Core/Src/main.c ****   }
 557:Core/Src/main.c **** 
 558:Core/Src/main.c ****   // read CAN data from High Voltage Board 
 559:Core/Src/main.c ****   if (RxHeader.StdId == 0x087){
 560:Core/Src/main.c ****       ready_to_drive = RxData[0];
 561:Core/Src/main.c ****   }
 562:Core/Src/main.c **** }
 563:Core/Src/main.c **** 
 564:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 565:Core/Src/main.c **** {
 310              		.loc 1 565 1 is_stmt 1 view -0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 566:Core/Src/main.c ****   // handle start button interrupt
 567:Core/Src/main.c ****   if (GPIO_Pin == GPIO_PIN_15)
 315              		.loc 1 567 3 view .LVU72
 316              		.loc 1 567 6 is_stmt 0 view .LVU73
 317 0000 B0F5004F 		cmp	r0, #32768
 318 0004 00D0     		beq	.L13
 319              	.L11:
 568:Core/Src/main.c ****   {
 569:Core/Src/main.c ****     // if ready to drive & the button has been pushed, start the buzzer
 570:Core/Src/main.c ****     if (ready_to_drive)
 571:Core/Src/main.c ****     {
 572:Core/Src/main.c ****       buzzerState = 1;
 573:Core/Src/main.c ****     }
 574:Core/Src/main.c ****   }
 575:Core/Src/main.c **** }
 320              		.loc 1 575 1 view .LVU74
 321 0006 7047     		bx	lr
 322              	.L13:
 570:Core/Src/main.c ****     {
 323              		.loc 1 570 5 is_stmt 1 view .LVU75
 570:Core/Src/main.c ****     {
 324              		.loc 1 570 9 is_stmt 0 view .LVU76
 325 0008 034B     		ldr	r3, .L14
 326 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 570:Core/Src/main.c ****     {
 327              		.loc 1 570 8 view .LVU77
 328 000c 002B     		cmp	r3, #0
 329 000e FAD0     		beq	.L11
 572:Core/Src/main.c ****     }
 330              		.loc 1 572 7 is_stmt 1 view .LVU78
ARM GAS  /tmp/ccf4ijSD.s 			page 17


 572:Core/Src/main.c ****     }
 331              		.loc 1 572 19 is_stmt 0 view .LVU79
 332 0010 024B     		ldr	r3, .L14+4
 333 0012 0122     		movs	r2, #1
 334 0014 1A70     		strb	r2, [r3]
 335              		.loc 1 575 1 view .LVU80
 336 0016 F6E7     		b	.L11
 337              	.L15:
 338              		.align	2
 339              	.L14:
 340 0018 00000000 		.word	.LANCHOR0
 341 001c 00000000 		.word	.LANCHOR1
 342              		.cfi_endproc
 343              	.LFE227:
 345              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 346              		.align	1
 347              		.global	HAL_ADC_ConvCpltCallback
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu fpv4-sp-d16
 353              	HAL_ADC_ConvCpltCallback:
 354              	.LVL14:
 355              	.LFB229:
 576:Core/Src/main.c **** 
 577:Core/Src/main.c **** // Timer Interrupts
 578:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 579:Core/Src/main.c **** {
 580:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 581:Core/Src/main.c ****   if (htim == &htim13){
 582:Core/Src/main.c **** 
 583:Core/Src/main.c ****     // drive mode logic
 584:Core/Src/main.c ****     commandedTorque = getCommandedTorque();
 585:Core/Src/main.c ****     
 586:Core/Src/main.c ****     // build CONTROL CAN message
 587:Core/Src/main.c ****     TxData[0] = commandedTorque & 0xFF;
 588:Core/Src/main.c ****     TxData[1] = commandedTorque >> 8;
 589:Core/Src/main.c ****     TxData[2] = 0;
 590:Core/Src/main.c ****     TxData[3] = 0;
 591:Core/Src/main.c ****     TxData[4] = switch_direction;
 592:Core/Src/main.c ****     TxData[5] = enableInverter;
 593:Core/Src/main.c ****     TxData[6] =  0x64;                // this is the max relative torque that can be accepted
 594:Core/Src/main.c ****     TxData[7] =  0x00;                // little endian order for rinehart mesages
 595:Core/Src/main.c **** 
 596:Core/Src/main.c ****     // send message
 597:Core/Src/main.c ****     HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData, &TxMailbox);
 598:Core/Src/main.c ****   }
 599:Core/Src/main.c ****   
 600:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 601:Core/Src/main.c ****   if (htim == &htim14)
 602:Core/Src/main.c ****   {
 603:Core/Src/main.c ****     // sample cooling switch and drive direction switch
 604:Core/Src/main.c ****     switch_cooling = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 605:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 606:Core/Src/main.c **** 
 607:Core/Src/main.c ****     // start button led logic
 608:Core/Src/main.c ****     if (ready_to_drive)
ARM GAS  /tmp/ccf4ijSD.s 			page 18


 609:Core/Src/main.c ****     {
 610:Core/Src/main.c ****       // turn the LED on
 611:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 612:Core/Src/main.c ****     }
 613:Core/Src/main.c ****     else
 614:Core/Src/main.c ****     {
 615:Core/Src/main.c ****       // turn the LED off
 616:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 617:Core/Src/main.c ****       enableInverter = 0;
 618:Core/Src/main.c ****     }
 619:Core/Src/main.c ****     
 620:Core/Src/main.c ****     // buzzer logic
 621:Core/Src/main.c ****     if (buzzerState == 1){
 622:Core/Src/main.c ****       buzzerCounter++;
 623:Core/Src/main.c ****       if (buzzerCounter >= 20)   // buzzerCounter is being updated on a 10Hz interval, so after 20 
 624:Core/Src/main.c ****       {
 625:Core/Src/main.c ****         buzzerState = 0;
 626:Core/Src/main.c ****         buzzerCounter = 0;
 627:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 628:Core/Src/main.c ****       }
 629:Core/Src/main.c ****     }
 630:Core/Src/main.c **** 
 631:Core/Src/main.c ****     // build CAN message 
 632:Core/Src/main.c ****     TxData[0] = pedal1 & 0xFF;
 633:Core/Src/main.c ****     TxData[1] = pedal1 >> 8;
 634:Core/Src/main.c ****     TxData[2] = switch_cooling;
 635:Core/Src/main.c ****     TxData[3] = pedalAverage & 0xFF;
 636:Core/Src/main.c ****     TxData[4] = buzzerState;
 637:Core/Src/main.c ****     TxData[5] = pedal0 & 0xFF;
 638:Core/Src/main.c ****     TxData[6] = pedal0 >> 8;
 639:Core/Src/main.c ****     TxData[7] = pedalAverage >>8;
 640:Core/Src/main.c **** 
 641:Core/Src/main.c ****     // send message
 642:Core/Src/main.c ****     HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 643:Core/Src/main.c **** 
 644:Core/Src/main.c ****     // update LEDS and inverter drive direction 
 645:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, imdFault);
 646:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, bmsFault);
 647:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, buzzerState);
 648:Core/Src/main.c ****   }
 649:Core/Src/main.c **** }
 650:Core/Src/main.c **** 
 651:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 652:Core/Src/main.c **** {
 356              		.loc 1 652 1 is_stmt 1 view -0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 653:Core/Src/main.c ****   // read values from DMA
 654:Core/Src/main.c ****   pedal0 = adc_buf[2];
 361              		.loc 1 654 3 view .LVU82
 362              		.loc 1 654 19 is_stmt 0 view .LVU83
 363 0000 034B     		ldr	r3, .L17
 364 0002 9988     		ldrh	r1, [r3, #4]
 365              		.loc 1 654 10 view .LVU84
 366 0004 034A     		ldr	r2, .L17+4
ARM GAS  /tmp/ccf4ijSD.s 			page 19


 367 0006 1180     		strh	r1, [r2]	@ movhi
 655:Core/Src/main.c ****   pedal1 = adc_buf[3];
 368              		.loc 1 655 3 is_stmt 1 view .LVU85
 369              		.loc 1 655 19 is_stmt 0 view .LVU86
 370 0008 DA88     		ldrh	r2, [r3, #6]
 371              		.loc 1 655 10 view .LVU87
 372 000a 034B     		ldr	r3, .L17+8
 373 000c 1A80     		strh	r2, [r3]	@ movhi
 656:Core/Src/main.c **** 
 657:Core/Src/main.c **** }
 374              		.loc 1 657 1 view .LVU88
 375 000e 7047     		bx	lr
 376              	.L18:
 377              		.align	2
 378              	.L17:
 379 0010 00000000 		.word	adc_buf
 380 0014 00000000 		.word	.LANCHOR2
 381 0018 00000000 		.word	.LANCHOR3
 382              		.cfi_endproc
 383              	.LFE229:
 385              		.section	.text.pedal_conversion,"ax",%progbits
 386              		.align	1
 387              		.global	pedal_conversion
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 391              		.fpu fpv4-sp-d16
 393              	pedal_conversion:
 394              	.LVL15:
 395              	.LFB230:
 658:Core/Src/main.c **** 
 659:Core/Src/main.c **** uint16_t pedal_conversion(uint16_t pedal0, uint16_t pedal1)
 660:Core/Src/main.c **** {
 396              		.loc 1 660 1 is_stmt 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 661:Core/Src/main.c ****   // calculate the average of the two pedal potentiometer readings 
 662:Core/Src/main.c ****   pedalAverage = (pedal0 + pedal1) / 2;
 401              		.loc 1 662 3 view .LVU90
 402              		.loc 1 662 36 is_stmt 0 view .LVU91
 403 0000 0144     		add	r1, r1, r0
 404              	.LVL16:
 405              		.loc 1 662 16 view .LVU92
 406 0002 4908     		lsrs	r1, r1, #1
 407 0004 044B     		ldr	r3, .L21
 408 0006 1980     		strh	r1, [r3]	@ movhi
 663:Core/Src/main.c **** 
 664:Core/Src/main.c ****   if (pedalAverage < PEDAL_DEADBAND){
 409              		.loc 1 664 3 is_stmt 1 view .LVU93
 410              		.loc 1 664 6 is_stmt 0 view .LVU94
 411 0008 0929     		cmp	r1, #9
 412 000a 01D8     		bhi	.L20
 665:Core/Src/main.c ****     pedalAverage = 0; // if pedal is below threashold, no value
 413              		.loc 1 665 5 is_stmt 1 view .LVU95
 414              		.loc 1 665 18 is_stmt 0 view .LVU96
ARM GAS  /tmp/ccf4ijSD.s 			page 20


 415 000c 0022     		movs	r2, #0
 416 000e 1A80     		strh	r2, [r3]	@ movhi
 417              	.L20:
 666:Core/Src/main.c ****   }
 667:Core/Src/main.c **** 
 668:Core/Src/main.c ****   // ensure the pedal skew isn't dangerously out of bounds
 669:Core/Src/main.c ****   // if (pow(pedal0 - pedalAverage, 2) > MAX_PEDAL_SKEW || 
 670:Core/Src/main.c ****   //     pow(pedal1 - pedalAverage, 2) > MAX_PEDAL_SKEW ){
 671:Core/Src/main.c ****   //     pedalAverage = 0;
 672:Core/Src/main.c ****   // }
 673:Core/Src/main.c **** 
 674:Core/Src/main.c ****   return pedalAverage;
 418              		.loc 1 674 3 is_stmt 1 view .LVU97
 675:Core/Src/main.c **** }
 419              		.loc 1 675 1 is_stmt 0 view .LVU98
 420 0010 014B     		ldr	r3, .L21
 421 0012 1888     		ldrh	r0, [r3]
 422              	.LVL17:
 423              		.loc 1 675 1 view .LVU99
 424 0014 7047     		bx	lr
 425              	.L22:
 426 0016 00BF     		.align	2
 427              	.L21:
 428 0018 00000000 		.word	.LANCHOR4
 429              		.cfi_endproc
 430              	.LFE230:
 432              		.section	.text.getCommandedTorque,"ax",%progbits
 433              		.align	1
 434              		.global	getCommandedTorque
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu fpv4-sp-d16
 440              	getCommandedTorque:
 441              	.LFB225:
 510:Core/Src/main.c ****   // get the pedal average
 442              		.loc 1 510 1 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446 0000 00B5     		push	{lr}
 447              	.LCFI8:
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 14, -4
 450 0002 83B0     		sub	sp, sp, #12
 451              	.LCFI9:
 452              		.cfi_def_cfa_offset 16
 512:Core/Src/main.c **** 
 453              		.loc 1 512 3 view .LVU101
 512:Core/Src/main.c **** 
 454              		.loc 1 512 18 is_stmt 0 view .LVU102
 455 0004 204B     		ldr	r3, .L30
 456 0006 1988     		ldrh	r1, [r3]
 457 0008 204B     		ldr	r3, .L30+4
 458 000a 1888     		ldrh	r0, [r3]
 459 000c FFF7FEFF 		bl	pedal_conversion
 460              	.LVL18:
ARM GAS  /tmp/ccf4ijSD.s 			page 21


 512:Core/Src/main.c **** 
 461              		.loc 1 512 16 view .LVU103
 462 0010 1F4B     		ldr	r3, .L30+8
 463 0012 1880     		strh	r0, [r3]	@ movhi
 515:Core/Src/main.c ****   {
 464              		.loc 1 515 3 is_stmt 1 view .LVU104
 465 0014 1F4B     		ldr	r3, .L30+12
 466 0016 1B68     		ldr	r3, [r3]
 467 0018 012B     		cmp	r3, #1
 468 001a 19D0     		beq	.L24
 469 001c 022B     		cmp	r3, #2
 470 001e 25D0     		beq	.L25
 471 0020 33B1     		cbz	r3, .L29
 533:Core/Src/main.c ****     
 472              		.loc 1 533 5 view .LVU105
 538:Core/Src/main.c **** 
 473              		.loc 1 538 7 view .LVU106
 538:Core/Src/main.c **** 
 474              		.loc 1 538 17 is_stmt 0 view .LVU107
 475 0022 1C4B     		ldr	r3, .L30+12
 476 0024 0122     		movs	r2, #1
 477 0026 1A60     		str	r2, [r3]
 541:Core/Src/main.c ****     break;
 478              		.loc 1 541 7 is_stmt 1 view .LVU108
 541:Core/Src/main.c ****     break;
 479              		.loc 1 541 30 is_stmt 0 view .LVU109
 480 0028 0020     		movs	r0, #0
 481 002a 1B4B     		ldr	r3, .L30+16
 482 002c 1880     		strh	r0, [r3]	@ movhi
 483 002e 0CE0     		b	.L27
 484              	.L29:
 518:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, command_torque_limit);
 485              		.loc 1 518 7 is_stmt 1 view .LVU110
 518:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, command_torque_limit);
 486              		.loc 1 518 28 is_stmt 0 view .LVU111
 487 0030 3223     		movs	r3, #50
 488 0032 1A4A     		ldr	r2, .L30+20
 489 0034 1380     		strh	r3, [r2]	@ movhi
 519:Core/Src/main.c ****       return commandedTorque;
 490              		.loc 1 519 7 is_stmt 1 view .LVU112
 519:Core/Src/main.c ****       return commandedTorque;
 491              		.loc 1 519 25 is_stmt 0 view .LVU113
 492 0036 0093     		str	r3, [sp]
 493 0038 0023     		movs	r3, #0
 494 003a 4FF41672 		mov	r2, #600
 495 003e 8021     		movs	r1, #128
 496 0040 FFF7FEFF 		bl	mapValue
 497              	.LVL19:
 519:Core/Src/main.c ****       return commandedTorque;
 498              		.loc 1 519 23 view .LVU114
 499 0044 80B2     		uxth	r0, r0
 500 0046 144B     		ldr	r3, .L30+16
 501 0048 1880     		strh	r0, [r3]	@ movhi
 520:Core/Src/main.c ****     break;
 502              		.loc 1 520 7 is_stmt 1 view .LVU115
 503              	.L27:
 542:Core/Src/main.c ****   }
ARM GAS  /tmp/ccf4ijSD.s 			page 22


 504              		.loc 1 542 5 view .LVU116
 544:Core/Src/main.c **** 
 505              		.loc 1 544 1 is_stmt 0 view .LVU117
 506 004a 03B0     		add	sp, sp, #12
 507              	.LCFI10:
 508              		.cfi_remember_state
 509              		.cfi_def_cfa_offset 4
 510              		@ sp needed
 511 004c 5DF804FB 		ldr	pc, [sp], #4
 512              	.L24:
 513              	.LCFI11:
 514              		.cfi_restore_state
 521:Core/Src/main.c **** 
 515              		.loc 1 521 5 is_stmt 1 view .LVU118
 524:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, command_torque_limit);
 516              		.loc 1 524 7 view .LVU119
 524:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, command_torque_limit);
 517              		.loc 1 524 28 is_stmt 0 view .LVU120
 518 0050 4B23     		movs	r3, #75
 519 0052 124A     		ldr	r2, .L30+20
 520 0054 1380     		strh	r3, [r2]	@ movhi
 525:Core/Src/main.c ****       return commandedTorque;
 521              		.loc 1 525 7 is_stmt 1 view .LVU121
 525:Core/Src/main.c ****       return commandedTorque;
 522              		.loc 1 525 25 is_stmt 0 view .LVU122
 523 0056 0093     		str	r3, [sp]
 524 0058 0023     		movs	r3, #0
 525 005a 4FF41672 		mov	r2, #600
 526 005e 8021     		movs	r1, #128
 527 0060 FFF7FEFF 		bl	mapValue
 528              	.LVL20:
 525:Core/Src/main.c ****       return commandedTorque;
 529              		.loc 1 525 23 view .LVU123
 530 0064 80B2     		uxth	r0, r0
 531 0066 0C4B     		ldr	r3, .L30+16
 532 0068 1880     		strh	r0, [r3]	@ movhi
 526:Core/Src/main.c ****     break;
 533              		.loc 1 526 7 is_stmt 1 view .LVU124
 526:Core/Src/main.c ****     break;
 534              		.loc 1 526 14 is_stmt 0 view .LVU125
 535 006a EEE7     		b	.L27
 536              	.L25:
 527:Core/Src/main.c **** 
 537              		.loc 1 527 5 is_stmt 1 view .LVU126
 530:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, command_torque_limit);
 538              		.loc 1 530 7 view .LVU127
 530:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, command_torque_limit);
 539              		.loc 1 530 28 is_stmt 0 view .LVU128
 540 006c 6423     		movs	r3, #100
 541 006e 0B4A     		ldr	r2, .L30+20
 542 0070 1380     		strh	r3, [r2]	@ movhi
 531:Core/Src/main.c ****       return commandedTorque;
 543              		.loc 1 531 7 is_stmt 1 view .LVU129
 531:Core/Src/main.c ****       return commandedTorque;
 544              		.loc 1 531 25 is_stmt 0 view .LVU130
 545 0072 0093     		str	r3, [sp]
 546 0074 0023     		movs	r3, #0
ARM GAS  /tmp/ccf4ijSD.s 			page 23


 547 0076 4FF41672 		mov	r2, #600
 548 007a 8021     		movs	r1, #128
 549 007c FFF7FEFF 		bl	mapValue
 550              	.LVL21:
 531:Core/Src/main.c ****       return commandedTorque;
 551              		.loc 1 531 23 view .LVU131
 552 0080 80B2     		uxth	r0, r0
 553 0082 054B     		ldr	r3, .L30+16
 554 0084 1880     		strh	r0, [r3]	@ movhi
 532:Core/Src/main.c ****     break;
 555              		.loc 1 532 7 is_stmt 1 view .LVU132
 532:Core/Src/main.c ****     break;
 556              		.loc 1 532 14 is_stmt 0 view .LVU133
 557 0086 E0E7     		b	.L27
 558              	.L31:
 559              		.align	2
 560              	.L30:
 561 0088 00000000 		.word	.LANCHOR3
 562 008c 00000000 		.word	.LANCHOR2
 563 0090 00000000 		.word	.LANCHOR4
 564 0094 00000000 		.word	.LANCHOR5
 565 0098 00000000 		.word	.LANCHOR7
 566 009c 00000000 		.word	.LANCHOR6
 567              		.cfi_endproc
 568              	.LFE225:
 570              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 571              		.align	1
 572              		.global	HAL_TIM_PeriodElapsedCallback
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu fpv4-sp-d16
 578              	HAL_TIM_PeriodElapsedCallback:
 579              	.LVL22:
 580              	.LFB228:
 579:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 581              		.loc 1 579 1 is_stmt 1 view -0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 579:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 585              		.loc 1 579 1 is_stmt 0 view .LVU135
 586 0000 38B5     		push	{r3, r4, r5, lr}
 587              	.LCFI12:
 588              		.cfi_def_cfa_offset 16
 589              		.cfi_offset 3, -16
 590              		.cfi_offset 4, -12
 591              		.cfi_offset 5, -8
 592              		.cfi_offset 14, -4
 593 0002 0446     		mov	r4, r0
 581:Core/Src/main.c **** 
 594              		.loc 1 581 3 is_stmt 1 view .LVU136
 581:Core/Src/main.c **** 
 595              		.loc 1 581 6 is_stmt 0 view .LVU137
 596 0004 434B     		ldr	r3, .L42
 597 0006 9842     		cmp	r0, r3
 598 0008 03D0     		beq	.L39
ARM GAS  /tmp/ccf4ijSD.s 			page 24


 599              	.LVL23:
 600              	.L33:
 601:Core/Src/main.c ****   {
 601              		.loc 1 601 3 is_stmt 1 view .LVU138
 601:Core/Src/main.c ****   {
 602              		.loc 1 601 6 is_stmt 0 view .LVU139
 603 000a 434B     		ldr	r3, .L42+4
 604 000c 9C42     		cmp	r4, r3
 605 000e 1AD0     		beq	.L40
 606              	.LVL24:
 607              	.L32:
 649:Core/Src/main.c **** 
 608              		.loc 1 649 1 view .LVU140
 609 0010 38BD     		pop	{r3, r4, r5, pc}
 610              	.LVL25:
 611              	.L39:
 584:Core/Src/main.c ****     
 612              		.loc 1 584 5 is_stmt 1 view .LVU141
 584:Core/Src/main.c ****     
 613              		.loc 1 584 23 is_stmt 0 view .LVU142
 614 0012 FFF7FEFF 		bl	getCommandedTorque
 615              	.LVL26:
 584:Core/Src/main.c ****     
 616              		.loc 1 584 21 view .LVU143
 617 0016 414B     		ldr	r3, .L42+8
 618 0018 1880     		strh	r0, [r3]	@ movhi
 587:Core/Src/main.c ****     TxData[1] = commandedTorque >> 8;
 619              		.loc 1 587 5 is_stmt 1 view .LVU144
 587:Core/Src/main.c ****     TxData[1] = commandedTorque >> 8;
 620              		.loc 1 587 15 is_stmt 0 view .LVU145
 621 001a 414A     		ldr	r2, .L42+12
 622 001c 1070     		strb	r0, [r2]
 588:Core/Src/main.c ****     TxData[2] = 0;
 623              		.loc 1 588 5 is_stmt 1 view .LVU146
 588:Core/Src/main.c ****     TxData[2] = 0;
 624              		.loc 1 588 15 is_stmt 0 view .LVU147
 625 001e 000A     		lsrs	r0, r0, #8
 626 0020 5070     		strb	r0, [r2, #1]
 589:Core/Src/main.c ****     TxData[3] = 0;
 627              		.loc 1 589 5 is_stmt 1 view .LVU148
 589:Core/Src/main.c ****     TxData[3] = 0;
 628              		.loc 1 589 15 is_stmt 0 view .LVU149
 629 0022 0023     		movs	r3, #0
 630 0024 9370     		strb	r3, [r2, #2]
 590:Core/Src/main.c ****     TxData[4] = switch_direction;
 631              		.loc 1 590 5 is_stmt 1 view .LVU150
 590:Core/Src/main.c ****     TxData[4] = switch_direction;
 632              		.loc 1 590 15 is_stmt 0 view .LVU151
 633 0026 D370     		strb	r3, [r2, #3]
 591:Core/Src/main.c ****     TxData[5] = enableInverter;
 634              		.loc 1 591 5 is_stmt 1 view .LVU152
 591:Core/Src/main.c ****     TxData[5] = enableInverter;
 635              		.loc 1 591 15 is_stmt 0 view .LVU153
 636 0028 3E49     		ldr	r1, .L42+16
 637 002a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 638 002c 1171     		strb	r1, [r2, #4]
 592:Core/Src/main.c ****     TxData[6] =  0x64;                // this is the max relative torque that can be accepted
ARM GAS  /tmp/ccf4ijSD.s 			page 25


 639              		.loc 1 592 5 is_stmt 1 view .LVU154
 592:Core/Src/main.c ****     TxData[6] =  0x64;                // this is the max relative torque that can be accepted
 640              		.loc 1 592 15 is_stmt 0 view .LVU155
 641 002e 3E49     		ldr	r1, .L42+20
 642 0030 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 643 0032 5171     		strb	r1, [r2, #5]
 593:Core/Src/main.c ****     TxData[7] =  0x00;                // little endian order for rinehart mesages
 644              		.loc 1 593 5 is_stmt 1 view .LVU156
 593:Core/Src/main.c ****     TxData[7] =  0x00;                // little endian order for rinehart mesages
 645              		.loc 1 593 15 is_stmt 0 view .LVU157
 646 0034 6421     		movs	r1, #100
 647 0036 9171     		strb	r1, [r2, #6]
 594:Core/Src/main.c **** 
 648              		.loc 1 594 5 is_stmt 1 view .LVU158
 594:Core/Src/main.c **** 
 649              		.loc 1 594 15 is_stmt 0 view .LVU159
 650 0038 D371     		strb	r3, [r2, #7]
 597:Core/Src/main.c ****   }
 651              		.loc 1 597 5 is_stmt 1 view .LVU160
 652 003a 3C4B     		ldr	r3, .L42+24
 653 003c 3C49     		ldr	r1, .L42+28
 654 003e 3D48     		ldr	r0, .L42+32
 655 0040 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 656              	.LVL27:
 657 0044 E1E7     		b	.L33
 658              	.L40:
 604:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 659              		.loc 1 604 5 view .LVU161
 604:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 660              		.loc 1 604 22 is_stmt 0 view .LVU162
 661 0046 3C4C     		ldr	r4, .L42+36
 662              	.LVL28:
 604:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 663              		.loc 1 604 22 view .LVU163
 664 0048 4FF48051 		mov	r1, #4096
 665 004c 2046     		mov	r0, r4
 666 004e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 667              	.LVL29:
 604:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 668              		.loc 1 604 20 view .LVU164
 669 0052 3A4B     		ldr	r3, .L42+40
 670 0054 1870     		strb	r0, [r3]
 605:Core/Src/main.c **** 
 671              		.loc 1 605 5 is_stmt 1 view .LVU165
 605:Core/Src/main.c **** 
 672              		.loc 1 605 24 is_stmt 0 view .LVU166
 673 0056 4FF40051 		mov	r1, #8192
 674 005a 2046     		mov	r0, r4
 675 005c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 676              	.LVL30:
 605:Core/Src/main.c **** 
 677              		.loc 1 605 22 view .LVU167
 678 0060 304B     		ldr	r3, .L42+16
 679 0062 1870     		strb	r0, [r3]
 608:Core/Src/main.c ****     {
 680              		.loc 1 608 5 is_stmt 1 view .LVU168
 608:Core/Src/main.c ****     {
ARM GAS  /tmp/ccf4ijSD.s 			page 26


 681              		.loc 1 608 9 is_stmt 0 view .LVU169
 682 0064 364B     		ldr	r3, .L42+44
 683 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 608:Core/Src/main.c ****     {
 684              		.loc 1 608 8 view .LVU170
 685 0068 002B     		cmp	r3, #0
 686 006a 39D0     		beq	.L35
 611:Core/Src/main.c ****     }
 687              		.loc 1 611 7 is_stmt 1 view .LVU171
 688 006c 0122     		movs	r2, #1
 689 006e 4FF48061 		mov	r1, #1024
 690 0072 2046     		mov	r0, r4
 691 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 692              	.LVL31:
 693              	.L36:
 621:Core/Src/main.c ****       buzzerCounter++;
 694              		.loc 1 621 5 view .LVU172
 621:Core/Src/main.c ****       buzzerCounter++;
 695              		.loc 1 621 21 is_stmt 0 view .LVU173
 696 0078 324B     		ldr	r3, .L42+48
 697 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 621:Core/Src/main.c ****       buzzerCounter++;
 698              		.loc 1 621 8 view .LVU174
 699 007c 012B     		cmp	r3, #1
 700 007e 39D0     		beq	.L41
 701              	.L37:
 632:Core/Src/main.c ****     TxData[1] = pedal1 >> 8;
 702              		.loc 1 632 5 is_stmt 1 view .LVU175
 632:Core/Src/main.c ****     TxData[1] = pedal1 >> 8;
 703              		.loc 1 632 15 is_stmt 0 view .LVU176
 704 0080 314B     		ldr	r3, .L42+52
 705 0082 1B88     		ldrh	r3, [r3]
 706 0084 264A     		ldr	r2, .L42+12
 707 0086 1370     		strb	r3, [r2]
 633:Core/Src/main.c ****     TxData[2] = switch_cooling;
 708              		.loc 1 633 5 is_stmt 1 view .LVU177
 633:Core/Src/main.c ****     TxData[2] = switch_cooling;
 709              		.loc 1 633 15 is_stmt 0 view .LVU178
 710 0088 1B0A     		lsrs	r3, r3, #8
 711 008a 5370     		strb	r3, [r2, #1]
 634:Core/Src/main.c ****     TxData[3] = pedalAverage & 0xFF;
 712              		.loc 1 634 5 is_stmt 1 view .LVU179
 634:Core/Src/main.c ****     TxData[3] = pedalAverage & 0xFF;
 713              		.loc 1 634 15 is_stmt 0 view .LVU180
 714 008c 2B4B     		ldr	r3, .L42+40
 715 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 716 0090 9370     		strb	r3, [r2, #2]
 635:Core/Src/main.c ****     TxData[4] = buzzerState;
 717              		.loc 1 635 5 is_stmt 1 view .LVU181
 635:Core/Src/main.c ****     TxData[4] = buzzerState;
 718              		.loc 1 635 15 is_stmt 0 view .LVU182
 719 0092 2E4B     		ldr	r3, .L42+56
 720 0094 1B88     		ldrh	r3, [r3]
 721 0096 D370     		strb	r3, [r2, #3]
 636:Core/Src/main.c ****     TxData[5] = pedal0 & 0xFF;
 722              		.loc 1 636 5 is_stmt 1 view .LVU183
 636:Core/Src/main.c ****     TxData[5] = pedal0 & 0xFF;
ARM GAS  /tmp/ccf4ijSD.s 			page 27


 723              		.loc 1 636 15 is_stmt 0 view .LVU184
 724 0098 2A4D     		ldr	r5, .L42+48
 725 009a 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 726 009c 1171     		strb	r1, [r2, #4]
 637:Core/Src/main.c ****     TxData[6] = pedal0 >> 8;
 727              		.loc 1 637 5 is_stmt 1 view .LVU185
 637:Core/Src/main.c ****     TxData[6] = pedal0 >> 8;
 728              		.loc 1 637 15 is_stmt 0 view .LVU186
 729 009e 2C49     		ldr	r1, .L42+60
 730 00a0 0988     		ldrh	r1, [r1]
 731 00a2 5171     		strb	r1, [r2, #5]
 638:Core/Src/main.c ****     TxData[7] = pedalAverage >>8;
 732              		.loc 1 638 5 is_stmt 1 view .LVU187
 638:Core/Src/main.c ****     TxData[7] = pedalAverage >>8;
 733              		.loc 1 638 15 is_stmt 0 view .LVU188
 734 00a4 090A     		lsrs	r1, r1, #8
 735 00a6 9171     		strb	r1, [r2, #6]
 639:Core/Src/main.c **** 
 736              		.loc 1 639 5 is_stmt 1 view .LVU189
 639:Core/Src/main.c **** 
 737              		.loc 1 639 15 is_stmt 0 view .LVU190
 738 00a8 1B0A     		lsrs	r3, r3, #8
 739 00aa D371     		strb	r3, [r2, #7]
 642:Core/Src/main.c **** 
 740              		.loc 1 642 5 is_stmt 1 view .LVU191
 741 00ac 1F4B     		ldr	r3, .L42+24
 742 00ae 2949     		ldr	r1, .L42+64
 743 00b0 2048     		ldr	r0, .L42+32
 744 00b2 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 745              	.LVL32:
 645:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, bmsFault);
 746              		.loc 1 645 5 view .LVU192
 747 00b6 204C     		ldr	r4, .L42+36
 748 00b8 274B     		ldr	r3, .L42+68
 749 00ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 750 00bc 0421     		movs	r1, #4
 751 00be 2046     		mov	r0, r4
 752 00c0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 753              	.LVL33:
 646:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, buzzerState);
 754              		.loc 1 646 5 view .LVU193
 755 00c4 254B     		ldr	r3, .L42+72
 756 00c6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 757 00c8 4FF48061 		mov	r1, #1024
 758 00cc 2448     		ldr	r0, .L42+76
 759 00ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 760              	.LVL34:
 647:Core/Src/main.c ****   }
 761              		.loc 1 647 5 view .LVU194
 762 00d2 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 763 00d4 4FF48071 		mov	r1, #256
 764 00d8 2046     		mov	r0, r4
 765 00da FFF7FEFF 		bl	HAL_GPIO_WritePin
 766              	.LVL35:
 649:Core/Src/main.c **** 
 767              		.loc 1 649 1 is_stmt 0 view .LVU195
 768 00de 97E7     		b	.L32
ARM GAS  /tmp/ccf4ijSD.s 			page 28


 769              	.L35:
 616:Core/Src/main.c ****       enableInverter = 0;
 770              		.loc 1 616 7 is_stmt 1 view .LVU196
 771 00e0 0022     		movs	r2, #0
 772 00e2 4FF48061 		mov	r1, #1024
 773 00e6 1448     		ldr	r0, .L42+36
 774 00e8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 775              	.LVL36:
 617:Core/Src/main.c ****     }
 776              		.loc 1 617 7 view .LVU197
 617:Core/Src/main.c ****     }
 777              		.loc 1 617 22 is_stmt 0 view .LVU198
 778 00ec 0E4B     		ldr	r3, .L42+20
 779 00ee 0022     		movs	r2, #0
 780 00f0 1A70     		strb	r2, [r3]
 781 00f2 C1E7     		b	.L36
 782              	.L41:
 622:Core/Src/main.c ****       if (buzzerCounter >= 20)   // buzzerCounter is being updated on a 10Hz interval, so after 20 
 783              		.loc 1 622 7 is_stmt 1 view .LVU199
 622:Core/Src/main.c ****       if (buzzerCounter >= 20)   // buzzerCounter is being updated on a 10Hz interval, so after 20 
 784              		.loc 1 622 20 is_stmt 0 view .LVU200
 785 00f4 1B4A     		ldr	r2, .L42+80
 786 00f6 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 787 00f8 0133     		adds	r3, r3, #1
 788 00fa DBB2     		uxtb	r3, r3
 789 00fc 1370     		strb	r3, [r2]
 623:Core/Src/main.c ****       {
 790              		.loc 1 623 7 is_stmt 1 view .LVU201
 623:Core/Src/main.c ****       {
 791              		.loc 1 623 10 is_stmt 0 view .LVU202
 792 00fe 132B     		cmp	r3, #19
 793 0100 BED9     		bls	.L37
 625:Core/Src/main.c ****         buzzerCounter = 0;
 794              		.loc 1 625 9 is_stmt 1 view .LVU203
 625:Core/Src/main.c ****         buzzerCounter = 0;
 795              		.loc 1 625 21 is_stmt 0 view .LVU204
 796 0102 0023     		movs	r3, #0
 797 0104 0F4A     		ldr	r2, .L42+48
 798 0106 1370     		strb	r3, [r2]
 626:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 799              		.loc 1 626 9 is_stmt 1 view .LVU205
 626:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 800              		.loc 1 626 23 is_stmt 0 view .LVU206
 801 0108 164A     		ldr	r2, .L42+80
 802 010a 1370     		strb	r3, [r2]
 627:Core/Src/main.c ****       }
 803              		.loc 1 627 9 is_stmt 1 view .LVU207
 627:Core/Src/main.c ****       }
 804              		.loc 1 627 24 is_stmt 0 view .LVU208
 805 010c 064B     		ldr	r3, .L42+20
 806 010e 0122     		movs	r2, #1
 807 0110 1A70     		strb	r2, [r3]
 808 0112 B5E7     		b	.L37
 809              	.L43:
 810              		.align	2
 811              	.L42:
 812 0114 00000000 		.word	htim13
ARM GAS  /tmp/ccf4ijSD.s 			page 29


 813 0118 00000000 		.word	htim14
 814 011c 00000000 		.word	.LANCHOR7
 815 0120 00000000 		.word	TxData
 816 0124 00000000 		.word	.LANCHOR8
 817 0128 00000000 		.word	.LANCHOR9
 818 012c 00000000 		.word	TxMailbox
 819 0130 00000000 		.word	TxHeader2
 820 0134 00000000 		.word	hcan1
 821 0138 00040240 		.word	1073873920
 822 013c 00000000 		.word	.LANCHOR10
 823 0140 00000000 		.word	.LANCHOR0
 824 0144 00000000 		.word	.LANCHOR1
 825 0148 00000000 		.word	.LANCHOR3
 826 014c 00000000 		.word	.LANCHOR4
 827 0150 00000000 		.word	.LANCHOR2
 828 0154 00000000 		.word	TxHeader
 829 0158 00000000 		.word	.LANCHOR12
 830 015c 00000000 		.word	.LANCHOR13
 831 0160 00000240 		.word	1073872896
 832 0164 00000000 		.word	.LANCHOR11
 833              		.cfi_endproc
 834              	.LFE228:
 836              		.section	.text.Error_Handler,"ax",%progbits
 837              		.align	1
 838              		.global	Error_Handler
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 842              		.fpu fpv4-sp-d16
 844              	Error_Handler:
 845              	.LFB231:
 676:Core/Src/main.c **** 
 677:Core/Src/main.c **** /* USER CODE END 4 */
 678:Core/Src/main.c **** 
 679:Core/Src/main.c **** /**
 680:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 681:Core/Src/main.c ****   * @retval None
 682:Core/Src/main.c ****   */
 683:Core/Src/main.c **** void Error_Handler(void)
 684:Core/Src/main.c **** {
 846              		.loc 1 684 1 is_stmt 1 view -0
 847              		.cfi_startproc
 848              		@ Volatile: function does not return.
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              		@ link register save eliminated.
 685:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 686:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 687:Core/Src/main.c ****   __disable_irq();
 852              		.loc 1 687 3 view .LVU210
 853              	.LBB8:
 854              	.LBI8:
 855              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
ARM GAS  /tmp/ccf4ijSD.s 			page 30


   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
ARM GAS  /tmp/ccf4ijSD.s 			page 31


  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
ARM GAS  /tmp/ccf4ijSD.s 			page 32


 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 856              		.loc 2 140 27 view .LVU211
 857              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 858              		.loc 2 142 3 view .LVU212
 859              		.syntax unified
 860              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 861 0000 72B6     		cpsid i
 862              	@ 0 "" 2
 863              		.thumb
 864              		.syntax unified
 865              	.L45:
 866              	.LBE9:
 867              	.LBE8:
 688:Core/Src/main.c ****   while (1)
 868              		.loc 1 688 3 discriminator 1 view .LVU213
 689:Core/Src/main.c ****   {
 690:Core/Src/main.c ****   }
 869              		.loc 1 690 3 discriminator 1 view .LVU214
 688:Core/Src/main.c ****   while (1)
 870              		.loc 1 688 9 discriminator 1 view .LVU215
 871 0002 FEE7     		b	.L45
 872              		.cfi_endproc
 873              	.LFE231:
 875              		.section	.text.MX_CAN1_Init,"ax",%progbits
 876              		.align	1
 877              		.syntax unified
 878              		.thumb
 879              		.thumb_func
 880              		.fpu fpv4-sp-d16
 882              	MX_CAN1_Init:
 883              	.LFB219:
 318:Core/Src/main.c **** 
 884              		.loc 1 318 1 view -0
 885              		.cfi_startproc
ARM GAS  /tmp/ccf4ijSD.s 			page 33


 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888 0000 70B5     		push	{r4, r5, r6, lr}
 889              	.LCFI13:
 890              		.cfi_def_cfa_offset 16
 891              		.cfi_offset 4, -16
 892              		.cfi_offset 5, -12
 893              		.cfi_offset 6, -8
 894              		.cfi_offset 14, -4
 327:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 895              		.loc 1 327 3 view .LVU217
 327:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 896              		.loc 1 327 18 is_stmt 0 view .LVU218
 897 0002 1E48     		ldr	r0, .L50
 898 0004 1E4B     		ldr	r3, .L50+4
 899 0006 0360     		str	r3, [r0]
 328:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 900              		.loc 1 328 3 is_stmt 1 view .LVU219
 328:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 901              		.loc 1 328 24 is_stmt 0 view .LVU220
 902 0008 1223     		movs	r3, #18
 903 000a 4360     		str	r3, [r0, #4]
 329:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 904              		.loc 1 329 3 is_stmt 1 view .LVU221
 329:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 905              		.loc 1 329 19 is_stmt 0 view .LVU222
 906 000c 0023     		movs	r3, #0
 907 000e 8360     		str	r3, [r0, #8]
 330:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 908              		.loc 1 330 3 is_stmt 1 view .LVU223
 330:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 909              		.loc 1 330 28 is_stmt 0 view .LVU224
 910 0010 C360     		str	r3, [r0, #12]
 331:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 911              		.loc 1 331 3 is_stmt 1 view .LVU225
 331:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 912              		.loc 1 331 23 is_stmt 0 view .LVU226
 913 0012 4FF40032 		mov	r2, #131072
 914 0016 0261     		str	r2, [r0, #16]
 332:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 915              		.loc 1 332 3 is_stmt 1 view .LVU227
 332:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 916              		.loc 1 332 23 is_stmt 0 view .LVU228
 917 0018 4361     		str	r3, [r0, #20]
 333:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 918              		.loc 1 333 3 is_stmt 1 view .LVU229
 333:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 919              		.loc 1 333 32 is_stmt 0 view .LVU230
 920 001a 0376     		strb	r3, [r0, #24]
 334:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 921              		.loc 1 334 3 is_stmt 1 view .LVU231
 334:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 922              		.loc 1 334 25 is_stmt 0 view .LVU232
 923 001c 4376     		strb	r3, [r0, #25]
 335:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 924              		.loc 1 335 3 is_stmt 1 view .LVU233
 335:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
ARM GAS  /tmp/ccf4ijSD.s 			page 34


 925              		.loc 1 335 25 is_stmt 0 view .LVU234
 926 001e 0122     		movs	r2, #1
 927 0020 8276     		strb	r2, [r0, #26]
 336:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 928              		.loc 1 336 3 is_stmt 1 view .LVU235
 336:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 929              		.loc 1 336 33 is_stmt 0 view .LVU236
 930 0022 C276     		strb	r2, [r0, #27]
 337:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 931              		.loc 1 337 3 is_stmt 1 view .LVU237
 337:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 932              		.loc 1 337 32 is_stmt 0 view .LVU238
 933 0024 0377     		strb	r3, [r0, #28]
 338:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 934              		.loc 1 338 3 is_stmt 1 view .LVU239
 338:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 935              		.loc 1 338 35 is_stmt 0 view .LVU240
 936 0026 4377     		strb	r3, [r0, #29]
 339:Core/Src/main.c ****   {
 937              		.loc 1 339 3 is_stmt 1 view .LVU241
 339:Core/Src/main.c ****   {
 938              		.loc 1 339 7 is_stmt 0 view .LVU242
 939 0028 FFF7FEFF 		bl	HAL_CAN_Init
 940              	.LVL37:
 339:Core/Src/main.c ****   {
 941              		.loc 1 339 6 view .LVU243
 942 002c 20BB     		cbnz	r0, .L49
 345:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 943              		.loc 1 345 3 is_stmt 1 view .LVU244
 345:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 944              		.loc 1 345 24 is_stmt 0 view .LVU245
 945 002e 1549     		ldr	r1, .L50+8
 946 0030 4FF48253 		mov	r3, #4160
 947 0034 0B60     		str	r3, [r1]
 346:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 948              		.loc 1 346 3 is_stmt 1 view .LVU246
 346:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 949              		.loc 1 346 23 is_stmt 0 view .LVU247
 950 0036 0024     		movs	r4, #0
 951 0038 4C60     		str	r4, [r1, #4]
 347:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 952              		.loc 1 347 3 is_stmt 1 view .LVU248
 347:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 953              		.loc 1 347 28 is_stmt 0 view .LVU249
 954 003a 8B60     		str	r3, [r1, #8]
 348:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 955              		.loc 1 348 3 is_stmt 1 view .LVU250
 348:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 956              		.loc 1 348 27 is_stmt 0 view .LVU251
 957 003c CC60     		str	r4, [r1, #12]
 349:Core/Src/main.c ****   filter0.FilterBank = 1;
 958              		.loc 1 349 3 is_stmt 1 view .LVU252
 349:Core/Src/main.c ****   filter0.FilterBank = 1;
 959              		.loc 1 349 32 is_stmt 0 view .LVU253
 960 003e 0C61     		str	r4, [r1, #16]
 350:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 961              		.loc 1 350 3 is_stmt 1 view .LVU254
ARM GAS  /tmp/ccf4ijSD.s 			page 35


 350:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 962              		.loc 1 350 22 is_stmt 0 view .LVU255
 963 0040 0125     		movs	r5, #1
 964 0042 4D61     		str	r5, [r1, #20]
 351:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 965              		.loc 1 351 3 is_stmt 1 view .LVU256
 351:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 966              		.loc 1 351 22 is_stmt 0 view .LVU257
 967 0044 8C61     		str	r4, [r1, #24]
 352:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 968              		.loc 1 352 3 is_stmt 1 view .LVU258
 352:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 969              		.loc 1 352 23 is_stmt 0 view .LVU259
 970 0046 CD61     		str	r5, [r1, #28]
 353:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 971              		.loc 1 353 3 is_stmt 1 view .LVU260
 353:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 972              		.loc 1 353 28 is_stmt 0 view .LVU261
 973 0048 0D62     		str	r5, [r1, #32]
 354:Core/Src/main.c **** 
 974              		.loc 1 354 3 is_stmt 1 view .LVU262
 354:Core/Src/main.c **** 
 975              		.loc 1 354 32 is_stmt 0 view .LVU263
 976 004a 4C62     		str	r4, [r1, #36]
 356:Core/Src/main.c **** 
 977              		.loc 1 356 3 is_stmt 1 view .LVU264
 978 004c 0B4E     		ldr	r6, .L50
 979 004e 3046     		mov	r0, r6
 980 0050 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 981              	.LVL38:
 359:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 982              		.loc 1 359 3 view .LVU265
 359:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 983              		.loc 1 359 24 is_stmt 0 view .LVU266
 984 0054 0C49     		ldr	r1, .L50+12
 985 0056 4FF48753 		mov	r3, #4320
 986 005a 0B60     		str	r3, [r1]
 360:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x087 << 5;
 987              		.loc 1 360 3 is_stmt 1 view .LVU267
 360:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x087 << 5;
 988              		.loc 1 360 23 is_stmt 0 view .LVU268
 989 005c 4C60     		str	r4, [r1, #4]
 361:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 990              		.loc 1 361 3 is_stmt 1 view .LVU269
 361:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 991              		.loc 1 361 28 is_stmt 0 view .LVU270
 992 005e 8B60     		str	r3, [r1, #8]
 362:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 993              		.loc 1 362 3 is_stmt 1 view .LVU271
 362:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 994              		.loc 1 362 27 is_stmt 0 view .LVU272
 995 0060 CC60     		str	r4, [r1, #12]
 363:Core/Src/main.c ****   filter1.FilterBank = 2;
 996              		.loc 1 363 3 is_stmt 1 view .LVU273
 363:Core/Src/main.c ****   filter1.FilterBank = 2;
 997              		.loc 1 363 32 is_stmt 0 view .LVU274
 998 0062 0C61     		str	r4, [r1, #16]
ARM GAS  /tmp/ccf4ijSD.s 			page 36


 364:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 999              		.loc 1 364 3 is_stmt 1 view .LVU275
 364:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 1000              		.loc 1 364 22 is_stmt 0 view .LVU276
 1001 0064 0223     		movs	r3, #2
 1002 0066 4B61     		str	r3, [r1, #20]
 365:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 1003              		.loc 1 365 3 is_stmt 1 view .LVU277
 365:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 1004              		.loc 1 365 22 is_stmt 0 view .LVU278
 1005 0068 8C61     		str	r4, [r1, #24]
 366:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 1006              		.loc 1 366 3 is_stmt 1 view .LVU279
 366:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 1007              		.loc 1 366 23 is_stmt 0 view .LVU280
 1008 006a CD61     		str	r5, [r1, #28]
 367:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 1009              		.loc 1 367 3 is_stmt 1 view .LVU281
 367:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 1010              		.loc 1 367 28 is_stmt 0 view .LVU282
 1011 006c 0D62     		str	r5, [r1, #32]
 368:Core/Src/main.c **** 
 1012              		.loc 1 368 3 is_stmt 1 view .LVU283
 368:Core/Src/main.c **** 
 1013              		.loc 1 368 32 is_stmt 0 view .LVU284
 1014 006e 4C62     		str	r4, [r1, #36]
 370:Core/Src/main.c **** 
 1015              		.loc 1 370 3 is_stmt 1 view .LVU285
 1016 0070 3046     		mov	r0, r6
 1017 0072 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1018              	.LVL39:
 374:Core/Src/main.c **** 
 1019              		.loc 1 374 1 is_stmt 0 view .LVU286
 1020 0076 70BD     		pop	{r4, r5, r6, pc}
 1021              	.L49:
 341:Core/Src/main.c ****   }
 1022              		.loc 1 341 5 is_stmt 1 view .LVU287
 1023 0078 FFF7FEFF 		bl	Error_Handler
 1024              	.LVL40:
 1025              	.L51:
 1026              		.align	2
 1027              	.L50:
 1028 007c 00000000 		.word	hcan1
 1029 0080 00640040 		.word	1073767424
 1030 0084 00000000 		.word	filter0
 1031 0088 00000000 		.word	filter1
 1032              		.cfi_endproc
 1033              	.LFE219:
 1035              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1036              		.align	1
 1037              		.syntax unified
 1038              		.thumb
 1039              		.thumb_func
 1040              		.fpu fpv4-sp-d16
 1042              	MX_ADC1_Init:
 1043              	.LFB218:
 244:Core/Src/main.c **** 
ARM GAS  /tmp/ccf4ijSD.s 			page 37


 1044              		.loc 1 244 1 view -0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 16
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048 0000 00B5     		push	{lr}
 1049              	.LCFI14:
 1050              		.cfi_def_cfa_offset 4
 1051              		.cfi_offset 14, -4
 1052 0002 85B0     		sub	sp, sp, #20
 1053              	.LCFI15:
 1054              		.cfi_def_cfa_offset 24
 250:Core/Src/main.c **** 
 1055              		.loc 1 250 3 view .LVU289
 250:Core/Src/main.c **** 
 1056              		.loc 1 250 26 is_stmt 0 view .LVU290
 1057 0004 0023     		movs	r3, #0
 1058 0006 0093     		str	r3, [sp]
 1059 0008 0193     		str	r3, [sp, #4]
 1060 000a 0293     		str	r3, [sp, #8]
 1061 000c 0393     		str	r3, [sp, #12]
 257:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1062              		.loc 1 257 3 is_stmt 1 view .LVU291
 257:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1063              		.loc 1 257 18 is_stmt 0 view .LVU292
 1064 000e 2548     		ldr	r0, .L64
 1065 0010 254A     		ldr	r2, .L64+4
 1066 0012 0260     		str	r2, [r0]
 258:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1067              		.loc 1 258 3 is_stmt 1 view .LVU293
 258:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1068              		.loc 1 258 29 is_stmt 0 view .LVU294
 1069 0014 4FF48032 		mov	r2, #65536
 1070 0018 4260     		str	r2, [r0, #4]
 259:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1071              		.loc 1 259 3 is_stmt 1 view .LVU295
 259:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1072              		.loc 1 259 25 is_stmt 0 view .LVU296
 1073 001a 8360     		str	r3, [r0, #8]
 260:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1074              		.loc 1 260 3 is_stmt 1 view .LVU297
 260:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1075              		.loc 1 260 27 is_stmt 0 view .LVU298
 1076 001c 0122     		movs	r2, #1
 1077 001e 0261     		str	r2, [r0, #16]
 261:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1078              		.loc 1 261 3 is_stmt 1 view .LVU299
 261:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1079              		.loc 1 261 33 is_stmt 0 view .LVU300
 1080 0020 0276     		strb	r2, [r0, #24]
 262:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1081              		.loc 1 262 3 is_stmt 1 view .LVU301
 262:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1082              		.loc 1 262 36 is_stmt 0 view .LVU302
 1083 0022 80F82030 		strb	r3, [r0, #32]
 263:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1084              		.loc 1 263 3 is_stmt 1 view .LVU303
 263:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
ARM GAS  /tmp/ccf4ijSD.s 			page 38


 1085              		.loc 1 263 35 is_stmt 0 view .LVU304
 1086 0026 C362     		str	r3, [r0, #44]
 264:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1087              		.loc 1 264 3 is_stmt 1 view .LVU305
 264:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1088              		.loc 1 264 31 is_stmt 0 view .LVU306
 1089 0028 2049     		ldr	r1, .L64+8
 1090 002a 8162     		str	r1, [r0, #40]
 265:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1091              		.loc 1 265 3 is_stmt 1 view .LVU307
 265:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1092              		.loc 1 265 24 is_stmt 0 view .LVU308
 1093 002c C360     		str	r3, [r0, #12]
 266:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1094              		.loc 1 266 3 is_stmt 1 view .LVU309
 266:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1095              		.loc 1 266 30 is_stmt 0 view .LVU310
 1096 002e 0423     		movs	r3, #4
 1097 0030 C361     		str	r3, [r0, #28]
 267:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1098              		.loc 1 267 3 is_stmt 1 view .LVU311
 267:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1099              		.loc 1 267 36 is_stmt 0 view .LVU312
 1100 0032 80F83020 		strb	r2, [r0, #48]
 268:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1101              		.loc 1 268 3 is_stmt 1 view .LVU313
 268:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1102              		.loc 1 268 27 is_stmt 0 view .LVU314
 1103 0036 4261     		str	r2, [r0, #20]
 269:Core/Src/main.c ****   {
 1104              		.loc 1 269 3 is_stmt 1 view .LVU315
 269:Core/Src/main.c ****   {
 1105              		.loc 1 269 7 is_stmt 0 view .LVU316
 1106 0038 FFF7FEFF 		bl	HAL_ADC_Init
 1107              	.LVL41:
 269:Core/Src/main.c ****   {
 1108              		.loc 1 269 6 view .LVU317
 1109 003c 40BB     		cbnz	r0, .L59
 275:Core/Src/main.c ****   sConfig.Rank = 1;
 1110              		.loc 1 275 3 is_stmt 1 view .LVU318
 275:Core/Src/main.c ****   sConfig.Rank = 1;
 1111              		.loc 1 275 19 is_stmt 0 view .LVU319
 1112 003e 0423     		movs	r3, #4
 1113 0040 0093     		str	r3, [sp]
 276:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1114              		.loc 1 276 3 is_stmt 1 view .LVU320
 276:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1115              		.loc 1 276 16 is_stmt 0 view .LVU321
 1116 0042 0123     		movs	r3, #1
 1117 0044 0193     		str	r3, [sp, #4]
 277:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1118              		.loc 1 277 3 is_stmt 1 view .LVU322
 277:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1119              		.loc 1 277 24 is_stmt 0 view .LVU323
 1120 0046 0023     		movs	r3, #0
 1121 0048 0293     		str	r3, [sp, #8]
 278:Core/Src/main.c ****   {
ARM GAS  /tmp/ccf4ijSD.s 			page 39


 1122              		.loc 1 278 3 is_stmt 1 view .LVU324
 278:Core/Src/main.c ****   {
 1123              		.loc 1 278 7 is_stmt 0 view .LVU325
 1124 004a 6946     		mov	r1, sp
 1125 004c 1548     		ldr	r0, .L64
 1126 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1127              	.LVL42:
 278:Core/Src/main.c ****   {
 1128              		.loc 1 278 6 view .LVU326
 1129 0052 F8B9     		cbnz	r0, .L60
 284:Core/Src/main.c ****   sConfig.Rank = 2;
 1130              		.loc 1 284 3 is_stmt 1 view .LVU327
 284:Core/Src/main.c ****   sConfig.Rank = 2;
 1131              		.loc 1 284 19 is_stmt 0 view .LVU328
 1132 0054 0523     		movs	r3, #5
 1133 0056 0093     		str	r3, [sp]
 285:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1134              		.loc 1 285 3 is_stmt 1 view .LVU329
 285:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1135              		.loc 1 285 16 is_stmt 0 view .LVU330
 1136 0058 0223     		movs	r3, #2
 1137 005a 0193     		str	r3, [sp, #4]
 286:Core/Src/main.c ****   {
 1138              		.loc 1 286 3 is_stmt 1 view .LVU331
 286:Core/Src/main.c ****   {
 1139              		.loc 1 286 7 is_stmt 0 view .LVU332
 1140 005c 6946     		mov	r1, sp
 1141 005e 1148     		ldr	r0, .L64
 1142 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1143              	.LVL43:
 286:Core/Src/main.c ****   {
 1144              		.loc 1 286 6 view .LVU333
 1145 0064 C0B9     		cbnz	r0, .L61
 292:Core/Src/main.c ****   sConfig.Rank = 3;
 1146              		.loc 1 292 3 is_stmt 1 view .LVU334
 292:Core/Src/main.c ****   sConfig.Rank = 3;
 1147              		.loc 1 292 19 is_stmt 0 view .LVU335
 1148 0066 0623     		movs	r3, #6
 1149 0068 0093     		str	r3, [sp]
 293:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1150              		.loc 1 293 3 is_stmt 1 view .LVU336
 293:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1151              		.loc 1 293 16 is_stmt 0 view .LVU337
 1152 006a 0323     		movs	r3, #3
 1153 006c 0193     		str	r3, [sp, #4]
 294:Core/Src/main.c ****   {
 1154              		.loc 1 294 3 is_stmt 1 view .LVU338
 294:Core/Src/main.c ****   {
 1155              		.loc 1 294 7 is_stmt 0 view .LVU339
 1156 006e 6946     		mov	r1, sp
 1157 0070 0C48     		ldr	r0, .L64
 1158 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1159              	.LVL44:
 294:Core/Src/main.c ****   {
 1160              		.loc 1 294 6 view .LVU340
 1161 0076 88B9     		cbnz	r0, .L62
 300:Core/Src/main.c ****   sConfig.Rank = 4;
ARM GAS  /tmp/ccf4ijSD.s 			page 40


 1162              		.loc 1 300 3 is_stmt 1 view .LVU341
 300:Core/Src/main.c ****   sConfig.Rank = 4;
 1163              		.loc 1 300 19 is_stmt 0 view .LVU342
 1164 0078 0723     		movs	r3, #7
 1165 007a 0093     		str	r3, [sp]
 301:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1166              		.loc 1 301 3 is_stmt 1 view .LVU343
 301:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1167              		.loc 1 301 16 is_stmt 0 view .LVU344
 1168 007c 0423     		movs	r3, #4
 1169 007e 0193     		str	r3, [sp, #4]
 302:Core/Src/main.c ****   {
 1170              		.loc 1 302 3 is_stmt 1 view .LVU345
 302:Core/Src/main.c ****   {
 1171              		.loc 1 302 7 is_stmt 0 view .LVU346
 1172 0080 6946     		mov	r1, sp
 1173 0082 0848     		ldr	r0, .L64
 1174 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1175              	.LVL45:
 302:Core/Src/main.c ****   {
 1176              		.loc 1 302 6 view .LVU347
 1177 0088 50B9     		cbnz	r0, .L63
 310:Core/Src/main.c **** 
 1178              		.loc 1 310 1 view .LVU348
 1179 008a 05B0     		add	sp, sp, #20
 1180              	.LCFI16:
 1181              		.cfi_remember_state
 1182              		.cfi_def_cfa_offset 4
 1183              		@ sp needed
 1184 008c 5DF804FB 		ldr	pc, [sp], #4
 1185              	.L59:
 1186              	.LCFI17:
 1187              		.cfi_restore_state
 271:Core/Src/main.c ****   }
 1188              		.loc 1 271 5 is_stmt 1 view .LVU349
 1189 0090 FFF7FEFF 		bl	Error_Handler
 1190              	.LVL46:
 1191              	.L60:
 280:Core/Src/main.c ****   }
 1192              		.loc 1 280 5 view .LVU350
 1193 0094 FFF7FEFF 		bl	Error_Handler
 1194              	.LVL47:
 1195              	.L61:
 288:Core/Src/main.c ****   }
 1196              		.loc 1 288 5 view .LVU351
 1197 0098 FFF7FEFF 		bl	Error_Handler
 1198              	.LVL48:
 1199              	.L62:
 296:Core/Src/main.c ****   }
 1200              		.loc 1 296 5 view .LVU352
 1201 009c FFF7FEFF 		bl	Error_Handler
 1202              	.LVL49:
 1203              	.L63:
 304:Core/Src/main.c ****   }
 1204              		.loc 1 304 5 view .LVU353
 1205 00a0 FFF7FEFF 		bl	Error_Handler
 1206              	.LVL50:
ARM GAS  /tmp/ccf4ijSD.s 			page 41


 1207              	.L65:
 1208              		.align	2
 1209              	.L64:
 1210 00a4 00000000 		.word	hadc1
 1211 00a8 00200140 		.word	1073815552
 1212 00ac 0100000F 		.word	251658241
 1213              		.cfi_endproc
 1214              	.LFE218:
 1216              		.section	.text.MX_TIM14_Init,"ax",%progbits
 1217              		.align	1
 1218              		.syntax unified
 1219              		.thumb
 1220              		.thumb_func
 1221              		.fpu fpv4-sp-d16
 1223              	MX_TIM14_Init:
 1224              	.LFB221:
 413:Core/Src/main.c **** 
 1225              		.loc 1 413 1 view -0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 0
 1228              		@ frame_needed = 0, uses_anonymous_args = 0
 1229 0000 08B5     		push	{r3, lr}
 1230              	.LCFI18:
 1231              		.cfi_def_cfa_offset 8
 1232              		.cfi_offset 3, -8
 1233              		.cfi_offset 14, -4
 422:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1234              		.loc 1 422 3 view .LVU355
 422:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1235              		.loc 1 422 19 is_stmt 0 view .LVU356
 1236 0002 0948     		ldr	r0, .L70
 1237 0004 094B     		ldr	r3, .L70+4
 1238 0006 0360     		str	r3, [r0]
 423:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1239              		.loc 1 423 3 is_stmt 1 view .LVU357
 423:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1240              		.loc 1 423 25 is_stmt 0 view .LVU358
 1241 0008 42F22733 		movw	r3, #8999
 1242 000c 4360     		str	r3, [r0, #4]
 424:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 1243              		.loc 1 424 3 is_stmt 1 view .LVU359
 424:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 1244              		.loc 1 424 27 is_stmt 0 view .LVU360
 1245 000e 0023     		movs	r3, #0
 1246 0010 8360     		str	r3, [r0, #8]
 425:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1247              		.loc 1 425 3 is_stmt 1 view .LVU361
 425:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1248              		.loc 1 425 22 is_stmt 0 view .LVU362
 1249 0012 40F2E732 		movw	r2, #999
 1250 0016 C260     		str	r2, [r0, #12]
 426:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1251              		.loc 1 426 3 is_stmt 1 view .LVU363
 426:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1252              		.loc 1 426 29 is_stmt 0 view .LVU364
 1253 0018 0361     		str	r3, [r0, #16]
 427:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
ARM GAS  /tmp/ccf4ijSD.s 			page 42


 1254              		.loc 1 427 3 is_stmt 1 view .LVU365
 427:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1255              		.loc 1 427 33 is_stmt 0 view .LVU366
 1256 001a 8361     		str	r3, [r0, #24]
 428:Core/Src/main.c ****   {
 1257              		.loc 1 428 3 is_stmt 1 view .LVU367
 428:Core/Src/main.c ****   {
 1258              		.loc 1 428 7 is_stmt 0 view .LVU368
 1259 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1260              	.LVL51:
 428:Core/Src/main.c ****   {
 1261              		.loc 1 428 6 view .LVU369
 1262 0020 00B9     		cbnz	r0, .L69
 436:Core/Src/main.c **** 
 1263              		.loc 1 436 1 view .LVU370
 1264 0022 08BD     		pop	{r3, pc}
 1265              	.L69:
 430:Core/Src/main.c ****   }
 1266              		.loc 1 430 5 is_stmt 1 view .LVU371
 1267 0024 FFF7FEFF 		bl	Error_Handler
 1268              	.LVL52:
 1269              	.L71:
 1270              		.align	2
 1271              	.L70:
 1272 0028 00000000 		.word	htim14
 1273 002c 00200040 		.word	1073750016
 1274              		.cfi_endproc
 1275              	.LFE221:
 1277              		.section	.text.MX_TIM13_Init,"ax",%progbits
 1278              		.align	1
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1282              		.fpu fpv4-sp-d16
 1284              	MX_TIM13_Init:
 1285              	.LFB220:
 382:Core/Src/main.c **** 
 1286              		.loc 1 382 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290 0000 08B5     		push	{r3, lr}
 1291              	.LCFI19:
 1292              		.cfi_def_cfa_offset 8
 1293              		.cfi_offset 3, -8
 1294              		.cfi_offset 14, -4
 391:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1295              		.loc 1 391 3 view .LVU373
 391:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1296              		.loc 1 391 19 is_stmt 0 view .LVU374
 1297 0002 0948     		ldr	r0, .L76
 1298 0004 094B     		ldr	r3, .L76+4
 1299 0006 0360     		str	r3, [r0]
 392:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1300              		.loc 1 392 3 is_stmt 1 view .LVU375
 392:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1301              		.loc 1 392 25 is_stmt 0 view .LVU376
ARM GAS  /tmp/ccf4ijSD.s 			page 43


 1302 0008 42F22733 		movw	r3, #8999
 1303 000c 4360     		str	r3, [r0, #4]
 393:Core/Src/main.c ****   htim13.Init.Period = 500-1;
 1304              		.loc 1 393 3 is_stmt 1 view .LVU377
 393:Core/Src/main.c ****   htim13.Init.Period = 500-1;
 1305              		.loc 1 393 27 is_stmt 0 view .LVU378
 1306 000e 0023     		movs	r3, #0
 1307 0010 8360     		str	r3, [r0, #8]
 394:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1308              		.loc 1 394 3 is_stmt 1 view .LVU379
 394:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1309              		.loc 1 394 22 is_stmt 0 view .LVU380
 1310 0012 40F2F312 		movw	r2, #499
 1311 0016 C260     		str	r2, [r0, #12]
 395:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1312              		.loc 1 395 3 is_stmt 1 view .LVU381
 395:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1313              		.loc 1 395 29 is_stmt 0 view .LVU382
 1314 0018 0361     		str	r3, [r0, #16]
 396:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1315              		.loc 1 396 3 is_stmt 1 view .LVU383
 396:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1316              		.loc 1 396 33 is_stmt 0 view .LVU384
 1317 001a 8361     		str	r3, [r0, #24]
 397:Core/Src/main.c ****   {
 1318              		.loc 1 397 3 is_stmt 1 view .LVU385
 397:Core/Src/main.c ****   {
 1319              		.loc 1 397 7 is_stmt 0 view .LVU386
 1320 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1321              	.LVL53:
 397:Core/Src/main.c ****   {
 1322              		.loc 1 397 6 view .LVU387
 1323 0020 00B9     		cbnz	r0, .L75
 405:Core/Src/main.c **** 
 1324              		.loc 1 405 1 view .LVU388
 1325 0022 08BD     		pop	{r3, pc}
 1326              	.L75:
 399:Core/Src/main.c ****   }
 1327              		.loc 1 399 5 is_stmt 1 view .LVU389
 1328 0024 FFF7FEFF 		bl	Error_Handler
 1329              	.LVL54:
 1330              	.L77:
 1331              		.align	2
 1332              	.L76:
 1333 0028 00000000 		.word	htim13
 1334 002c 001C0040 		.word	1073748992
 1335              		.cfi_endproc
 1336              	.LFE220:
 1338              		.section	.text.SystemClock_Config,"ax",%progbits
 1339              		.align	1
 1340              		.global	SystemClock_Config
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu fpv4-sp-d16
 1346              	SystemClock_Config:
 1347              	.LFB217:
ARM GAS  /tmp/ccf4ijSD.s 			page 44


 198:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1348              		.loc 1 198 1 view -0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 80
 1351              		@ frame_needed = 0, uses_anonymous_args = 0
 1352 0000 00B5     		push	{lr}
 1353              	.LCFI20:
 1354              		.cfi_def_cfa_offset 4
 1355              		.cfi_offset 14, -4
 1356 0002 95B0     		sub	sp, sp, #84
 1357              	.LCFI21:
 1358              		.cfi_def_cfa_offset 88
 199:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1359              		.loc 1 199 3 view .LVU391
 199:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1360              		.loc 1 199 22 is_stmt 0 view .LVU392
 1361 0004 3422     		movs	r2, #52
 1362 0006 0021     		movs	r1, #0
 1363 0008 07A8     		add	r0, sp, #28
 1364 000a FFF7FEFF 		bl	memset
 1365              	.LVL55:
 200:Core/Src/main.c **** 
 1366              		.loc 1 200 3 is_stmt 1 view .LVU393
 200:Core/Src/main.c **** 
 1367              		.loc 1 200 22 is_stmt 0 view .LVU394
 1368 000e 0023     		movs	r3, #0
 1369 0010 0293     		str	r3, [sp, #8]
 1370 0012 0393     		str	r3, [sp, #12]
 1371 0014 0493     		str	r3, [sp, #16]
 1372 0016 0593     		str	r3, [sp, #20]
 1373 0018 0693     		str	r3, [sp, #24]
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1374              		.loc 1 204 3 is_stmt 1 view .LVU395
 1375              	.LBB10:
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1376              		.loc 1 204 3 view .LVU396
 1377 001a 0093     		str	r3, [sp]
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1378              		.loc 1 204 3 view .LVU397
 1379 001c 1E4A     		ldr	r2, .L84
 1380 001e 116C     		ldr	r1, [r2, #64]
 1381 0020 41F08051 		orr	r1, r1, #268435456
 1382 0024 1164     		str	r1, [r2, #64]
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1383              		.loc 1 204 3 view .LVU398
 1384 0026 126C     		ldr	r2, [r2, #64]
 1385 0028 02F08052 		and	r2, r2, #268435456
 1386 002c 0092     		str	r2, [sp]
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1387              		.loc 1 204 3 view .LVU399
 1388 002e 009A     		ldr	r2, [sp]
 1389              	.LBE10:
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1390              		.loc 1 204 3 view .LVU400
 205:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1391              		.loc 1 205 3 view .LVU401
 1392              	.LBB11:
ARM GAS  /tmp/ccf4ijSD.s 			page 45


 205:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1393              		.loc 1 205 3 view .LVU402
 1394 0030 0193     		str	r3, [sp, #4]
 205:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1395              		.loc 1 205 3 view .LVU403
 1396 0032 1A4A     		ldr	r2, .L84+4
 1397 0034 1168     		ldr	r1, [r2]
 1398 0036 41F44041 		orr	r1, r1, #49152
 1399 003a 1160     		str	r1, [r2]
 205:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1400              		.loc 1 205 3 view .LVU404
 1401 003c 1268     		ldr	r2, [r2]
 1402 003e 02F44042 		and	r2, r2, #49152
 1403 0042 0192     		str	r2, [sp, #4]
 205:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1404              		.loc 1 205 3 view .LVU405
 1405 0044 019A     		ldr	r2, [sp, #4]
 1406              	.LBE11:
 205:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1407              		.loc 1 205 3 view .LVU406
 209:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1408              		.loc 1 209 3 view .LVU407
 209:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1409              		.loc 1 209 36 is_stmt 0 view .LVU408
 1410 0046 0222     		movs	r2, #2
 1411 0048 0792     		str	r2, [sp, #28]
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1412              		.loc 1 210 3 is_stmt 1 view .LVU409
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1413              		.loc 1 210 30 is_stmt 0 view .LVU410
 1414 004a 0121     		movs	r1, #1
 1415 004c 0A91     		str	r1, [sp, #40]
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1416              		.loc 1 211 3 is_stmt 1 view .LVU411
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1417              		.loc 1 211 41 is_stmt 0 view .LVU412
 1418 004e 1021     		movs	r1, #16
 1419 0050 0B91     		str	r1, [sp, #44]
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1420              		.loc 1 212 3 is_stmt 1 view .LVU413
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1421              		.loc 1 212 34 is_stmt 0 view .LVU414
 1422 0052 0D92     		str	r2, [sp, #52]
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1423              		.loc 1 213 3 is_stmt 1 view .LVU415
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1424              		.loc 1 213 35 is_stmt 0 view .LVU416
 1425 0054 0E93     		str	r3, [sp, #56]
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1426              		.loc 1 214 3 is_stmt 1 view .LVU417
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1427              		.loc 1 214 30 is_stmt 0 view .LVU418
 1428 0056 0823     		movs	r3, #8
 1429 0058 0F93     		str	r3, [sp, #60]
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1430              		.loc 1 215 3 is_stmt 1 view .LVU419
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
ARM GAS  /tmp/ccf4ijSD.s 			page 46


 1431              		.loc 1 215 30 is_stmt 0 view .LVU420
 1432 005a 5A23     		movs	r3, #90
 1433 005c 1093     		str	r3, [sp, #64]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1434              		.loc 1 216 3 is_stmt 1 view .LVU421
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1435              		.loc 1 216 30 is_stmt 0 view .LVU422
 1436 005e 1192     		str	r2, [sp, #68]
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1437              		.loc 1 217 3 is_stmt 1 view .LVU423
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1438              		.loc 1 217 30 is_stmt 0 view .LVU424
 1439 0060 1292     		str	r2, [sp, #72]
 218:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1440              		.loc 1 218 3 is_stmt 1 view .LVU425
 218:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1441              		.loc 1 218 30 is_stmt 0 view .LVU426
 1442 0062 1392     		str	r2, [sp, #76]
 219:Core/Src/main.c ****   {
 1443              		.loc 1 219 3 is_stmt 1 view .LVU427
 219:Core/Src/main.c ****   {
 1444              		.loc 1 219 7 is_stmt 0 view .LVU428
 1445 0064 07A8     		add	r0, sp, #28
 1446 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1447              	.LVL56:
 219:Core/Src/main.c ****   {
 1448              		.loc 1 219 6 view .LVU429
 1449 006a 88B9     		cbnz	r0, .L82
 225:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1450              		.loc 1 225 3 is_stmt 1 view .LVU430
 225:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1451              		.loc 1 225 31 is_stmt 0 view .LVU431
 1452 006c 0F23     		movs	r3, #15
 1453 006e 0293     		str	r3, [sp, #8]
 227:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1454              		.loc 1 227 3 is_stmt 1 view .LVU432
 227:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1455              		.loc 1 227 34 is_stmt 0 view .LVU433
 1456 0070 0223     		movs	r3, #2
 1457 0072 0393     		str	r3, [sp, #12]
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1458              		.loc 1 228 3 is_stmt 1 view .LVU434
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1459              		.loc 1 228 35 is_stmt 0 view .LVU435
 1460 0074 0023     		movs	r3, #0
 1461 0076 0493     		str	r3, [sp, #16]
 229:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1462              		.loc 1 229 3 is_stmt 1 view .LVU436
 229:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1463              		.loc 1 229 36 is_stmt 0 view .LVU437
 1464 0078 4FF48052 		mov	r2, #4096
 1465 007c 0592     		str	r2, [sp, #20]
 230:Core/Src/main.c **** 
 1466              		.loc 1 230 3 is_stmt 1 view .LVU438
 230:Core/Src/main.c **** 
 1467              		.loc 1 230 36 is_stmt 0 view .LVU439
 1468 007e 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/ccf4ijSD.s 			page 47


 232:Core/Src/main.c ****   {
 1469              		.loc 1 232 3 is_stmt 1 view .LVU440
 232:Core/Src/main.c ****   {
 1470              		.loc 1 232 7 is_stmt 0 view .LVU441
 1471 0080 0321     		movs	r1, #3
 1472 0082 02A8     		add	r0, sp, #8
 1473 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1474              	.LVL57:
 232:Core/Src/main.c ****   {
 1475              		.loc 1 232 6 view .LVU442
 1476 0088 20B9     		cbnz	r0, .L83
 236:Core/Src/main.c **** 
 1477              		.loc 1 236 1 view .LVU443
 1478 008a 15B0     		add	sp, sp, #84
 1479              	.LCFI22:
 1480              		.cfi_remember_state
 1481              		.cfi_def_cfa_offset 4
 1482              		@ sp needed
 1483 008c 5DF804FB 		ldr	pc, [sp], #4
 1484              	.L82:
 1485              	.LCFI23:
 1486              		.cfi_restore_state
 221:Core/Src/main.c ****   }
 1487              		.loc 1 221 5 is_stmt 1 view .LVU444
 1488 0090 FFF7FEFF 		bl	Error_Handler
 1489              	.LVL58:
 1490              	.L83:
 234:Core/Src/main.c ****   }
 1491              		.loc 1 234 5 view .LVU445
 1492 0094 FFF7FEFF 		bl	Error_Handler
 1493              	.LVL59:
 1494              	.L85:
 1495              		.align	2
 1496              	.L84:
 1497 0098 00380240 		.word	1073887232
 1498 009c 00700040 		.word	1073770496
 1499              		.cfi_endproc
 1500              	.LFE217:
 1502              		.section	.text.main,"ax",%progbits
 1503              		.align	1
 1504              		.global	main
 1505              		.syntax unified
 1506              		.thumb
 1507              		.thumb_func
 1508              		.fpu fpv4-sp-d16
 1510              	main:
 1511              	.LFB216:
 126:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1512              		.loc 1 126 1 view -0
 1513              		.cfi_startproc
 1514              		@ Volatile: function does not return.
 1515              		@ args = 0, pretend = 0, frame = 0
 1516              		@ frame_needed = 0, uses_anonymous_args = 0
 1517 0000 08B5     		push	{r3, lr}
 1518              	.LCFI24:
 1519              		.cfi_def_cfa_offset 8
 1520              		.cfi_offset 3, -8
ARM GAS  /tmp/ccf4ijSD.s 			page 48


 1521              		.cfi_offset 14, -4
 130:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 1522              		.loc 1 130 3 view .LVU447
 130:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 1523              		.loc 1 130 18 is_stmt 0 view .LVU448
 1524 0002 1B4A     		ldr	r2, .L89
 1525 0004 9323     		movs	r3, #147
 1526 0006 1360     		str	r3, [r2]
 131:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 1527              		.loc 1 131 3 is_stmt 1 view .LVU449
 131:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 1528              		.loc 1 131 18 is_stmt 0 view .LVU450
 1529 0008 0023     		movs	r3, #0
 1530 000a 5360     		str	r3, [r2, #4]
 132:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 1531              		.loc 1 132 3 is_stmt 1 view .LVU451
 132:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 1532              		.loc 1 132 16 is_stmt 0 view .LVU452
 1533 000c 9360     		str	r3, [r2, #8]
 133:Core/Src/main.c ****   TxHeader.DLC = 8;
 1534              		.loc 1 133 3 is_stmt 1 view .LVU453
 133:Core/Src/main.c ****   TxHeader.DLC = 8;
 1535              		.loc 1 133 16 is_stmt 0 view .LVU454
 1536 000e D360     		str	r3, [r2, #12]
 134:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 1537              		.loc 1 134 3 is_stmt 1 view .LVU455
 134:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 1538              		.loc 1 134 16 is_stmt 0 view .LVU456
 1539 0010 0821     		movs	r1, #8
 1540 0012 1161     		str	r1, [r2, #16]
 135:Core/Src/main.c ****   
 1541              		.loc 1 135 3 is_stmt 1 view .LVU457
 135:Core/Src/main.c ****   
 1542              		.loc 1 135 31 is_stmt 0 view .LVU458
 1543 0014 1375     		strb	r3, [r2, #20]
 138:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 1544              		.loc 1 138 3 is_stmt 1 view .LVU459
 138:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 1545              		.loc 1 138 19 is_stmt 0 view .LVU460
 1546 0016 174A     		ldr	r2, .L89+4
 1547 0018 C020     		movs	r0, #192
 1548 001a 1060     		str	r0, [r2]
 139:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 1549              		.loc 1 139 3 is_stmt 1 view .LVU461
 139:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 1550              		.loc 1 139 19 is_stmt 0 view .LVU462
 1551 001c 5360     		str	r3, [r2, #4]
 140:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 1552              		.loc 1 140 3 is_stmt 1 view .LVU463
 140:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 1553              		.loc 1 140 17 is_stmt 0 view .LVU464
 1554 001e 9360     		str	r3, [r2, #8]
 141:Core/Src/main.c ****   TxHeader2.DLC = 8;
 1555              		.loc 1 141 3 is_stmt 1 view .LVU465
 141:Core/Src/main.c ****   TxHeader2.DLC = 8;
 1556              		.loc 1 141 17 is_stmt 0 view .LVU466
 1557 0020 D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccf4ijSD.s 			page 49


 142:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 1558              		.loc 1 142 3 is_stmt 1 view .LVU467
 142:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 1559              		.loc 1 142 17 is_stmt 0 view .LVU468
 1560 0022 1161     		str	r1, [r2, #16]
 143:Core/Src/main.c **** 
 1561              		.loc 1 143 3 is_stmt 1 view .LVU469
 143:Core/Src/main.c **** 
 1562              		.loc 1 143 32 is_stmt 0 view .LVU470
 1563 0024 1375     		strb	r3, [r2, #20]
 150:Core/Src/main.c **** 
 1564              		.loc 1 150 3 is_stmt 1 view .LVU471
 1565 0026 FFF7FEFF 		bl	HAL_Init
 1566              	.LVL60:
 157:Core/Src/main.c **** 
 1567              		.loc 1 157 3 view .LVU472
 1568 002a FFF7FEFF 		bl	SystemClock_Config
 1569              	.LVL61:
 164:Core/Src/main.c ****   MX_CAN1_Init();
 1570              		.loc 1 164 3 view .LVU473
 1571 002e FFF7FEFF 		bl	MX_GPIO_Init
 1572              	.LVL62:
 165:Core/Src/main.c ****   MX_DMA_Init();
 1573              		.loc 1 165 3 view .LVU474
 1574 0032 FFF7FEFF 		bl	MX_CAN1_Init
 1575              	.LVL63:
 166:Core/Src/main.c ****   MX_ADC1_Init();
 1576              		.loc 1 166 3 view .LVU475
 1577 0036 FFF7FEFF 		bl	MX_DMA_Init
 1578              	.LVL64:
 167:Core/Src/main.c ****   MX_TIM14_Init();
 1579              		.loc 1 167 3 view .LVU476
 1580 003a FFF7FEFF 		bl	MX_ADC1_Init
 1581              	.LVL65:
 168:Core/Src/main.c ****   MX_TIM13_Init();
 1582              		.loc 1 168 3 view .LVU477
 1583 003e FFF7FEFF 		bl	MX_TIM14_Init
 1584              	.LVL66:
 169:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1585              		.loc 1 169 3 view .LVU478
 1586 0042 FFF7FEFF 		bl	MX_TIM13_Init
 1587              	.LVL67:
 173:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 1588              		.loc 1 173 3 view .LVU479
 1589 0046 0C4C     		ldr	r4, .L89+8
 1590 0048 2046     		mov	r0, r4
 1591 004a FFF7FEFF 		bl	HAL_CAN_Start
 1592              	.LVL68:
 174:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1593              		.loc 1 174 3 view .LVU480
 1594 004e 0221     		movs	r1, #2
 1595 0050 2046     		mov	r0, r4
 1596 0052 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1597              	.LVL69:
 175:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 1598              		.loc 1 175 3 view .LVU481
 1599 0056 0948     		ldr	r0, .L89+12
ARM GAS  /tmp/ccf4ijSD.s 			page 50


 1600 0058 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1601              	.LVL70:
 176:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 1602              		.loc 1 176 3 view .LVU482
 1603 005c 0848     		ldr	r0, .L89+16
 1604 005e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1605              	.LVL71:
 177:Core/Src/main.c **** 
 1606              		.loc 1 177 3 view .LVU483
 1607 0062 0422     		movs	r2, #4
 1608 0064 0749     		ldr	r1, .L89+20
 1609 0066 0848     		ldr	r0, .L89+24
 1610 0068 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1611              	.LVL72:
 1612              	.L87:
 183:Core/Src/main.c ****   {
 1613              		.loc 1 183 3 discriminator 1 view .LVU484
 189:Core/Src/main.c ****   /* USER CODE END 3 */
 1614              		.loc 1 189 3 discriminator 1 view .LVU485
 183:Core/Src/main.c ****   {
 1615              		.loc 1 183 9 discriminator 1 view .LVU486
 1616 006c FEE7     		b	.L87
 1617              	.L90:
 1618 006e 00BF     		.align	2
 1619              	.L89:
 1620 0070 00000000 		.word	TxHeader
 1621 0074 00000000 		.word	TxHeader2
 1622 0078 00000000 		.word	hcan1
 1623 007c 00000000 		.word	htim14
 1624 0080 00000000 		.word	htim13
 1625 0084 00000000 		.word	adc_buf
 1626 0088 00000000 		.word	hadc1
 1627              		.cfi_endproc
 1628              	.LFE216:
 1630              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1631              		.align	1
 1632              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 1633              		.syntax unified
 1634              		.thumb
 1635              		.thumb_func
 1636              		.fpu fpv4-sp-d16
 1638              	HAL_CAN_RxFifo0MsgPendingCallback:
 1639              	.LVL73:
 1640              	.LFB226:
 547:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 1641              		.loc 1 547 1 view -0
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 0
 1644              		@ frame_needed = 0, uses_anonymous_args = 0
 547:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 1645              		.loc 1 547 1 is_stmt 0 view .LVU488
 1646 0000 08B5     		push	{r3, lr}
 1647              	.LCFI25:
 1648              		.cfi_def_cfa_offset 8
 1649              		.cfi_offset 3, -8
 1650              		.cfi_offset 14, -4
 548:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccf4ijSD.s 			page 51


 1651              		.loc 1 548 3 is_stmt 1 view .LVU489
 548:Core/Src/main.c ****     Error_Handler();
 1652              		.loc 1 548 7 is_stmt 0 view .LVU490
 1653 0002 0E4B     		ldr	r3, .L99
 1654 0004 0E4A     		ldr	r2, .L99+4
 1655 0006 0021     		movs	r1, #0
 1656 0008 0E48     		ldr	r0, .L99+8
 1657              	.LVL74:
 548:Core/Src/main.c ****     Error_Handler();
 1658              		.loc 1 548 7 view .LVU491
 1659 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1660              	.LVL75:
 548:Core/Src/main.c ****     Error_Handler();
 1661              		.loc 1 548 6 view .LVU492
 1662 000e 30B9     		cbnz	r0, .L96
 553:Core/Src/main.c ****       imdFault = RxData[0];
 1663              		.loc 1 553 3 is_stmt 1 view .LVU493
 553:Core/Src/main.c ****       imdFault = RxData[0];
 1664              		.loc 1 553 15 is_stmt 0 view .LVU494
 1665 0010 0B4B     		ldr	r3, .L99+4
 1666 0012 1B68     		ldr	r3, [r3]
 553:Core/Src/main.c ****       imdFault = RxData[0];
 1667              		.loc 1 553 6 view .LVU495
 1668 0014 822B     		cmp	r3, #130
 1669 0016 04D0     		beq	.L97
 1670              	.L93:
 559:Core/Src/main.c ****       ready_to_drive = RxData[0];
 1671              		.loc 1 559 3 is_stmt 1 view .LVU496
 559:Core/Src/main.c ****       ready_to_drive = RxData[0];
 1672              		.loc 1 559 6 is_stmt 0 view .LVU497
 1673 0018 872B     		cmp	r3, #135
 1674 001a 0AD0     		beq	.L98
 1675              	.L91:
 562:Core/Src/main.c **** 
 1676              		.loc 1 562 1 view .LVU498
 1677 001c 08BD     		pop	{r3, pc}
 1678              	.L96:
 549:Core/Src/main.c ****   }
 1679              		.loc 1 549 5 is_stmt 1 view .LVU499
 1680 001e FFF7FEFF 		bl	Error_Handler
 1681              	.LVL76:
 1682              	.L97:
 554:Core/Src/main.c ****       bmsFault = RxData[1];
 1683              		.loc 1 554 7 view .LVU500
 554:Core/Src/main.c ****       bmsFault = RxData[1];
 1684              		.loc 1 554 24 is_stmt 0 view .LVU501
 1685 0022 064A     		ldr	r2, .L99
 1686 0024 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 554:Core/Src/main.c ****       bmsFault = RxData[1];
 1687              		.loc 1 554 16 view .LVU502
 1688 0026 0849     		ldr	r1, .L99+12
 1689 0028 0870     		strb	r0, [r1]
 555:Core/Src/main.c ****   }
 1690              		.loc 1 555 7 is_stmt 1 view .LVU503
 555:Core/Src/main.c ****   }
 1691              		.loc 1 555 24 is_stmt 0 view .LVU504
 1692 002a 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccf4ijSD.s 			page 52


 555:Core/Src/main.c ****   }
 1693              		.loc 1 555 16 view .LVU505
 1694 002c 074A     		ldr	r2, .L99+16
 1695 002e 1170     		strb	r1, [r2]
 1696 0030 F2E7     		b	.L93
 1697              	.L98:
 560:Core/Src/main.c ****   }
 1698              		.loc 1 560 7 is_stmt 1 view .LVU506
 560:Core/Src/main.c ****   }
 1699              		.loc 1 560 30 is_stmt 0 view .LVU507
 1700 0032 024B     		ldr	r3, .L99
 1701 0034 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 560:Core/Src/main.c ****   }
 1702              		.loc 1 560 22 view .LVU508
 1703 0036 064B     		ldr	r3, .L99+20
 1704 0038 1A70     		strb	r2, [r3]
 562:Core/Src/main.c **** 
 1705              		.loc 1 562 1 view .LVU509
 1706 003a EFE7     		b	.L91
 1707              	.L100:
 1708              		.align	2
 1709              	.L99:
 1710 003c 00000000 		.word	RxData
 1711 0040 00000000 		.word	RxHeader
 1712 0044 00000000 		.word	hcan1
 1713 0048 00000000 		.word	.LANCHOR12
 1714 004c 00000000 		.word	.LANCHOR13
 1715 0050 00000000 		.word	.LANCHOR0
 1716              		.cfi_endproc
 1717              	.LFE226:
 1719              		.global	driveMode
 1720              		.global	command_torque_limit
 1721              		.global	commandedTorque
 1722              		.global	enableInverter
 1723              		.global	buzzerCounter
 1724              		.global	buzzerState
 1725              		.global	ready_to_drive
 1726              		.global	pedalAverage
 1727              		.global	pedal1
 1728              		.global	pedal0
 1729              		.comm	adc_buf,8,4
 1730              		.global	switch_direction
 1731              		.global	switch_cooling
 1732              		.global	bmsFault
 1733              		.global	imdFault
 1734              		.comm	filter1,40,4
 1735              		.comm	filter0,40,4
 1736              		.comm	RxData,8,4
 1737              		.comm	RxHeader,28,4
 1738              		.comm	TxMailbox,4,4
 1739              		.comm	TxData,8,4
 1740              		.comm	TxHeader2,24,4
 1741              		.comm	TxHeader,24,4
 1742              		.comm	htim14,72,4
 1743              		.comm	htim13,72,4
 1744              		.comm	hcan1,40,4
 1745              		.comm	hdma_adc1,96,4
ARM GAS  /tmp/ccf4ijSD.s 			page 53


 1746              		.comm	hadc1,72,4
 1747              		.section	.bss.bmsFault,"aw",%nobits
 1748              		.set	.LANCHOR13,. + 0
 1751              	bmsFault:
 1752 0000 00       		.space	1
 1753              		.section	.bss.buzzerCounter,"aw",%nobits
 1754              		.set	.LANCHOR11,. + 0
 1757              	buzzerCounter:
 1758 0000 00       		.space	1
 1759              		.section	.bss.buzzerState,"aw",%nobits
 1760              		.set	.LANCHOR1,. + 0
 1763              	buzzerState:
 1764 0000 00       		.space	1
 1765              		.section	.bss.command_torque_limit,"aw",%nobits
 1766              		.align	1
 1767              		.set	.LANCHOR6,. + 0
 1770              	command_torque_limit:
 1771 0000 0000     		.space	2
 1772              		.section	.bss.commandedTorque,"aw",%nobits
 1773              		.align	1
 1774              		.set	.LANCHOR7,. + 0
 1777              	commandedTorque:
 1778 0000 0000     		.space	2
 1779              		.section	.bss.enableInverter,"aw",%nobits
 1780              		.set	.LANCHOR9,. + 0
 1783              	enableInverter:
 1784 0000 00       		.space	1
 1785              		.section	.bss.imdFault,"aw",%nobits
 1786              		.set	.LANCHOR12,. + 0
 1789              	imdFault:
 1790 0000 00       		.space	1
 1791              		.section	.bss.pedal0,"aw",%nobits
 1792              		.align	1
 1793              		.set	.LANCHOR2,. + 0
 1796              	pedal0:
 1797 0000 0000     		.space	2
 1798              		.section	.bss.pedalAverage,"aw",%nobits
 1799              		.align	1
 1800              		.set	.LANCHOR4,. + 0
 1803              	pedalAverage:
 1804 0000 0000     		.space	2
 1805              		.section	.bss.ready_to_drive,"aw",%nobits
 1806              		.set	.LANCHOR0,. + 0
 1809              	ready_to_drive:
 1810 0000 00       		.space	1
 1811              		.section	.bss.switch_cooling,"aw",%nobits
 1812              		.set	.LANCHOR10,. + 0
 1815              	switch_cooling:
 1816 0000 00       		.space	1
 1817              		.section	.bss.switch_direction,"aw",%nobits
 1818              		.set	.LANCHOR8,. + 0
 1821              	switch_direction:
 1822 0000 00       		.space	1
 1823              		.section	.data.driveMode,"aw"
 1824              		.align	2
 1825              		.set	.LANCHOR5,. + 0
 1828              	driveMode:
ARM GAS  /tmp/ccf4ijSD.s 			page 54


 1829 0000 01000000 		.word	1
 1830              		.section	.data.pedal1,"aw"
 1831              		.align	1
 1832              		.set	.LANCHOR3,. + 0
 1835              	pedal1:
 1836 0000 0100     		.short	1
 1837              		.text
 1838              	.Letext0:
 1839              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1840              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1841              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1842              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1843              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1844              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1845              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1846              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1847              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1848              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1849              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1850              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1851              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1852              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1853              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1854              		.file 18 "<built-in>"
ARM GAS  /tmp/ccf4ijSD.s 			page 55


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccf4ijSD.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccf4ijSD.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccf4ijSD.s:186    .text.MX_GPIO_Init:00000000000000c0 $d
     /tmp/ccf4ijSD.s:193    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccf4ijSD.s:199    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccf4ijSD.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccf4ijSD.s:253    .text.mapValue:0000000000000000 $t
     /tmp/ccf4ijSD.s:260    .text.mapValue:0000000000000000 mapValue
     /tmp/ccf4ijSD.s:300    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccf4ijSD.s:307    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccf4ijSD.s:340    .text.HAL_GPIO_EXTI_Callback:0000000000000018 $d
     /tmp/ccf4ijSD.s:346    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccf4ijSD.s:353    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccf4ijSD.s:379    .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000000008 adc_buf
     /tmp/ccf4ijSD.s:386    .text.pedal_conversion:0000000000000000 $t
     /tmp/ccf4ijSD.s:393    .text.pedal_conversion:0000000000000000 pedal_conversion
     /tmp/ccf4ijSD.s:428    .text.pedal_conversion:0000000000000018 $d
     /tmp/ccf4ijSD.s:433    .text.getCommandedTorque:0000000000000000 $t
     /tmp/ccf4ijSD.s:440    .text.getCommandedTorque:0000000000000000 getCommandedTorque
     /tmp/ccf4ijSD.s:561    .text.getCommandedTorque:0000000000000088 $d
     /tmp/ccf4ijSD.s:571    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccf4ijSD.s:578    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccf4ijSD.s:812    .text.HAL_TIM_PeriodElapsedCallback:0000000000000114 $d
                            *COM*:0000000000000048 htim13
                            *COM*:0000000000000048 htim14
                            *COM*:0000000000000008 TxData
                            *COM*:0000000000000004 TxMailbox
                            *COM*:0000000000000018 TxHeader2
                            *COM*:0000000000000028 hcan1
                            *COM*:0000000000000018 TxHeader
     /tmp/ccf4ijSD.s:837    .text.Error_Handler:0000000000000000 $t
     /tmp/ccf4ijSD.s:844    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccf4ijSD.s:876    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccf4ijSD.s:882    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccf4ijSD.s:1028   .text.MX_CAN1_Init:000000000000007c $d
                            *COM*:0000000000000028 filter0
                            *COM*:0000000000000028 filter1
     /tmp/ccf4ijSD.s:1036   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccf4ijSD.s:1042   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccf4ijSD.s:1210   .text.MX_ADC1_Init:00000000000000a4 $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccf4ijSD.s:1217   .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/ccf4ijSD.s:1223   .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/ccf4ijSD.s:1272   .text.MX_TIM14_Init:0000000000000028 $d
     /tmp/ccf4ijSD.s:1278   .text.MX_TIM13_Init:0000000000000000 $t
     /tmp/ccf4ijSD.s:1284   .text.MX_TIM13_Init:0000000000000000 MX_TIM13_Init
     /tmp/ccf4ijSD.s:1333   .text.MX_TIM13_Init:0000000000000028 $d
     /tmp/ccf4ijSD.s:1339   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccf4ijSD.s:1346   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccf4ijSD.s:1497   .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccf4ijSD.s:1503   .text.main:0000000000000000 $t
     /tmp/ccf4ijSD.s:1510   .text.main:0000000000000000 main
     /tmp/ccf4ijSD.s:1620   .text.main:0000000000000070 $d
     /tmp/ccf4ijSD.s:1631   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
ARM GAS  /tmp/ccf4ijSD.s 			page 56


     /tmp/ccf4ijSD.s:1638   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccf4ijSD.s:1710   .text.HAL_CAN_RxFifo0MsgPendingCallback:000000000000003c $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
     /tmp/ccf4ijSD.s:1828   .data.driveMode:0000000000000000 driveMode
     /tmp/ccf4ijSD.s:1770   .bss.command_torque_limit:0000000000000000 command_torque_limit
     /tmp/ccf4ijSD.s:1777   .bss.commandedTorque:0000000000000000 commandedTorque
     /tmp/ccf4ijSD.s:1783   .bss.enableInverter:0000000000000000 enableInverter
     /tmp/ccf4ijSD.s:1757   .bss.buzzerCounter:0000000000000000 buzzerCounter
     /tmp/ccf4ijSD.s:1763   .bss.buzzerState:0000000000000000 buzzerState
     /tmp/ccf4ijSD.s:1809   .bss.ready_to_drive:0000000000000000 ready_to_drive
     /tmp/ccf4ijSD.s:1803   .bss.pedalAverage:0000000000000000 pedalAverage
     /tmp/ccf4ijSD.s:1835   .data.pedal1:0000000000000000 pedal1
     /tmp/ccf4ijSD.s:1796   .bss.pedal0:0000000000000000 pedal0
     /tmp/ccf4ijSD.s:1821   .bss.switch_direction:0000000000000000 switch_direction
     /tmp/ccf4ijSD.s:1815   .bss.switch_cooling:0000000000000000 switch_cooling
     /tmp/ccf4ijSD.s:1751   .bss.bmsFault:0000000000000000 bmsFault
     /tmp/ccf4ijSD.s:1789   .bss.imdFault:0000000000000000 imdFault
                            *COM*:0000000000000060 hdma_adc1
     /tmp/ccf4ijSD.s:1752   .bss.bmsFault:0000000000000000 $d
     /tmp/ccf4ijSD.s:1758   .bss.buzzerCounter:0000000000000000 $d
     /tmp/ccf4ijSD.s:1764   .bss.buzzerState:0000000000000000 $d
     /tmp/ccf4ijSD.s:1766   .bss.command_torque_limit:0000000000000000 $d
     /tmp/ccf4ijSD.s:1773   .bss.commandedTorque:0000000000000000 $d
     /tmp/ccf4ijSD.s:1784   .bss.enableInverter:0000000000000000 $d
     /tmp/ccf4ijSD.s:1790   .bss.imdFault:0000000000000000 $d
     /tmp/ccf4ijSD.s:1792   .bss.pedal0:0000000000000000 $d
     /tmp/ccf4ijSD.s:1799   .bss.pedalAverage:0000000000000000 $d
     /tmp/ccf4ijSD.s:1810   .bss.ready_to_drive:0000000000000000 $d
     /tmp/ccf4ijSD.s:1816   .bss.switch_cooling:0000000000000000 $d
     /tmp/ccf4ijSD.s:1822   .bss.switch_direction:0000000000000000 $d
     /tmp/ccf4ijSD.s:1824   .data.driveMode:0000000000000000 $d
     /tmp/ccf4ijSD.s:1831   .data.pedal1:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_CAN_AddTxMessage
HAL_GPIO_ReadPin
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start_IT
HAL_ADC_Start_DMA
HAL_CAN_GetRxMessage
