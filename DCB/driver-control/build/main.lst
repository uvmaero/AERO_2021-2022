ARM GAS  /tmp/ccmzXxfp.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB223:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccmzXxfp.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** #define ADC_BUF_LEN               4
  35:Core/Src/main.c **** #define MAX_PEDAL_SKEW            100
  36:Core/Src/main.c **** #define PEDAL_MAX                 600     // max pedal found from Accelerator test 12bit ADC
  37:Core/Src/main.c **** #define PEDAL_MIN                 128     // max pedal found from Accelerator test 12bit ADC
  38:Core/Src/main.c **** #define PEDAL_DEADBAND            10      // max pedal found from Accelerator test 12bit ADC
  39:Core/Src/main.c **** #define BRAKE_LIGHT_THRESHOLD     10      // when the brake light turns on
  40:Core/Src/main.c **** #define TORQUE_DEADBAND           0.05      // commanded torque deadband 
  41:Core/Src/main.c **** #define MAX_TORQUE                2200     // MAX TORQUE RINEHART CAN ACCEPT, DO NOT CHANGE (230) /
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** #define PRECHARGE_COEFFICIENT       0.85          // 95% complete with precharge so it's probably s
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PD */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  49:Core/Src/main.c **** /* USER CODE BEGIN PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PM */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  54:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  55:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** TIM_HandleTypeDef htim13;
  60:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE BEGIN PV */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** // CAN transmitting
  65:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader;               // either daq or control idk which one address 
  66:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader2;              // rinehart command message address
  67:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader3;              // rinehart command message address
  68:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader4;              // rinehart command message address
  69:Core/Src/main.c **** uint8_t TxData[8];
  70:Core/Src/main.c **** uint32_t TxMailbox;
  71:Core/Src/main.c **** uint32_t TxMailbox1;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** // CAN reciving 
  74:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
  75:Core/Src/main.c **** uint8_t RxData[8];
  76:Core/Src/main.c **** CAN_FilterTypeDef filter0;                  // filter for __________
  77:Core/Src/main.c **** CAN_FilterTypeDef filter1;                  // fiter for ___________
  78:Core/Src/main.c **** CAN_FilterTypeDef canFilter2;                  // fiter for ___________
  79:Core/Src/main.c **** CAN_FilterTypeDef canFilter0;                  // fiter for ___________
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** // signal variables (0 = off | 1 = on)
  82:Core/Src/main.c **** uint8_t imdFault = 0;             
  83:Core/Src/main.c **** uint8_t bmsFault = 0;
  84:Core/Src/main.c **** uint8_t switch_cooling = 0;
  85:Core/Src/main.c **** uint8_t switch_direction = 0;               // 0 = forward | 1 = reverse (this changes requires an 
  86:Core/Src/main.c **** uint8_t brakeLight = 0;
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** // analog pins
ARM GAS  /tmp/ccmzXxfp.s 			page 3


  89:Core/Src/main.c **** uint16_t adc_buf[ADC_BUF_LEN];
  90:Core/Src/main.c **** uint16_t brake0 = 0;
  91:Core/Src/main.c **** uint16_t brake1 = 0;
  92:Core/Src/main.c **** uint16_t pedal0 = 0;
  93:Core/Src/main.c **** uint16_t pedal1 = 1;
  94:Core/Src/main.c **** uint16_t brakeAverage = 0;
  95:Core/Src/main.c **** uint16_t pedalAverage = 0;
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** // state variables (0 = off | 1 = on)
  98:Core/Src/main.c **** uint8_t ready_to_drive = 0;                 // 0 until precharge is done
  99:Core/Src/main.c **** uint8_t buzzerState = 0;                    // for controlling the buzzer
 100:Core/Src/main.c **** uint8_t buzzerCounter = 0;                  // counter for how long the buzzer has been buzzing
 101:Core/Src/main.c **** uint8_t enableInverter = 0;                 // stores state of inverter, can only be 1 after buzzer
 102:Core/Src/main.c **** 
 103:Core/Src/main.c **** uint32_t rinehartVoltage = 0;                 // read from CAN
 104:Core/Src/main.c **** uint32_t bmsVoltage = 0;					            // read from CAN
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** // rinehart commands
 107:Core/Src/main.c **** uint16_t commandedTorque = 0;               // torque request sent to rinehart, init with 0 to prev
 108:Core/Src/main.c **** uint16_t command_torque_limit = 0;          // max torque allowed to be requested from rinehart, in
 109:Core/Src/main.c **** enum mode                                   // create an enumeration for the drive modes
 110:Core/Src/main.c **** {
 111:Core/Src/main.c ****   SLOW,       // 50% power 
 112:Core/Src/main.c ****   ECO,        // 75% power
 113:Core/Src/main.c ****   FAST        // 100% power 
 114:Core/Src/main.c **** };
 115:Core/Src/main.c **** int driveMode = ECO;                        // set the inital drive mode of the car
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** // precharge states
 118:Core/Src/main.c **** enum prechargeStates
 119:Core/Src/main.c **** {
 120:Core/Src/main.c **** 	PRECHARGE_OFF,
 121:Core/Src/main.c **** 	PRECHARGE_ON,
 122:Core/Src/main.c **** 	PRECHARGE_DONE,
 123:Core/Src/main.c **** 	PRECHARGE_ERROR
 124:Core/Src/main.c **** };
 125:Core/Src/main.c **** uint8_t prechargeState = PRECHARGE_OFF;			  // set initial precharge state to OFF
 126:Core/Src/main.c **** uint8_t lastPrechargeState = PRECHARGE_OFF;
 127:Core/Src/main.c **** uint8_t voltageCheckCount = 0;
 128:Core/Src/main.c **** uint8_t rinehartUpdate = 0; // listens for rinehart receive parameter success message
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** /* USER CODE END PV */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 134:Core/Src/main.c **** void SystemClock_Config(void);
 135:Core/Src/main.c **** static void MX_GPIO_Init(void);
 136:Core/Src/main.c **** static void MX_CAN1_Init(void);
 137:Core/Src/main.c **** static void MX_DMA_Init(void);
 138:Core/Src/main.c **** static void MX_ADC1_Init(void);
 139:Core/Src/main.c **** static void MX_TIM14_Init(void);
 140:Core/Src/main.c **** static void MX_TIM13_Init(void);
 141:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 142:Core/Src/main.c **** uint16_t adc_average(uint16_t adc0, uint16_t adc1);
 143:Core/Src/main.c **** long mapValue(long x, long in_min, long in_max, long out_min, long out_max);
 144:Core/Src/main.c **** uint16_t getCommandedTorque();
 145:Core/Src/main.c **** void prechargeControl();
ARM GAS  /tmp/ccmzXxfp.s 			page 4


 146:Core/Src/main.c **** 
 147:Core/Src/main.c **** /* USER CODE END PFP */
 148:Core/Src/main.c **** 
 149:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 150:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 151:Core/Src/main.c **** 
 152:Core/Src/main.c **** /* USER CODE END 0 */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** /**
 155:Core/Src/main.c ****   * @brief  The application entry point.
 156:Core/Src/main.c ****   * @retval int
 157:Core/Src/main.c ****   */
 158:Core/Src/main.c **** int main(void)
 159:Core/Src/main.c **** {
 160:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   // define TX header
 163:Core/Src/main.c ****   TxHeader.StdId = 0x093;
 164:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 165:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 166:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 167:Core/Src/main.c ****   TxHeader.DLC = 8;
 168:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 169:Core/Src/main.c ****   
 170:Core/Src/main.c ****   // Rinehart command message
 171:Core/Src/main.c ****   TxHeader2.StdId = 0x0C0;
 172:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 173:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 174:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 175:Core/Src/main.c ****   TxHeader2.DLC = 8;
 176:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   // define TX header
 179:Core/Src/main.c ****   TxHeader3.StdId = 0x092;
 180:Core/Src/main.c ****   TxHeader3.ExtId = 0x0;
 181:Core/Src/main.c ****   TxHeader3.IDE = CAN_ID_STD;
 182:Core/Src/main.c ****   TxHeader3.RTR = CAN_RTR_DATA;
 183:Core/Src/main.c ****   TxHeader3.DLC = 8;
 184:Core/Src/main.c ****   TxHeader3.TransmitGlobalTime = DISABLE;
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****    // define TX header
 187:Core/Src/main.c ****   TxHeader4.StdId = 0x0C1;
 188:Core/Src/main.c ****   TxHeader4.ExtId = 0x0;
 189:Core/Src/main.c ****   TxHeader4.IDE = CAN_ID_STD;
 190:Core/Src/main.c ****   TxHeader4.RTR = CAN_RTR_DATA;
 191:Core/Src/main.c ****   TxHeader4.DLC = 8;
 192:Core/Src/main.c ****   TxHeader4.TransmitGlobalTime = DISABLE;
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE END 1 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 199:Core/Src/main.c ****   HAL_Init();
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 202:Core/Src/main.c **** 
ARM GAS  /tmp/ccmzXxfp.s 			page 5


 203:Core/Src/main.c ****   /* USER CODE END Init */
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* Configure the system clock */
 206:Core/Src/main.c ****   SystemClock_Config();
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE END SysInit */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Initialize all configured peripherals */
 213:Core/Src/main.c ****   MX_GPIO_Init();
 214:Core/Src/main.c ****   MX_CAN1_Init();
 215:Core/Src/main.c ****   MX_DMA_Init();
 216:Core/Src/main.c ****   MX_ADC1_Init();
 217:Core/Src/main.c ****   MX_TIM14_Init();
 218:Core/Src/main.c ****   MX_TIM13_Init();
 219:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   // start interrupts
 222:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 223:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 224:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 225:Core/Src/main.c ****   // HAL_TIM_Base_Start_IT(&htim13);
 226:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* USER CODE END 2 */
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   /* Infinite loop */
 231:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 232:Core/Src/main.c ****   while (1)
 233:Core/Src/main.c ****   {
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****     /* USER CODE END WHILE */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 238:Core/Src/main.c ****   }
 239:Core/Src/main.c ****   /* USER CODE END 3 */
 240:Core/Src/main.c **** }
 241:Core/Src/main.c **** 
 242:Core/Src/main.c **** /**
 243:Core/Src/main.c ****   * @brief System Clock Configuration
 244:Core/Src/main.c ****   * @retval None
 245:Core/Src/main.c ****   */
 246:Core/Src/main.c **** void SystemClock_Config(void)
 247:Core/Src/main.c **** {
 248:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 249:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 252:Core/Src/main.c ****   */
 253:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 254:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 255:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 256:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 257:Core/Src/main.c ****   */
 258:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 259:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccmzXxfp.s 			page 6


 260:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 261:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 262:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 268:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 269:Core/Src/main.c ****   {
 270:Core/Src/main.c ****     Error_Handler();
 271:Core/Src/main.c ****   }
 272:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 273:Core/Src/main.c ****   */
 274:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 275:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 276:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 277:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 278:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 279:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 282:Core/Src/main.c ****   {
 283:Core/Src/main.c ****     Error_Handler();
 284:Core/Src/main.c ****   }
 285:Core/Src/main.c **** }
 286:Core/Src/main.c **** 
 287:Core/Src/main.c **** /**
 288:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 289:Core/Src/main.c ****   * @param None
 290:Core/Src/main.c ****   * @retval None
 291:Core/Src/main.c ****   */
 292:Core/Src/main.c **** static void MX_ADC1_Init(void)
 293:Core/Src/main.c **** {
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 304:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 305:Core/Src/main.c ****   */
 306:Core/Src/main.c ****   hadc1.Instance = ADC1;
 307:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 308:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 309:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 310:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 311:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 312:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 313:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 314:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 315:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 316:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
ARM GAS  /tmp/ccmzXxfp.s 			page 7


 317:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 318:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 319:Core/Src/main.c ****   {
 320:Core/Src/main.c ****     Error_Handler();
 321:Core/Src/main.c ****   }
 322:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 323:Core/Src/main.c ****   */
 324:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 325:Core/Src/main.c ****   sConfig.Rank = 1;
 326:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 327:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 328:Core/Src/main.c ****   {
 329:Core/Src/main.c ****     Error_Handler();
 330:Core/Src/main.c ****   }
 331:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 332:Core/Src/main.c ****   */
 333:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 334:Core/Src/main.c ****   sConfig.Rank = 2;
 335:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 336:Core/Src/main.c ****   {
 337:Core/Src/main.c ****     Error_Handler();
 338:Core/Src/main.c ****   }
 339:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 340:Core/Src/main.c ****   */
 341:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 342:Core/Src/main.c ****   sConfig.Rank = 3;
 343:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 344:Core/Src/main.c ****   {
 345:Core/Src/main.c ****     Error_Handler();
 346:Core/Src/main.c ****   }
 347:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 348:Core/Src/main.c ****   */
 349:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
 350:Core/Src/main.c ****   sConfig.Rank = 4;
 351:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 358:Core/Src/main.c **** 
 359:Core/Src/main.c **** }
 360:Core/Src/main.c **** 
 361:Core/Src/main.c **** /**
 362:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 363:Core/Src/main.c ****   * @param None
 364:Core/Src/main.c ****   * @retval None
 365:Core/Src/main.c ****   */
 366:Core/Src/main.c **** static void MX_CAN1_Init(void)
 367:Core/Src/main.c **** {
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
ARM GAS  /tmp/ccmzXxfp.s 			page 8


 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 376:Core/Src/main.c ****   hcan1.Instance = CAN1;
 377:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 378:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 379:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 380:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 381:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 382:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 383:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 384:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 385:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 386:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 387:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 388:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 389:Core/Src/main.c ****   {
 390:Core/Src/main.c ****     Error_Handler();
 391:Core/Src/main.c ****   }
 392:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   // listen for RCB
 395:Core/Src/main.c ****   filter0.FilterIdHigh = 0x082 << 5;
 396:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 397:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 398:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 399:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 400:Core/Src/main.c ****   filter0.FilterBank = 1;
 401:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 402:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 403:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 404:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan1, &filter0);
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   // listen for HVB
 409:Core/Src/main.c ****   filter1.FilterIdHigh = 0x0A7 << 5;
 410:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 411:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x0A7 << 5;
 412:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 413:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 414:Core/Src/main.c ****   filter1.FilterBank = 2;
 415:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 416:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 417:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 418:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan1, &filter1);
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****     // init the CAN filter for Rinehart Parameter Success messages
 423:Core/Src/main.c ****   canFilter2.FilterIdHigh = 0x0C2 << 5;      // Rinehart IDs: 0xA0 - 0xB1
 424:Core/Src/main.c ****   canFilter2.FilterIdLow = 0x000;
 425:Core/Src/main.c ****   canFilter2.FilterMaskIdHigh = 0x0C2 << 5;
 426:Core/Src/main.c ****   canFilter2.FilterMaskIdLow = 0x000;
 427:Core/Src/main.c ****   canFilter2.FilterBank = 3;
 428:Core/Src/main.c ****   canFilter2.FilterMode = CAN_FILTERMODE_IDMASK;
 429:Core/Src/main.c ****   canFilter2.FilterFIFOAssignment = CAN_RX_FIFO0;
 430:Core/Src/main.c ****   canFilter2.FilterScale = CAN_FILTERSCALE_32BIT;
ARM GAS  /tmp/ccmzXxfp.s 			page 9


 431:Core/Src/main.c ****   canFilter2.FilterActivation = ENABLE;
 432:Core/Src/main.c **** 
 433:Core/Src/main.c **** HAL_CAN_ConfigFilter(&hcan1, &canFilter2);
 434:Core/Src/main.c **** 
 435:Core/Src/main.c ****   // init the CAN filter for BMS messages
 436:Core/Src/main.c ****     canFilter0.FilterIdHigh = 0x6B0 << 5;   // Orion ID: 0x6B0
 437:Core/Src/main.c ****   	canFilter0.FilterIdLow = 0x000;
 438:Core/Src/main.c ****     canFilter0.FilterMaskIdHigh = 0x6B0 << 5;
 439:Core/Src/main.c ****   	canFilter0.FilterMaskIdLow = 0x000;
 440:Core/Src/main.c ****     canFilter0.FilterBank = 4;
 441:Core/Src/main.c ****   	canFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 442:Core/Src/main.c ****   	canFilter0.FilterFIFOAssignment = CAN_RX_FIFO0;
 443:Core/Src/main.c ****   	canFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 444:Core/Src/main.c ****   	canFilter0.FilterActivation = ENABLE;
 445:Core/Src/main.c **** 
 446:Core/Src/main.c ****     HAL_CAN_ConfigFilter(&hcan1, &canFilter0);
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 449:Core/Src/main.c **** 
 450:Core/Src/main.c **** }
 451:Core/Src/main.c **** 
 452:Core/Src/main.c **** /**
 453:Core/Src/main.c ****   * @brief TIM13 Initialization Function
 454:Core/Src/main.c ****   * @param None
 455:Core/Src/main.c ****   * @retval None
 456:Core/Src/main.c ****   */
 457:Core/Src/main.c **** static void MX_TIM13_Init(void)
 458:Core/Src/main.c **** {
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 0 */
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****   /* USER CODE END TIM13_Init 0 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 1 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE END TIM13_Init 1 */
 467:Core/Src/main.c ****   htim13.Instance = TIM13;
 468:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 469:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 470:Core/Src/main.c ****   htim13.Init.Period = 100-1;
 471:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 472:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 473:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 474:Core/Src/main.c ****   {
 475:Core/Src/main.c ****     Error_Handler();
 476:Core/Src/main.c ****   }
 477:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 2 */
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /* USER CODE END TIM13_Init 2 */
 480:Core/Src/main.c **** 
 481:Core/Src/main.c **** }
 482:Core/Src/main.c **** 
 483:Core/Src/main.c **** /**
 484:Core/Src/main.c ****   * @brief TIM14 Initialization Function
 485:Core/Src/main.c ****   * @param None
 486:Core/Src/main.c ****   * @retval None
 487:Core/Src/main.c ****   */
ARM GAS  /tmp/ccmzXxfp.s 			page 10


 488:Core/Src/main.c **** static void MX_TIM14_Init(void)
 489:Core/Src/main.c **** {
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
 492:Core/Src/main.c **** 
 493:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
 494:Core/Src/main.c **** 
 495:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
 498:Core/Src/main.c ****   htim14.Instance = TIM14;
 499:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 500:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 501:Core/Src/main.c ****   htim14.Init.Period = 10-1;
 502:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 503:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 504:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 505:Core/Src/main.c ****   {
 506:Core/Src/main.c ****     Error_Handler();
 507:Core/Src/main.c ****   }
 508:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
 509:Core/Src/main.c **** 
 510:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
 511:Core/Src/main.c **** 
 512:Core/Src/main.c **** }
 513:Core/Src/main.c **** 
 514:Core/Src/main.c **** /**
 515:Core/Src/main.c ****   * Enable DMA controller clock
 516:Core/Src/main.c ****   */
 517:Core/Src/main.c **** static void MX_DMA_Init(void)
 518:Core/Src/main.c **** {
 519:Core/Src/main.c **** 
 520:Core/Src/main.c ****   /* DMA controller clock enable */
 521:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 522:Core/Src/main.c **** 
 523:Core/Src/main.c ****   /* DMA interrupt init */
 524:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 525:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 526:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 527:Core/Src/main.c **** 
 528:Core/Src/main.c **** }
 529:Core/Src/main.c **** 
 530:Core/Src/main.c **** /**
 531:Core/Src/main.c ****   * @brief GPIO Initialization Function
 532:Core/Src/main.c ****   * @param None
 533:Core/Src/main.c ****   * @retval None
 534:Core/Src/main.c ****   */
 535:Core/Src/main.c **** static void MX_GPIO_Init(void)
 536:Core/Src/main.c **** {
  28              		.loc 1 536 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
ARM GAS  /tmp/ccmzXxfp.s 			page 11


  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 56
 537:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 537 3 view .LVU1
  44              		.loc 1 537 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0394     		str	r4, [sp, #12]
  47 0008 0494     		str	r4, [sp, #16]
  48 000a 0594     		str	r4, [sp, #20]
  49 000c 0694     		str	r4, [sp, #24]
  50 000e 0794     		str	r4, [sp, #28]
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 540:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 540 3 is_stmt 1 view .LVU3
  52              	.LBB4:
  53              		.loc 1 540 3 view .LVU4
  54 0010 0094     		str	r4, [sp]
  55              		.loc 1 540 3 view .LVU5
  56 0012 2B4B     		ldr	r3, .L3
  57 0014 1A6B     		ldr	r2, [r3, #48]
  58 0016 42F08002 		orr	r2, r2, #128
  59 001a 1A63     		str	r2, [r3, #48]
  60              		.loc 1 540 3 view .LVU6
  61 001c 1A6B     		ldr	r2, [r3, #48]
  62 001e 02F08002 		and	r2, r2, #128
  63 0022 0092     		str	r2, [sp]
  64              		.loc 1 540 3 view .LVU7
  65 0024 009A     		ldr	r2, [sp]
  66              	.LBE4:
  67              		.loc 1 540 3 view .LVU8
 541:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  68              		.loc 1 541 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 541 3 view .LVU10
  71 0026 0194     		str	r4, [sp, #4]
  72              		.loc 1 541 3 view .LVU11
  73 0028 1A6B     		ldr	r2, [r3, #48]
  74 002a 42F00102 		orr	r2, r2, #1
  75 002e 1A63     		str	r2, [r3, #48]
  76              		.loc 1 541 3 view .LVU12
  77 0030 1A6B     		ldr	r2, [r3, #48]
  78 0032 02F00102 		and	r2, r2, #1
  79 0036 0192     		str	r2, [sp, #4]
  80              		.loc 1 541 3 view .LVU13
  81 0038 019A     		ldr	r2, [sp, #4]
  82              	.LBE5:
  83              		.loc 1 541 3 view .LVU14
 542:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  84              		.loc 1 542 3 view .LVU15
  85              	.LBB6:
  86              		.loc 1 542 3 view .LVU16
ARM GAS  /tmp/ccmzXxfp.s 			page 12


  87 003a 0294     		str	r4, [sp, #8]
  88              		.loc 1 542 3 view .LVU17
  89 003c 1A6B     		ldr	r2, [r3, #48]
  90 003e 42F00202 		orr	r2, r2, #2
  91 0042 1A63     		str	r2, [r3, #48]
  92              		.loc 1 542 3 view .LVU18
  93 0044 1B6B     		ldr	r3, [r3, #48]
  94 0046 03F00203 		and	r3, r3, #2
  95 004a 0293     		str	r3, [sp, #8]
  96              		.loc 1 542 3 view .LVU19
  97 004c 029B     		ldr	r3, [sp, #8]
  98              	.LBE6:
  99              		.loc 1 542 3 view .LVU20
 543:Core/Src/main.c **** 
 544:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 545:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 100              		.loc 1 545 3 view .LVU21
 101 004e 1D4D     		ldr	r5, .L3+4
 102 0050 2246     		mov	r2, r4
 103 0052 4FF48271 		mov	r1, #260
 104 0056 2846     		mov	r0, r5
 105 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 106              	.LVL0:
 546:Core/Src/main.c **** 
 547:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 548:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 107              		.loc 1 548 3 view .LVU22
 108 005c 1A4E     		ldr	r6, .L3+8
 109 005e 2246     		mov	r2, r4
 110 0060 4FF48061 		mov	r1, #1024
 111 0064 3046     		mov	r0, r6
 112 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 113              	.LVL1:
 549:Core/Src/main.c **** 
 550:Core/Src/main.c ****   /*Configure GPIO pins : PB2 PB8 */
 551:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 114              		.loc 1 551 3 view .LVU23
 115              		.loc 1 551 23 is_stmt 0 view .LVU24
 116 006a 4FF48273 		mov	r3, #260
 117 006e 0393     		str	r3, [sp, #12]
 552:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 552 3 is_stmt 1 view .LVU25
 119              		.loc 1 552 24 is_stmt 0 view .LVU26
 120 0070 0127     		movs	r7, #1
 121 0072 0497     		str	r7, [sp, #16]
 553:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 122              		.loc 1 553 3 is_stmt 1 view .LVU27
 123              		.loc 1 553 24 is_stmt 0 view .LVU28
 124 0074 0594     		str	r4, [sp, #20]
 554:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 554 3 is_stmt 1 view .LVU29
 126              		.loc 1 554 25 is_stmt 0 view .LVU30
 127 0076 0694     		str	r4, [sp, #24]
 555:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 128              		.loc 1 555 3 is_stmt 1 view .LVU31
 129 0078 03A9     		add	r1, sp, #12
 130 007a 2846     		mov	r0, r5
ARM GAS  /tmp/ccmzXxfp.s 			page 13


 131 007c FFF7FEFF 		bl	HAL_GPIO_Init
 132              	.LVL2:
 556:Core/Src/main.c **** 
 557:Core/Src/main.c ****   /*Configure GPIO pin : PB15 */
 558:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 133              		.loc 1 558 3 view .LVU32
 134              		.loc 1 558 23 is_stmt 0 view .LVU33
 135 0080 4FF40043 		mov	r3, #32768
 136 0084 0393     		str	r3, [sp, #12]
 559:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 137              		.loc 1 559 3 is_stmt 1 view .LVU34
 138              		.loc 1 559 24 is_stmt 0 view .LVU35
 139 0086 4FF48813 		mov	r3, #1114112
 140 008a 0493     		str	r3, [sp, #16]
 560:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 141              		.loc 1 560 3 is_stmt 1 view .LVU36
 142              		.loc 1 560 24 is_stmt 0 view .LVU37
 143 008c 0594     		str	r4, [sp, #20]
 561:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 144              		.loc 1 561 3 is_stmt 1 view .LVU38
 145 008e 03A9     		add	r1, sp, #12
 146 0090 2846     		mov	r0, r5
 147 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 148              	.LVL3:
 562:Core/Src/main.c **** 
 563:Core/Src/main.c ****   /*Configure GPIO pin : PA10 */
 564:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 149              		.loc 1 564 3 view .LVU39
 150              		.loc 1 564 23 is_stmt 0 view .LVU40
 151 0096 4FF48063 		mov	r3, #1024
 152 009a 0393     		str	r3, [sp, #12]
 565:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 153              		.loc 1 565 3 is_stmt 1 view .LVU41
 154              		.loc 1 565 24 is_stmt 0 view .LVU42
 155 009c 0497     		str	r7, [sp, #16]
 566:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 156              		.loc 1 566 3 is_stmt 1 view .LVU43
 157              		.loc 1 566 24 is_stmt 0 view .LVU44
 158 009e 0594     		str	r4, [sp, #20]
 567:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 159              		.loc 1 567 3 is_stmt 1 view .LVU45
 160              		.loc 1 567 25 is_stmt 0 view .LVU46
 161 00a0 0694     		str	r4, [sp, #24]
 568:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 162              		.loc 1 568 3 is_stmt 1 view .LVU47
 163 00a2 03A9     		add	r1, sp, #12
 164 00a4 3046     		mov	r0, r6
 165 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 166              	.LVL4:
 569:Core/Src/main.c **** 
 570:Core/Src/main.c ****   /* EXTI interrupt init*/
 571:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 167              		.loc 1 571 3 view .LVU48
 168 00aa 2246     		mov	r2, r4
 169 00ac 2146     		mov	r1, r4
 170 00ae 2820     		movs	r0, #40
 171 00b0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/ccmzXxfp.s 			page 14


 172              	.LVL5:
 572:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 173              		.loc 1 572 3 view .LVU49
 174 00b4 2820     		movs	r0, #40
 175 00b6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 176              	.LVL6:
 573:Core/Src/main.c **** 
 574:Core/Src/main.c **** }
 177              		.loc 1 574 1 is_stmt 0 view .LVU50
 178 00ba 09B0     		add	sp, sp, #36
 179              	.LCFI2:
 180              		.cfi_def_cfa_offset 20
 181              		@ sp needed
 182 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 183              	.L4:
 184 00be 00BF     		.align	2
 185              	.L3:
 186 00c0 00380240 		.word	1073887232
 187 00c4 00040240 		.word	1073873920
 188 00c8 00000240 		.word	1073872896
 189              		.cfi_endproc
 190              	.LFE223:
 192              		.section	.text.MX_DMA_Init,"ax",%progbits
 193              		.align	1
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	MX_DMA_Init:
 200              	.LFB222:
 518:Core/Src/main.c **** 
 201              		.loc 1 518 1 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 8
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 00B5     		push	{lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 14, -4
 209 0002 83B0     		sub	sp, sp, #12
 210              	.LCFI4:
 211              		.cfi_def_cfa_offset 16
 521:Core/Src/main.c **** 
 212              		.loc 1 521 3 view .LVU52
 213              	.LBB7:
 521:Core/Src/main.c **** 
 214              		.loc 1 521 3 view .LVU53
 215 0004 0021     		movs	r1, #0
 216 0006 0191     		str	r1, [sp, #4]
 521:Core/Src/main.c **** 
 217              		.loc 1 521 3 view .LVU54
 218 0008 094B     		ldr	r3, .L7
 219 000a 1A6B     		ldr	r2, [r3, #48]
 220 000c 42F48002 		orr	r2, r2, #4194304
 221 0010 1A63     		str	r2, [r3, #48]
 521:Core/Src/main.c **** 
 222              		.loc 1 521 3 view .LVU55
ARM GAS  /tmp/ccmzXxfp.s 			page 15


 223 0012 1B6B     		ldr	r3, [r3, #48]
 224 0014 03F48003 		and	r3, r3, #4194304
 225 0018 0193     		str	r3, [sp, #4]
 521:Core/Src/main.c **** 
 226              		.loc 1 521 3 view .LVU56
 227 001a 019B     		ldr	r3, [sp, #4]
 228              	.LBE7:
 521:Core/Src/main.c **** 
 229              		.loc 1 521 3 view .LVU57
 525:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 525 3 view .LVU58
 231 001c 0A46     		mov	r2, r1
 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL7:
 526:Core/Src/main.c **** 
 235              		.loc 1 526 3 view .LVU59
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 238              	.LVL8:
 528:Core/Src/main.c **** 
 239              		.loc 1 528 1 is_stmt 0 view .LVU60
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE222:
 252              		.section	.text.mapValue,"ax",%progbits
 253              		.align	1
 254              		.global	mapValue
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu fpv4-sp-d16
 260              	mapValue:
 261              	.LVL9:
 262              	.LFB224:
 575:Core/Src/main.c **** 
 576:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 577:Core/Src/main.c **** 
 578:Core/Src/main.c **** // re-map function
 579:Core/Src/main.c **** long mapValue(long x, long in_min, long in_max, long out_min, long out_max) {
 263              		.loc 1 579 77 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 4, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 268              		.loc 1 579 77 is_stmt 0 view .LVU62
 269 0000 10B4     		push	{r4}
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccmzXxfp.s 			page 16


 272              		.cfi_offset 4, -4
 580:Core/Src/main.c ****   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 273              		.loc 1 580 3 is_stmt 1 view .LVU63
 274              		.loc 1 580 13 is_stmt 0 view .LVU64
 275 0002 401A     		subs	r0, r0, r1
 276              	.LVL10:
 277              		.loc 1 580 34 view .LVU65
 278 0004 019C     		ldr	r4, [sp, #4]
 279 0006 E41A     		subs	r4, r4, r3
 280              		.loc 1 580 23 view .LVU66
 281 0008 04FB00F4 		mul	r4, r4, r0
 282              		.loc 1 580 55 view .LVU67
 283 000c 511A     		subs	r1, r2, r1
 284              	.LVL11:
 285              		.loc 1 580 45 view .LVU68
 286 000e 94FBF1F4 		sdiv	r4, r4, r1
 581:Core/Src/main.c **** }
 287              		.loc 1 581 1 view .LVU69
 288 0012 E018     		adds	r0, r4, r3
 289 0014 5DF8044B 		ldr	r4, [sp], #4
 290              	.LCFI7:
 291              		.cfi_restore 4
 292              		.cfi_def_cfa_offset 0
 293              	.LVL12:
 294              		.loc 1 581 1 view .LVU70
 295 0018 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE224:
 299              		.global	__aeabi_ui2d
 300              		.global	__aeabi_dmul
 301              		.global	__aeabi_dcmpgt
 302              		.section	.text.prechargeControl,"ax",%progbits
 303              		.align	1
 304              		.global	prechargeControl
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 308              		.fpu fpv4-sp-d16
 310              	prechargeControl:
 311              	.LFB225:
 582:Core/Src/main.c **** 
 583:Core/Src/main.c **** void prechargeControl()
 584:Core/Src/main.c **** {
 312              		.loc 1 584 1 is_stmt 1 view -0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316 0000 70B5     		push	{r4, r5, r6, lr}
 317              	.LCFI8:
 318              		.cfi_def_cfa_offset 16
 319              		.cfi_offset 4, -16
 320              		.cfi_offset 5, -12
 321              		.cfi_offset 6, -8
 322              		.cfi_offset 14, -4
 585:Core/Src/main.c ****   // NOTE: Weird thing about Rinehart 0x0A7 message: 
 586:Core/Src/main.c ****   //      Sometimes it sends a 0 byte length data. Make sure we're only reading
 587:Core/Src/main.c ****   //      The value if the DLC is 8
ARM GAS  /tmp/ccmzXxfp.s 			page 17


 588:Core/Src/main.c **** 	switch (prechargeState)
 323              		.loc 1 588 2 view .LVU72
 324 0002 554B     		ldr	r3, .L28+8
 325 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 326 0006 032B     		cmp	r3, #3
 327 0008 00F29C80 		bhi	.L12
 328 000c DFE803F0 		tbb	[pc, r3]
 329              	.L14:
 330 0010 02       		.byte	(.L17-.L14)/2
 331 0011 25       		.byte	(.L16-.L14)/2
 332 0012 61       		.byte	(.L15-.L14)/2
 333 0013 86       		.byte	(.L13-.L14)/2
 334              		.p2align 1
 335              	.L17:
 589:Core/Src/main.c **** 	{
 590:Core/Src/main.c **** 		case (PRECHARGE_OFF):
 591:Core/Src/main.c **** 			// set ready to drive to false
 592:Core/Src/main.c **** 			ready_to_drive = 0;
 336              		.loc 1 592 4 view .LVU73
 337              		.loc 1 592 19 is_stmt 0 view .LVU74
 338 0014 514B     		ldr	r3, .L28+12
 339 0016 0022     		movs	r2, #0
 340 0018 1A70     		strb	r2, [r3]
 593:Core/Src/main.c **** 
 594:Core/Src/main.c ****       // this state sends a message to rinehart
 595:Core/Src/main.c ****       // if (lastPrechargeState != prechargeState)
 596:Core/Src/main.c ****       // {
 597:Core/Src/main.c **** 
 598:Core/Src/main.c ****       if (!rinehartUpdate){ // keep sending message until rinehart says it updated
 341              		.loc 1 598 7 is_stmt 1 view .LVU75
 342              		.loc 1 598 11 is_stmt 0 view .LVU76
 343 001a 514B     		ldr	r3, .L28+16
 344 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345              		.loc 1 598 10 view .LVU77
 346 001e 5BB1     		cbz	r3, .L25
 347              	.L18:
 599:Core/Src/main.c **** 
 600:Core/Src/main.c ****         // message is sent to rinehart to turn everything off
 601:Core/Src/main.c ****         TxData[0] = 1;          // parameter address. LSB
 602:Core/Src/main.c ****         TxData[1] = 0;          // parameter address. MSB
 603:Core/Src/main.c ****         TxData[2] = 1;          // Read / Write. 1 is write
 604:Core/Src/main.c ****         TxData[3] = 0;          // N/A
 605:Core/Src/main.c ****         TxData[4] = 0;          // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 an
 606:Core/Src/main.c ****         TxData[5] = 0x55;         // 55 means relay control
 607:Core/Src/main.c ****         TxData[6] = 0;          // N/A
 608:Core/Src/main.c ****         TxData[7] = 0;          // N/A
 609:Core/Src/main.c **** 
 610:Core/Src/main.c ****         // send message
 611:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &TxHeader4, TxData, &TxMailbox1);
 612:Core/Src/main.c ****       }
 613:Core/Src/main.c **** 
 614:Core/Src/main.c ****       // else{
 615:Core/Src/main.c ****         // update last precharge state
 616:Core/Src/main.c ****         // lastPrechargeState = prechargeState;
 617:Core/Src/main.c ****       // }
 618:Core/Src/main.c **** 
 619:Core/Src/main.c ****       // move to precharge on
ARM GAS  /tmp/ccmzXxfp.s 			page 18


 620:Core/Src/main.c ****       if (rinehartUpdate){
 348              		.loc 1 620 7 is_stmt 1 view .LVU78
 349              		.loc 1 620 11 is_stmt 0 view .LVU79
 350 0020 4F4B     		ldr	r3, .L28+16
 351 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 352              		.loc 1 620 10 view .LVU80
 353 0024 002B     		cmp	r3, #0
 354 0026 00F08C80 		beq	.L11
 621:Core/Src/main.c ****         prechargeState = PRECHARGE_ON;
 355              		.loc 1 621 9 is_stmt 1 view .LVU81
 356              		.loc 1 621 24 is_stmt 0 view .LVU82
 357 002a 4B4B     		ldr	r3, .L28+8
 358 002c 0122     		movs	r2, #1
 359 002e 1A70     		strb	r2, [r3]
 622:Core/Src/main.c ****         rinehartUpdate = 0;
 360              		.loc 1 622 9 is_stmt 1 view .LVU83
 361              		.loc 1 622 24 is_stmt 0 view .LVU84
 362 0030 4B4B     		ldr	r3, .L28+16
 363 0032 0022     		movs	r2, #0
 364 0034 1A70     		strb	r2, [r3]
 365 0036 84E0     		b	.L11
 366              	.L25:
 601:Core/Src/main.c ****         TxData[1] = 0;          // parameter address. MSB
 367              		.loc 1 601 9 is_stmt 1 view .LVU85
 601:Core/Src/main.c ****         TxData[1] = 0;          // parameter address. MSB
 368              		.loc 1 601 19 is_stmt 0 view .LVU86
 369 0038 4A4A     		ldr	r2, .L28+20
 370 003a 0121     		movs	r1, #1
 371 003c 1170     		strb	r1, [r2]
 602:Core/Src/main.c ****         TxData[2] = 1;          // Read / Write. 1 is write
 372              		.loc 1 602 9 is_stmt 1 view .LVU87
 602:Core/Src/main.c ****         TxData[2] = 1;          // Read / Write. 1 is write
 373              		.loc 1 602 19 is_stmt 0 view .LVU88
 374 003e 5370     		strb	r3, [r2, #1]
 603:Core/Src/main.c ****         TxData[3] = 0;          // N/A
 375              		.loc 1 603 9 is_stmt 1 view .LVU89
 603:Core/Src/main.c ****         TxData[3] = 0;          // N/A
 376              		.loc 1 603 19 is_stmt 0 view .LVU90
 377 0040 9170     		strb	r1, [r2, #2]
 604:Core/Src/main.c ****         TxData[4] = 0;          // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 an
 378              		.loc 1 604 9 is_stmt 1 view .LVU91
 604:Core/Src/main.c ****         TxData[4] = 0;          // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 an
 379              		.loc 1 604 19 is_stmt 0 view .LVU92
 380 0042 D370     		strb	r3, [r2, #3]
 605:Core/Src/main.c ****         TxData[5] = 0x55;         // 55 means relay control
 381              		.loc 1 605 9 is_stmt 1 view .LVU93
 605:Core/Src/main.c ****         TxData[5] = 0x55;         // 55 means relay control
 382              		.loc 1 605 19 is_stmt 0 view .LVU94
 383 0044 1371     		strb	r3, [r2, #4]
 606:Core/Src/main.c ****         TxData[6] = 0;          // N/A
 384              		.loc 1 606 9 is_stmt 1 view .LVU95
 606:Core/Src/main.c ****         TxData[6] = 0;          // N/A
 385              		.loc 1 606 19 is_stmt 0 view .LVU96
 386 0046 5521     		movs	r1, #85
 387 0048 5171     		strb	r1, [r2, #5]
 607:Core/Src/main.c ****         TxData[7] = 0;          // N/A
 388              		.loc 1 607 9 is_stmt 1 view .LVU97
ARM GAS  /tmp/ccmzXxfp.s 			page 19


 607:Core/Src/main.c ****         TxData[7] = 0;          // N/A
 389              		.loc 1 607 19 is_stmt 0 view .LVU98
 390 004a 9371     		strb	r3, [r2, #6]
 608:Core/Src/main.c **** 
 391              		.loc 1 608 9 is_stmt 1 view .LVU99
 608:Core/Src/main.c **** 
 392              		.loc 1 608 19 is_stmt 0 view .LVU100
 393 004c D371     		strb	r3, [r2, #7]
 611:Core/Src/main.c ****       }
 394              		.loc 1 611 9 is_stmt 1 view .LVU101
 395 004e 464B     		ldr	r3, .L28+24
 396 0050 4649     		ldr	r1, .L28+28
 397 0052 4748     		ldr	r0, .L28+32
 398 0054 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 399              	.LVL13:
 400 0058 E2E7     		b	.L18
 401              	.L16:
 623:Core/Src/main.c ****       }
 624:Core/Src/main.c **** 
 625:Core/Src/main.c ****       // }
 626:Core/Src/main.c **** 		break;
 627:Core/Src/main.c **** 
 628:Core/Src/main.c **** 		case (PRECHARGE_ON):
 629:Core/Src/main.c ****       // not ready to drive yet
 630:Core/Src/main.c ****       ready_to_drive = 0;
 402              		.loc 1 630 7 view .LVU102
 403              		.loc 1 630 22 is_stmt 0 view .LVU103
 404 005a 404B     		ldr	r3, .L28+12
 405 005c 0022     		movs	r2, #0
 406 005e 1A70     		strb	r2, [r3]
 631:Core/Src/main.c **** 
 632:Core/Src/main.c ****       // turn on precharge relay
 633:Core/Src/main.c ****       // this state sends a message to rinehart to turn 
 634:Core/Src/main.c ****       // if (lastPrechargeState != prechargeState)
 635:Core/Src/main.c ****       // {
 636:Core/Src/main.c ****       if (!rinehartUpdate){
 407              		.loc 1 636 7 is_stmt 1 view .LVU104
 408              		.loc 1 636 11 is_stmt 0 view .LVU105
 409 0060 3F4B     		ldr	r3, .L28+16
 410 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 411              		.loc 1 636 10 view .LVU106
 412 0064 03B3     		cbz	r3, .L26
 413              	.L20:
 637:Core/Src/main.c ****         // message is sent to rinehart to turn on precharge relay
 638:Core/Src/main.c ****         // precharge relay is on relay 1 from Rinehart
 639:Core/Src/main.c ****         TxData[0] = 1;            // parameter address. LSB
 640:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
 641:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 642:Core/Src/main.c ****         TxData[3] = 0;            // N/A
 643:Core/Src/main.c ****         TxData[4] = 1;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 644:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 645:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 646:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 647:Core/Src/main.c **** 
 648:Core/Src/main.c ****         // send message
 649:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &TxHeader4, TxData, &TxMailbox1);
 650:Core/Src/main.c ****         
ARM GAS  /tmp/ccmzXxfp.s 			page 20


 651:Core/Src/main.c ****         // update last precharge state
 652:Core/Src/main.c ****         lastPrechargeState = prechargeState;
 653:Core/Src/main.c ****       }
 654:Core/Src/main.c ****       // }
 655:Core/Src/main.c ****       
 656:Core/Src/main.c **** 			// ensure voltages are above correct values
 657:Core/Src/main.c **** 			if ((rinehartVoltage > (bmsVoltage * PRECHARGE_COEFFICIENT)) && (bmsVoltage > 220))   // 220 so 
 414              		.loc 1 657 4 is_stmt 1 view .LVU107
 415              		.loc 1 657 25 is_stmt 0 view .LVU108
 416 0066 434B     		ldr	r3, .L28+36
 417 0068 1868     		ldr	r0, [r3]
 418 006a FFF7FEFF 		bl	__aeabi_ui2d
 419              	.LVL14:
 420 006e 0446     		mov	r4, r0
 421 0070 0D46     		mov	r5, r1
 422              		.loc 1 657 39 view .LVU109
 423 0072 414B     		ldr	r3, .L28+40
 424 0074 1E68     		ldr	r6, [r3]
 425 0076 3046     		mov	r0, r6
 426 0078 FFF7FEFF 		bl	__aeabi_ui2d
 427              	.LVL15:
 428 007c 34A3     		adr	r3, .L28
 429 007e D3E90023 		ldrd	r2, [r3]
 430 0082 FFF7FEFF 		bl	__aeabi_dmul
 431              	.LVL16:
 432 0086 0246     		mov	r2, r0
 433 0088 0B46     		mov	r3, r1
 434              		.loc 1 657 7 view .LVU110
 435 008a 2046     		mov	r0, r4
 436 008c 2946     		mov	r1, r5
 437 008e FFF7FEFF 		bl	__aeabi_dcmpgt
 438              	.LVL17:
 439 0092 0028     		cmp	r0, #0
 440 0094 55D0     		beq	.L11
 441              		.loc 1 657 65 discriminator 1 view .LVU111
 442 0096 DC2E     		cmp	r6, #220
 443 0098 53D9     		bls	.L11
 658:Core/Src/main.c ****       {
 659:Core/Src/main.c ****         prechargeState = PRECHARGE_DONE;
 444              		.loc 1 659 9 is_stmt 1 view .LVU112
 445              		.loc 1 659 24 is_stmt 0 view .LVU113
 446 009a 2F4B     		ldr	r3, .L28+8
 447 009c 0222     		movs	r2, #2
 448 009e 1A70     		strb	r2, [r3]
 660:Core/Src/main.c ****         rinehartUpdate = 0;
 449              		.loc 1 660 9 is_stmt 1 view .LVU114
 450              		.loc 1 660 24 is_stmt 0 view .LVU115
 451 00a0 2F4B     		ldr	r3, .L28+16
 452 00a2 0022     		movs	r2, #0
 453 00a4 1A70     		strb	r2, [r3]
 454 00a6 4CE0     		b	.L11
 455              	.L26:
 639:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
 456              		.loc 1 639 9 is_stmt 1 view .LVU116
 639:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
 457              		.loc 1 639 19 is_stmt 0 view .LVU117
 458 00a8 2E4A     		ldr	r2, .L28+20
ARM GAS  /tmp/ccmzXxfp.s 			page 21


 459 00aa 0121     		movs	r1, #1
 460 00ac 1170     		strb	r1, [r2]
 640:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 461              		.loc 1 640 9 is_stmt 1 view .LVU118
 640:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 462              		.loc 1 640 19 is_stmt 0 view .LVU119
 463 00ae 5370     		strb	r3, [r2, #1]
 641:Core/Src/main.c ****         TxData[3] = 0;            // N/A
 464              		.loc 1 641 9 is_stmt 1 view .LVU120
 641:Core/Src/main.c ****         TxData[3] = 0;            // N/A
 465              		.loc 1 641 19 is_stmt 0 view .LVU121
 466 00b0 9170     		strb	r1, [r2, #2]
 642:Core/Src/main.c ****         TxData[4] = 1;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 467              		.loc 1 642 9 is_stmt 1 view .LVU122
 642:Core/Src/main.c ****         TxData[4] = 1;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 468              		.loc 1 642 19 is_stmt 0 view .LVU123
 469 00b2 D370     		strb	r3, [r2, #3]
 643:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 470              		.loc 1 643 9 is_stmt 1 view .LVU124
 643:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 471              		.loc 1 643 19 is_stmt 0 view .LVU125
 472 00b4 1171     		strb	r1, [r2, #4]
 644:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 473              		.loc 1 644 9 is_stmt 1 view .LVU126
 644:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 474              		.loc 1 644 19 is_stmt 0 view .LVU127
 475 00b6 5521     		movs	r1, #85
 476 00b8 5171     		strb	r1, [r2, #5]
 645:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 477              		.loc 1 645 9 is_stmt 1 view .LVU128
 645:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 478              		.loc 1 645 19 is_stmt 0 view .LVU129
 479 00ba 9371     		strb	r3, [r2, #6]
 646:Core/Src/main.c **** 
 480              		.loc 1 646 9 is_stmt 1 view .LVU130
 646:Core/Src/main.c **** 
 481              		.loc 1 646 19 is_stmt 0 view .LVU131
 482 00bc D371     		strb	r3, [r2, #7]
 649:Core/Src/main.c ****         
 483              		.loc 1 649 9 is_stmt 1 view .LVU132
 484 00be 2A4B     		ldr	r3, .L28+24
 485 00c0 2A49     		ldr	r1, .L28+28
 486 00c2 2B48     		ldr	r0, .L28+32
 487 00c4 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 488              	.LVL18:
 652:Core/Src/main.c ****       }
 489              		.loc 1 652 9 view .LVU133
 652:Core/Src/main.c ****       }
 490              		.loc 1 652 28 is_stmt 0 view .LVU134
 491 00c8 234B     		ldr	r3, .L28+8
 492 00ca 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 493 00cc 2B4B     		ldr	r3, .L28+44
 494 00ce 1A70     		strb	r2, [r3]
 495 00d0 C9E7     		b	.L20
 496              	.L15:
 661:Core/Src/main.c ****       }
 662:Core/Src/main.c **** 
ARM GAS  /tmp/ccmzXxfp.s 			page 22


 663:Core/Src/main.c ****       // if we do this for too long, move to error state
 664:Core/Src/main.c ****       // if (voltageCheckCount >= NUM_VOLTAGE_CHECKS)
 665:Core/Src/main.c ****       // {
 666:Core/Src/main.c ****       //   prechargeState = PRECHARGE_ERROR;
 667:Core/Src/main.c ****       // }
 668:Core/Src/main.c ****       
 669:Core/Src/main.c ****       // else
 670:Core/Src/main.c ****       // {
 671:Core/Src/main.c ****       //   voltageCheckCount++; // add to the counter. 
 672:Core/Src/main.c ****       // }
 673:Core/Src/main.c **** 		break;
 674:Core/Src/main.c **** 
 675:Core/Src/main.c **** 		case (PRECHARGE_DONE):
 676:Core/Src/main.c ****       // now we're stuck in this state, not great. Implement error handling. 
 677:Core/Src/main.c ****       // this state sends a message to rinehart to turn 
 678:Core/Src/main.c ****       // if (lastPrechargeState != prechargeState)
 679:Core/Src/main.c ****       // {
 680:Core/Src/main.c ****       if (!rinehartUpdate){
 497              		.loc 1 680 7 is_stmt 1 view .LVU135
 498              		.loc 1 680 11 is_stmt 0 view .LVU136
 499 00d2 234B     		ldr	r3, .L28+16
 500 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 501              		.loc 1 680 10 view .LVU137
 502 00d6 6BB1     		cbz	r3, .L27
 503              	.L22:
 681:Core/Src/main.c ****         // message is sent to rinehart to turn everything on
 682:Core/Src/main.c ****         // Keep precharge relay on and turn on main contactor
 683:Core/Src/main.c ****         TxData[0] = 1; // parameter address. LSB
 684:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 685:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 686:Core/Src/main.c ****         TxData[3] = 0; // N/A
 687:Core/Src/main.c ****         TxData[4] = 3; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 688:Core/Src/main.c ****         TxData[5] = 0x55; // 55 means relay control
 689:Core/Src/main.c ****         TxData[6] = 0; // N/A
 690:Core/Src/main.c ****         TxData[7] = 0; // N/A
 691:Core/Src/main.c **** 
 692:Core/Src/main.c ****         // send message
 693:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &TxHeader4, TxData, &TxMailbox1);
 694:Core/Src/main.c **** 
 695:Core/Src/main.c ****         // now that precharge is complete we can drive the car
 696:Core/Src/main.c ****         ready_to_drive = 1;
 697:Core/Src/main.c ****       }
 698:Core/Src/main.c **** 
 699:Core/Src/main.c ****           
 700:Core/Src/main.c ****         // update last precharge state
 701:Core/Src/main.c ****         lastPrechargeState = prechargeState;
 504              		.loc 1 701 9 is_stmt 1 view .LVU138
 505              		.loc 1 701 28 is_stmt 0 view .LVU139
 506 00d8 1F4B     		ldr	r3, .L28+8
 507 00da 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 508 00dc 274B     		ldr	r3, .L28+44
 509 00de 1A70     		strb	r2, [r3]
 702:Core/Src/main.c ****         rinehartUpdate = 0;
 510              		.loc 1 702 9 is_stmt 1 view .LVU140
 511              		.loc 1 702 24 is_stmt 0 view .LVU141
 512 00e0 1F4B     		ldr	r3, .L28+16
 513 00e2 0022     		movs	r2, #0
ARM GAS  /tmp/ccmzXxfp.s 			page 23


 514 00e4 1A70     		strb	r2, [r3]
 703:Core/Src/main.c **** 
 704:Core/Src/main.c ****         // ensure voltages are above correct values
 705:Core/Src/main.c **** 			if ((rinehartVoltage < 50))   // 220 so not just 1 pack can trigger this
 515              		.loc 1 705 4 is_stmt 1 view .LVU142
 516              		.loc 1 705 25 is_stmt 0 view .LVU143
 517 00e6 234B     		ldr	r3, .L28+36
 518 00e8 1B68     		ldr	r3, [r3]
 519              		.loc 1 705 7 view .LVU144
 520 00ea 312B     		cmp	r3, #49
 521 00ec 29D8     		bhi	.L11
 706:Core/Src/main.c ****       {
 707:Core/Src/main.c ****         prechargeState = PRECHARGE_OFF;
 522              		.loc 1 707 9 is_stmt 1 view .LVU145
 523              		.loc 1 707 24 is_stmt 0 view .LVU146
 524 00ee 1A4B     		ldr	r3, .L28+8
 525 00f0 1A70     		strb	r2, [r3]
 708:Core/Src/main.c ****         rinehartUpdate = 0;
 526              		.loc 1 708 9 is_stmt 1 view .LVU147
 527 00f2 26E0     		b	.L11
 528              	.L27:
 683:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 529              		.loc 1 683 9 view .LVU148
 683:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 530              		.loc 1 683 19 is_stmt 0 view .LVU149
 531 00f4 1B4A     		ldr	r2, .L28+20
 532 00f6 0124     		movs	r4, #1
 533 00f8 1470     		strb	r4, [r2]
 684:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 534              		.loc 1 684 9 is_stmt 1 view .LVU150
 684:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 535              		.loc 1 684 19 is_stmt 0 view .LVU151
 536 00fa 5370     		strb	r3, [r2, #1]
 685:Core/Src/main.c ****         TxData[3] = 0; // N/A
 537              		.loc 1 685 9 is_stmt 1 view .LVU152
 685:Core/Src/main.c ****         TxData[3] = 0; // N/A
 538              		.loc 1 685 19 is_stmt 0 view .LVU153
 539 00fc 9470     		strb	r4, [r2, #2]
 686:Core/Src/main.c ****         TxData[4] = 3; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 540              		.loc 1 686 9 is_stmt 1 view .LVU154
 686:Core/Src/main.c ****         TxData[4] = 3; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 541              		.loc 1 686 19 is_stmt 0 view .LVU155
 542 00fe D370     		strb	r3, [r2, #3]
 687:Core/Src/main.c ****         TxData[5] = 0x55; // 55 means relay control
 543              		.loc 1 687 9 is_stmt 1 view .LVU156
 687:Core/Src/main.c ****         TxData[5] = 0x55; // 55 means relay control
 544              		.loc 1 687 19 is_stmt 0 view .LVU157
 545 0100 0321     		movs	r1, #3
 546 0102 1171     		strb	r1, [r2, #4]
 688:Core/Src/main.c ****         TxData[6] = 0; // N/A
 547              		.loc 1 688 9 is_stmt 1 view .LVU158
 688:Core/Src/main.c ****         TxData[6] = 0; // N/A
 548              		.loc 1 688 19 is_stmt 0 view .LVU159
 549 0104 5521     		movs	r1, #85
 550 0106 5171     		strb	r1, [r2, #5]
 689:Core/Src/main.c ****         TxData[7] = 0; // N/A
 551              		.loc 1 689 9 is_stmt 1 view .LVU160
ARM GAS  /tmp/ccmzXxfp.s 			page 24


 689:Core/Src/main.c ****         TxData[7] = 0; // N/A
 552              		.loc 1 689 19 is_stmt 0 view .LVU161
 553 0108 9371     		strb	r3, [r2, #6]
 690:Core/Src/main.c **** 
 554              		.loc 1 690 9 is_stmt 1 view .LVU162
 690:Core/Src/main.c **** 
 555              		.loc 1 690 19 is_stmt 0 view .LVU163
 556 010a D371     		strb	r3, [r2, #7]
 693:Core/Src/main.c **** 
 557              		.loc 1 693 9 is_stmt 1 view .LVU164
 558 010c 164B     		ldr	r3, .L28+24
 559 010e 1749     		ldr	r1, .L28+28
 560 0110 1748     		ldr	r0, .L28+32
 561 0112 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 562              	.LVL19:
 696:Core/Src/main.c ****       }
 563              		.loc 1 696 9 view .LVU165
 696:Core/Src/main.c ****       }
 564              		.loc 1 696 24 is_stmt 0 view .LVU166
 565 0116 114B     		ldr	r3, .L28+12
 566 0118 1C70     		strb	r4, [r3]
 567 011a DDE7     		b	.L22
 568              	.L13:
 709:Core/Src/main.c ****       }
 710:Core/Src/main.c ****       
 711:Core/Src/main.c **** 
 712:Core/Src/main.c ****       // if rinehart voltage drops below battery, something's wrong, 
 713:Core/Src/main.c ****       // turn everything off
 714:Core/Src/main.c **** 			// if (rinehartVoltage <= (bmsVoltage * (PRECHARGE_COEFFICIENT)-20)) // 20 is a magic number
 715:Core/Src/main.c ****       // {
 716:Core/Src/main.c ****       //   prechargeState = PRECHARGE_OFF; // something weird happened. Go to error
 717:Core/Src/main.c ****       // }
 718:Core/Src/main.c **** 		break;
 719:Core/Src/main.c **** 
 720:Core/Src/main.c **** 		case (PRECHARGE_ERROR):
 721:Core/Src/main.c **** 			// the car is most definitly not ready to drive
 722:Core/Src/main.c ****       // set ready to drive off 
 723:Core/Src/main.c **** 			ready_to_drive = 0;
 569              		.loc 1 723 4 is_stmt 1 view .LVU167
 570              		.loc 1 723 19 is_stmt 0 view .LVU168
 571 011c 0023     		movs	r3, #0
 572 011e 0F4A     		ldr	r2, .L28+12
 573 0120 1370     		strb	r3, [r2]
 724:Core/Src/main.c **** 
 725:Core/Src/main.c ****       // if (lastPrechargeState != prechargeState)
 726:Core/Src/main.c ****       // {
 727:Core/Src/main.c ****         // message is sent to rinehart to turn everything off
 728:Core/Src/main.c ****         TxData[0] = 1;            // parameter address. LSB
 574              		.loc 1 728 9 is_stmt 1 view .LVU169
 575              		.loc 1 728 19 is_stmt 0 view .LVU170
 576 0122 104A     		ldr	r2, .L28+20
 577 0124 0121     		movs	r1, #1
 578 0126 1170     		strb	r1, [r2]
 729:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
 579              		.loc 1 729 9 is_stmt 1 view .LVU171
 580              		.loc 1 729 19 is_stmt 0 view .LVU172
 581 0128 5370     		strb	r3, [r2, #1]
ARM GAS  /tmp/ccmzXxfp.s 			page 25


 730:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 582              		.loc 1 730 9 is_stmt 1 view .LVU173
 583              		.loc 1 730 19 is_stmt 0 view .LVU174
 584 012a 9170     		strb	r1, [r2, #2]
 731:Core/Src/main.c ****         TxData[3] = 0;            // N/A
 585              		.loc 1 731 9 is_stmt 1 view .LVU175
 586              		.loc 1 731 19 is_stmt 0 view .LVU176
 587 012c D370     		strb	r3, [r2, #3]
 732:Core/Src/main.c ****         TxData[4] = 0;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 588              		.loc 1 732 9 is_stmt 1 view .LVU177
 589              		.loc 1 732 19 is_stmt 0 view .LVU178
 590 012e 1371     		strb	r3, [r2, #4]
 733:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 591              		.loc 1 733 9 is_stmt 1 view .LVU179
 592              		.loc 1 733 19 is_stmt 0 view .LVU180
 593 0130 5521     		movs	r1, #85
 594 0132 5171     		strb	r1, [r2, #5]
 734:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 595              		.loc 1 734 9 is_stmt 1 view .LVU181
 596              		.loc 1 734 19 is_stmt 0 view .LVU182
 597 0134 9371     		strb	r3, [r2, #6]
 735:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 598              		.loc 1 735 9 is_stmt 1 view .LVU183
 599              		.loc 1 735 19 is_stmt 0 view .LVU184
 600 0136 D371     		strb	r3, [r2, #7]
 736:Core/Src/main.c **** 
 737:Core/Src/main.c ****         // send message
 738:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &TxHeader4, TxData, &TxMailbox1);
 601              		.loc 1 738 9 is_stmt 1 view .LVU185
 602 0138 0B4B     		ldr	r3, .L28+24
 603 013a 0C49     		ldr	r1, .L28+28
 604 013c 0C48     		ldr	r0, .L28+32
 605 013e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 606              	.LVL20:
 739:Core/Src/main.c ****         
 740:Core/Src/main.c ****         // update last precharge state
 741:Core/Src/main.c ****         // lastPrechargeState = prechargeState;
 742:Core/Src/main.c ****       // }
 743:Core/Src/main.c **** 		break;
 607              		.loc 1 743 3 view .LVU186
 608              	.L11:
 744:Core/Src/main.c **** 
 745:Core/Src/main.c **** 		default:
 746:Core/Src/main.c ****       // fall back state, this indicates we did some undefined action that brought us here
 747:Core/Src/main.c ****       // we will move to PRECHARGE_ERROR to ensure ready_to_drive stays false :)
 748:Core/Src/main.c **** 			prechargeState = PRECHARGE_ERROR;
 749:Core/Src/main.c **** 		break;
 750:Core/Src/main.c **** 	}
 751:Core/Src/main.c **** }
 609              		.loc 1 751 1 is_stmt 0 view .LVU187
 610 0142 70BD     		pop	{r4, r5, r6, pc}
 611              	.L12:
 748:Core/Src/main.c **** 		break;
 612              		.loc 1 748 4 is_stmt 1 view .LVU188
 748:Core/Src/main.c **** 		break;
 613              		.loc 1 748 19 is_stmt 0 view .LVU189
 614 0144 044B     		ldr	r3, .L28+8
ARM GAS  /tmp/ccmzXxfp.s 			page 26


 615 0146 0322     		movs	r2, #3
 616 0148 1A70     		strb	r2, [r3]
 749:Core/Src/main.c **** 	}
 617              		.loc 1 749 3 is_stmt 1 view .LVU190
 618              		.loc 1 751 1 is_stmt 0 view .LVU191
 619 014a FAE7     		b	.L11
 620              	.L29:
 621 014c AFF30080 		.align	3
 622              	.L28:
 623 0150 33333333 		.word	858993459
 624 0154 3333EB3F 		.word	1072378675
 625 0158 00000000 		.word	.LANCHOR0
 626 015c 00000000 		.word	.LANCHOR1
 627 0160 00000000 		.word	.LANCHOR2
 628 0164 00000000 		.word	TxData
 629 0168 00000000 		.word	TxMailbox1
 630 016c 00000000 		.word	TxHeader4
 631 0170 00000000 		.word	hcan1
 632 0174 00000000 		.word	.LANCHOR4
 633 0178 00000000 		.word	.LANCHOR5
 634 017c 00000000 		.word	.LANCHOR3
 635              		.cfi_endproc
 636              	.LFE225:
 638              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 639              		.align	1
 640              		.global	HAL_GPIO_EXTI_Callback
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 644              		.fpu fpv4-sp-d16
 646              	HAL_GPIO_EXTI_Callback:
 647              	.LVL21:
 648              	.LFB228:
 752:Core/Src/main.c **** 
 753:Core/Src/main.c **** 
 754:Core/Src/main.c **** 
 755:Core/Src/main.c **** // function to re-map the pedal value to a torque value based on the drive mode
 756:Core/Src/main.c **** uint16_t getCommandedTorque()
 757:Core/Src/main.c **** {
 758:Core/Src/main.c ****   // get the pedal average
 759:Core/Src/main.c ****   pedalAverage = adc_average(pedal0, pedal1);
 760:Core/Src/main.c **** 
 761:Core/Src/main.c ****   // drive mode logic
 762:Core/Src/main.c ****   switch (driveMode)
 763:Core/Src/main.c ****   {
 764:Core/Src/main.c ****     case SLOW:  // runs at 50% power
 765:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, MAX_TORQUE * 0.50);
 766:Core/Src/main.c ****     break;
 767:Core/Src/main.c **** 
 768:Core/Src/main.c ****     case ECO:   // runs at 75% power
 769:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, MAX_TORQUE * 0.75);
 770:Core/Src/main.c ****     break;
 771:Core/Src/main.c **** 
 772:Core/Src/main.c ****     case FAST:  // runs at 100% power
 773:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, MAX_TORQUE);
 774:Core/Src/main.c ****     break;
 775:Core/Src/main.c ****     
ARM GAS  /tmp/ccmzXxfp.s 			page 27


 776:Core/Src/main.c ****     // error state, set the mode to ECO
 777:Core/Src/main.c ****     default:
 778:Core/Src/main.c ****       // set the state to ECO for next time
 779:Core/Src/main.c ****       driveMode = ECO;
 780:Core/Src/main.c **** 
 781:Core/Src/main.c ****       // we don't want to send a torque if we are in an undefined state
 782:Core/Src/main.c ****       commandedTorque = 0;
 783:Core/Src/main.c ****     break;
 784:Core/Src/main.c ****   }
 785:Core/Src/main.c **** 
 786:Core/Src/main.c ****   // for throttle safety, we will have a deadband
 787:Core/Src/main.c ****   if (((float)commandedTorque / MAX_TORQUE) < TORQUE_DEADBAND)   // if less than 5% power is reques
 788:Core/Src/main.c ****   {
 789:Core/Src/main.c ****     commandedTorque = 0;
 790:Core/Src/main.c ****   }
 791:Core/Src/main.c **** 
 792:Core/Src/main.c ****   return commandedTorque;
 793:Core/Src/main.c **** }
 794:Core/Src/main.c **** 
 795:Core/Src/main.c **** // Recive CAN Messages
 796:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 797:Core/Src/main.c **** {
 798:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 799:Core/Src/main.c ****     Error_Handler();
 800:Core/Src/main.c ****   }
 801:Core/Src/main.c **** 
 802:Core/Src/main.c ****   // read CAN data from Rear Control Board
 803:Core/Src/main.c ****   if (RxHeader.StdId == 0x082)
 804:Core/Src/main.c ****   {
 805:Core/Src/main.c ****       imdFault = RxData[0];
 806:Core/Src/main.c ****       bmsFault = RxData[1];
 807:Core/Src/main.c ****   }
 808:Core/Src/main.c **** 
 809:Core/Src/main.c ****   // read CAN data from High Voltage Board 
 810:Core/Src/main.c ****   // if (RxHeader.StdId == 0x087)
 811:Core/Src/main.c ****   // {
 812:Core/Src/main.c ****   //     ready_to_drive = RxData[0];
 813:Core/Src/main.c ****   // }
 814:Core/Src/main.c ****     // get BMS total voltages
 815:Core/Src/main.c ****   if (RxHeader.StdId == 0x6B0)
 816:Core/Src/main.c ****   {
 817:Core/Src/main.c ****     // BMS voltage is spread across the first 2 bytes
 818:Core/Src/main.c **** 	  int volt1 = RxData[2];
 819:Core/Src/main.c ****     int volt2 = RxData[3];
 820:Core/Src/main.c **** 
 821:Core/Src/main.c ****     // combine the first two bytes and assign that to the BMS voltage
 822:Core/Src/main.c ****     bmsVoltage = (volt1 << 8) | volt2; // orion has a pre-scaller of *10
 823:Core/Src/main.c ****   }
 824:Core/Src/main.c **** 
 825:Core/Src/main.c ****   if (RxHeader.StdId == 0x0A7)    // TODO: sometimes rinehart sends 0 length messages so only read 
 826:Core/Src/main.c ****   {
 827:Core/Src/main.c ****     // rinehart voltage is spread across the first 2 bytes
 828:Core/Src/main.c ****     int rine1 = RxData[0];
 829:Core/Src/main.c ****     int rine2 = RxData[1];
 830:Core/Src/main.c **** 
 831:Core/Src/main.c ****     // combine the first two bytes and assign that to the rinehart voltage
 832:Core/Src/main.c ****     rinehartVoltage = (rine2 << 8) | rine1;
ARM GAS  /tmp/ccmzXxfp.s 			page 28


 833:Core/Src/main.c ****   }
 834:Core/Src/main.c **** 
 835:Core/Src/main.c ****   if (RxHeader.StdId == 0x0C2)    // TODO: sometimes rinehart sends 0 length messages so only read 
 836:Core/Src/main.c ****   {
 837:Core/Src/main.c ****     rinehartUpdate = RxData[2];
 838:Core/Src/main.c ****   }
 839:Core/Src/main.c **** }
 840:Core/Src/main.c **** 
 841:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 842:Core/Src/main.c **** {
 649              		.loc 1 842 1 is_stmt 1 view -0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 0, uses_anonymous_args = 0
 653              		@ link register save eliminated.
 843:Core/Src/main.c ****   // handle start button interrupt
 844:Core/Src/main.c ****   if (GPIO_Pin == GPIO_PIN_15)
 654              		.loc 1 844 3 view .LVU193
 655              		.loc 1 844 6 is_stmt 0 view .LVU194
 656 0000 B0F5004F 		cmp	r0, #32768
 657 0004 00D0     		beq	.L32
 658              	.L30:
 845:Core/Src/main.c ****   {
 846:Core/Src/main.c ****     // if ready to drive & the button has been pushed, start the buzzer
 847:Core/Src/main.c ****     if (ready_to_drive)
 848:Core/Src/main.c ****     {
 849:Core/Src/main.c ****       buzzerState = 1;
 850:Core/Src/main.c ****     }
 851:Core/Src/main.c ****   }
 852:Core/Src/main.c **** }
 659              		.loc 1 852 1 view .LVU195
 660 0006 7047     		bx	lr
 661              	.L32:
 847:Core/Src/main.c ****     {
 662              		.loc 1 847 5 is_stmt 1 view .LVU196
 847:Core/Src/main.c ****     {
 663              		.loc 1 847 9 is_stmt 0 view .LVU197
 664 0008 034B     		ldr	r3, .L33
 665 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 847:Core/Src/main.c ****     {
 666              		.loc 1 847 8 view .LVU198
 667 000c 002B     		cmp	r3, #0
 668 000e FAD0     		beq	.L30
 849:Core/Src/main.c ****     }
 669              		.loc 1 849 7 is_stmt 1 view .LVU199
 849:Core/Src/main.c ****     }
 670              		.loc 1 849 19 is_stmt 0 view .LVU200
 671 0010 024B     		ldr	r3, .L33+4
 672 0012 0122     		movs	r2, #1
 673 0014 1A70     		strb	r2, [r3]
 674              		.loc 1 852 1 view .LVU201
 675 0016 F6E7     		b	.L30
 676              	.L34:
 677              		.align	2
 678              	.L33:
 679 0018 00000000 		.word	.LANCHOR1
 680 001c 00000000 		.word	.LANCHOR6
ARM GAS  /tmp/ccmzXxfp.s 			page 29


 681              		.cfi_endproc
 682              	.LFE228:
 684              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 685              		.align	1
 686              		.global	HAL_ADC_ConvCpltCallback
 687              		.syntax unified
 688              		.thumb
 689              		.thumb_func
 690              		.fpu fpv4-sp-d16
 692              	HAL_ADC_ConvCpltCallback:
 693              	.LVL22:
 694              	.LFB230:
 853:Core/Src/main.c **** 
 854:Core/Src/main.c **** // Timer Interrupts
 855:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 856:Core/Src/main.c **** {
 857:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 858:Core/Src/main.c ****   if (htim == &htim13)
 859:Core/Src/main.c ****   {
 860:Core/Src/main.c ****     // // drive mode logic
 861:Core/Src/main.c ****     // commandedTorque = getCommandedTorque();
 862:Core/Src/main.c ****     
 863:Core/Src/main.c ****     // // build CONTROL CAN message - sending to rinehart to address C0
 864:Core/Src/main.c ****     // TxData[0] = commandedTorque & 0xFF;
 865:Core/Src/main.c ****     // TxData[1] = commandedTorque >> 8;
 866:Core/Src/main.c ****     // TxData[2] = 0;                        // speed command NOT USING
 867:Core/Src/main.c ****     // TxData[3] = 0;                        // speed command NOT USING
 868:Core/Src/main.c ****     // TxData[4] = 0;                        // switch_direction is usually here, 0 is reverse (we 
 869:Core/Src/main.c ****     // TxData[5] = enableInverter;
 870:Core/Src/main.c ****     // TxData[6] =  0x98;                    // this is the max  torque value that we are establish
 871:Core/Src/main.c ****     // TxData[7] =  0x08;                    // HARDCODED AS 220, MAX VALUE ACCEPTED BY MOTOR is 23
 872:Core/Src/main.c **** 
 873:Core/Src/main.c ****     // // send message
 874:Core/Src/main.c ****     // HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData, &TxMailbox);
 875:Core/Src/main.c **** 
 876:Core/Src/main.c ****     // prechargeControl();
 877:Core/Src/main.c **** 
 878:Core/Src/main.c ****     // // build message for _____
 879:Core/Src/main.c ****     // TxData[0] = ready_to_drive;               // controled by precharge
 880:Core/Src/main.c ****     // TxData[1] = 0;                           // 0 for now TODO: implement fault detection
 881:Core/Src/main.c ****     // TxData[2] = 0;                          // DMA update
 882:Core/Src/main.c ****     // TxData[3] = rinehartVoltage & 0xFF;     // update on CAN message LSB
 883:Core/Src/main.c ****     // TxData[4] = rinehartVoltage >> 8;       // update on CAN message MSB
 884:Core/Src/main.c ****     // TxData[5] = bmsVoltage & 0xFF;          // update on CAN message LSB
 885:Core/Src/main.c ****     // TxData[6] = bmsVoltage >> 8;            // update on CAN message MSB
 886:Core/Src/main.c ****     // TxData[7] = prechargeState;             // show which state of precharge / driving we're in,
 887:Core/Src/main.c **** 
 888:Core/Src/main.c ****     // // send message
 889:Core/Src/main.c ****     // HAL_CAN_AddTxMessage(&hcan1, &TxHeader3, TxData, &TxMailbox);
 890:Core/Src/main.c ****   }
 891:Core/Src/main.c ****   
 892:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 893:Core/Src/main.c ****   if (htim == &htim14)
 894:Core/Src/main.c ****   {
 895:Core/Src/main.c **** 
 896:Core/Src/main.c ****     // drive mode logic
 897:Core/Src/main.c ****     commandedTorque = getCommandedTorque();
ARM GAS  /tmp/ccmzXxfp.s 			page 30


 898:Core/Src/main.c ****     
 899:Core/Src/main.c ****     // build CONTROL CAN message - sending to rinehart to address C0
 900:Core/Src/main.c ****     TxData[0] = commandedTorque & 0xFF;
 901:Core/Src/main.c ****     TxData[1] = commandedTorque >> 8;
 902:Core/Src/main.c ****     TxData[2] = 0;                        // speed command NOT USING
 903:Core/Src/main.c ****     TxData[3] = 0;                        // speed command NOT USING
 904:Core/Src/main.c ****     TxData[4] = 0;                        // switch_direction is usually here, 0 is reverse (we run
 905:Core/Src/main.c ****     TxData[5] = enableInverter;
 906:Core/Src/main.c ****     TxData[6] =  0x00;                    // this is the max  torque value that we are establishing
 907:Core/Src/main.c ****     TxData[7] =  0x00;                    // HARDCODED AS 220, MAX VALUE ACCEPTED BY MOTOR is 230 
 908:Core/Src/main.c **** 
 909:Core/Src/main.c ****     // send message
 910:Core/Src/main.c ****     HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData, &TxMailbox);
 911:Core/Src/main.c **** 
 912:Core/Src/main.c ****     prechargeControl();
 913:Core/Src/main.c **** 
 914:Core/Src/main.c ****     // sample cooling switch and drive direction switch
 915:Core/Src/main.c ****     switch_cooling = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 916:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 917:Core/Src/main.c **** 
 918:Core/Src/main.c ****     // start button led logic
 919:Core/Src/main.c ****     if (ready_to_drive)
 920:Core/Src/main.c ****     {
 921:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);      // turn the LED on
 922:Core/Src/main.c ****     }
 923:Core/Src/main.c ****     else
 924:Core/Src/main.c ****     {
 925:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);    // turn the LED off
 926:Core/Src/main.c ****       enableInverter = 0;                                       // disable inverter
 927:Core/Src/main.c ****     }
 928:Core/Src/main.c ****     
 929:Core/Src/main.c ****     // buzzer logic
 930:Core/Src/main.c ****     if (buzzerState == 1){
 931:Core/Src/main.c ****       buzzerCounter++;
 932:Core/Src/main.c ****       if (buzzerCounter >= 100)    // buzzerCounter is being updated on a 50Hz interval, so after 2
 933:Core/Src/main.c ****       {
 934:Core/Src/main.c ****         buzzerState = 0;
 935:Core/Src/main.c ****         buzzerCounter = 0;
 936:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 937:Core/Src/main.c ****       }
 938:Core/Src/main.c ****     }
 939:Core/Src/main.c **** 
 940:Core/Src/main.c ****     // brake light logic 
 941:Core/Src/main.c ****     brakeAverage = adc_average(brake0, brake1);
 942:Core/Src/main.c ****     if (brakeAverage >= BRAKE_LIGHT_THRESHOLD)
 943:Core/Src/main.c ****     {
 944:Core/Src/main.c ****       brakeLight = 1;     // turn it on 
 945:Core/Src/main.c ****     }
 946:Core/Src/main.c **** 
 947:Core/Src/main.c ****     else
 948:Core/Src/main.c ****     {
 949:Core/Src/main.c ****       brakeLight = 0;     // turn it off
 950:Core/Src/main.c ****     }
 951:Core/Src/main.c **** 
 952:Core/Src/main.c **** 
 953:Core/Src/main.c ****     // // build CAN message - sends from address 0x93
 954:Core/Src/main.c ****     // TxData[0] = pedalAverage >> 8;
ARM GAS  /tmp/ccmzXxfp.s 			page 31


 955:Core/Src/main.c ****     // TxData[1] = pedalAverage & 0xFF;
 956:Core/Src/main.c ****     // TxData[2] = brakeAverage >> 8;
 957:Core/Src/main.c ****     // TxData[3] = brakeAverage & 0xFF;
 958:Core/Src/main.c ****     // TxData[4] = brakeLight;
 959:Core/Src/main.c ****     // TxData[5] = buzzerState;
 960:Core/Src/main.c ****     // TxData[6] = driveMode;
 961:Core/Src/main.c ****     // TxData[7] = 0x07;
 962:Core/Src/main.c **** 
 963:Core/Src/main.c ****     // // send message
 964:Core/Src/main.c ****     // HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 965:Core/Src/main.c **** 
 966:Core/Src/main.c ****     // update LEDS and inverter drive direction 
 967:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, imdFault);
 968:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, bmsFault);
 969:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, buzzerState);
 970:Core/Src/main.c ****   }
 971:Core/Src/main.c **** }
 972:Core/Src/main.c **** 
 973:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 974:Core/Src/main.c **** {
 695              		.loc 1 974 1 is_stmt 1 view -0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              		@ link register save eliminated.
 975:Core/Src/main.c ****   // read values from DMA
 976:Core/Src/main.c ****   brake0 = adc_buf[0];
 700              		.loc 1 976 3 view .LVU203
 701              		.loc 1 976 19 is_stmt 0 view .LVU204
 702 0000 064B     		ldr	r3, .L36
 703 0002 1988     		ldrh	r1, [r3]
 704              		.loc 1 976 10 view .LVU205
 705 0004 064A     		ldr	r2, .L36+4
 706 0006 1180     		strh	r1, [r2]	@ movhi
 977:Core/Src/main.c ****   brake1 = adc_buf[1];
 707              		.loc 1 977 3 is_stmt 1 view .LVU206
 708              		.loc 1 977 19 is_stmt 0 view .LVU207
 709 0008 5988     		ldrh	r1, [r3, #2]
 710              		.loc 1 977 10 view .LVU208
 711 000a 064A     		ldr	r2, .L36+8
 712 000c 1180     		strh	r1, [r2]	@ movhi
 978:Core/Src/main.c ****   pedal0 = adc_buf[2];
 713              		.loc 1 978 3 is_stmt 1 view .LVU209
 714              		.loc 1 978 19 is_stmt 0 view .LVU210
 715 000e 9988     		ldrh	r1, [r3, #4]
 716              		.loc 1 978 10 view .LVU211
 717 0010 054A     		ldr	r2, .L36+12
 718 0012 1180     		strh	r1, [r2]	@ movhi
 979:Core/Src/main.c ****   pedal1 = adc_buf[3];
 719              		.loc 1 979 3 is_stmt 1 view .LVU212
 720              		.loc 1 979 19 is_stmt 0 view .LVU213
 721 0014 DA88     		ldrh	r2, [r3, #6]
 722              		.loc 1 979 10 view .LVU214
 723 0016 054B     		ldr	r3, .L36+16
 724 0018 1A80     		strh	r2, [r3]	@ movhi
 980:Core/Src/main.c **** }
 725              		.loc 1 980 1 view .LVU215
ARM GAS  /tmp/ccmzXxfp.s 			page 32


 726 001a 7047     		bx	lr
 727              	.L37:
 728              		.align	2
 729              	.L36:
 730 001c 00000000 		.word	adc_buf
 731 0020 00000000 		.word	.LANCHOR7
 732 0024 00000000 		.word	.LANCHOR8
 733 0028 00000000 		.word	.LANCHOR9
 734 002c 00000000 		.word	.LANCHOR10
 735              		.cfi_endproc
 736              	.LFE230:
 738              		.section	.text.adc_average,"ax",%progbits
 739              		.align	1
 740              		.global	adc_average
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 744              		.fpu fpv4-sp-d16
 746              	adc_average:
 747              	.LVL23:
 748              	.LFB231:
 981:Core/Src/main.c **** 
 982:Core/Src/main.c **** uint16_t adc_average(uint16_t adc0, uint16_t adc1)
 983:Core/Src/main.c **** {
 749              		.loc 1 983 1 is_stmt 1 view -0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              		@ link register save eliminated.
 984:Core/Src/main.c ****   // calculate the average of the two pedal potentiometer readings 
 985:Core/Src/main.c ****   uint16_t average = (adc0 + adc1) / 2;
 754              		.loc 1 985 3 view .LVU217
 755              		.loc 1 985 36 is_stmt 0 view .LVU218
 756 0000 0844     		add	r0, r0, r1
 757              	.LVL24:
 986:Core/Src/main.c **** 
 987:Core/Src/main.c ****   // ensure the pedal skew isn't dangerously out of bounds
 988:Core/Src/main.c ****   // if (pow(pedal0 - pedalAverage, 2) > MAX_PEDAL_SKEW || 
 989:Core/Src/main.c ****   //     pow(pedal1 - pedalAverage, 2) > MAX_PEDAL_SKEW ){
 990:Core/Src/main.c ****   //     pedalAverage = 0;
 991:Core/Src/main.c ****   // }
 992:Core/Src/main.c **** 
 993:Core/Src/main.c ****   return average;
 758              		.loc 1 993 3 is_stmt 1 view .LVU219
 994:Core/Src/main.c **** }
 759              		.loc 1 994 1 is_stmt 0 view .LVU220
 760 0002 4008     		lsrs	r0, r0, #1
 761              	.LVL25:
 762              		.loc 1 994 1 view .LVU221
 763 0004 7047     		bx	lr
 764              		.cfi_endproc
 765              	.LFE231:
 767              		.global	__aeabi_f2d
 768              		.global	__aeabi_dcmplt
 769              		.section	.text.getCommandedTorque,"ax",%progbits
 770              		.align	1
 771              		.global	getCommandedTorque
ARM GAS  /tmp/ccmzXxfp.s 			page 33


 772              		.syntax unified
 773              		.thumb
 774              		.thumb_func
 775              		.fpu fpv4-sp-d16
 777              	getCommandedTorque:
 778              	.LFB226:
 757:Core/Src/main.c ****   // get the pedal average
 779              		.loc 1 757 1 is_stmt 1 view -0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 783 0000 00B5     		push	{lr}
 784              	.LCFI9:
 785              		.cfi_def_cfa_offset 4
 786              		.cfi_offset 14, -4
 787 0002 83B0     		sub	sp, sp, #12
 788              	.LCFI10:
 789              		.cfi_def_cfa_offset 16
 759:Core/Src/main.c **** 
 790              		.loc 1 759 3 view .LVU223
 759:Core/Src/main.c **** 
 791              		.loc 1 759 18 is_stmt 0 view .LVU224
 792 0004 2C4B     		ldr	r3, .L49+8
 793 0006 1988     		ldrh	r1, [r3]
 794 0008 2C4B     		ldr	r3, .L49+12
 795 000a 1888     		ldrh	r0, [r3]
 796 000c FFF7FEFF 		bl	adc_average
 797              	.LVL26:
 759:Core/Src/main.c **** 
 798              		.loc 1 759 16 view .LVU225
 799 0010 2B4B     		ldr	r3, .L49+16
 800 0012 1880     		strh	r0, [r3]	@ movhi
 762:Core/Src/main.c ****   {
 801              		.loc 1 762 3 is_stmt 1 view .LVU226
 802 0014 2B4B     		ldr	r3, .L49+20
 803 0016 1B68     		ldr	r3, [r3]
 804 0018 012B     		cmp	r3, #1
 805 001a 30D0     		beq	.L40
 806 001c 022B     		cmp	r3, #2
 807 001e 3AD0     		beq	.L41
 808 0020 33B1     		cbz	r3, .L48
 779:Core/Src/main.c **** 
 809              		.loc 1 779 7 view .LVU227
 779:Core/Src/main.c **** 
 810              		.loc 1 779 17 is_stmt 0 view .LVU228
 811 0022 284B     		ldr	r3, .L49+20
 812 0024 0122     		movs	r2, #1
 813 0026 1A60     		str	r2, [r3]
 782:Core/Src/main.c ****     break;
 814              		.loc 1 782 7 is_stmt 1 view .LVU229
 782:Core/Src/main.c ****     break;
 815              		.loc 1 782 23 is_stmt 0 view .LVU230
 816 0028 274B     		ldr	r3, .L49+24
 817 002a 0022     		movs	r2, #0
 818 002c 1A80     		strh	r2, [r3]	@ movhi
 783:Core/Src/main.c ****   }
 819              		.loc 1 783 5 is_stmt 1 view .LVU231
ARM GAS  /tmp/ccmzXxfp.s 			page 34


 820 002e 0AE0     		b	.L43
 821              	.L48:
 765:Core/Src/main.c ****     break;
 822              		.loc 1 765 7 view .LVU232
 765:Core/Src/main.c ****     break;
 823              		.loc 1 765 25 is_stmt 0 view .LVU233
 824 0030 40F24C43 		movw	r3, #1100
 825 0034 0093     		str	r3, [sp]
 826 0036 0023     		movs	r3, #0
 827 0038 4FF41672 		mov	r2, #600
 828 003c 8021     		movs	r1, #128
 829 003e FFF7FEFF 		bl	mapValue
 830              	.LVL27:
 765:Core/Src/main.c ****     break;
 831              		.loc 1 765 23 view .LVU234
 832 0042 214B     		ldr	r3, .L49+24
 833 0044 1880     		strh	r0, [r3]	@ movhi
 766:Core/Src/main.c **** 
 834              		.loc 1 766 5 is_stmt 1 view .LVU235
 835              	.L43:
 787:Core/Src/main.c ****   {
 836              		.loc 1 787 3 view .LVU236
 787:Core/Src/main.c ****   {
 837              		.loc 1 787 8 is_stmt 0 view .LVU237
 838 0046 204B     		ldr	r3, .L49+24
 839 0048 1B88     		ldrh	r3, [r3]
 840 004a 07EE903A 		vmov	s15, r3	@ int
 841 004e F8EE677A 		vcvt.f32.u32	s15, s15
 787:Core/Src/main.c ****   {
 842              		.loc 1 787 31 view .LVU238
 843 0052 9FED1E7A 		vldr.32	s14, .L49+28
 844 0056 C7EE877A 		vdiv.f32	s15, s15, s14
 845 005a 17EE900A 		vmov	r0, s15
 846 005e FFF7FEFF 		bl	__aeabi_f2d
 847              	.LVL28:
 787:Core/Src/main.c ****   {
 848              		.loc 1 787 6 view .LVU239
 849 0062 13A3     		adr	r3, .L49
 850 0064 D3E90023 		ldrd	r2, [r3]
 851 0068 FFF7FEFF 		bl	__aeabi_dcmplt
 852              	.LVL29:
 853 006c 10B1     		cbz	r0, .L44
 789:Core/Src/main.c ****   }
 854              		.loc 1 789 5 is_stmt 1 view .LVU240
 789:Core/Src/main.c ****   }
 855              		.loc 1 789 21 is_stmt 0 view .LVU241
 856 006e 164B     		ldr	r3, .L49+24
 857 0070 0022     		movs	r2, #0
 858 0072 1A80     		strh	r2, [r3]	@ movhi
 859              	.L44:
 792:Core/Src/main.c **** }
 860              		.loc 1 792 3 is_stmt 1 view .LVU242
 793:Core/Src/main.c **** 
 861              		.loc 1 793 1 is_stmt 0 view .LVU243
 862 0074 144B     		ldr	r3, .L49+24
 863 0076 1888     		ldrh	r0, [r3]
 864 0078 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccmzXxfp.s 			page 35


 865              	.LCFI11:
 866              		.cfi_remember_state
 867              		.cfi_def_cfa_offset 4
 868              		@ sp needed
 869 007a 5DF804FB 		ldr	pc, [sp], #4
 870              	.L40:
 871              	.LCFI12:
 872              		.cfi_restore_state
 769:Core/Src/main.c ****     break;
 873              		.loc 1 769 7 is_stmt 1 view .LVU244
 769:Core/Src/main.c ****     break;
 874              		.loc 1 769 25 is_stmt 0 view .LVU245
 875 007e 40F27263 		movw	r3, #1650
 876 0082 0093     		str	r3, [sp]
 877 0084 0023     		movs	r3, #0
 878 0086 4FF41672 		mov	r2, #600
 879 008a 8021     		movs	r1, #128
 880 008c FFF7FEFF 		bl	mapValue
 881              	.LVL30:
 769:Core/Src/main.c ****     break;
 882              		.loc 1 769 23 view .LVU246
 883 0090 0D4B     		ldr	r3, .L49+24
 884 0092 1880     		strh	r0, [r3]	@ movhi
 770:Core/Src/main.c **** 
 885              		.loc 1 770 5 is_stmt 1 view .LVU247
 886 0094 D7E7     		b	.L43
 887              	.L41:
 773:Core/Src/main.c ****     break;
 888              		.loc 1 773 7 view .LVU248
 773:Core/Src/main.c ****     break;
 889              		.loc 1 773 25 is_stmt 0 view .LVU249
 890 0096 40F69803 		movw	r3, #2200
 891 009a 0093     		str	r3, [sp]
 892 009c 0023     		movs	r3, #0
 893 009e 4FF41672 		mov	r2, #600
 894 00a2 8021     		movs	r1, #128
 895 00a4 FFF7FEFF 		bl	mapValue
 896              	.LVL31:
 773:Core/Src/main.c ****     break;
 897              		.loc 1 773 23 view .LVU250
 898 00a8 074B     		ldr	r3, .L49+24
 899 00aa 1880     		strh	r0, [r3]	@ movhi
 774:Core/Src/main.c ****     
 900              		.loc 1 774 5 is_stmt 1 view .LVU251
 901 00ac CBE7     		b	.L43
 902              	.L50:
 903 00ae 00BF     		.align	3
 904              	.L49:
 905 00b0 9A999999 		.word	2576980378
 906 00b4 9999A93F 		.word	1068079513
 907 00b8 00000000 		.word	.LANCHOR10
 908 00bc 00000000 		.word	.LANCHOR9
 909 00c0 00000000 		.word	.LANCHOR11
 910 00c4 00000000 		.word	.LANCHOR12
 911 00c8 00000000 		.word	.LANCHOR13
 912 00cc 00800945 		.word	1158250496
 913              		.cfi_endproc
ARM GAS  /tmp/ccmzXxfp.s 			page 36


 914              	.LFE226:
 916              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 917              		.align	1
 918              		.global	HAL_TIM_PeriodElapsedCallback
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	HAL_TIM_PeriodElapsedCallback:
 925              	.LVL32:
 926              	.LFB229:
 856:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 927              		.loc 1 856 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 858:Core/Src/main.c ****   {
 931              		.loc 1 858 3 view .LVU253
 890:Core/Src/main.c ****   
 932              		.loc 1 890 3 view .LVU254
 893:Core/Src/main.c ****   {
 933              		.loc 1 893 3 view .LVU255
 893:Core/Src/main.c ****   {
 934              		.loc 1 893 6 is_stmt 0 view .LVU256
 935 0000 3C4B     		ldr	r3, .L64
 936 0002 8342     		cmp	r3, r0
 937 0004 00D0     		beq	.L62
 938 0006 7047     		bx	lr
 939              	.L62:
 856:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 940              		.loc 1 856 1 view .LVU257
 941 0008 10B5     		push	{r4, lr}
 942              	.LCFI13:
 943              		.cfi_def_cfa_offset 8
 944              		.cfi_offset 4, -8
 945              		.cfi_offset 14, -4
 897:Core/Src/main.c ****     
 946              		.loc 1 897 5 is_stmt 1 view .LVU258
 897:Core/Src/main.c ****     
 947              		.loc 1 897 23 is_stmt 0 view .LVU259
 948 000a FFF7FEFF 		bl	getCommandedTorque
 949              	.LVL33:
 897:Core/Src/main.c ****     
 950              		.loc 1 897 21 view .LVU260
 951 000e 3A4B     		ldr	r3, .L64+4
 952 0010 1880     		strh	r0, [r3]	@ movhi
 900:Core/Src/main.c ****     TxData[1] = commandedTorque >> 8;
 953              		.loc 1 900 5 is_stmt 1 view .LVU261
 900:Core/Src/main.c ****     TxData[1] = commandedTorque >> 8;
 954              		.loc 1 900 15 is_stmt 0 view .LVU262
 955 0012 3A4A     		ldr	r2, .L64+8
 956 0014 1070     		strb	r0, [r2]
 901:Core/Src/main.c ****     TxData[2] = 0;                        // speed command NOT USING
 957              		.loc 1 901 5 is_stmt 1 view .LVU263
 901:Core/Src/main.c ****     TxData[2] = 0;                        // speed command NOT USING
 958              		.loc 1 901 15 is_stmt 0 view .LVU264
 959 0016 000A     		lsrs	r0, r0, #8
ARM GAS  /tmp/ccmzXxfp.s 			page 37


 960 0018 5070     		strb	r0, [r2, #1]
 902:Core/Src/main.c ****     TxData[3] = 0;                        // speed command NOT USING
 961              		.loc 1 902 5 is_stmt 1 view .LVU265
 902:Core/Src/main.c ****     TxData[3] = 0;                        // speed command NOT USING
 962              		.loc 1 902 15 is_stmt 0 view .LVU266
 963 001a 0023     		movs	r3, #0
 964 001c 9370     		strb	r3, [r2, #2]
 903:Core/Src/main.c ****     TxData[4] = 0;                        // switch_direction is usually here, 0 is reverse (we run
 965              		.loc 1 903 5 is_stmt 1 view .LVU267
 903:Core/Src/main.c ****     TxData[4] = 0;                        // switch_direction is usually here, 0 is reverse (we run
 966              		.loc 1 903 15 is_stmt 0 view .LVU268
 967 001e D370     		strb	r3, [r2, #3]
 904:Core/Src/main.c ****     TxData[5] = enableInverter;
 968              		.loc 1 904 5 is_stmt 1 view .LVU269
 904:Core/Src/main.c ****     TxData[5] = enableInverter;
 969              		.loc 1 904 15 is_stmt 0 view .LVU270
 970 0020 1371     		strb	r3, [r2, #4]
 905:Core/Src/main.c ****     TxData[6] =  0x00;                    // this is the max  torque value that we are establishing
 971              		.loc 1 905 5 is_stmt 1 view .LVU271
 905:Core/Src/main.c ****     TxData[6] =  0x00;                    // this is the max  torque value that we are establishing
 972              		.loc 1 905 15 is_stmt 0 view .LVU272
 973 0022 3749     		ldr	r1, .L64+12
 974 0024 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 975 0026 5171     		strb	r1, [r2, #5]
 906:Core/Src/main.c ****     TxData[7] =  0x00;                    // HARDCODED AS 220, MAX VALUE ACCEPTED BY MOTOR is 230 
 976              		.loc 1 906 5 is_stmt 1 view .LVU273
 906:Core/Src/main.c ****     TxData[7] =  0x00;                    // HARDCODED AS 220, MAX VALUE ACCEPTED BY MOTOR is 230 
 977              		.loc 1 906 15 is_stmt 0 view .LVU274
 978 0028 9371     		strb	r3, [r2, #6]
 907:Core/Src/main.c **** 
 979              		.loc 1 907 5 is_stmt 1 view .LVU275
 907:Core/Src/main.c **** 
 980              		.loc 1 907 15 is_stmt 0 view .LVU276
 981 002a D371     		strb	r3, [r2, #7]
 910:Core/Src/main.c **** 
 982              		.loc 1 910 5 is_stmt 1 view .LVU277
 983 002c 354B     		ldr	r3, .L64+16
 984 002e 3649     		ldr	r1, .L64+20
 985 0030 3648     		ldr	r0, .L64+24
 986 0032 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 987              	.LVL34:
 912:Core/Src/main.c **** 
 988              		.loc 1 912 5 view .LVU278
 989 0036 FFF7FEFF 		bl	prechargeControl
 990              	.LVL35:
 915:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 991              		.loc 1 915 5 view .LVU279
 915:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 992              		.loc 1 915 22 is_stmt 0 view .LVU280
 993 003a 354C     		ldr	r4, .L64+28
 994 003c 4FF48051 		mov	r1, #4096
 995 0040 2046     		mov	r0, r4
 996 0042 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 997              	.LVL36:
 915:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 998              		.loc 1 915 20 view .LVU281
 999 0046 334B     		ldr	r3, .L64+32
ARM GAS  /tmp/ccmzXxfp.s 			page 38


 1000 0048 1870     		strb	r0, [r3]
 916:Core/Src/main.c **** 
 1001              		.loc 1 916 5 is_stmt 1 view .LVU282
 916:Core/Src/main.c **** 
 1002              		.loc 1 916 24 is_stmt 0 view .LVU283
 1003 004a 4FF40051 		mov	r1, #8192
 1004 004e 2046     		mov	r0, r4
 1005 0050 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1006              	.LVL37:
 916:Core/Src/main.c **** 
 1007              		.loc 1 916 22 view .LVU284
 1008 0054 304B     		ldr	r3, .L64+36
 1009 0056 1870     		strb	r0, [r3]
 919:Core/Src/main.c ****     {
 1010              		.loc 1 919 5 is_stmt 1 view .LVU285
 919:Core/Src/main.c ****     {
 1011              		.loc 1 919 9 is_stmt 0 view .LVU286
 1012 0058 304B     		ldr	r3, .L64+40
 1013 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 919:Core/Src/main.c ****     {
 1014              		.loc 1 919 8 view .LVU287
 1015 005c 63B3     		cbz	r3, .L53
 921:Core/Src/main.c ****     }
 1016              		.loc 1 921 7 is_stmt 1 view .LVU288
 1017 005e 0122     		movs	r2, #1
 1018 0060 4FF48061 		mov	r1, #1024
 1019 0064 2046     		mov	r0, r4
 1020 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1021              	.LVL38:
 1022              	.L54:
 930:Core/Src/main.c ****       buzzerCounter++;
 1023              		.loc 1 930 5 view .LVU289
 930:Core/Src/main.c ****       buzzerCounter++;
 1024              		.loc 1 930 21 is_stmt 0 view .LVU290
 1025 006a 2D4B     		ldr	r3, .L64+44
 1026 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 930:Core/Src/main.c ****       buzzerCounter++;
 1027              		.loc 1 930 8 view .LVU291
 1028 006e 012B     		cmp	r3, #1
 1029 0070 2CD0     		beq	.L63
 1030              	.L55:
 941:Core/Src/main.c ****     if (brakeAverage >= BRAKE_LIGHT_THRESHOLD)
 1031              		.loc 1 941 5 is_stmt 1 view .LVU292
 941:Core/Src/main.c ****     if (brakeAverage >= BRAKE_LIGHT_THRESHOLD)
 1032              		.loc 1 941 20 is_stmt 0 view .LVU293
 1033 0072 2C4B     		ldr	r3, .L64+48
 1034 0074 1988     		ldrh	r1, [r3]
 1035 0076 2C4B     		ldr	r3, .L64+52
 1036 0078 1888     		ldrh	r0, [r3]
 1037 007a FFF7FEFF 		bl	adc_average
 1038              	.LVL39:
 941:Core/Src/main.c ****     if (brakeAverage >= BRAKE_LIGHT_THRESHOLD)
 1039              		.loc 1 941 18 view .LVU294
 1040 007e 2B4B     		ldr	r3, .L64+56
 1041 0080 1880     		strh	r0, [r3]	@ movhi
 942:Core/Src/main.c ****     {
 1042              		.loc 1 942 5 is_stmt 1 view .LVU295
ARM GAS  /tmp/ccmzXxfp.s 			page 39


 942:Core/Src/main.c ****     {
 1043              		.loc 1 942 8 is_stmt 0 view .LVU296
 1044 0082 0928     		cmp	r0, #9
 1045 0084 32D9     		bls	.L56
 944:Core/Src/main.c ****     }
 1046              		.loc 1 944 7 is_stmt 1 view .LVU297
 944:Core/Src/main.c ****     }
 1047              		.loc 1 944 18 is_stmt 0 view .LVU298
 1048 0086 2A4B     		ldr	r3, .L64+60
 1049 0088 0122     		movs	r2, #1
 1050 008a 1A70     		strb	r2, [r3]
 1051              	.L57:
 967:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, bmsFault);
 1052              		.loc 1 967 5 is_stmt 1 view .LVU299
 1053 008c 204C     		ldr	r4, .L64+28
 1054 008e 294B     		ldr	r3, .L64+64
 1055 0090 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1056 0092 0421     		movs	r1, #4
 1057 0094 2046     		mov	r0, r4
 1058 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1059              	.LVL40:
 968:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, buzzerState);
 1060              		.loc 1 968 5 view .LVU300
 1061 009a 274B     		ldr	r3, .L64+68
 1062 009c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1063 009e 4FF48061 		mov	r1, #1024
 1064 00a2 2648     		ldr	r0, .L64+72
 1065 00a4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1066              	.LVL41:
 969:Core/Src/main.c ****   }
 1067              		.loc 1 969 5 view .LVU301
 1068 00a8 1D4B     		ldr	r3, .L64+44
 1069 00aa 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1070 00ac 4FF48071 		mov	r1, #256
 1071 00b0 2046     		mov	r0, r4
 1072 00b2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1073              	.LVL42:
 971:Core/Src/main.c **** 
 1074              		.loc 1 971 1 is_stmt 0 view .LVU302
 1075 00b6 10BD     		pop	{r4, pc}
 1076              	.L53:
 925:Core/Src/main.c ****       enableInverter = 0;                                       // disable inverter
 1077              		.loc 1 925 7 is_stmt 1 view .LVU303
 1078 00b8 0022     		movs	r2, #0
 1079 00ba 4FF48061 		mov	r1, #1024
 1080 00be 1448     		ldr	r0, .L64+28
 1081 00c0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1082              	.LVL43:
 926:Core/Src/main.c ****     }
 1083              		.loc 1 926 7 view .LVU304
 926:Core/Src/main.c ****     }
 1084              		.loc 1 926 22 is_stmt 0 view .LVU305
 1085 00c4 0E4B     		ldr	r3, .L64+12
 1086 00c6 0022     		movs	r2, #0
 1087 00c8 1A70     		strb	r2, [r3]
 1088 00ca CEE7     		b	.L54
 1089              	.L63:
ARM GAS  /tmp/ccmzXxfp.s 			page 40


 931:Core/Src/main.c ****       if (buzzerCounter >= 100)    // buzzerCounter is being updated on a 50Hz interval, so after 2
 1090              		.loc 1 931 7 is_stmt 1 view .LVU306
 931:Core/Src/main.c ****       if (buzzerCounter >= 100)    // buzzerCounter is being updated on a 50Hz interval, so after 2
 1091              		.loc 1 931 20 is_stmt 0 view .LVU307
 1092 00cc 1C4A     		ldr	r2, .L64+76
 1093 00ce 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1094 00d0 0133     		adds	r3, r3, #1
 1095 00d2 DBB2     		uxtb	r3, r3
 1096 00d4 1370     		strb	r3, [r2]
 932:Core/Src/main.c ****       {
 1097              		.loc 1 932 7 is_stmt 1 view .LVU308
 932:Core/Src/main.c ****       {
 1098              		.loc 1 932 10 is_stmt 0 view .LVU309
 1099 00d6 632B     		cmp	r3, #99
 1100 00d8 CBD9     		bls	.L55
 934:Core/Src/main.c ****         buzzerCounter = 0;
 1101              		.loc 1 934 9 is_stmt 1 view .LVU310
 934:Core/Src/main.c ****         buzzerCounter = 0;
 1102              		.loc 1 934 21 is_stmt 0 view .LVU311
 1103 00da 0023     		movs	r3, #0
 1104 00dc 104A     		ldr	r2, .L64+44
 1105 00de 1370     		strb	r3, [r2]
 935:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 1106              		.loc 1 935 9 is_stmt 1 view .LVU312
 935:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 1107              		.loc 1 935 23 is_stmt 0 view .LVU313
 1108 00e0 174A     		ldr	r2, .L64+76
 1109 00e2 1370     		strb	r3, [r2]
 936:Core/Src/main.c ****       }
 1110              		.loc 1 936 9 is_stmt 1 view .LVU314
 936:Core/Src/main.c ****       }
 1111              		.loc 1 936 24 is_stmt 0 view .LVU315
 1112 00e4 064B     		ldr	r3, .L64+12
 1113 00e6 0122     		movs	r2, #1
 1114 00e8 1A70     		strb	r2, [r3]
 1115 00ea C2E7     		b	.L55
 1116              	.L56:
 949:Core/Src/main.c ****     }
 1117              		.loc 1 949 7 is_stmt 1 view .LVU316
 949:Core/Src/main.c ****     }
 1118              		.loc 1 949 18 is_stmt 0 view .LVU317
 1119 00ec 104B     		ldr	r3, .L64+60
 1120 00ee 0022     		movs	r2, #0
 1121 00f0 1A70     		strb	r2, [r3]
 1122 00f2 CBE7     		b	.L57
 1123              	.L65:
 1124              		.align	2
 1125              	.L64:
 1126 00f4 00000000 		.word	htim14
 1127 00f8 00000000 		.word	.LANCHOR13
 1128 00fc 00000000 		.word	TxData
 1129 0100 00000000 		.word	.LANCHOR14
 1130 0104 00000000 		.word	TxMailbox
 1131 0108 00000000 		.word	TxHeader2
 1132 010c 00000000 		.word	hcan1
 1133 0110 00040240 		.word	1073873920
 1134 0114 00000000 		.word	.LANCHOR15
ARM GAS  /tmp/ccmzXxfp.s 			page 41


 1135 0118 00000000 		.word	.LANCHOR16
 1136 011c 00000000 		.word	.LANCHOR1
 1137 0120 00000000 		.word	.LANCHOR6
 1138 0124 00000000 		.word	.LANCHOR8
 1139 0128 00000000 		.word	.LANCHOR7
 1140 012c 00000000 		.word	.LANCHOR18
 1141 0130 00000000 		.word	.LANCHOR19
 1142 0134 00000000 		.word	.LANCHOR20
 1143 0138 00000000 		.word	.LANCHOR21
 1144 013c 00000240 		.word	1073872896
 1145 0140 00000000 		.word	.LANCHOR17
 1146              		.cfi_endproc
 1147              	.LFE229:
 1149              		.section	.text.Error_Handler,"ax",%progbits
 1150              		.align	1
 1151              		.global	Error_Handler
 1152              		.syntax unified
 1153              		.thumb
 1154              		.thumb_func
 1155              		.fpu fpv4-sp-d16
 1157              	Error_Handler:
 1158              	.LFB232:
 995:Core/Src/main.c **** 
 996:Core/Src/main.c **** /* USER CODE END 4 */
 997:Core/Src/main.c **** 
 998:Core/Src/main.c **** /**
 999:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
1000:Core/Src/main.c ****   * @retval None
1001:Core/Src/main.c ****   */
1002:Core/Src/main.c **** void Error_Handler(void)
1003:Core/Src/main.c **** {
 1159              		.loc 1 1003 1 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ Volatile: function does not return.
 1162              		@ args = 0, pretend = 0, frame = 0
 1163              		@ frame_needed = 0, uses_anonymous_args = 0
 1164              		@ link register save eliminated.
1004:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
1005:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
1006:Core/Src/main.c ****   __disable_irq();
 1165              		.loc 1 1006 3 view .LVU319
 1166              	.LBB8:
 1167              	.LBI8:
 1168              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
ARM GAS  /tmp/ccmzXxfp.s 			page 42


  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
ARM GAS  /tmp/ccmzXxfp.s 			page 43


  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  /tmp/ccmzXxfp.s 			page 44


 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1169              		.loc 2 140 27 view .LVU320
 1170              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1171              		.loc 2 142 3 view .LVU321
 1172              		.syntax unified
 1173              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1174 0000 72B6     		cpsid i
 1175              	@ 0 "" 2
 1176              		.thumb
 1177              		.syntax unified
 1178              	.L67:
 1179              	.LBE9:
 1180              	.LBE8:
1007:Core/Src/main.c ****   while (1)
 1181              		.loc 1 1007 3 discriminator 1 view .LVU322
1008:Core/Src/main.c ****   {
1009:Core/Src/main.c ****   }
 1182              		.loc 1 1009 3 discriminator 1 view .LVU323
1007:Core/Src/main.c ****   while (1)
 1183              		.loc 1 1007 9 discriminator 1 view .LVU324
 1184 0002 FEE7     		b	.L67
 1185              		.cfi_endproc
 1186              	.LFE232:
 1188              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1189              		.align	1
 1190              		.syntax unified
 1191              		.thumb
 1192              		.thumb_func
 1193              		.fpu fpv4-sp-d16
 1195              	MX_CAN1_Init:
 1196              	.LFB219:
 367:Core/Src/main.c **** 
 1197              		.loc 1 367 1 view -0
 1198              		.cfi_startproc
 1199              		@ args = 0, pretend = 0, frame = 0
 1200              		@ frame_needed = 0, uses_anonymous_args = 0
 1201 0000 70B5     		push	{r4, r5, r6, lr}
 1202              	.LCFI14:
 1203              		.cfi_def_cfa_offset 16
 1204              		.cfi_offset 4, -16
 1205              		.cfi_offset 5, -12
 1206              		.cfi_offset 6, -8
 1207              		.cfi_offset 14, -4
ARM GAS  /tmp/ccmzXxfp.s 			page 45


 376:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 1208              		.loc 1 376 3 view .LVU326
 376:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 1209              		.loc 1 376 18 is_stmt 0 view .LVU327
 1210 0002 2F48     		ldr	r0, .L72
 1211 0004 2F4B     		ldr	r3, .L72+4
 1212 0006 0360     		str	r3, [r0]
 377:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 1213              		.loc 1 377 3 is_stmt 1 view .LVU328
 377:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 1214              		.loc 1 377 24 is_stmt 0 view .LVU329
 1215 0008 1223     		movs	r3, #18
 1216 000a 4360     		str	r3, [r0, #4]
 378:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1217              		.loc 1 378 3 is_stmt 1 view .LVU330
 378:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1218              		.loc 1 378 19 is_stmt 0 view .LVU331
 1219 000c 0023     		movs	r3, #0
 1220 000e 8360     		str	r3, [r0, #8]
 379:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 1221              		.loc 1 379 3 is_stmt 1 view .LVU332
 379:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 1222              		.loc 1 379 28 is_stmt 0 view .LVU333
 1223 0010 C360     		str	r3, [r0, #12]
 380:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 1224              		.loc 1 380 3 is_stmt 1 view .LVU334
 380:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 1225              		.loc 1 380 23 is_stmt 0 view .LVU335
 1226 0012 4FF40032 		mov	r2, #131072
 1227 0016 0261     		str	r2, [r0, #16]
 381:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1228              		.loc 1 381 3 is_stmt 1 view .LVU336
 381:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1229              		.loc 1 381 23 is_stmt 0 view .LVU337
 1230 0018 4361     		str	r3, [r0, #20]
 382:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 1231              		.loc 1 382 3 is_stmt 1 view .LVU338
 382:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 1232              		.loc 1 382 32 is_stmt 0 view .LVU339
 1233 001a 0376     		strb	r3, [r0, #24]
 383:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 1234              		.loc 1 383 3 is_stmt 1 view .LVU340
 383:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 1235              		.loc 1 383 25 is_stmt 0 view .LVU341
 1236 001c 0122     		movs	r2, #1
 1237 001e 4276     		strb	r2, [r0, #25]
 384:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 1238              		.loc 1 384 3 is_stmt 1 view .LVU342
 384:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 1239              		.loc 1 384 25 is_stmt 0 view .LVU343
 1240 0020 8376     		strb	r3, [r0, #26]
 385:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 1241              		.loc 1 385 3 is_stmt 1 view .LVU344
 385:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 1242              		.loc 1 385 33 is_stmt 0 view .LVU345
 1243 0022 C376     		strb	r3, [r0, #27]
 386:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
ARM GAS  /tmp/ccmzXxfp.s 			page 46


 1244              		.loc 1 386 3 is_stmt 1 view .LVU346
 386:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 1245              		.loc 1 386 32 is_stmt 0 view .LVU347
 1246 0024 0377     		strb	r3, [r0, #28]
 387:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1247              		.loc 1 387 3 is_stmt 1 view .LVU348
 387:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1248              		.loc 1 387 35 is_stmt 0 view .LVU349
 1249 0026 4377     		strb	r3, [r0, #29]
 388:Core/Src/main.c ****   {
 1250              		.loc 1 388 3 is_stmt 1 view .LVU350
 388:Core/Src/main.c ****   {
 1251              		.loc 1 388 7 is_stmt 0 view .LVU351
 1252 0028 FFF7FEFF 		bl	HAL_CAN_Init
 1253              	.LVL44:
 388:Core/Src/main.c ****   {
 1254              		.loc 1 388 6 view .LVU352
 1255 002c 0028     		cmp	r0, #0
 1256 002e 44D1     		bne	.L71
 395:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 1257              		.loc 1 395 3 is_stmt 1 view .LVU353
 395:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 1258              		.loc 1 395 24 is_stmt 0 view .LVU354
 1259 0030 2549     		ldr	r1, .L72+8
 1260 0032 4FF48253 		mov	r3, #4160
 1261 0036 0B60     		str	r3, [r1]
 396:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 1262              		.loc 1 396 3 is_stmt 1 view .LVU355
 396:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 1263              		.loc 1 396 23 is_stmt 0 view .LVU356
 1264 0038 0024     		movs	r4, #0
 1265 003a 4C60     		str	r4, [r1, #4]
 397:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 1266              		.loc 1 397 3 is_stmt 1 view .LVU357
 397:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 1267              		.loc 1 397 28 is_stmt 0 view .LVU358
 1268 003c 8B60     		str	r3, [r1, #8]
 398:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 1269              		.loc 1 398 3 is_stmt 1 view .LVU359
 398:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 1270              		.loc 1 398 27 is_stmt 0 view .LVU360
 1271 003e CC60     		str	r4, [r1, #12]
 399:Core/Src/main.c ****   filter0.FilterBank = 1;
 1272              		.loc 1 399 3 is_stmt 1 view .LVU361
 399:Core/Src/main.c ****   filter0.FilterBank = 1;
 1273              		.loc 1 399 32 is_stmt 0 view .LVU362
 1274 0040 0C61     		str	r4, [r1, #16]
 400:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 1275              		.loc 1 400 3 is_stmt 1 view .LVU363
 400:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 1276              		.loc 1 400 22 is_stmt 0 view .LVU364
 1277 0042 0125     		movs	r5, #1
 1278 0044 4D61     		str	r5, [r1, #20]
 401:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 1279              		.loc 1 401 3 is_stmt 1 view .LVU365
 401:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 1280              		.loc 1 401 22 is_stmt 0 view .LVU366
ARM GAS  /tmp/ccmzXxfp.s 			page 47


 1281 0046 8C61     		str	r4, [r1, #24]
 402:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 1282              		.loc 1 402 3 is_stmt 1 view .LVU367
 402:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 1283              		.loc 1 402 23 is_stmt 0 view .LVU368
 1284 0048 CD61     		str	r5, [r1, #28]
 403:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 1285              		.loc 1 403 3 is_stmt 1 view .LVU369
 403:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 1286              		.loc 1 403 28 is_stmt 0 view .LVU370
 1287 004a 0D62     		str	r5, [r1, #32]
 404:Core/Src/main.c **** 
 1288              		.loc 1 404 3 is_stmt 1 view .LVU371
 404:Core/Src/main.c **** 
 1289              		.loc 1 404 32 is_stmt 0 view .LVU372
 1290 004c 4C62     		str	r4, [r1, #36]
 406:Core/Src/main.c **** 
 1291              		.loc 1 406 3 is_stmt 1 view .LVU373
 1292 004e 1C4E     		ldr	r6, .L72
 1293 0050 3046     		mov	r0, r6
 1294 0052 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1295              	.LVL45:
 409:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 1296              		.loc 1 409 3 view .LVU374
 409:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 1297              		.loc 1 409 24 is_stmt 0 view .LVU375
 1298 0056 1D49     		ldr	r1, .L72+12
 1299 0058 4FF4A753 		mov	r3, #5344
 1300 005c 0B60     		str	r3, [r1]
 410:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x0A7 << 5;
 1301              		.loc 1 410 3 is_stmt 1 view .LVU376
 410:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x0A7 << 5;
 1302              		.loc 1 410 23 is_stmt 0 view .LVU377
 1303 005e 4C60     		str	r4, [r1, #4]
 411:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 1304              		.loc 1 411 3 is_stmt 1 view .LVU378
 411:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 1305              		.loc 1 411 28 is_stmt 0 view .LVU379
 1306 0060 8B60     		str	r3, [r1, #8]
 412:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 1307              		.loc 1 412 3 is_stmt 1 view .LVU380
 412:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 1308              		.loc 1 412 27 is_stmt 0 view .LVU381
 1309 0062 CC60     		str	r4, [r1, #12]
 413:Core/Src/main.c ****   filter1.FilterBank = 2;
 1310              		.loc 1 413 3 is_stmt 1 view .LVU382
 413:Core/Src/main.c ****   filter1.FilterBank = 2;
 1311              		.loc 1 413 32 is_stmt 0 view .LVU383
 1312 0064 0C61     		str	r4, [r1, #16]
 414:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 1313              		.loc 1 414 3 is_stmt 1 view .LVU384
 414:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 1314              		.loc 1 414 22 is_stmt 0 view .LVU385
 1315 0066 0223     		movs	r3, #2
 1316 0068 4B61     		str	r3, [r1, #20]
 415:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 1317              		.loc 1 415 3 is_stmt 1 view .LVU386
ARM GAS  /tmp/ccmzXxfp.s 			page 48


 415:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 1318              		.loc 1 415 22 is_stmt 0 view .LVU387
 1319 006a 8C61     		str	r4, [r1, #24]
 416:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 1320              		.loc 1 416 3 is_stmt 1 view .LVU388
 416:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 1321              		.loc 1 416 23 is_stmt 0 view .LVU389
 1322 006c CD61     		str	r5, [r1, #28]
 417:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 1323              		.loc 1 417 3 is_stmt 1 view .LVU390
 417:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 1324              		.loc 1 417 28 is_stmt 0 view .LVU391
 1325 006e 0D62     		str	r5, [r1, #32]
 418:Core/Src/main.c **** 
 1326              		.loc 1 418 3 is_stmt 1 view .LVU392
 418:Core/Src/main.c **** 
 1327              		.loc 1 418 32 is_stmt 0 view .LVU393
 1328 0070 4C62     		str	r4, [r1, #36]
 420:Core/Src/main.c **** 
 1329              		.loc 1 420 3 is_stmt 1 view .LVU394
 1330 0072 3046     		mov	r0, r6
 1331 0074 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1332              	.LVL46:
 423:Core/Src/main.c ****   canFilter2.FilterIdLow = 0x000;
 1333              		.loc 1 423 3 view .LVU395
 423:Core/Src/main.c ****   canFilter2.FilterIdLow = 0x000;
 1334              		.loc 1 423 27 is_stmt 0 view .LVU396
 1335 0078 1549     		ldr	r1, .L72+16
 1336 007a 4FF4C253 		mov	r3, #6208
 1337 007e 0B60     		str	r3, [r1]
 424:Core/Src/main.c ****   canFilter2.FilterMaskIdHigh = 0x0C2 << 5;
 1338              		.loc 1 424 3 is_stmt 1 view .LVU397
 424:Core/Src/main.c ****   canFilter2.FilterMaskIdHigh = 0x0C2 << 5;
 1339              		.loc 1 424 26 is_stmt 0 view .LVU398
 1340 0080 4C60     		str	r4, [r1, #4]
 425:Core/Src/main.c ****   canFilter2.FilterMaskIdLow = 0x000;
 1341              		.loc 1 425 3 is_stmt 1 view .LVU399
 425:Core/Src/main.c ****   canFilter2.FilterMaskIdLow = 0x000;
 1342              		.loc 1 425 31 is_stmt 0 view .LVU400
 1343 0082 8B60     		str	r3, [r1, #8]
 426:Core/Src/main.c ****   canFilter2.FilterBank = 3;
 1344              		.loc 1 426 3 is_stmt 1 view .LVU401
 426:Core/Src/main.c ****   canFilter2.FilterBank = 3;
 1345              		.loc 1 426 30 is_stmt 0 view .LVU402
 1346 0084 CC60     		str	r4, [r1, #12]
 427:Core/Src/main.c ****   canFilter2.FilterMode = CAN_FILTERMODE_IDMASK;
 1347              		.loc 1 427 3 is_stmt 1 view .LVU403
 427:Core/Src/main.c ****   canFilter2.FilterMode = CAN_FILTERMODE_IDMASK;
 1348              		.loc 1 427 25 is_stmt 0 view .LVU404
 1349 0086 0323     		movs	r3, #3
 1350 0088 4B61     		str	r3, [r1, #20]
 428:Core/Src/main.c ****   canFilter2.FilterFIFOAssignment = CAN_RX_FIFO0;
 1351              		.loc 1 428 3 is_stmt 1 view .LVU405
 428:Core/Src/main.c ****   canFilter2.FilterFIFOAssignment = CAN_RX_FIFO0;
 1352              		.loc 1 428 25 is_stmt 0 view .LVU406
 1353 008a 8C61     		str	r4, [r1, #24]
 429:Core/Src/main.c ****   canFilter2.FilterScale = CAN_FILTERSCALE_32BIT;
ARM GAS  /tmp/ccmzXxfp.s 			page 49


 1354              		.loc 1 429 3 is_stmt 1 view .LVU407
 429:Core/Src/main.c ****   canFilter2.FilterScale = CAN_FILTERSCALE_32BIT;
 1355              		.loc 1 429 35 is_stmt 0 view .LVU408
 1356 008c 0C61     		str	r4, [r1, #16]
 430:Core/Src/main.c ****   canFilter2.FilterActivation = ENABLE;
 1357              		.loc 1 430 3 is_stmt 1 view .LVU409
 430:Core/Src/main.c ****   canFilter2.FilterActivation = ENABLE;
 1358              		.loc 1 430 26 is_stmt 0 view .LVU410
 1359 008e CD61     		str	r5, [r1, #28]
 431:Core/Src/main.c **** 
 1360              		.loc 1 431 3 is_stmt 1 view .LVU411
 431:Core/Src/main.c **** 
 1361              		.loc 1 431 31 is_stmt 0 view .LVU412
 1362 0090 0D62     		str	r5, [r1, #32]
 433:Core/Src/main.c **** 
 1363              		.loc 1 433 1 is_stmt 1 view .LVU413
 1364 0092 3046     		mov	r0, r6
 1365 0094 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1366              	.LVL47:
 436:Core/Src/main.c ****   	canFilter0.FilterIdLow = 0x000;
 1367              		.loc 1 436 5 view .LVU414
 436:Core/Src/main.c ****   	canFilter0.FilterIdLow = 0x000;
 1368              		.loc 1 436 29 is_stmt 0 view .LVU415
 1369 0098 0E49     		ldr	r1, .L72+20
 1370 009a 4FF45643 		mov	r3, #54784
 1371 009e 0B60     		str	r3, [r1]
 437:Core/Src/main.c ****     canFilter0.FilterMaskIdHigh = 0x6B0 << 5;
 1372              		.loc 1 437 4 is_stmt 1 view .LVU416
 437:Core/Src/main.c ****     canFilter0.FilterMaskIdHigh = 0x6B0 << 5;
 1373              		.loc 1 437 27 is_stmt 0 view .LVU417
 1374 00a0 4C60     		str	r4, [r1, #4]
 438:Core/Src/main.c ****   	canFilter0.FilterMaskIdLow = 0x000;
 1375              		.loc 1 438 5 is_stmt 1 view .LVU418
 438:Core/Src/main.c ****   	canFilter0.FilterMaskIdLow = 0x000;
 1376              		.loc 1 438 33 is_stmt 0 view .LVU419
 1377 00a2 8B60     		str	r3, [r1, #8]
 439:Core/Src/main.c ****     canFilter0.FilterBank = 4;
 1378              		.loc 1 439 4 is_stmt 1 view .LVU420
 439:Core/Src/main.c ****     canFilter0.FilterBank = 4;
 1379              		.loc 1 439 31 is_stmt 0 view .LVU421
 1380 00a4 CC60     		str	r4, [r1, #12]
 440:Core/Src/main.c ****   	canFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 1381              		.loc 1 440 5 is_stmt 1 view .LVU422
 440:Core/Src/main.c ****   	canFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 1382              		.loc 1 440 27 is_stmt 0 view .LVU423
 1383 00a6 0423     		movs	r3, #4
 1384 00a8 4B61     		str	r3, [r1, #20]
 441:Core/Src/main.c ****   	canFilter0.FilterFIFOAssignment = CAN_RX_FIFO0;
 1385              		.loc 1 441 4 is_stmt 1 view .LVU424
 441:Core/Src/main.c ****   	canFilter0.FilterFIFOAssignment = CAN_RX_FIFO0;
 1386              		.loc 1 441 26 is_stmt 0 view .LVU425
 1387 00aa 8C61     		str	r4, [r1, #24]
 442:Core/Src/main.c ****   	canFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 1388              		.loc 1 442 4 is_stmt 1 view .LVU426
 442:Core/Src/main.c ****   	canFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 1389              		.loc 1 442 36 is_stmt 0 view .LVU427
 1390 00ac 0C61     		str	r4, [r1, #16]
ARM GAS  /tmp/ccmzXxfp.s 			page 50


 443:Core/Src/main.c ****   	canFilter0.FilterActivation = ENABLE;
 1391              		.loc 1 443 4 is_stmt 1 view .LVU428
 443:Core/Src/main.c ****   	canFilter0.FilterActivation = ENABLE;
 1392              		.loc 1 443 27 is_stmt 0 view .LVU429
 1393 00ae CD61     		str	r5, [r1, #28]
 444:Core/Src/main.c **** 
 1394              		.loc 1 444 4 is_stmt 1 view .LVU430
 444:Core/Src/main.c **** 
 1395              		.loc 1 444 32 is_stmt 0 view .LVU431
 1396 00b0 0D62     		str	r5, [r1, #32]
 446:Core/Src/main.c **** 
 1397              		.loc 1 446 5 is_stmt 1 view .LVU432
 1398 00b2 3046     		mov	r0, r6
 1399 00b4 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1400              	.LVL48:
 450:Core/Src/main.c **** 
 1401              		.loc 1 450 1 is_stmt 0 view .LVU433
 1402 00b8 70BD     		pop	{r4, r5, r6, pc}
 1403              	.L71:
 390:Core/Src/main.c ****   }
 1404              		.loc 1 390 5 is_stmt 1 view .LVU434
 1405 00ba FFF7FEFF 		bl	Error_Handler
 1406              	.LVL49:
 1407              	.L73:
 1408 00be 00BF     		.align	2
 1409              	.L72:
 1410 00c0 00000000 		.word	hcan1
 1411 00c4 00640040 		.word	1073767424
 1412 00c8 00000000 		.word	filter0
 1413 00cc 00000000 		.word	filter1
 1414 00d0 00000000 		.word	canFilter2
 1415 00d4 00000000 		.word	canFilter0
 1416              		.cfi_endproc
 1417              	.LFE219:
 1419              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1420              		.align	1
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1424              		.fpu fpv4-sp-d16
 1426              	MX_ADC1_Init:
 1427              	.LFB218:
 293:Core/Src/main.c **** 
 1428              		.loc 1 293 1 view -0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 16
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432 0000 00B5     		push	{lr}
 1433              	.LCFI15:
 1434              		.cfi_def_cfa_offset 4
 1435              		.cfi_offset 14, -4
 1436 0002 85B0     		sub	sp, sp, #20
 1437              	.LCFI16:
 1438              		.cfi_def_cfa_offset 24
 299:Core/Src/main.c **** 
 1439              		.loc 1 299 3 view .LVU436
 299:Core/Src/main.c **** 
ARM GAS  /tmp/ccmzXxfp.s 			page 51


 1440              		.loc 1 299 26 is_stmt 0 view .LVU437
 1441 0004 0023     		movs	r3, #0
 1442 0006 0093     		str	r3, [sp]
 1443 0008 0193     		str	r3, [sp, #4]
 1444 000a 0293     		str	r3, [sp, #8]
 1445 000c 0393     		str	r3, [sp, #12]
 306:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1446              		.loc 1 306 3 is_stmt 1 view .LVU438
 306:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1447              		.loc 1 306 18 is_stmt 0 view .LVU439
 1448 000e 2548     		ldr	r0, .L86
 1449 0010 254A     		ldr	r2, .L86+4
 1450 0012 0260     		str	r2, [r0]
 307:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1451              		.loc 1 307 3 is_stmt 1 view .LVU440
 307:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1452              		.loc 1 307 29 is_stmt 0 view .LVU441
 1453 0014 4FF48032 		mov	r2, #65536
 1454 0018 4260     		str	r2, [r0, #4]
 308:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1455              		.loc 1 308 3 is_stmt 1 view .LVU442
 308:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1456              		.loc 1 308 25 is_stmt 0 view .LVU443
 1457 001a 8360     		str	r3, [r0, #8]
 309:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1458              		.loc 1 309 3 is_stmt 1 view .LVU444
 309:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1459              		.loc 1 309 27 is_stmt 0 view .LVU445
 1460 001c 0122     		movs	r2, #1
 1461 001e 0261     		str	r2, [r0, #16]
 310:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1462              		.loc 1 310 3 is_stmt 1 view .LVU446
 310:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1463              		.loc 1 310 33 is_stmt 0 view .LVU447
 1464 0020 0276     		strb	r2, [r0, #24]
 311:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1465              		.loc 1 311 3 is_stmt 1 view .LVU448
 311:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1466              		.loc 1 311 36 is_stmt 0 view .LVU449
 1467 0022 80F82030 		strb	r3, [r0, #32]
 312:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1468              		.loc 1 312 3 is_stmt 1 view .LVU450
 312:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1469              		.loc 1 312 35 is_stmt 0 view .LVU451
 1470 0026 C362     		str	r3, [r0, #44]
 313:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1471              		.loc 1 313 3 is_stmt 1 view .LVU452
 313:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1472              		.loc 1 313 31 is_stmt 0 view .LVU453
 1473 0028 2049     		ldr	r1, .L86+8
 1474 002a 8162     		str	r1, [r0, #40]
 314:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1475              		.loc 1 314 3 is_stmt 1 view .LVU454
 314:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1476              		.loc 1 314 24 is_stmt 0 view .LVU455
 1477 002c C360     		str	r3, [r0, #12]
 315:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
ARM GAS  /tmp/ccmzXxfp.s 			page 52


 1478              		.loc 1 315 3 is_stmt 1 view .LVU456
 315:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1479              		.loc 1 315 30 is_stmt 0 view .LVU457
 1480 002e 0423     		movs	r3, #4
 1481 0030 C361     		str	r3, [r0, #28]
 316:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1482              		.loc 1 316 3 is_stmt 1 view .LVU458
 316:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1483              		.loc 1 316 36 is_stmt 0 view .LVU459
 1484 0032 80F83020 		strb	r2, [r0, #48]
 317:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1485              		.loc 1 317 3 is_stmt 1 view .LVU460
 317:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1486              		.loc 1 317 27 is_stmt 0 view .LVU461
 1487 0036 4261     		str	r2, [r0, #20]
 318:Core/Src/main.c ****   {
 1488              		.loc 1 318 3 is_stmt 1 view .LVU462
 318:Core/Src/main.c ****   {
 1489              		.loc 1 318 7 is_stmt 0 view .LVU463
 1490 0038 FFF7FEFF 		bl	HAL_ADC_Init
 1491              	.LVL50:
 318:Core/Src/main.c ****   {
 1492              		.loc 1 318 6 view .LVU464
 1493 003c 40BB     		cbnz	r0, .L81
 324:Core/Src/main.c ****   sConfig.Rank = 1;
 1494              		.loc 1 324 3 is_stmt 1 view .LVU465
 324:Core/Src/main.c ****   sConfig.Rank = 1;
 1495              		.loc 1 324 19 is_stmt 0 view .LVU466
 1496 003e 0423     		movs	r3, #4
 1497 0040 0093     		str	r3, [sp]
 325:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1498              		.loc 1 325 3 is_stmt 1 view .LVU467
 325:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1499              		.loc 1 325 16 is_stmt 0 view .LVU468
 1500 0042 0123     		movs	r3, #1
 1501 0044 0193     		str	r3, [sp, #4]
 326:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1502              		.loc 1 326 3 is_stmt 1 view .LVU469
 326:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1503              		.loc 1 326 24 is_stmt 0 view .LVU470
 1504 0046 0023     		movs	r3, #0
 1505 0048 0293     		str	r3, [sp, #8]
 327:Core/Src/main.c ****   {
 1506              		.loc 1 327 3 is_stmt 1 view .LVU471
 327:Core/Src/main.c ****   {
 1507              		.loc 1 327 7 is_stmt 0 view .LVU472
 1508 004a 6946     		mov	r1, sp
 1509 004c 1548     		ldr	r0, .L86
 1510 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1511              	.LVL51:
 327:Core/Src/main.c ****   {
 1512              		.loc 1 327 6 view .LVU473
 1513 0052 F8B9     		cbnz	r0, .L82
 333:Core/Src/main.c ****   sConfig.Rank = 2;
 1514              		.loc 1 333 3 is_stmt 1 view .LVU474
 333:Core/Src/main.c ****   sConfig.Rank = 2;
 1515              		.loc 1 333 19 is_stmt 0 view .LVU475
ARM GAS  /tmp/ccmzXxfp.s 			page 53


 1516 0054 0523     		movs	r3, #5
 1517 0056 0093     		str	r3, [sp]
 334:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1518              		.loc 1 334 3 is_stmt 1 view .LVU476
 334:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1519              		.loc 1 334 16 is_stmt 0 view .LVU477
 1520 0058 0223     		movs	r3, #2
 1521 005a 0193     		str	r3, [sp, #4]
 335:Core/Src/main.c ****   {
 1522              		.loc 1 335 3 is_stmt 1 view .LVU478
 335:Core/Src/main.c ****   {
 1523              		.loc 1 335 7 is_stmt 0 view .LVU479
 1524 005c 6946     		mov	r1, sp
 1525 005e 1148     		ldr	r0, .L86
 1526 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1527              	.LVL52:
 335:Core/Src/main.c ****   {
 1528              		.loc 1 335 6 view .LVU480
 1529 0064 C0B9     		cbnz	r0, .L83
 341:Core/Src/main.c ****   sConfig.Rank = 3;
 1530              		.loc 1 341 3 is_stmt 1 view .LVU481
 341:Core/Src/main.c ****   sConfig.Rank = 3;
 1531              		.loc 1 341 19 is_stmt 0 view .LVU482
 1532 0066 0623     		movs	r3, #6
 1533 0068 0093     		str	r3, [sp]
 342:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1534              		.loc 1 342 3 is_stmt 1 view .LVU483
 342:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1535              		.loc 1 342 16 is_stmt 0 view .LVU484
 1536 006a 0323     		movs	r3, #3
 1537 006c 0193     		str	r3, [sp, #4]
 343:Core/Src/main.c ****   {
 1538              		.loc 1 343 3 is_stmt 1 view .LVU485
 343:Core/Src/main.c ****   {
 1539              		.loc 1 343 7 is_stmt 0 view .LVU486
 1540 006e 6946     		mov	r1, sp
 1541 0070 0C48     		ldr	r0, .L86
 1542 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1543              	.LVL53:
 343:Core/Src/main.c ****   {
 1544              		.loc 1 343 6 view .LVU487
 1545 0076 88B9     		cbnz	r0, .L84
 349:Core/Src/main.c ****   sConfig.Rank = 4;
 1546              		.loc 1 349 3 is_stmt 1 view .LVU488
 349:Core/Src/main.c ****   sConfig.Rank = 4;
 1547              		.loc 1 349 19 is_stmt 0 view .LVU489
 1548 0078 0723     		movs	r3, #7
 1549 007a 0093     		str	r3, [sp]
 350:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1550              		.loc 1 350 3 is_stmt 1 view .LVU490
 350:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1551              		.loc 1 350 16 is_stmt 0 view .LVU491
 1552 007c 0423     		movs	r3, #4
 1553 007e 0193     		str	r3, [sp, #4]
 351:Core/Src/main.c ****   {
 1554              		.loc 1 351 3 is_stmt 1 view .LVU492
 351:Core/Src/main.c ****   {
ARM GAS  /tmp/ccmzXxfp.s 			page 54


 1555              		.loc 1 351 7 is_stmt 0 view .LVU493
 1556 0080 6946     		mov	r1, sp
 1557 0082 0848     		ldr	r0, .L86
 1558 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1559              	.LVL54:
 351:Core/Src/main.c ****   {
 1560              		.loc 1 351 6 view .LVU494
 1561 0088 50B9     		cbnz	r0, .L85
 359:Core/Src/main.c **** 
 1562              		.loc 1 359 1 view .LVU495
 1563 008a 05B0     		add	sp, sp, #20
 1564              	.LCFI17:
 1565              		.cfi_remember_state
 1566              		.cfi_def_cfa_offset 4
 1567              		@ sp needed
 1568 008c 5DF804FB 		ldr	pc, [sp], #4
 1569              	.L81:
 1570              	.LCFI18:
 1571              		.cfi_restore_state
 320:Core/Src/main.c ****   }
 1572              		.loc 1 320 5 is_stmt 1 view .LVU496
 1573 0090 FFF7FEFF 		bl	Error_Handler
 1574              	.LVL55:
 1575              	.L82:
 329:Core/Src/main.c ****   }
 1576              		.loc 1 329 5 view .LVU497
 1577 0094 FFF7FEFF 		bl	Error_Handler
 1578              	.LVL56:
 1579              	.L83:
 337:Core/Src/main.c ****   }
 1580              		.loc 1 337 5 view .LVU498
 1581 0098 FFF7FEFF 		bl	Error_Handler
 1582              	.LVL57:
 1583              	.L84:
 345:Core/Src/main.c ****   }
 1584              		.loc 1 345 5 view .LVU499
 1585 009c FFF7FEFF 		bl	Error_Handler
 1586              	.LVL58:
 1587              	.L85:
 353:Core/Src/main.c ****   }
 1588              		.loc 1 353 5 view .LVU500
 1589 00a0 FFF7FEFF 		bl	Error_Handler
 1590              	.LVL59:
 1591              	.L87:
 1592              		.align	2
 1593              	.L86:
 1594 00a4 00000000 		.word	hadc1
 1595 00a8 00200140 		.word	1073815552
 1596 00ac 0100000F 		.word	251658241
 1597              		.cfi_endproc
 1598              	.LFE218:
 1600              		.section	.text.MX_TIM14_Init,"ax",%progbits
 1601              		.align	1
 1602              		.syntax unified
 1603              		.thumb
 1604              		.thumb_func
 1605              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccmzXxfp.s 			page 55


 1607              	MX_TIM14_Init:
 1608              	.LFB221:
 489:Core/Src/main.c **** 
 1609              		.loc 1 489 1 view -0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
 1612              		@ frame_needed = 0, uses_anonymous_args = 0
 1613 0000 08B5     		push	{r3, lr}
 1614              	.LCFI19:
 1615              		.cfi_def_cfa_offset 8
 1616              		.cfi_offset 3, -8
 1617              		.cfi_offset 14, -4
 498:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1618              		.loc 1 498 3 view .LVU502
 498:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1619              		.loc 1 498 19 is_stmt 0 view .LVU503
 1620 0002 0948     		ldr	r0, .L92
 1621 0004 094B     		ldr	r3, .L92+4
 1622 0006 0360     		str	r3, [r0]
 499:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1623              		.loc 1 499 3 is_stmt 1 view .LVU504
 499:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1624              		.loc 1 499 25 is_stmt 0 view .LVU505
 1625 0008 42F22733 		movw	r3, #8999
 1626 000c 4360     		str	r3, [r0, #4]
 500:Core/Src/main.c ****   htim14.Init.Period = 10-1;
 1627              		.loc 1 500 3 is_stmt 1 view .LVU506
 500:Core/Src/main.c ****   htim14.Init.Period = 10-1;
 1628              		.loc 1 500 27 is_stmt 0 view .LVU507
 1629 000e 0023     		movs	r3, #0
 1630 0010 8360     		str	r3, [r0, #8]
 501:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1631              		.loc 1 501 3 is_stmt 1 view .LVU508
 501:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1632              		.loc 1 501 22 is_stmt 0 view .LVU509
 1633 0012 0922     		movs	r2, #9
 1634 0014 C260     		str	r2, [r0, #12]
 502:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1635              		.loc 1 502 3 is_stmt 1 view .LVU510
 502:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1636              		.loc 1 502 29 is_stmt 0 view .LVU511
 1637 0016 0361     		str	r3, [r0, #16]
 503:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1638              		.loc 1 503 3 is_stmt 1 view .LVU512
 503:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1639              		.loc 1 503 33 is_stmt 0 view .LVU513
 1640 0018 8361     		str	r3, [r0, #24]
 504:Core/Src/main.c ****   {
 1641              		.loc 1 504 3 is_stmt 1 view .LVU514
 504:Core/Src/main.c ****   {
 1642              		.loc 1 504 7 is_stmt 0 view .LVU515
 1643 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1644              	.LVL60:
 504:Core/Src/main.c ****   {
 1645              		.loc 1 504 6 view .LVU516
 1646 001e 00B9     		cbnz	r0, .L91
 512:Core/Src/main.c **** 
ARM GAS  /tmp/ccmzXxfp.s 			page 56


 1647              		.loc 1 512 1 view .LVU517
 1648 0020 08BD     		pop	{r3, pc}
 1649              	.L91:
 506:Core/Src/main.c ****   }
 1650              		.loc 1 506 5 is_stmt 1 view .LVU518
 1651 0022 FFF7FEFF 		bl	Error_Handler
 1652              	.LVL61:
 1653              	.L93:
 1654 0026 00BF     		.align	2
 1655              	.L92:
 1656 0028 00000000 		.word	htim14
 1657 002c 00200040 		.word	1073750016
 1658              		.cfi_endproc
 1659              	.LFE221:
 1661              		.section	.text.MX_TIM13_Init,"ax",%progbits
 1662              		.align	1
 1663              		.syntax unified
 1664              		.thumb
 1665              		.thumb_func
 1666              		.fpu fpv4-sp-d16
 1668              	MX_TIM13_Init:
 1669              	.LFB220:
 458:Core/Src/main.c **** 
 1670              		.loc 1 458 1 view -0
 1671              		.cfi_startproc
 1672              		@ args = 0, pretend = 0, frame = 0
 1673              		@ frame_needed = 0, uses_anonymous_args = 0
 1674 0000 08B5     		push	{r3, lr}
 1675              	.LCFI20:
 1676              		.cfi_def_cfa_offset 8
 1677              		.cfi_offset 3, -8
 1678              		.cfi_offset 14, -4
 467:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1679              		.loc 1 467 3 view .LVU520
 467:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1680              		.loc 1 467 19 is_stmt 0 view .LVU521
 1681 0002 0948     		ldr	r0, .L98
 1682 0004 094B     		ldr	r3, .L98+4
 1683 0006 0360     		str	r3, [r0]
 468:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1684              		.loc 1 468 3 is_stmt 1 view .LVU522
 468:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1685              		.loc 1 468 25 is_stmt 0 view .LVU523
 1686 0008 42F22733 		movw	r3, #8999
 1687 000c 4360     		str	r3, [r0, #4]
 469:Core/Src/main.c ****   htim13.Init.Period = 100-1;
 1688              		.loc 1 469 3 is_stmt 1 view .LVU524
 469:Core/Src/main.c ****   htim13.Init.Period = 100-1;
 1689              		.loc 1 469 27 is_stmt 0 view .LVU525
 1690 000e 0023     		movs	r3, #0
 1691 0010 8360     		str	r3, [r0, #8]
 470:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1692              		.loc 1 470 3 is_stmt 1 view .LVU526
 470:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1693              		.loc 1 470 22 is_stmt 0 view .LVU527
 1694 0012 6322     		movs	r2, #99
 1695 0014 C260     		str	r2, [r0, #12]
ARM GAS  /tmp/ccmzXxfp.s 			page 57


 471:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1696              		.loc 1 471 3 is_stmt 1 view .LVU528
 471:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1697              		.loc 1 471 29 is_stmt 0 view .LVU529
 1698 0016 0361     		str	r3, [r0, #16]
 472:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1699              		.loc 1 472 3 is_stmt 1 view .LVU530
 472:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1700              		.loc 1 472 33 is_stmt 0 view .LVU531
 1701 0018 8361     		str	r3, [r0, #24]
 473:Core/Src/main.c ****   {
 1702              		.loc 1 473 3 is_stmt 1 view .LVU532
 473:Core/Src/main.c ****   {
 1703              		.loc 1 473 7 is_stmt 0 view .LVU533
 1704 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1705              	.LVL62:
 473:Core/Src/main.c ****   {
 1706              		.loc 1 473 6 view .LVU534
 1707 001e 00B9     		cbnz	r0, .L97
 481:Core/Src/main.c **** 
 1708              		.loc 1 481 1 view .LVU535
 1709 0020 08BD     		pop	{r3, pc}
 1710              	.L97:
 475:Core/Src/main.c ****   }
 1711              		.loc 1 475 5 is_stmt 1 view .LVU536
 1712 0022 FFF7FEFF 		bl	Error_Handler
 1713              	.LVL63:
 1714              	.L99:
 1715 0026 00BF     		.align	2
 1716              	.L98:
 1717 0028 00000000 		.word	htim13
 1718 002c 001C0040 		.word	1073748992
 1719              		.cfi_endproc
 1720              	.LFE220:
 1722              		.section	.text.SystemClock_Config,"ax",%progbits
 1723              		.align	1
 1724              		.global	SystemClock_Config
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1728              		.fpu fpv4-sp-d16
 1730              	SystemClock_Config:
 1731              	.LFB217:
 247:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1732              		.loc 1 247 1 view -0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 80
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
 1736 0000 00B5     		push	{lr}
 1737              	.LCFI21:
 1738              		.cfi_def_cfa_offset 4
 1739              		.cfi_offset 14, -4
 1740 0002 95B0     		sub	sp, sp, #84
 1741              	.LCFI22:
 1742              		.cfi_def_cfa_offset 88
 248:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1743              		.loc 1 248 3 view .LVU538
ARM GAS  /tmp/ccmzXxfp.s 			page 58


 248:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1744              		.loc 1 248 22 is_stmt 0 view .LVU539
 1745 0004 3422     		movs	r2, #52
 1746 0006 0021     		movs	r1, #0
 1747 0008 07A8     		add	r0, sp, #28
 1748 000a FFF7FEFF 		bl	memset
 1749              	.LVL64:
 249:Core/Src/main.c **** 
 1750              		.loc 1 249 3 is_stmt 1 view .LVU540
 249:Core/Src/main.c **** 
 1751              		.loc 1 249 22 is_stmt 0 view .LVU541
 1752 000e 0023     		movs	r3, #0
 1753 0010 0293     		str	r3, [sp, #8]
 1754 0012 0393     		str	r3, [sp, #12]
 1755 0014 0493     		str	r3, [sp, #16]
 1756 0016 0593     		str	r3, [sp, #20]
 1757 0018 0693     		str	r3, [sp, #24]
 253:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1758              		.loc 1 253 3 is_stmt 1 view .LVU542
 1759              	.LBB10:
 253:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1760              		.loc 1 253 3 view .LVU543
 1761 001a 0093     		str	r3, [sp]
 253:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1762              		.loc 1 253 3 view .LVU544
 1763 001c 1E4A     		ldr	r2, .L106
 1764 001e 116C     		ldr	r1, [r2, #64]
 1765 0020 41F08051 		orr	r1, r1, #268435456
 1766 0024 1164     		str	r1, [r2, #64]
 253:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1767              		.loc 1 253 3 view .LVU545
 1768 0026 126C     		ldr	r2, [r2, #64]
 1769 0028 02F08052 		and	r2, r2, #268435456
 1770 002c 0092     		str	r2, [sp]
 253:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1771              		.loc 1 253 3 view .LVU546
 1772 002e 009A     		ldr	r2, [sp]
 1773              	.LBE10:
 253:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1774              		.loc 1 253 3 view .LVU547
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1775              		.loc 1 254 3 view .LVU548
 1776              	.LBB11:
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1777              		.loc 1 254 3 view .LVU549
 1778 0030 0193     		str	r3, [sp, #4]
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1779              		.loc 1 254 3 view .LVU550
 1780 0032 1A4A     		ldr	r2, .L106+4
 1781 0034 1168     		ldr	r1, [r2]
 1782 0036 41F44041 		orr	r1, r1, #49152
 1783 003a 1160     		str	r1, [r2]
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1784              		.loc 1 254 3 view .LVU551
 1785 003c 1268     		ldr	r2, [r2]
 1786 003e 02F44042 		and	r2, r2, #49152
 1787 0042 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/ccmzXxfp.s 			page 59


 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1788              		.loc 1 254 3 view .LVU552
 1789 0044 019A     		ldr	r2, [sp, #4]
 1790              	.LBE11:
 254:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1791              		.loc 1 254 3 view .LVU553
 258:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1792              		.loc 1 258 3 view .LVU554
 258:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1793              		.loc 1 258 36 is_stmt 0 view .LVU555
 1794 0046 0222     		movs	r2, #2
 1795 0048 0792     		str	r2, [sp, #28]
 259:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1796              		.loc 1 259 3 is_stmt 1 view .LVU556
 259:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1797              		.loc 1 259 30 is_stmt 0 view .LVU557
 1798 004a 0121     		movs	r1, #1
 1799 004c 0A91     		str	r1, [sp, #40]
 260:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1800              		.loc 1 260 3 is_stmt 1 view .LVU558
 260:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1801              		.loc 1 260 41 is_stmt 0 view .LVU559
 1802 004e 1021     		movs	r1, #16
 1803 0050 0B91     		str	r1, [sp, #44]
 261:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1804              		.loc 1 261 3 is_stmt 1 view .LVU560
 261:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1805              		.loc 1 261 34 is_stmt 0 view .LVU561
 1806 0052 0D92     		str	r2, [sp, #52]
 262:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1807              		.loc 1 262 3 is_stmt 1 view .LVU562
 262:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1808              		.loc 1 262 35 is_stmt 0 view .LVU563
 1809 0054 0E93     		str	r3, [sp, #56]
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1810              		.loc 1 263 3 is_stmt 1 view .LVU564
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1811              		.loc 1 263 30 is_stmt 0 view .LVU565
 1812 0056 0823     		movs	r3, #8
 1813 0058 0F93     		str	r3, [sp, #60]
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1814              		.loc 1 264 3 is_stmt 1 view .LVU566
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1815              		.loc 1 264 30 is_stmt 0 view .LVU567
 1816 005a 5A23     		movs	r3, #90
 1817 005c 1093     		str	r3, [sp, #64]
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1818              		.loc 1 265 3 is_stmt 1 view .LVU568
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1819              		.loc 1 265 30 is_stmt 0 view .LVU569
 1820 005e 1192     		str	r2, [sp, #68]
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1821              		.loc 1 266 3 is_stmt 1 view .LVU570
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1822              		.loc 1 266 30 is_stmt 0 view .LVU571
 1823 0060 1292     		str	r2, [sp, #72]
 267:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /tmp/ccmzXxfp.s 			page 60


 1824              		.loc 1 267 3 is_stmt 1 view .LVU572
 267:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1825              		.loc 1 267 30 is_stmt 0 view .LVU573
 1826 0062 1392     		str	r2, [sp, #76]
 268:Core/Src/main.c ****   {
 1827              		.loc 1 268 3 is_stmt 1 view .LVU574
 268:Core/Src/main.c ****   {
 1828              		.loc 1 268 7 is_stmt 0 view .LVU575
 1829 0064 07A8     		add	r0, sp, #28
 1830 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1831              	.LVL65:
 268:Core/Src/main.c ****   {
 1832              		.loc 1 268 6 view .LVU576
 1833 006a 88B9     		cbnz	r0, .L104
 274:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1834              		.loc 1 274 3 is_stmt 1 view .LVU577
 274:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1835              		.loc 1 274 31 is_stmt 0 view .LVU578
 1836 006c 0F23     		movs	r3, #15
 1837 006e 0293     		str	r3, [sp, #8]
 276:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1838              		.loc 1 276 3 is_stmt 1 view .LVU579
 276:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1839              		.loc 1 276 34 is_stmt 0 view .LVU580
 1840 0070 0223     		movs	r3, #2
 1841 0072 0393     		str	r3, [sp, #12]
 277:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1842              		.loc 1 277 3 is_stmt 1 view .LVU581
 277:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1843              		.loc 1 277 35 is_stmt 0 view .LVU582
 1844 0074 0023     		movs	r3, #0
 1845 0076 0493     		str	r3, [sp, #16]
 278:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1846              		.loc 1 278 3 is_stmt 1 view .LVU583
 278:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1847              		.loc 1 278 36 is_stmt 0 view .LVU584
 1848 0078 4FF48052 		mov	r2, #4096
 1849 007c 0592     		str	r2, [sp, #20]
 279:Core/Src/main.c **** 
 1850              		.loc 1 279 3 is_stmt 1 view .LVU585
 279:Core/Src/main.c **** 
 1851              		.loc 1 279 36 is_stmt 0 view .LVU586
 1852 007e 0693     		str	r3, [sp, #24]
 281:Core/Src/main.c ****   {
 1853              		.loc 1 281 3 is_stmt 1 view .LVU587
 281:Core/Src/main.c ****   {
 1854              		.loc 1 281 7 is_stmt 0 view .LVU588
 1855 0080 0321     		movs	r1, #3
 1856 0082 02A8     		add	r0, sp, #8
 1857 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1858              	.LVL66:
 281:Core/Src/main.c ****   {
 1859              		.loc 1 281 6 view .LVU589
 1860 0088 20B9     		cbnz	r0, .L105
 285:Core/Src/main.c **** 
 1861              		.loc 1 285 1 view .LVU590
 1862 008a 15B0     		add	sp, sp, #84
ARM GAS  /tmp/ccmzXxfp.s 			page 61


 1863              	.LCFI23:
 1864              		.cfi_remember_state
 1865              		.cfi_def_cfa_offset 4
 1866              		@ sp needed
 1867 008c 5DF804FB 		ldr	pc, [sp], #4
 1868              	.L104:
 1869              	.LCFI24:
 1870              		.cfi_restore_state
 270:Core/Src/main.c ****   }
 1871              		.loc 1 270 5 is_stmt 1 view .LVU591
 1872 0090 FFF7FEFF 		bl	Error_Handler
 1873              	.LVL67:
 1874              	.L105:
 283:Core/Src/main.c ****   }
 1875              		.loc 1 283 5 view .LVU592
 1876 0094 FFF7FEFF 		bl	Error_Handler
 1877              	.LVL68:
 1878              	.L107:
 1879              		.align	2
 1880              	.L106:
 1881 0098 00380240 		.word	1073887232
 1882 009c 00700040 		.word	1073770496
 1883              		.cfi_endproc
 1884              	.LFE217:
 1886              		.section	.text.main,"ax",%progbits
 1887              		.align	1
 1888              		.global	main
 1889              		.syntax unified
 1890              		.thumb
 1891              		.thumb_func
 1892              		.fpu fpv4-sp-d16
 1894              	main:
 1895              	.LFB216:
 159:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1896              		.loc 1 159 1 view -0
 1897              		.cfi_startproc
 1898              		@ Volatile: function does not return.
 1899              		@ args = 0, pretend = 0, frame = 0
 1900              		@ frame_needed = 0, uses_anonymous_args = 0
 1901 0000 08B5     		push	{r3, lr}
 1902              	.LCFI25:
 1903              		.cfi_def_cfa_offset 8
 1904              		.cfi_offset 3, -8
 1905              		.cfi_offset 14, -4
 163:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 1906              		.loc 1 163 3 view .LVU594
 163:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 1907              		.loc 1 163 18 is_stmt 0 view .LVU595
 1908 0002 214A     		ldr	r2, .L111
 1909 0004 9323     		movs	r3, #147
 1910 0006 1360     		str	r3, [r2]
 164:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 1911              		.loc 1 164 3 is_stmt 1 view .LVU596
 164:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 1912              		.loc 1 164 18 is_stmt 0 view .LVU597
 1913 0008 0023     		movs	r3, #0
 1914 000a 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccmzXxfp.s 			page 62


 165:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 1915              		.loc 1 165 3 is_stmt 1 view .LVU598
 165:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 1916              		.loc 1 165 16 is_stmt 0 view .LVU599
 1917 000c 9360     		str	r3, [r2, #8]
 166:Core/Src/main.c ****   TxHeader.DLC = 8;
 1918              		.loc 1 166 3 is_stmt 1 view .LVU600
 166:Core/Src/main.c ****   TxHeader.DLC = 8;
 1919              		.loc 1 166 16 is_stmt 0 view .LVU601
 1920 000e D360     		str	r3, [r2, #12]
 167:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 1921              		.loc 1 167 3 is_stmt 1 view .LVU602
 167:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 1922              		.loc 1 167 16 is_stmt 0 view .LVU603
 1923 0010 0821     		movs	r1, #8
 1924 0012 1161     		str	r1, [r2, #16]
 168:Core/Src/main.c ****   
 1925              		.loc 1 168 3 is_stmt 1 view .LVU604
 168:Core/Src/main.c ****   
 1926              		.loc 1 168 31 is_stmt 0 view .LVU605
 1927 0014 1375     		strb	r3, [r2, #20]
 171:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 1928              		.loc 1 171 3 is_stmt 1 view .LVU606
 171:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 1929              		.loc 1 171 19 is_stmt 0 view .LVU607
 1930 0016 1D4A     		ldr	r2, .L111+4
 1931 0018 C020     		movs	r0, #192
 1932 001a 1060     		str	r0, [r2]
 172:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 1933              		.loc 1 172 3 is_stmt 1 view .LVU608
 172:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 1934              		.loc 1 172 19 is_stmt 0 view .LVU609
 1935 001c 5360     		str	r3, [r2, #4]
 173:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 1936              		.loc 1 173 3 is_stmt 1 view .LVU610
 173:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 1937              		.loc 1 173 17 is_stmt 0 view .LVU611
 1938 001e 9360     		str	r3, [r2, #8]
 174:Core/Src/main.c ****   TxHeader2.DLC = 8;
 1939              		.loc 1 174 3 is_stmt 1 view .LVU612
 174:Core/Src/main.c ****   TxHeader2.DLC = 8;
 1940              		.loc 1 174 17 is_stmt 0 view .LVU613
 1941 0020 D360     		str	r3, [r2, #12]
 175:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 1942              		.loc 1 175 3 is_stmt 1 view .LVU614
 175:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 1943              		.loc 1 175 17 is_stmt 0 view .LVU615
 1944 0022 1161     		str	r1, [r2, #16]
 176:Core/Src/main.c **** 
 1945              		.loc 1 176 3 is_stmt 1 view .LVU616
 176:Core/Src/main.c **** 
 1946              		.loc 1 176 32 is_stmt 0 view .LVU617
 1947 0024 1375     		strb	r3, [r2, #20]
 179:Core/Src/main.c ****   TxHeader3.ExtId = 0x0;
 1948              		.loc 1 179 3 is_stmt 1 view .LVU618
 179:Core/Src/main.c ****   TxHeader3.ExtId = 0x0;
 1949              		.loc 1 179 19 is_stmt 0 view .LVU619
ARM GAS  /tmp/ccmzXxfp.s 			page 63


 1950 0026 1A4A     		ldr	r2, .L111+8
 1951 0028 9220     		movs	r0, #146
 1952 002a 1060     		str	r0, [r2]
 180:Core/Src/main.c ****   TxHeader3.IDE = CAN_ID_STD;
 1953              		.loc 1 180 3 is_stmt 1 view .LVU620
 180:Core/Src/main.c ****   TxHeader3.IDE = CAN_ID_STD;
 1954              		.loc 1 180 19 is_stmt 0 view .LVU621
 1955 002c 5360     		str	r3, [r2, #4]
 181:Core/Src/main.c ****   TxHeader3.RTR = CAN_RTR_DATA;
 1956              		.loc 1 181 3 is_stmt 1 view .LVU622
 181:Core/Src/main.c ****   TxHeader3.RTR = CAN_RTR_DATA;
 1957              		.loc 1 181 17 is_stmt 0 view .LVU623
 1958 002e 9360     		str	r3, [r2, #8]
 182:Core/Src/main.c ****   TxHeader3.DLC = 8;
 1959              		.loc 1 182 3 is_stmt 1 view .LVU624
 182:Core/Src/main.c ****   TxHeader3.DLC = 8;
 1960              		.loc 1 182 17 is_stmt 0 view .LVU625
 1961 0030 D360     		str	r3, [r2, #12]
 183:Core/Src/main.c ****   TxHeader3.TransmitGlobalTime = DISABLE;
 1962              		.loc 1 183 3 is_stmt 1 view .LVU626
 183:Core/Src/main.c ****   TxHeader3.TransmitGlobalTime = DISABLE;
 1963              		.loc 1 183 17 is_stmt 0 view .LVU627
 1964 0032 1161     		str	r1, [r2, #16]
 184:Core/Src/main.c **** 
 1965              		.loc 1 184 3 is_stmt 1 view .LVU628
 184:Core/Src/main.c **** 
 1966              		.loc 1 184 32 is_stmt 0 view .LVU629
 1967 0034 1375     		strb	r3, [r2, #20]
 187:Core/Src/main.c ****   TxHeader4.ExtId = 0x0;
 1968              		.loc 1 187 3 is_stmt 1 view .LVU630
 187:Core/Src/main.c ****   TxHeader4.ExtId = 0x0;
 1969              		.loc 1 187 19 is_stmt 0 view .LVU631
 1970 0036 174A     		ldr	r2, .L111+12
 1971 0038 C120     		movs	r0, #193
 1972 003a 1060     		str	r0, [r2]
 188:Core/Src/main.c ****   TxHeader4.IDE = CAN_ID_STD;
 1973              		.loc 1 188 3 is_stmt 1 view .LVU632
 188:Core/Src/main.c ****   TxHeader4.IDE = CAN_ID_STD;
 1974              		.loc 1 188 19 is_stmt 0 view .LVU633
 1975 003c 5360     		str	r3, [r2, #4]
 189:Core/Src/main.c ****   TxHeader4.RTR = CAN_RTR_DATA;
 1976              		.loc 1 189 3 is_stmt 1 view .LVU634
 189:Core/Src/main.c ****   TxHeader4.RTR = CAN_RTR_DATA;
 1977              		.loc 1 189 17 is_stmt 0 view .LVU635
 1978 003e 9360     		str	r3, [r2, #8]
 190:Core/Src/main.c ****   TxHeader4.DLC = 8;
 1979              		.loc 1 190 3 is_stmt 1 view .LVU636
 190:Core/Src/main.c ****   TxHeader4.DLC = 8;
 1980              		.loc 1 190 17 is_stmt 0 view .LVU637
 1981 0040 D360     		str	r3, [r2, #12]
 191:Core/Src/main.c ****   TxHeader4.TransmitGlobalTime = DISABLE;
 1982              		.loc 1 191 3 is_stmt 1 view .LVU638
 191:Core/Src/main.c ****   TxHeader4.TransmitGlobalTime = DISABLE;
 1983              		.loc 1 191 17 is_stmt 0 view .LVU639
 1984 0042 1161     		str	r1, [r2, #16]
 192:Core/Src/main.c **** 
 1985              		.loc 1 192 3 is_stmt 1 view .LVU640
ARM GAS  /tmp/ccmzXxfp.s 			page 64


 192:Core/Src/main.c **** 
 1986              		.loc 1 192 32 is_stmt 0 view .LVU641
 1987 0044 1375     		strb	r3, [r2, #20]
 199:Core/Src/main.c **** 
 1988              		.loc 1 199 3 is_stmt 1 view .LVU642
 1989 0046 FFF7FEFF 		bl	HAL_Init
 1990              	.LVL69:
 206:Core/Src/main.c **** 
 1991              		.loc 1 206 3 view .LVU643
 1992 004a FFF7FEFF 		bl	SystemClock_Config
 1993              	.LVL70:
 213:Core/Src/main.c ****   MX_CAN1_Init();
 1994              		.loc 1 213 3 view .LVU644
 1995 004e FFF7FEFF 		bl	MX_GPIO_Init
 1996              	.LVL71:
 214:Core/Src/main.c ****   MX_DMA_Init();
 1997              		.loc 1 214 3 view .LVU645
 1998 0052 FFF7FEFF 		bl	MX_CAN1_Init
 1999              	.LVL72:
 215:Core/Src/main.c ****   MX_ADC1_Init();
 2000              		.loc 1 215 3 view .LVU646
 2001 0056 FFF7FEFF 		bl	MX_DMA_Init
 2002              	.LVL73:
 216:Core/Src/main.c ****   MX_TIM14_Init();
 2003              		.loc 1 216 3 view .LVU647
 2004 005a FFF7FEFF 		bl	MX_ADC1_Init
 2005              	.LVL74:
 217:Core/Src/main.c ****   MX_TIM13_Init();
 2006              		.loc 1 217 3 view .LVU648
 2007 005e FFF7FEFF 		bl	MX_TIM14_Init
 2008              	.LVL75:
 218:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2009              		.loc 1 218 3 view .LVU649
 2010 0062 FFF7FEFF 		bl	MX_TIM13_Init
 2011              	.LVL76:
 222:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 2012              		.loc 1 222 3 view .LVU650
 2013 0066 0C4C     		ldr	r4, .L111+16
 2014 0068 2046     		mov	r0, r4
 2015 006a FFF7FEFF 		bl	HAL_CAN_Start
 2016              	.LVL77:
 223:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 2017              		.loc 1 223 3 view .LVU651
 2018 006e 0221     		movs	r1, #2
 2019 0070 2046     		mov	r0, r4
 2020 0072 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2021              	.LVL78:
 224:Core/Src/main.c ****   // HAL_TIM_Base_Start_IT(&htim13);
 2022              		.loc 1 224 3 view .LVU652
 2023 0076 0948     		ldr	r0, .L111+20
 2024 0078 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2025              	.LVL79:
 226:Core/Src/main.c **** 
 2026              		.loc 1 226 3 view .LVU653
 2027 007c 0422     		movs	r2, #4
 2028 007e 0849     		ldr	r1, .L111+24
 2029 0080 0848     		ldr	r0, .L111+28
ARM GAS  /tmp/ccmzXxfp.s 			page 65


 2030 0082 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2031              	.LVL80:
 2032              	.L109:
 232:Core/Src/main.c ****   {
 2033              		.loc 1 232 3 discriminator 1 view .LVU654
 238:Core/Src/main.c ****   /* USER CODE END 3 */
 2034              		.loc 1 238 3 discriminator 1 view .LVU655
 232:Core/Src/main.c ****   {
 2035              		.loc 1 232 9 discriminator 1 view .LVU656
 2036 0086 FEE7     		b	.L109
 2037              	.L112:
 2038              		.align	2
 2039              	.L111:
 2040 0088 00000000 		.word	TxHeader
 2041 008c 00000000 		.word	TxHeader2
 2042 0090 00000000 		.word	TxHeader3
 2043 0094 00000000 		.word	TxHeader4
 2044 0098 00000000 		.word	hcan1
 2045 009c 00000000 		.word	htim14
 2046 00a0 00000000 		.word	adc_buf
 2047 00a4 00000000 		.word	hadc1
 2048              		.cfi_endproc
 2049              	.LFE216:
 2051              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 2052              		.align	1
 2053              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 2054              		.syntax unified
 2055              		.thumb
 2056              		.thumb_func
 2057              		.fpu fpv4-sp-d16
 2059              	HAL_CAN_RxFifo0MsgPendingCallback:
 2060              	.LVL81:
 2061              	.LFB227:
 797:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 2062              		.loc 1 797 1 view -0
 2063              		.cfi_startproc
 2064              		@ args = 0, pretend = 0, frame = 0
 2065              		@ frame_needed = 0, uses_anonymous_args = 0
 797:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 2066              		.loc 1 797 1 is_stmt 0 view .LVU658
 2067 0000 08B5     		push	{r3, lr}
 2068              	.LCFI26:
 2069              		.cfi_def_cfa_offset 8
 2070              		.cfi_offset 3, -8
 2071              		.cfi_offset 14, -4
 798:Core/Src/main.c ****     Error_Handler();
 2072              		.loc 1 798 3 is_stmt 1 view .LVU659
 798:Core/Src/main.c ****     Error_Handler();
 2073              		.loc 1 798 7 is_stmt 0 view .LVU660
 2074 0002 194B     		ldr	r3, .L125
 2075 0004 194A     		ldr	r2, .L125+4
 2076 0006 0021     		movs	r1, #0
 2077 0008 1948     		ldr	r0, .L125+8
 2078              	.LVL82:
 798:Core/Src/main.c ****     Error_Handler();
 2079              		.loc 1 798 7 view .LVU661
 2080 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
ARM GAS  /tmp/ccmzXxfp.s 			page 66


 2081              	.LVL83:
 798:Core/Src/main.c ****     Error_Handler();
 2082              		.loc 1 798 6 view .LVU662
 2083 000e 58B9     		cbnz	r0, .L120
 803:Core/Src/main.c ****   {
 2084              		.loc 1 803 3 is_stmt 1 view .LVU663
 803:Core/Src/main.c ****   {
 2085              		.loc 1 803 15 is_stmt 0 view .LVU664
 2086 0010 164B     		ldr	r3, .L125+4
 2087 0012 1B68     		ldr	r3, [r3]
 803:Core/Src/main.c ****   {
 2088              		.loc 1 803 6 view .LVU665
 2089 0014 822B     		cmp	r3, #130
 2090 0016 09D0     		beq	.L121
 2091              	.L115:
 815:Core/Src/main.c ****   {
 2092              		.loc 1 815 3 is_stmt 1 view .LVU666
 815:Core/Src/main.c ****   {
 2093              		.loc 1 815 6 is_stmt 0 view .LVU667
 2094 0018 B3F5D66F 		cmp	r3, #1712
 2095 001c 0ED0     		beq	.L122
 2096              	.L116:
 825:Core/Src/main.c ****   {
 2097              		.loc 1 825 3 is_stmt 1 view .LVU668
 825:Core/Src/main.c ****   {
 2098              		.loc 1 825 6 is_stmt 0 view .LVU669
 2099 001e A72B     		cmp	r3, #167
 2100 0020 14D0     		beq	.L123
 2101              	.L117:
 835:Core/Src/main.c ****   {
 2102              		.loc 1 835 3 is_stmt 1 view .LVU670
 835:Core/Src/main.c ****   {
 2103              		.loc 1 835 6 is_stmt 0 view .LVU671
 2104 0022 C22B     		cmp	r3, #194
 2105 0024 1AD0     		beq	.L124
 2106              	.L113:
 839:Core/Src/main.c **** 
 2107              		.loc 1 839 1 view .LVU672
 2108 0026 08BD     		pop	{r3, pc}
 2109              	.L120:
 799:Core/Src/main.c ****   }
 2110              		.loc 1 799 5 is_stmt 1 view .LVU673
 2111 0028 FFF7FEFF 		bl	Error_Handler
 2112              	.LVL84:
 2113              	.L121:
 805:Core/Src/main.c ****       bmsFault = RxData[1];
 2114              		.loc 1 805 7 view .LVU674
 805:Core/Src/main.c ****       bmsFault = RxData[1];
 2115              		.loc 1 805 24 is_stmt 0 view .LVU675
 2116 002c 0E4A     		ldr	r2, .L125
 2117 002e 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 805:Core/Src/main.c ****       bmsFault = RxData[1];
 2118              		.loc 1 805 16 view .LVU676
 2119 0030 1049     		ldr	r1, .L125+12
 2120 0032 0870     		strb	r0, [r1]
 806:Core/Src/main.c ****   }
 2121              		.loc 1 806 7 is_stmt 1 view .LVU677
ARM GAS  /tmp/ccmzXxfp.s 			page 67


 806:Core/Src/main.c ****   }
 2122              		.loc 1 806 24 is_stmt 0 view .LVU678
 2123 0034 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 806:Core/Src/main.c ****   }
 2124              		.loc 1 806 16 view .LVU679
 2125 0036 104A     		ldr	r2, .L125+16
 2126 0038 1170     		strb	r1, [r2]
 2127 003a EDE7     		b	.L115
 2128              	.L122:
 2129              	.LBB12:
 818:Core/Src/main.c ****     int volt2 = RxData[3];
 2130              		.loc 1 818 4 is_stmt 1 view .LVU680
 818:Core/Src/main.c ****     int volt2 = RxData[3];
 2131              		.loc 1 818 22 is_stmt 0 view .LVU681
 2132 003c 0A49     		ldr	r1, .L125
 2133 003e 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 2134              	.LVL85:
 819:Core/Src/main.c **** 
 2135              		.loc 1 819 5 is_stmt 1 view .LVU682
 819:Core/Src/main.c **** 
 2136              		.loc 1 819 23 is_stmt 0 view .LVU683
 2137 0040 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 2138              	.LVL86:
 822:Core/Src/main.c ****   }
 2139              		.loc 1 822 5 is_stmt 1 view .LVU684
 822:Core/Src/main.c ****   }
 2140              		.loc 1 822 31 is_stmt 0 view .LVU685
 2141 0042 42EA0022 		orr	r2, r2, r0, lsl #8
 2142              	.LVL87:
 822:Core/Src/main.c ****   }
 2143              		.loc 1 822 16 view .LVU686
 2144 0046 0D49     		ldr	r1, .L125+20
 2145 0048 0A60     		str	r2, [r1]
 2146 004a E8E7     		b	.L116
 2147              	.LVL88:
 2148              	.L123:
 822:Core/Src/main.c ****   }
 2149              		.loc 1 822 16 view .LVU687
 2150              	.LBE12:
 2151              	.LBB13:
 828:Core/Src/main.c ****     int rine2 = RxData[1];
 2152              		.loc 1 828 5 is_stmt 1 view .LVU688
 828:Core/Src/main.c ****     int rine2 = RxData[1];
 2153              		.loc 1 828 23 is_stmt 0 view .LVU689
 2154 004c 0649     		ldr	r1, .L125
 2155 004e 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 2156              	.LVL89:
 829:Core/Src/main.c **** 
 2157              		.loc 1 829 5 is_stmt 1 view .LVU690
 829:Core/Src/main.c **** 
 2158              		.loc 1 829 23 is_stmt 0 view .LVU691
 2159 0050 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 2160              	.LVL90:
 832:Core/Src/main.c ****   }
 2161              		.loc 1 832 5 is_stmt 1 view .LVU692
 832:Core/Src/main.c ****   }
 2162              		.loc 1 832 36 is_stmt 0 view .LVU693
ARM GAS  /tmp/ccmzXxfp.s 			page 68


 2163 0052 42EA0122 		orr	r2, r2, r1, lsl #8
 2164              	.LVL91:
 832:Core/Src/main.c ****   }
 2165              		.loc 1 832 21 view .LVU694
 2166 0056 0A49     		ldr	r1, .L125+24
 2167              	.LVL92:
 832:Core/Src/main.c ****   }
 2168              		.loc 1 832 21 view .LVU695
 2169 0058 0A60     		str	r2, [r1]
 2170 005a E2E7     		b	.L117
 2171              	.LVL93:
 2172              	.L124:
 832:Core/Src/main.c ****   }
 2173              		.loc 1 832 21 view .LVU696
 2174              	.LBE13:
 837:Core/Src/main.c ****   }
 2175              		.loc 1 837 5 is_stmt 1 view .LVU697
 837:Core/Src/main.c ****   }
 2176              		.loc 1 837 28 is_stmt 0 view .LVU698
 2177 005c 024B     		ldr	r3, .L125
 2178 005e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 837:Core/Src/main.c ****   }
 2179              		.loc 1 837 20 view .LVU699
 2180 0060 084B     		ldr	r3, .L125+28
 2181 0062 1A70     		strb	r2, [r3]
 839:Core/Src/main.c **** 
 2182              		.loc 1 839 1 view .LVU700
 2183 0064 DFE7     		b	.L113
 2184              	.L126:
 2185 0066 00BF     		.align	2
 2186              	.L125:
 2187 0068 00000000 		.word	RxData
 2188 006c 00000000 		.word	RxHeader
 2189 0070 00000000 		.word	hcan1
 2190 0074 00000000 		.word	.LANCHOR20
 2191 0078 00000000 		.word	.LANCHOR21
 2192 007c 00000000 		.word	.LANCHOR5
 2193 0080 00000000 		.word	.LANCHOR4
 2194 0084 00000000 		.word	.LANCHOR2
 2195              		.cfi_endproc
 2196              	.LFE227:
 2198              		.global	rinehartUpdate
 2199              		.global	voltageCheckCount
 2200              		.global	lastPrechargeState
 2201              		.global	prechargeState
 2202              		.global	driveMode
 2203              		.global	command_torque_limit
 2204              		.global	commandedTorque
 2205              		.global	bmsVoltage
 2206              		.global	rinehartVoltage
 2207              		.global	enableInverter
 2208              		.global	buzzerCounter
 2209              		.global	buzzerState
 2210              		.global	ready_to_drive
 2211              		.global	pedalAverage
 2212              		.global	brakeAverage
 2213              		.global	pedal1
ARM GAS  /tmp/ccmzXxfp.s 			page 69


 2214              		.global	pedal0
 2215              		.global	brake1
 2216              		.global	brake0
 2217              		.comm	adc_buf,8,4
 2218              		.global	brakeLight
 2219              		.global	switch_direction
 2220              		.global	switch_cooling
 2221              		.global	bmsFault
 2222              		.global	imdFault
 2223              		.comm	canFilter0,40,4
 2224              		.comm	canFilter2,40,4
 2225              		.comm	filter1,40,4
 2226              		.comm	filter0,40,4
 2227              		.comm	RxData,8,4
 2228              		.comm	RxHeader,28,4
 2229              		.comm	TxMailbox1,4,4
 2230              		.comm	TxMailbox,4,4
 2231              		.comm	TxData,8,4
 2232              		.comm	TxHeader4,24,4
 2233              		.comm	TxHeader3,24,4
 2234              		.comm	TxHeader2,24,4
 2235              		.comm	TxHeader,24,4
 2236              		.comm	htim14,72,4
 2237              		.comm	htim13,72,4
 2238              		.comm	hcan1,40,4
 2239              		.comm	hdma_adc1,96,4
 2240              		.comm	hadc1,72,4
 2241              		.section	.bss.bmsFault,"aw",%nobits
 2242              		.set	.LANCHOR21,. + 0
 2245              	bmsFault:
 2246 0000 00       		.space	1
 2247              		.section	.bss.bmsVoltage,"aw",%nobits
 2248              		.align	2
 2249              		.set	.LANCHOR5,. + 0
 2252              	bmsVoltage:
 2253 0000 00000000 		.space	4
 2254              		.section	.bss.brake0,"aw",%nobits
 2255              		.align	1
 2256              		.set	.LANCHOR7,. + 0
 2259              	brake0:
 2260 0000 0000     		.space	2
 2261              		.section	.bss.brake1,"aw",%nobits
 2262              		.align	1
 2263              		.set	.LANCHOR8,. + 0
 2266              	brake1:
 2267 0000 0000     		.space	2
 2268              		.section	.bss.brakeAverage,"aw",%nobits
 2269              		.align	1
 2270              		.set	.LANCHOR18,. + 0
 2273              	brakeAverage:
 2274 0000 0000     		.space	2
 2275              		.section	.bss.brakeLight,"aw",%nobits
 2276              		.set	.LANCHOR19,. + 0
 2279              	brakeLight:
 2280 0000 00       		.space	1
 2281              		.section	.bss.buzzerCounter,"aw",%nobits
 2282              		.set	.LANCHOR17,. + 0
ARM GAS  /tmp/ccmzXxfp.s 			page 70


 2285              	buzzerCounter:
 2286 0000 00       		.space	1
 2287              		.section	.bss.buzzerState,"aw",%nobits
 2288              		.set	.LANCHOR6,. + 0
 2291              	buzzerState:
 2292 0000 00       		.space	1
 2293              		.section	.bss.command_torque_limit,"aw",%nobits
 2294              		.align	1
 2297              	command_torque_limit:
 2298 0000 0000     		.space	2
 2299              		.section	.bss.commandedTorque,"aw",%nobits
 2300              		.align	1
 2301              		.set	.LANCHOR13,. + 0
 2304              	commandedTorque:
 2305 0000 0000     		.space	2
 2306              		.section	.bss.enableInverter,"aw",%nobits
 2307              		.set	.LANCHOR14,. + 0
 2310              	enableInverter:
 2311 0000 00       		.space	1
 2312              		.section	.bss.imdFault,"aw",%nobits
 2313              		.set	.LANCHOR20,. + 0
 2316              	imdFault:
 2317 0000 00       		.space	1
 2318              		.section	.bss.lastPrechargeState,"aw",%nobits
 2319              		.set	.LANCHOR3,. + 0
 2322              	lastPrechargeState:
 2323 0000 00       		.space	1
 2324              		.section	.bss.pedal0,"aw",%nobits
 2325              		.align	1
 2326              		.set	.LANCHOR9,. + 0
 2329              	pedal0:
 2330 0000 0000     		.space	2
 2331              		.section	.bss.pedalAverage,"aw",%nobits
 2332              		.align	1
 2333              		.set	.LANCHOR11,. + 0
 2336              	pedalAverage:
 2337 0000 0000     		.space	2
 2338              		.section	.bss.prechargeState,"aw",%nobits
 2339              		.set	.LANCHOR0,. + 0
 2342              	prechargeState:
 2343 0000 00       		.space	1
 2344              		.section	.bss.ready_to_drive,"aw",%nobits
 2345              		.set	.LANCHOR1,. + 0
 2348              	ready_to_drive:
 2349 0000 00       		.space	1
 2350              		.section	.bss.rinehartUpdate,"aw",%nobits
 2351              		.set	.LANCHOR2,. + 0
 2354              	rinehartUpdate:
 2355 0000 00       		.space	1
 2356              		.section	.bss.rinehartVoltage,"aw",%nobits
 2357              		.align	2
 2358              		.set	.LANCHOR4,. + 0
 2361              	rinehartVoltage:
 2362 0000 00000000 		.space	4
 2363              		.section	.bss.switch_cooling,"aw",%nobits
 2364              		.set	.LANCHOR15,. + 0
 2367              	switch_cooling:
ARM GAS  /tmp/ccmzXxfp.s 			page 71


 2368 0000 00       		.space	1
 2369              		.section	.bss.switch_direction,"aw",%nobits
 2370              		.set	.LANCHOR16,. + 0
 2373              	switch_direction:
 2374 0000 00       		.space	1
 2375              		.section	.bss.voltageCheckCount,"aw",%nobits
 2378              	voltageCheckCount:
 2379 0000 00       		.space	1
 2380              		.section	.data.driveMode,"aw"
 2381              		.align	2
 2382              		.set	.LANCHOR12,. + 0
 2385              	driveMode:
 2386 0000 01000000 		.word	1
 2387              		.section	.data.pedal1,"aw"
 2388              		.align	1
 2389              		.set	.LANCHOR10,. + 0
 2392              	pedal1:
 2393 0000 0100     		.short	1
 2394              		.text
 2395              	.Letext0:
 2396              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2397              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 2398              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2399              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 2400              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2401              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2402              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2403              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2404              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2405              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2406              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2407              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 2408              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2409              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2410              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2411              		.file 18 "<built-in>"
ARM GAS  /tmp/ccmzXxfp.s 			page 72


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccmzXxfp.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccmzXxfp.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccmzXxfp.s:186    .text.MX_GPIO_Init:00000000000000c0 $d
     /tmp/ccmzXxfp.s:193    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccmzXxfp.s:199    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccmzXxfp.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccmzXxfp.s:253    .text.mapValue:0000000000000000 $t
     /tmp/ccmzXxfp.s:260    .text.mapValue:0000000000000000 mapValue
     /tmp/ccmzXxfp.s:303    .text.prechargeControl:0000000000000000 $t
     /tmp/ccmzXxfp.s:310    .text.prechargeControl:0000000000000000 prechargeControl
     /tmp/ccmzXxfp.s:330    .text.prechargeControl:0000000000000010 $d
     /tmp/ccmzXxfp.s:334    .text.prechargeControl:0000000000000014 $t
     /tmp/ccmzXxfp.s:623    .text.prechargeControl:0000000000000150 $d
                            *COM*:0000000000000008 TxData
                            *COM*:0000000000000004 TxMailbox1
                            *COM*:0000000000000018 TxHeader4
                            *COM*:0000000000000028 hcan1
     /tmp/ccmzXxfp.s:639    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccmzXxfp.s:646    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccmzXxfp.s:679    .text.HAL_GPIO_EXTI_Callback:0000000000000018 $d
     /tmp/ccmzXxfp.s:685    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccmzXxfp.s:692    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccmzXxfp.s:730    .text.HAL_ADC_ConvCpltCallback:000000000000001c $d
                            *COM*:0000000000000008 adc_buf
     /tmp/ccmzXxfp.s:739    .text.adc_average:0000000000000000 $t
     /tmp/ccmzXxfp.s:746    .text.adc_average:0000000000000000 adc_average
     /tmp/ccmzXxfp.s:770    .text.getCommandedTorque:0000000000000000 $t
     /tmp/ccmzXxfp.s:777    .text.getCommandedTorque:0000000000000000 getCommandedTorque
     /tmp/ccmzXxfp.s:905    .text.getCommandedTorque:00000000000000b0 $d
     /tmp/ccmzXxfp.s:917    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccmzXxfp.s:924    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccmzXxfp.s:1126   .text.HAL_TIM_PeriodElapsedCallback:00000000000000f4 $d
                            *COM*:0000000000000048 htim14
                            *COM*:0000000000000004 TxMailbox
                            *COM*:0000000000000018 TxHeader2
     /tmp/ccmzXxfp.s:1150   .text.Error_Handler:0000000000000000 $t
     /tmp/ccmzXxfp.s:1157   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccmzXxfp.s:1189   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccmzXxfp.s:1195   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccmzXxfp.s:1410   .text.MX_CAN1_Init:00000000000000c0 $d
                            *COM*:0000000000000028 filter0
                            *COM*:0000000000000028 filter1
                            *COM*:0000000000000028 canFilter2
                            *COM*:0000000000000028 canFilter0
     /tmp/ccmzXxfp.s:1420   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccmzXxfp.s:1426   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccmzXxfp.s:1594   .text.MX_ADC1_Init:00000000000000a4 $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccmzXxfp.s:1601   .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/ccmzXxfp.s:1607   .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/ccmzXxfp.s:1656   .text.MX_TIM14_Init:0000000000000028 $d
     /tmp/ccmzXxfp.s:1662   .text.MX_TIM13_Init:0000000000000000 $t
     /tmp/ccmzXxfp.s:1668   .text.MX_TIM13_Init:0000000000000000 MX_TIM13_Init
     /tmp/ccmzXxfp.s:1717   .text.MX_TIM13_Init:0000000000000028 $d
                            *COM*:0000000000000048 htim13
ARM GAS  /tmp/ccmzXxfp.s 			page 73


     /tmp/ccmzXxfp.s:1723   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccmzXxfp.s:1730   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccmzXxfp.s:1881   .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccmzXxfp.s:1887   .text.main:0000000000000000 $t
     /tmp/ccmzXxfp.s:1894   .text.main:0000000000000000 main
     /tmp/ccmzXxfp.s:2040   .text.main:0000000000000088 $d
                            *COM*:0000000000000018 TxHeader
                            *COM*:0000000000000018 TxHeader3
     /tmp/ccmzXxfp.s:2052   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccmzXxfp.s:2059   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccmzXxfp.s:2187   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000068 $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
     /tmp/ccmzXxfp.s:2354   .bss.rinehartUpdate:0000000000000000 rinehartUpdate
     /tmp/ccmzXxfp.s:2378   .bss.voltageCheckCount:0000000000000000 voltageCheckCount
     /tmp/ccmzXxfp.s:2322   .bss.lastPrechargeState:0000000000000000 lastPrechargeState
     /tmp/ccmzXxfp.s:2342   .bss.prechargeState:0000000000000000 prechargeState
     /tmp/ccmzXxfp.s:2385   .data.driveMode:0000000000000000 driveMode
     /tmp/ccmzXxfp.s:2297   .bss.command_torque_limit:0000000000000000 command_torque_limit
     /tmp/ccmzXxfp.s:2304   .bss.commandedTorque:0000000000000000 commandedTorque
     /tmp/ccmzXxfp.s:2252   .bss.bmsVoltage:0000000000000000 bmsVoltage
     /tmp/ccmzXxfp.s:2361   .bss.rinehartVoltage:0000000000000000 rinehartVoltage
     /tmp/ccmzXxfp.s:2310   .bss.enableInverter:0000000000000000 enableInverter
     /tmp/ccmzXxfp.s:2285   .bss.buzzerCounter:0000000000000000 buzzerCounter
     /tmp/ccmzXxfp.s:2291   .bss.buzzerState:0000000000000000 buzzerState
     /tmp/ccmzXxfp.s:2348   .bss.ready_to_drive:0000000000000000 ready_to_drive
     /tmp/ccmzXxfp.s:2336   .bss.pedalAverage:0000000000000000 pedalAverage
     /tmp/ccmzXxfp.s:2273   .bss.brakeAverage:0000000000000000 brakeAverage
     /tmp/ccmzXxfp.s:2392   .data.pedal1:0000000000000000 pedal1
     /tmp/ccmzXxfp.s:2329   .bss.pedal0:0000000000000000 pedal0
     /tmp/ccmzXxfp.s:2266   .bss.brake1:0000000000000000 brake1
     /tmp/ccmzXxfp.s:2259   .bss.brake0:0000000000000000 brake0
     /tmp/ccmzXxfp.s:2279   .bss.brakeLight:0000000000000000 brakeLight
     /tmp/ccmzXxfp.s:2373   .bss.switch_direction:0000000000000000 switch_direction
     /tmp/ccmzXxfp.s:2367   .bss.switch_cooling:0000000000000000 switch_cooling
     /tmp/ccmzXxfp.s:2245   .bss.bmsFault:0000000000000000 bmsFault
     /tmp/ccmzXxfp.s:2316   .bss.imdFault:0000000000000000 imdFault
                            *COM*:0000000000000060 hdma_adc1
     /tmp/ccmzXxfp.s:2246   .bss.bmsFault:0000000000000000 $d
     /tmp/ccmzXxfp.s:2248   .bss.bmsVoltage:0000000000000000 $d
     /tmp/ccmzXxfp.s:2255   .bss.brake0:0000000000000000 $d
     /tmp/ccmzXxfp.s:2262   .bss.brake1:0000000000000000 $d
     /tmp/ccmzXxfp.s:2269   .bss.brakeAverage:0000000000000000 $d
     /tmp/ccmzXxfp.s:2280   .bss.brakeLight:0000000000000000 $d
     /tmp/ccmzXxfp.s:2286   .bss.buzzerCounter:0000000000000000 $d
     /tmp/ccmzXxfp.s:2292   .bss.buzzerState:0000000000000000 $d
     /tmp/ccmzXxfp.s:2294   .bss.command_torque_limit:0000000000000000 $d
     /tmp/ccmzXxfp.s:2300   .bss.commandedTorque:0000000000000000 $d
     /tmp/ccmzXxfp.s:2311   .bss.enableInverter:0000000000000000 $d
     /tmp/ccmzXxfp.s:2317   .bss.imdFault:0000000000000000 $d
     /tmp/ccmzXxfp.s:2323   .bss.lastPrechargeState:0000000000000000 $d
     /tmp/ccmzXxfp.s:2325   .bss.pedal0:0000000000000000 $d
     /tmp/ccmzXxfp.s:2332   .bss.pedalAverage:0000000000000000 $d
     /tmp/ccmzXxfp.s:2343   .bss.prechargeState:0000000000000000 $d
     /tmp/ccmzXxfp.s:2349   .bss.ready_to_drive:0000000000000000 $d
     /tmp/ccmzXxfp.s:2355   .bss.rinehartUpdate:0000000000000000 $d
     /tmp/ccmzXxfp.s:2357   .bss.rinehartVoltage:0000000000000000 $d
ARM GAS  /tmp/ccmzXxfp.s 			page 74


     /tmp/ccmzXxfp.s:2368   .bss.switch_cooling:0000000000000000 $d
     /tmp/ccmzXxfp.s:2374   .bss.switch_direction:0000000000000000 $d
     /tmp/ccmzXxfp.s:2379   .bss.voltageCheckCount:0000000000000000 $d
     /tmp/ccmzXxfp.s:2381   .data.driveMode:0000000000000000 $d
     /tmp/ccmzXxfp.s:2388   .data.pedal1:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_ui2d
__aeabi_dmul
__aeabi_dcmpgt
HAL_CAN_AddTxMessage
__aeabi_f2d
__aeabi_dcmplt
HAL_GPIO_ReadPin
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start_IT
HAL_ADC_Start_DMA
HAL_CAN_GetRxMessage
