ARM GAS  /tmp/ccvZiBna.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB223:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccvZiBna.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** #define ADC_BUF_LEN               4
  35:Core/Src/main.c **** #define MAX_PEDAL_SKEW            100
  36:Core/Src/main.c **** #define PEDAL_MAX                 1023
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  47:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** TIM_HandleTypeDef htim13;
  52:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE BEGIN PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** // CAN transmitting
  57:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader;               // either daq or control idk which one address 
  58:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader2;              // rinehart command message address
  59:Core/Src/main.c **** uint8_t TxData[8];
  60:Core/Src/main.c **** uint32_t TxMailbox;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** // CAN reciving 
  63:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
  64:Core/Src/main.c **** uint8_t RxData[8];
  65:Core/Src/main.c **** CAN_FilterTypeDef filter0;                  // filter for __________
  66:Core/Src/main.c **** CAN_FilterTypeDef filter1;                  // fiter for ___________
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** // signal variables (0 = off | 1 = on)
  69:Core/Src/main.c **** uint8_t imdFault = 0;             
  70:Core/Src/main.c **** uint8_t bmsFault = 0;
  71:Core/Src/main.c **** uint8_t switch_cooling = 0;
  72:Core/Src/main.c **** uint8_t switch_direction = 0;               // 0 = forward | 1 = reverse (this changes requires an 
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** // analog pins
  75:Core/Src/main.c **** uint16_t adc_buf[ADC_BUF_LEN];
  76:Core/Src/main.c **** uint16_t pedal0 = 0;
  77:Core/Src/main.c **** uint16_t pedal1 = 1;
  78:Core/Src/main.c **** uint16_t pedalAverage = 0;
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** // state variables (0 = off | 1 = on)
  81:Core/Src/main.c **** uint8_t ready_to_drive = 0;                 // 0 until precharge is done
  82:Core/Src/main.c **** uint8_t buzzerState = 0;                    // for controlling the buzzer
  83:Core/Src/main.c **** uint8_t buzzerCounter = 0;                  // counter for how long the buzzer has been buzzing
  84:Core/Src/main.c **** uint8_t enableInverter = 0;                 // stores state of inverter, can only be 1 after buzzer
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** // rinehart commands
  87:Core/Src/main.c **** uint16_t commandedTorque = 0;               // torque request sent to rinehart, init with 0 to prev
  88:Core/Src/main.c **** uint16_t command_torque_limit = 0;          // max torque allowed to be requested from rinehart, in
ARM GAS  /tmp/ccvZiBna.s 			page 3


  89:Core/Src/main.c **** enum mode                                   // create an enumeration for the drive modes
  90:Core/Src/main.c **** {
  91:Core/Src/main.c ****   SLOW,       // 50% power 
  92:Core/Src/main.c ****   ECO,        // 75% power
  93:Core/Src/main.c ****   FAST        // 100% power 
  94:Core/Src/main.c **** };
  95:Core/Src/main.c **** int driveMode = ECO;                        // set the inital drive mode of the car
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /* USER CODE END PV */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 100:Core/Src/main.c **** void SystemClock_Config(void);
 101:Core/Src/main.c **** static void MX_GPIO_Init(void);
 102:Core/Src/main.c **** static void MX_CAN1_Init(void);
 103:Core/Src/main.c **** static void MX_DMA_Init(void);
 104:Core/Src/main.c **** static void MX_ADC1_Init(void);
 105:Core/Src/main.c **** static void MX_TIM14_Init(void);
 106:Core/Src/main.c **** static void MX_TIM13_Init(void);
 107:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 108:Core/Src/main.c **** uint16_t pedal_conversion(uint16_t pedal0, uint16_t pedal1);
 109:Core/Src/main.c **** long mapValue(long x, long in_min, long in_max, long out_min, long out_max);
 110:Core/Src/main.c **** uint16_t getCommandedTorque();
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* USER CODE END PFP */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 115:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /* USER CODE END 0 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /**
 120:Core/Src/main.c ****   * @brief  The application entry point.
 121:Core/Src/main.c ****   * @retval int
 122:Core/Src/main.c ****   */
 123:Core/Src/main.c **** int main(void)
 124:Core/Src/main.c **** {
 125:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   // define TX header
 128:Core/Src/main.c ****   TxHeader.StdId = 0x093;
 129:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 130:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 131:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 132:Core/Src/main.c ****   TxHeader.DLC = 8;
 133:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 134:Core/Src/main.c ****   
 135:Core/Src/main.c ****   // Rinehart command message
 136:Core/Src/main.c ****   TxHeader2.StdId = 0x0C0;
 137:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 138:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 139:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 140:Core/Src/main.c ****   TxHeader2.DLC = 8;
 141:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* USER CODE END 1 */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  /tmp/ccvZiBna.s 			page 4


 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 148:Core/Src/main.c ****   HAL_Init();
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE END Init */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* Configure the system clock */
 155:Core/Src/main.c ****   SystemClock_Config();
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /* USER CODE END SysInit */
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   /* Initialize all configured peripherals */
 162:Core/Src/main.c ****   MX_GPIO_Init();
 163:Core/Src/main.c ****   MX_CAN1_Init();
 164:Core/Src/main.c ****   MX_DMA_Init();
 165:Core/Src/main.c ****   MX_ADC1_Init();
 166:Core/Src/main.c ****   MX_TIM14_Init();
 167:Core/Src/main.c ****   MX_TIM13_Init();
 168:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   // start interrupts
 171:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 172:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 173:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 174:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 175:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* USER CODE END 2 */
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* Infinite loop */
 180:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 181:Core/Src/main.c ****   while (1)
 182:Core/Src/main.c ****   {
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****     /* USER CODE END WHILE */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 187:Core/Src/main.c ****   }
 188:Core/Src/main.c ****   /* USER CODE END 3 */
 189:Core/Src/main.c **** }
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** /**
 192:Core/Src/main.c ****   * @brief System Clock Configuration
 193:Core/Src/main.c ****   * @retval None
 194:Core/Src/main.c ****   */
 195:Core/Src/main.c **** void SystemClock_Config(void)
 196:Core/Src/main.c **** {
 197:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 198:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
ARM GAS  /tmp/ccvZiBna.s 			page 5


 203:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 204:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 205:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 206:Core/Src/main.c ****   */
 207:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 208:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 209:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 217:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 218:Core/Src/main.c ****   {
 219:Core/Src/main.c ****     Error_Handler();
 220:Core/Src/main.c ****   }
 221:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 224:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 225:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 226:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 231:Core/Src/main.c ****   {
 232:Core/Src/main.c ****     Error_Handler();
 233:Core/Src/main.c ****   }
 234:Core/Src/main.c **** }
 235:Core/Src/main.c **** 
 236:Core/Src/main.c **** /**
 237:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 238:Core/Src/main.c ****   * @param None
 239:Core/Src/main.c ****   * @retval None
 240:Core/Src/main.c ****   */
 241:Core/Src/main.c **** static void MX_ADC1_Init(void)
 242:Core/Src/main.c **** {
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 253:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 254:Core/Src/main.c ****   */
 255:Core/Src/main.c ****   hadc1.Instance = ADC1;
 256:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 257:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 258:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 259:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
ARM GAS  /tmp/ccvZiBna.s 			page 6


 260:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 261:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 262:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 263:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 264:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 265:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 266:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 267:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 268:Core/Src/main.c ****   {
 269:Core/Src/main.c ****     Error_Handler();
 270:Core/Src/main.c ****   }
 271:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 272:Core/Src/main.c ****   */
 273:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 274:Core/Src/main.c ****   sConfig.Rank = 1;
 275:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 276:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 277:Core/Src/main.c ****   {
 278:Core/Src/main.c ****     Error_Handler();
 279:Core/Src/main.c ****   }
 280:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 281:Core/Src/main.c ****   */
 282:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 283:Core/Src/main.c ****   sConfig.Rank = 2;
 284:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 285:Core/Src/main.c ****   {
 286:Core/Src/main.c ****     Error_Handler();
 287:Core/Src/main.c ****   }
 288:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 289:Core/Src/main.c ****   */
 290:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 291:Core/Src/main.c ****   sConfig.Rank = 3;
 292:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 293:Core/Src/main.c ****   {
 294:Core/Src/main.c ****     Error_Handler();
 295:Core/Src/main.c ****   }
 296:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 297:Core/Src/main.c ****   */
 298:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
 299:Core/Src/main.c ****   sConfig.Rank = 4;
 300:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c **** }
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** /**
 311:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 312:Core/Src/main.c ****   * @param None
 313:Core/Src/main.c ****   * @retval None
 314:Core/Src/main.c ****   */
 315:Core/Src/main.c **** static void MX_CAN1_Init(void)
 316:Core/Src/main.c **** {
ARM GAS  /tmp/ccvZiBna.s 			page 7


 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 325:Core/Src/main.c ****   hcan1.Instance = CAN1;
 326:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 327:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 328:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 329:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 330:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 331:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 332:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 333:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 334:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 335:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 336:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 337:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 338:Core/Src/main.c ****   {
 339:Core/Src/main.c ****     Error_Handler();
 340:Core/Src/main.c ****   }
 341:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 342:Core/Src/main.c **** 
 343:Core/Src/main.c ****   filter0.FilterIdHigh = 0x082 << 5;
 344:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 345:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 346:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 347:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 348:Core/Src/main.c ****   filter0.FilterBank = 1;
 349:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 350:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 351:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 352:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan1, &filter0);
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   // listen for HVB
 357:Core/Src/main.c ****   filter1.FilterIdHigh = 0x087 << 5;
 358:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 359:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x087 << 5;
 360:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 361:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 362:Core/Src/main.c ****   filter1.FilterBank = 2;
 363:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 364:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 365:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 366:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan1, &filter1);
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 371:Core/Src/main.c **** 
 372:Core/Src/main.c **** }
 373:Core/Src/main.c **** 
ARM GAS  /tmp/ccvZiBna.s 			page 8


 374:Core/Src/main.c **** /**
 375:Core/Src/main.c ****   * @brief TIM13 Initialization Function
 376:Core/Src/main.c ****   * @param None
 377:Core/Src/main.c ****   * @retval None
 378:Core/Src/main.c ****   */
 379:Core/Src/main.c **** static void MX_TIM13_Init(void)
 380:Core/Src/main.c **** {
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 0 */
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****   /* USER CODE END TIM13_Init 0 */
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 1 */
 387:Core/Src/main.c **** 
 388:Core/Src/main.c ****   /* USER CODE END TIM13_Init 1 */
 389:Core/Src/main.c ****   htim13.Instance = TIM13;
 390:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 391:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 392:Core/Src/main.c ****   htim13.Init.Period = 500-1;
 393:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 394:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 395:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 396:Core/Src/main.c ****   {
 397:Core/Src/main.c ****     Error_Handler();
 398:Core/Src/main.c ****   }
 399:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 2 */
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /* USER CODE END TIM13_Init 2 */
 402:Core/Src/main.c **** 
 403:Core/Src/main.c **** }
 404:Core/Src/main.c **** 
 405:Core/Src/main.c **** /**
 406:Core/Src/main.c ****   * @brief TIM14 Initialization Function
 407:Core/Src/main.c ****   * @param None
 408:Core/Src/main.c ****   * @retval None
 409:Core/Src/main.c ****   */
 410:Core/Src/main.c **** static void MX_TIM14_Init(void)
 411:Core/Src/main.c **** {
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
 416:Core/Src/main.c **** 
 417:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
 420:Core/Src/main.c ****   htim14.Instance = TIM14;
 421:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 422:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 423:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 424:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 425:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 426:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 427:Core/Src/main.c ****   {
 428:Core/Src/main.c ****     Error_Handler();
 429:Core/Src/main.c ****   }
 430:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
ARM GAS  /tmp/ccvZiBna.s 			page 9


 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c **** }
 435:Core/Src/main.c **** 
 436:Core/Src/main.c **** /**
 437:Core/Src/main.c ****   * Enable DMA controller clock
 438:Core/Src/main.c ****   */
 439:Core/Src/main.c **** static void MX_DMA_Init(void)
 440:Core/Src/main.c **** {
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /* DMA controller clock enable */
 443:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* DMA interrupt init */
 446:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 447:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 448:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 449:Core/Src/main.c **** 
 450:Core/Src/main.c **** }
 451:Core/Src/main.c **** 
 452:Core/Src/main.c **** /**
 453:Core/Src/main.c ****   * @brief GPIO Initialization Function
 454:Core/Src/main.c ****   * @param None
 455:Core/Src/main.c ****   * @retval None
 456:Core/Src/main.c ****   */
 457:Core/Src/main.c **** static void MX_GPIO_Init(void)
 458:Core/Src/main.c **** {
  28              		.loc 1 458 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 56
 459:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 459 3 view .LVU1
  44              		.loc 1 459 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0394     		str	r4, [sp, #12]
  47 0008 0494     		str	r4, [sp, #16]
  48 000a 0594     		str	r4, [sp, #20]
  49 000c 0694     		str	r4, [sp, #24]
  50 000e 0794     		str	r4, [sp, #28]
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 462:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 462 3 is_stmt 1 view .LVU3
  52              	.LBB4:
ARM GAS  /tmp/ccvZiBna.s 			page 10


  53              		.loc 1 462 3 view .LVU4
  54 0010 0094     		str	r4, [sp]
  55              		.loc 1 462 3 view .LVU5
  56 0012 2B4B     		ldr	r3, .L3
  57 0014 1A6B     		ldr	r2, [r3, #48]
  58 0016 42F08002 		orr	r2, r2, #128
  59 001a 1A63     		str	r2, [r3, #48]
  60              		.loc 1 462 3 view .LVU6
  61 001c 1A6B     		ldr	r2, [r3, #48]
  62 001e 02F08002 		and	r2, r2, #128
  63 0022 0092     		str	r2, [sp]
  64              		.loc 1 462 3 view .LVU7
  65 0024 009A     		ldr	r2, [sp]
  66              	.LBE4:
  67              		.loc 1 462 3 view .LVU8
 463:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  68              		.loc 1 463 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 463 3 view .LVU10
  71 0026 0194     		str	r4, [sp, #4]
  72              		.loc 1 463 3 view .LVU11
  73 0028 1A6B     		ldr	r2, [r3, #48]
  74 002a 42F00102 		orr	r2, r2, #1
  75 002e 1A63     		str	r2, [r3, #48]
  76              		.loc 1 463 3 view .LVU12
  77 0030 1A6B     		ldr	r2, [r3, #48]
  78 0032 02F00102 		and	r2, r2, #1
  79 0036 0192     		str	r2, [sp, #4]
  80              		.loc 1 463 3 view .LVU13
  81 0038 019A     		ldr	r2, [sp, #4]
  82              	.LBE5:
  83              		.loc 1 463 3 view .LVU14
 464:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  84              		.loc 1 464 3 view .LVU15
  85              	.LBB6:
  86              		.loc 1 464 3 view .LVU16
  87 003a 0294     		str	r4, [sp, #8]
  88              		.loc 1 464 3 view .LVU17
  89 003c 1A6B     		ldr	r2, [r3, #48]
  90 003e 42F00202 		orr	r2, r2, #2
  91 0042 1A63     		str	r2, [r3, #48]
  92              		.loc 1 464 3 view .LVU18
  93 0044 1B6B     		ldr	r3, [r3, #48]
  94 0046 03F00203 		and	r3, r3, #2
  95 004a 0293     		str	r3, [sp, #8]
  96              		.loc 1 464 3 view .LVU19
  97 004c 029B     		ldr	r3, [sp, #8]
  98              	.LBE6:
  99              		.loc 1 464 3 view .LVU20
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 467:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 100              		.loc 1 467 3 view .LVU21
 101 004e 1D4D     		ldr	r5, .L3+4
 102 0050 2246     		mov	r2, r4
 103 0052 4FF48271 		mov	r1, #260
 104 0056 2846     		mov	r0, r5
ARM GAS  /tmp/ccvZiBna.s 			page 11


 105 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 106              	.LVL0:
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 470:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 107              		.loc 1 470 3 view .LVU22
 108 005c 1A4E     		ldr	r6, .L3+8
 109 005e 2246     		mov	r2, r4
 110 0060 4FF48061 		mov	r1, #1024
 111 0064 3046     		mov	r0, r6
 112 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 113              	.LVL1:
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /*Configure GPIO pins : PB2 PB8 */
 473:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 114              		.loc 1 473 3 view .LVU23
 115              		.loc 1 473 23 is_stmt 0 view .LVU24
 116 006a 4FF48273 		mov	r3, #260
 117 006e 0393     		str	r3, [sp, #12]
 474:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 474 3 is_stmt 1 view .LVU25
 119              		.loc 1 474 24 is_stmt 0 view .LVU26
 120 0070 0127     		movs	r7, #1
 121 0072 0497     		str	r7, [sp, #16]
 475:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 122              		.loc 1 475 3 is_stmt 1 view .LVU27
 123              		.loc 1 475 24 is_stmt 0 view .LVU28
 124 0074 0594     		str	r4, [sp, #20]
 476:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 476 3 is_stmt 1 view .LVU29
 126              		.loc 1 476 25 is_stmt 0 view .LVU30
 127 0076 0694     		str	r4, [sp, #24]
 477:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 128              		.loc 1 477 3 is_stmt 1 view .LVU31
 129 0078 03A9     		add	r1, sp, #12
 130 007a 2846     		mov	r0, r5
 131 007c FFF7FEFF 		bl	HAL_GPIO_Init
 132              	.LVL2:
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /*Configure GPIO pin : PB15 */
 480:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 133              		.loc 1 480 3 view .LVU32
 134              		.loc 1 480 23 is_stmt 0 view .LVU33
 135 0080 4FF40043 		mov	r3, #32768
 136 0084 0393     		str	r3, [sp, #12]
 481:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 137              		.loc 1 481 3 is_stmt 1 view .LVU34
 138              		.loc 1 481 24 is_stmt 0 view .LVU35
 139 0086 4FF48813 		mov	r3, #1114112
 140 008a 0493     		str	r3, [sp, #16]
 482:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 141              		.loc 1 482 3 is_stmt 1 view .LVU36
 142              		.loc 1 482 24 is_stmt 0 view .LVU37
 143 008c 0594     		str	r4, [sp, #20]
 483:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 144              		.loc 1 483 3 is_stmt 1 view .LVU38
 145 008e 03A9     		add	r1, sp, #12
ARM GAS  /tmp/ccvZiBna.s 			page 12


 146 0090 2846     		mov	r0, r5
 147 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 148              	.LVL3:
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   /*Configure GPIO pin : PA10 */
 486:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 149              		.loc 1 486 3 view .LVU39
 150              		.loc 1 486 23 is_stmt 0 view .LVU40
 151 0096 4FF48063 		mov	r3, #1024
 152 009a 0393     		str	r3, [sp, #12]
 487:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 153              		.loc 1 487 3 is_stmt 1 view .LVU41
 154              		.loc 1 487 24 is_stmt 0 view .LVU42
 155 009c 0497     		str	r7, [sp, #16]
 488:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 156              		.loc 1 488 3 is_stmt 1 view .LVU43
 157              		.loc 1 488 24 is_stmt 0 view .LVU44
 158 009e 0594     		str	r4, [sp, #20]
 489:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 159              		.loc 1 489 3 is_stmt 1 view .LVU45
 160              		.loc 1 489 25 is_stmt 0 view .LVU46
 161 00a0 0694     		str	r4, [sp, #24]
 490:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 162              		.loc 1 490 3 is_stmt 1 view .LVU47
 163 00a2 03A9     		add	r1, sp, #12
 164 00a4 3046     		mov	r0, r6
 165 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 166              	.LVL4:
 491:Core/Src/main.c **** 
 492:Core/Src/main.c ****   /* EXTI interrupt init*/
 493:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 167              		.loc 1 493 3 view .LVU48
 168 00aa 2246     		mov	r2, r4
 169 00ac 2146     		mov	r1, r4
 170 00ae 2820     		movs	r0, #40
 171 00b0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 172              	.LVL5:
 494:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 173              		.loc 1 494 3 view .LVU49
 174 00b4 2820     		movs	r0, #40
 175 00b6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 176              	.LVL6:
 495:Core/Src/main.c **** 
 496:Core/Src/main.c **** }
 177              		.loc 1 496 1 is_stmt 0 view .LVU50
 178 00ba 09B0     		add	sp, sp, #36
 179              	.LCFI2:
 180              		.cfi_def_cfa_offset 20
 181              		@ sp needed
 182 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 183              	.L4:
 184 00be 00BF     		.align	2
 185              	.L3:
 186 00c0 00380240 		.word	1073887232
 187 00c4 00040240 		.word	1073873920
 188 00c8 00000240 		.word	1073872896
 189              		.cfi_endproc
ARM GAS  /tmp/ccvZiBna.s 			page 13


 190              	.LFE223:
 192              		.section	.text.MX_DMA_Init,"ax",%progbits
 193              		.align	1
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	MX_DMA_Init:
 200              	.LFB222:
 440:Core/Src/main.c **** 
 201              		.loc 1 440 1 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 8
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 00B5     		push	{lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 14, -4
 209 0002 83B0     		sub	sp, sp, #12
 210              	.LCFI4:
 211              		.cfi_def_cfa_offset 16
 443:Core/Src/main.c **** 
 212              		.loc 1 443 3 view .LVU52
 213              	.LBB7:
 443:Core/Src/main.c **** 
 214              		.loc 1 443 3 view .LVU53
 215 0004 0021     		movs	r1, #0
 216 0006 0191     		str	r1, [sp, #4]
 443:Core/Src/main.c **** 
 217              		.loc 1 443 3 view .LVU54
 218 0008 094B     		ldr	r3, .L7
 219 000a 1A6B     		ldr	r2, [r3, #48]
 220 000c 42F48002 		orr	r2, r2, #4194304
 221 0010 1A63     		str	r2, [r3, #48]
 443:Core/Src/main.c **** 
 222              		.loc 1 443 3 view .LVU55
 223 0012 1B6B     		ldr	r3, [r3, #48]
 224 0014 03F48003 		and	r3, r3, #4194304
 225 0018 0193     		str	r3, [sp, #4]
 443:Core/Src/main.c **** 
 226              		.loc 1 443 3 view .LVU56
 227 001a 019B     		ldr	r3, [sp, #4]
 228              	.LBE7:
 443:Core/Src/main.c **** 
 229              		.loc 1 443 3 view .LVU57
 447:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 447 3 view .LVU58
 231 001c 0A46     		mov	r2, r1
 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL7:
 448:Core/Src/main.c **** 
 235              		.loc 1 448 3 view .LVU59
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 238              	.LVL8:
 450:Core/Src/main.c **** 
ARM GAS  /tmp/ccvZiBna.s 			page 14


 239              		.loc 1 450 1 is_stmt 0 view .LVU60
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE222:
 252              		.section	.text.mapValue,"ax",%progbits
 253              		.align	1
 254              		.global	mapValue
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu fpv4-sp-d16
 260              	mapValue:
 261              	.LVL9:
 262              	.LFB224:
 497:Core/Src/main.c **** 
 498:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** // re-map function
 501:Core/Src/main.c **** long mapValue(long x, long in_min, long in_max, long out_min, long out_max) {
 263              		.loc 1 501 77 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 4, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 268              		.loc 1 501 77 is_stmt 0 view .LVU62
 269 0000 10B4     		push	{r4}
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 4
 272              		.cfi_offset 4, -4
 502:Core/Src/main.c ****   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 273              		.loc 1 502 3 is_stmt 1 view .LVU63
 274              		.loc 1 502 13 is_stmt 0 view .LVU64
 275 0002 401A     		subs	r0, r0, r1
 276              	.LVL10:
 277              		.loc 1 502 34 view .LVU65
 278 0004 019C     		ldr	r4, [sp, #4]
 279 0006 E41A     		subs	r4, r4, r3
 280              		.loc 1 502 23 view .LVU66
 281 0008 04FB00F4 		mul	r4, r4, r0
 282              		.loc 1 502 55 view .LVU67
 283 000c 511A     		subs	r1, r2, r1
 284              	.LVL11:
 285              		.loc 1 502 45 view .LVU68
 286 000e 94FBF1F4 		sdiv	r4, r4, r1
 503:Core/Src/main.c **** }
 287              		.loc 1 503 1 view .LVU69
 288 0012 E018     		adds	r0, r4, r3
 289 0014 5DF8044B 		ldr	r4, [sp], #4
 290              	.LCFI7:
ARM GAS  /tmp/ccvZiBna.s 			page 15


 291              		.cfi_restore 4
 292              		.cfi_def_cfa_offset 0
 293              	.LVL12:
 294              		.loc 1 503 1 view .LVU70
 295 0018 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE224:
 299              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 300              		.align	1
 301              		.global	HAL_GPIO_EXTI_Callback
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	HAL_GPIO_EXTI_Callback:
 308              	.LVL13:
 309              	.LFB227:
 504:Core/Src/main.c **** 
 505:Core/Src/main.c **** 
 506:Core/Src/main.c **** // function to re-map the pedal value to a torque value based on the drive mode
 507:Core/Src/main.c **** uint16_t getCommandedTorque()
 508:Core/Src/main.c **** {
 509:Core/Src/main.c ****   // get the pedal average
 510:Core/Src/main.c ****   pedalAverage = pedal_conversion(pedal0, pedal1);
 511:Core/Src/main.c **** 
 512:Core/Src/main.c ****   // drive mode logic
 513:Core/Src/main.c ****   switch (driveMode)
 514:Core/Src/main.c ****   {
 515:Core/Src/main.c ****     case SLOW:
 516:Core/Src/main.c ****       command_torque_limit = 50;
 517:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, 0, PEDAL_MAX, 0, command_torque_limit);
 518:Core/Src/main.c ****       return commandedTorque;
 519:Core/Src/main.c ****     break;
 520:Core/Src/main.c **** 
 521:Core/Src/main.c ****     case ECO:
 522:Core/Src/main.c ****       command_torque_limit = 75;
 523:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, 0, PEDAL_MAX, 0, command_torque_limit);
 524:Core/Src/main.c ****       return commandedTorque;
 525:Core/Src/main.c ****     break;
 526:Core/Src/main.c **** 
 527:Core/Src/main.c ****     case FAST:
 528:Core/Src/main.c ****       command_torque_limit = 100;   // do not change this to more than 100 
 529:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, 0, PEDAL_MAX, 0, command_torque_limit);
 530:Core/Src/main.c ****       return commandedTorque;
 531:Core/Src/main.c ****     break;
 532:Core/Src/main.c ****     
 533:Core/Src/main.c ****     // error state, set the mode to ECO
 534:Core/Src/main.c ****     default:
 535:Core/Src/main.c ****       // set the state to ECO for next time
 536:Core/Src/main.c ****       driveMode = ECO;
 537:Core/Src/main.c **** 
 538:Core/Src/main.c ****       // we don't want to send a torque if we are in an undefined state
 539:Core/Src/main.c ****       return commandedTorque = 0;
 540:Core/Src/main.c ****     break;
 541:Core/Src/main.c ****   }
 542:Core/Src/main.c **** }
 543:Core/Src/main.c **** 
ARM GAS  /tmp/ccvZiBna.s 			page 16


 544:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 545:Core/Src/main.c **** {
 546:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 547:Core/Src/main.c ****     Error_Handler();
 548:Core/Src/main.c ****   }
 549:Core/Src/main.c **** 
 550:Core/Src/main.c ****   // read CAN data from Rear Control Board
 551:Core/Src/main.c ****   if (RxHeader.StdId == 0x082){
 552:Core/Src/main.c ****       imdFault = RxData[0];
 553:Core/Src/main.c ****       bmsFault = RxData[1];
 554:Core/Src/main.c ****   }
 555:Core/Src/main.c **** 
 556:Core/Src/main.c ****   // read CAN data from High Voltage Board 
 557:Core/Src/main.c ****   if (RxHeader.StdId == 0x087){
 558:Core/Src/main.c ****       ready_to_drive = RxData[0];
 559:Core/Src/main.c ****   }
 560:Core/Src/main.c **** }
 561:Core/Src/main.c **** 
 562:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 563:Core/Src/main.c **** {
 310              		.loc 1 563 1 is_stmt 1 view -0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 564:Core/Src/main.c ****   // handle start button interrupt
 565:Core/Src/main.c ****   if (GPIO_Pin == GPIO_PIN_15)
 315              		.loc 1 565 3 view .LVU72
 316              		.loc 1 565 6 is_stmt 0 view .LVU73
 317 0000 B0F5004F 		cmp	r0, #32768
 318 0004 00D0     		beq	.L13
 319              	.L11:
 566:Core/Src/main.c ****   {
 567:Core/Src/main.c ****     // if ready to drive & the button has been pushed, start the buzzer
 568:Core/Src/main.c ****     if (ready_to_drive)
 569:Core/Src/main.c ****     {
 570:Core/Src/main.c ****       buzzerState = 1;
 571:Core/Src/main.c ****     }
 572:Core/Src/main.c ****   }
 573:Core/Src/main.c **** }
 320              		.loc 1 573 1 view .LVU74
 321 0006 7047     		bx	lr
 322              	.L13:
 568:Core/Src/main.c ****     {
 323              		.loc 1 568 5 is_stmt 1 view .LVU75
 568:Core/Src/main.c ****     {
 324              		.loc 1 568 9 is_stmt 0 view .LVU76
 325 0008 034B     		ldr	r3, .L14
 326 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 568:Core/Src/main.c ****     {
 327              		.loc 1 568 8 view .LVU77
 328 000c 002B     		cmp	r3, #0
 329 000e FAD0     		beq	.L11
 570:Core/Src/main.c ****     }
 330              		.loc 1 570 7 is_stmt 1 view .LVU78
 570:Core/Src/main.c ****     }
 331              		.loc 1 570 19 is_stmt 0 view .LVU79
ARM GAS  /tmp/ccvZiBna.s 			page 17


 332 0010 024B     		ldr	r3, .L14+4
 333 0012 0122     		movs	r2, #1
 334 0014 1A70     		strb	r2, [r3]
 335              		.loc 1 573 1 view .LVU80
 336 0016 F6E7     		b	.L11
 337              	.L15:
 338              		.align	2
 339              	.L14:
 340 0018 00000000 		.word	.LANCHOR0
 341 001c 00000000 		.word	.LANCHOR1
 342              		.cfi_endproc
 343              	.LFE227:
 345              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 346              		.align	1
 347              		.global	HAL_ADC_ConvCpltCallback
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu fpv4-sp-d16
 353              	HAL_ADC_ConvCpltCallback:
 354              	.LVL14:
 355              	.LFB229:
 574:Core/Src/main.c **** 
 575:Core/Src/main.c **** // Timer Interrupts
 576:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 577:Core/Src/main.c **** {
 578:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 579:Core/Src/main.c ****   if (htim == &htim13){
 580:Core/Src/main.c **** 
 581:Core/Src/main.c ****     // drive mode logic
 582:Core/Src/main.c ****     commandedTorque = getCommandedTorque();
 583:Core/Src/main.c ****     
 584:Core/Src/main.c ****     // build CONTROL CAN message
 585:Core/Src/main.c ****     TxData[0] = pedalAverage & 0xFF;
 586:Core/Src/main.c ****     TxData[1] = pedalAverage >> 8;
 587:Core/Src/main.c ****     TxData[2] = 0;
 588:Core/Src/main.c ****     TxData[3] = 0;
 589:Core/Src/main.c ****     TxData[4] = switch_direction;
 590:Core/Src/main.c ****     TxData[5] = enableInverter;
 591:Core/Src/main.c ****     TxData[6] = commandedTorque & 0xFF;
 592:Core/Src/main.c ****     TxData[7] = commandedTorque >> 8;
 593:Core/Src/main.c **** 
 594:Core/Src/main.c ****     // send message
 595:Core/Src/main.c ****     HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData, &TxMailbox);
 596:Core/Src/main.c ****   }
 597:Core/Src/main.c ****   
 598:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 599:Core/Src/main.c ****   if (htim == &htim14)
 600:Core/Src/main.c ****   {
 601:Core/Src/main.c ****     // sample cooling switch and drive direction switch
 602:Core/Src/main.c ****     switch_cooling = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 603:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 604:Core/Src/main.c **** 
 605:Core/Src/main.c ****     // start button led logic
 606:Core/Src/main.c ****     if (ready_to_drive)
 607:Core/Src/main.c ****     {
 608:Core/Src/main.c ****       // turn the LED on
ARM GAS  /tmp/ccvZiBna.s 			page 18


 609:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 610:Core/Src/main.c ****     }
 611:Core/Src/main.c ****     else
 612:Core/Src/main.c ****     {
 613:Core/Src/main.c ****       // turn the LED off
 614:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 615:Core/Src/main.c ****       enableInverter = 0;
 616:Core/Src/main.c ****     }
 617:Core/Src/main.c ****     
 618:Core/Src/main.c ****     // buzzer logic
 619:Core/Src/main.c ****     if (buzzerState == 1){
 620:Core/Src/main.c ****       buzzerCounter++;
 621:Core/Src/main.c ****       if (buzzerCounter >= 20)   // buzzerCounter is being updated on a 10Hz interval, so after 20 
 622:Core/Src/main.c ****       {
 623:Core/Src/main.c ****         buzzerState = 0;
 624:Core/Src/main.c ****         buzzerCounter = 0;
 625:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 626:Core/Src/main.c ****       }
 627:Core/Src/main.c ****     }
 628:Core/Src/main.c **** 
 629:Core/Src/main.c ****     // build CAN message 
 630:Core/Src/main.c ****     TxData[0] = pedal1 & 0xFF;
 631:Core/Src/main.c ****     TxData[1] = pedal1 >> 8;
 632:Core/Src/main.c ****     TxData[2] = switch_cooling;
 633:Core/Src/main.c ****     TxData[3] = pedalAverage & 0xFF;
 634:Core/Src/main.c ****     TxData[4] = buzzerState;
 635:Core/Src/main.c ****     TxData[6] = pedal0 & 0xFF;
 636:Core/Src/main.c ****     TxData[5] = pedal0 >> 8;
 637:Core/Src/main.c ****     TxData[7] = pedalAverage >>8;
 638:Core/Src/main.c **** 
 639:Core/Src/main.c ****     // send message
 640:Core/Src/main.c ****     HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 641:Core/Src/main.c **** 
 642:Core/Src/main.c ****     // update LEDS and inverter drive direction 
 643:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, imdFault);
 644:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, bmsFault);
 645:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, buzzerState);
 646:Core/Src/main.c ****   }
 647:Core/Src/main.c **** }
 648:Core/Src/main.c **** 
 649:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 650:Core/Src/main.c **** {
 356              		.loc 1 650 1 is_stmt 1 view -0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 651:Core/Src/main.c ****   // read values from DMA
 652:Core/Src/main.c ****   pedal0 = adc_buf[2];
 361              		.loc 1 652 3 view .LVU82
 362              		.loc 1 652 19 is_stmt 0 view .LVU83
 363 0000 034B     		ldr	r3, .L17
 364 0002 9988     		ldrh	r1, [r3, #4]
 365              		.loc 1 652 10 view .LVU84
 366 0004 034A     		ldr	r2, .L17+4
 367 0006 1180     		strh	r1, [r2]	@ movhi
 653:Core/Src/main.c ****   pedal1 = adc_buf[3];
ARM GAS  /tmp/ccvZiBna.s 			page 19


 368              		.loc 1 653 3 is_stmt 1 view .LVU85
 369              		.loc 1 653 19 is_stmt 0 view .LVU86
 370 0008 DA88     		ldrh	r2, [r3, #6]
 371              		.loc 1 653 10 view .LVU87
 372 000a 034B     		ldr	r3, .L17+8
 373 000c 1A80     		strh	r2, [r3]	@ movhi
 654:Core/Src/main.c **** 
 655:Core/Src/main.c **** }
 374              		.loc 1 655 1 view .LVU88
 375 000e 7047     		bx	lr
 376              	.L18:
 377              		.align	2
 378              	.L17:
 379 0010 00000000 		.word	adc_buf
 380 0014 00000000 		.word	.LANCHOR2
 381 0018 00000000 		.word	.LANCHOR3
 382              		.cfi_endproc
 383              	.LFE229:
 385              		.section	.text.pedal_conversion,"ax",%progbits
 386              		.align	1
 387              		.global	pedal_conversion
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 391              		.fpu fpv4-sp-d16
 393              	pedal_conversion:
 394              	.LVL15:
 395              	.LFB230:
 656:Core/Src/main.c **** 
 657:Core/Src/main.c **** uint16_t pedal_conversion(uint16_t pedal0, uint16_t pedal1)
 658:Core/Src/main.c **** {
 396              		.loc 1 658 1 is_stmt 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 659:Core/Src/main.c ****   // calculate the average of the two pedal potentiometer readings 
 660:Core/Src/main.c ****   pedalAverage = (pedal0 + pedal1) / 2;
 401              		.loc 1 660 3 view .LVU90
 402              		.loc 1 660 36 is_stmt 0 view .LVU91
 403 0000 0844     		add	r0, r0, r1
 404              	.LVL16:
 405              		.loc 1 660 16 view .LVU92
 406 0002 4008     		lsrs	r0, r0, #1
 407 0004 014B     		ldr	r3, .L20
 408 0006 1880     		strh	r0, [r3]	@ movhi
 661:Core/Src/main.c **** 
 662:Core/Src/main.c ****   // ensure the pedal skew isn't dangerously out of bounds
 663:Core/Src/main.c ****   // if (pow(pedal0 - pedalAverage, 2) > MAX_PEDAL_SKEW || 
 664:Core/Src/main.c ****   //     pow(pedal1 - pedalAverage, 2) > MAX_PEDAL_SKEW ){
 665:Core/Src/main.c ****   //     pedalAverage = 0;
 666:Core/Src/main.c ****   // }
 667:Core/Src/main.c **** 
 668:Core/Src/main.c ****   return pedalAverage;
 409              		.loc 1 668 3 is_stmt 1 view .LVU93
 669:Core/Src/main.c **** }
 410              		.loc 1 669 1 is_stmt 0 view .LVU94
ARM GAS  /tmp/ccvZiBna.s 			page 20


 411 0008 7047     		bx	lr
 412              	.L21:
 413 000a 00BF     		.align	2
 414              	.L20:
 415 000c 00000000 		.word	.LANCHOR4
 416              		.cfi_endproc
 417              	.LFE230:
 419              		.section	.text.getCommandedTorque,"ax",%progbits
 420              		.align	1
 421              		.global	getCommandedTorque
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu fpv4-sp-d16
 427              	getCommandedTorque:
 428              	.LFB225:
 508:Core/Src/main.c ****   // get the pedal average
 429              		.loc 1 508 1 is_stmt 1 view -0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433 0000 00B5     		push	{lr}
 434              	.LCFI8:
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 14, -4
 437 0002 83B0     		sub	sp, sp, #12
 438              	.LCFI9:
 439              		.cfi_def_cfa_offset 16
 510:Core/Src/main.c **** 
 440              		.loc 1 510 3 view .LVU96
 510:Core/Src/main.c **** 
 441              		.loc 1 510 18 is_stmt 0 view .LVU97
 442 0004 204B     		ldr	r3, .L29
 443 0006 1988     		ldrh	r1, [r3]
 444 0008 204B     		ldr	r3, .L29+4
 445 000a 1888     		ldrh	r0, [r3]
 446 000c FFF7FEFF 		bl	pedal_conversion
 447              	.LVL17:
 510:Core/Src/main.c **** 
 448              		.loc 1 510 16 view .LVU98
 449 0010 1F4B     		ldr	r3, .L29+8
 450 0012 1880     		strh	r0, [r3]	@ movhi
 513:Core/Src/main.c ****   {
 451              		.loc 1 513 3 is_stmt 1 view .LVU99
 452 0014 1F4B     		ldr	r3, .L29+12
 453 0016 1B68     		ldr	r3, [r3]
 454 0018 012B     		cmp	r3, #1
 455 001a 19D0     		beq	.L23
 456 001c 022B     		cmp	r3, #2
 457 001e 25D0     		beq	.L24
 458 0020 33B1     		cbz	r3, .L28
 531:Core/Src/main.c ****     
 459              		.loc 1 531 5 view .LVU100
 536:Core/Src/main.c **** 
 460              		.loc 1 536 7 view .LVU101
 536:Core/Src/main.c **** 
 461              		.loc 1 536 17 is_stmt 0 view .LVU102
ARM GAS  /tmp/ccvZiBna.s 			page 21


 462 0022 1C4B     		ldr	r3, .L29+12
 463 0024 0122     		movs	r2, #1
 464 0026 1A60     		str	r2, [r3]
 539:Core/Src/main.c ****     break;
 465              		.loc 1 539 7 is_stmt 1 view .LVU103
 539:Core/Src/main.c ****     break;
 466              		.loc 1 539 30 is_stmt 0 view .LVU104
 467 0028 0020     		movs	r0, #0
 468 002a 1B4B     		ldr	r3, .L29+16
 469 002c 1880     		strh	r0, [r3]	@ movhi
 470 002e 0CE0     		b	.L26
 471              	.L28:
 516:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, 0, PEDAL_MAX, 0, command_torque_limit);
 472              		.loc 1 516 7 is_stmt 1 view .LVU105
 516:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, 0, PEDAL_MAX, 0, command_torque_limit);
 473              		.loc 1 516 28 is_stmt 0 view .LVU106
 474 0030 3223     		movs	r3, #50
 475 0032 1A4A     		ldr	r2, .L29+20
 476 0034 1380     		strh	r3, [r2]	@ movhi
 517:Core/Src/main.c ****       return commandedTorque;
 477              		.loc 1 517 7 is_stmt 1 view .LVU107
 517:Core/Src/main.c ****       return commandedTorque;
 478              		.loc 1 517 25 is_stmt 0 view .LVU108
 479 0036 0093     		str	r3, [sp]
 480 0038 0023     		movs	r3, #0
 481 003a 40F2FF32 		movw	r2, #1023
 482 003e 1946     		mov	r1, r3
 483 0040 FFF7FEFF 		bl	mapValue
 484              	.LVL18:
 517:Core/Src/main.c ****       return commandedTorque;
 485              		.loc 1 517 23 view .LVU109
 486 0044 80B2     		uxth	r0, r0
 487 0046 144B     		ldr	r3, .L29+16
 488 0048 1880     		strh	r0, [r3]	@ movhi
 518:Core/Src/main.c ****     break;
 489              		.loc 1 518 7 is_stmt 1 view .LVU110
 490              	.L26:
 540:Core/Src/main.c ****   }
 491              		.loc 1 540 5 view .LVU111
 542:Core/Src/main.c **** 
 492              		.loc 1 542 1 is_stmt 0 view .LVU112
 493 004a 03B0     		add	sp, sp, #12
 494              	.LCFI10:
 495              		.cfi_remember_state
 496              		.cfi_def_cfa_offset 4
 497              		@ sp needed
 498 004c 5DF804FB 		ldr	pc, [sp], #4
 499              	.L23:
 500              	.LCFI11:
 501              		.cfi_restore_state
 519:Core/Src/main.c **** 
 502              		.loc 1 519 5 is_stmt 1 view .LVU113
 522:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, 0, PEDAL_MAX, 0, command_torque_limit);
 503              		.loc 1 522 7 view .LVU114
 522:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, 0, PEDAL_MAX, 0, command_torque_limit);
 504              		.loc 1 522 28 is_stmt 0 view .LVU115
 505 0050 4B23     		movs	r3, #75
ARM GAS  /tmp/ccvZiBna.s 			page 22


 506 0052 124A     		ldr	r2, .L29+20
 507 0054 1380     		strh	r3, [r2]	@ movhi
 523:Core/Src/main.c ****       return commandedTorque;
 508              		.loc 1 523 7 is_stmt 1 view .LVU116
 523:Core/Src/main.c ****       return commandedTorque;
 509              		.loc 1 523 25 is_stmt 0 view .LVU117
 510 0056 0093     		str	r3, [sp]
 511 0058 0023     		movs	r3, #0
 512 005a 40F2FF32 		movw	r2, #1023
 513 005e 1946     		mov	r1, r3
 514 0060 FFF7FEFF 		bl	mapValue
 515              	.LVL19:
 523:Core/Src/main.c ****       return commandedTorque;
 516              		.loc 1 523 23 view .LVU118
 517 0064 80B2     		uxth	r0, r0
 518 0066 0C4B     		ldr	r3, .L29+16
 519 0068 1880     		strh	r0, [r3]	@ movhi
 524:Core/Src/main.c ****     break;
 520              		.loc 1 524 7 is_stmt 1 view .LVU119
 524:Core/Src/main.c ****     break;
 521              		.loc 1 524 14 is_stmt 0 view .LVU120
 522 006a EEE7     		b	.L26
 523              	.L24:
 525:Core/Src/main.c **** 
 524              		.loc 1 525 5 is_stmt 1 view .LVU121
 528:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, 0, PEDAL_MAX, 0, command_torque_limit);
 525              		.loc 1 528 7 view .LVU122
 528:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, 0, PEDAL_MAX, 0, command_torque_limit);
 526              		.loc 1 528 28 is_stmt 0 view .LVU123
 527 006c 6423     		movs	r3, #100
 528 006e 0B4A     		ldr	r2, .L29+20
 529 0070 1380     		strh	r3, [r2]	@ movhi
 529:Core/Src/main.c ****       return commandedTorque;
 530              		.loc 1 529 7 is_stmt 1 view .LVU124
 529:Core/Src/main.c ****       return commandedTorque;
 531              		.loc 1 529 25 is_stmt 0 view .LVU125
 532 0072 0093     		str	r3, [sp]
 533 0074 0023     		movs	r3, #0
 534 0076 40F2FF32 		movw	r2, #1023
 535 007a 1946     		mov	r1, r3
 536 007c FFF7FEFF 		bl	mapValue
 537              	.LVL20:
 529:Core/Src/main.c ****       return commandedTorque;
 538              		.loc 1 529 23 view .LVU126
 539 0080 80B2     		uxth	r0, r0
 540 0082 054B     		ldr	r3, .L29+16
 541 0084 1880     		strh	r0, [r3]	@ movhi
 530:Core/Src/main.c ****     break;
 542              		.loc 1 530 7 is_stmt 1 view .LVU127
 530:Core/Src/main.c ****     break;
 543              		.loc 1 530 14 is_stmt 0 view .LVU128
 544 0086 E0E7     		b	.L26
 545              	.L30:
 546              		.align	2
 547              	.L29:
 548 0088 00000000 		.word	.LANCHOR3
 549 008c 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccvZiBna.s 			page 23


 550 0090 00000000 		.word	.LANCHOR4
 551 0094 00000000 		.word	.LANCHOR5
 552 0098 00000000 		.word	.LANCHOR7
 553 009c 00000000 		.word	.LANCHOR6
 554              		.cfi_endproc
 555              	.LFE225:
 557              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 558              		.align	1
 559              		.global	HAL_TIM_PeriodElapsedCallback
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu fpv4-sp-d16
 565              	HAL_TIM_PeriodElapsedCallback:
 566              	.LVL21:
 567              	.LFB228:
 577:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 568              		.loc 1 577 1 is_stmt 1 view -0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 577:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 572              		.loc 1 577 1 is_stmt 0 view .LVU130
 573 0000 38B5     		push	{r3, r4, r5, lr}
 574              	.LCFI12:
 575              		.cfi_def_cfa_offset 16
 576              		.cfi_offset 3, -16
 577              		.cfi_offset 4, -12
 578              		.cfi_offset 5, -8
 579              		.cfi_offset 14, -4
 580 0002 0446     		mov	r4, r0
 579:Core/Src/main.c **** 
 581              		.loc 1 579 3 is_stmt 1 view .LVU131
 579:Core/Src/main.c **** 
 582              		.loc 1 579 6 is_stmt 0 view .LVU132
 583 0004 444B     		ldr	r3, .L41
 584 0006 9842     		cmp	r0, r3
 585 0008 03D0     		beq	.L38
 586              	.LVL22:
 587              	.L32:
 599:Core/Src/main.c ****   {
 588              		.loc 1 599 3 is_stmt 1 view .LVU133
 599:Core/Src/main.c ****   {
 589              		.loc 1 599 6 is_stmt 0 view .LVU134
 590 000a 444B     		ldr	r3, .L41+4
 591 000c 9C42     		cmp	r4, r3
 592 000e 1CD0     		beq	.L39
 593              	.LVL23:
 594              	.L31:
 647:Core/Src/main.c **** 
 595              		.loc 1 647 1 view .LVU135
 596 0010 38BD     		pop	{r3, r4, r5, pc}
 597              	.LVL24:
 598              	.L38:
 582:Core/Src/main.c ****     
 599              		.loc 1 582 5 is_stmt 1 view .LVU136
 582:Core/Src/main.c ****     
ARM GAS  /tmp/ccvZiBna.s 			page 24


 600              		.loc 1 582 23 is_stmt 0 view .LVU137
 601 0012 FFF7FEFF 		bl	getCommandedTorque
 602              	.LVL25:
 582:Core/Src/main.c ****     
 603              		.loc 1 582 21 view .LVU138
 604 0016 424B     		ldr	r3, .L41+8
 605 0018 1880     		strh	r0, [r3]	@ movhi
 585:Core/Src/main.c ****     TxData[1] = pedalAverage >> 8;
 606              		.loc 1 585 5 is_stmt 1 view .LVU139
 585:Core/Src/main.c ****     TxData[1] = pedalAverage >> 8;
 607              		.loc 1 585 15 is_stmt 0 view .LVU140
 608 001a 424B     		ldr	r3, .L41+12
 609 001c 1B88     		ldrh	r3, [r3]
 610 001e 424A     		ldr	r2, .L41+16
 611 0020 1370     		strb	r3, [r2]
 586:Core/Src/main.c ****     TxData[2] = 0;
 612              		.loc 1 586 5 is_stmt 1 view .LVU141
 586:Core/Src/main.c ****     TxData[2] = 0;
 613              		.loc 1 586 15 is_stmt 0 view .LVU142
 614 0022 1B0A     		lsrs	r3, r3, #8
 615 0024 5370     		strb	r3, [r2, #1]
 587:Core/Src/main.c ****     TxData[3] = 0;
 616              		.loc 1 587 5 is_stmt 1 view .LVU143
 587:Core/Src/main.c ****     TxData[3] = 0;
 617              		.loc 1 587 15 is_stmt 0 view .LVU144
 618 0026 0023     		movs	r3, #0
 619 0028 9370     		strb	r3, [r2, #2]
 588:Core/Src/main.c ****     TxData[4] = switch_direction;
 620              		.loc 1 588 5 is_stmt 1 view .LVU145
 588:Core/Src/main.c ****     TxData[4] = switch_direction;
 621              		.loc 1 588 15 is_stmt 0 view .LVU146
 622 002a D370     		strb	r3, [r2, #3]
 589:Core/Src/main.c ****     TxData[5] = enableInverter;
 623              		.loc 1 589 5 is_stmt 1 view .LVU147
 589:Core/Src/main.c ****     TxData[5] = enableInverter;
 624              		.loc 1 589 15 is_stmt 0 view .LVU148
 625 002c 3F4B     		ldr	r3, .L41+20
 626 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 627 0030 1371     		strb	r3, [r2, #4]
 590:Core/Src/main.c ****     TxData[6] = commandedTorque & 0xFF;
 628              		.loc 1 590 5 is_stmt 1 view .LVU149
 590:Core/Src/main.c ****     TxData[6] = commandedTorque & 0xFF;
 629              		.loc 1 590 15 is_stmt 0 view .LVU150
 630 0032 3F4B     		ldr	r3, .L41+24
 631 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 632 0036 5371     		strb	r3, [r2, #5]
 591:Core/Src/main.c ****     TxData[7] = commandedTorque >> 8;
 633              		.loc 1 591 5 is_stmt 1 view .LVU151
 591:Core/Src/main.c ****     TxData[7] = commandedTorque >> 8;
 634              		.loc 1 591 15 is_stmt 0 view .LVU152
 635 0038 9071     		strb	r0, [r2, #6]
 592:Core/Src/main.c **** 
 636              		.loc 1 592 5 is_stmt 1 view .LVU153
 592:Core/Src/main.c **** 
 637              		.loc 1 592 15 is_stmt 0 view .LVU154
 638 003a 000A     		lsrs	r0, r0, #8
 639 003c D071     		strb	r0, [r2, #7]
ARM GAS  /tmp/ccvZiBna.s 			page 25


 595:Core/Src/main.c ****   }
 640              		.loc 1 595 5 is_stmt 1 view .LVU155
 641 003e 3D4B     		ldr	r3, .L41+28
 642 0040 3D49     		ldr	r1, .L41+32
 643 0042 3E48     		ldr	r0, .L41+36
 644 0044 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 645              	.LVL26:
 646 0048 DFE7     		b	.L32
 647              	.L39:
 602:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 648              		.loc 1 602 5 view .LVU156
 602:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 649              		.loc 1 602 22 is_stmt 0 view .LVU157
 650 004a 3D4C     		ldr	r4, .L41+40
 651              	.LVL27:
 602:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 652              		.loc 1 602 22 view .LVU158
 653 004c 4FF48051 		mov	r1, #4096
 654 0050 2046     		mov	r0, r4
 655 0052 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 656              	.LVL28:
 602:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 657              		.loc 1 602 20 view .LVU159
 658 0056 3B4B     		ldr	r3, .L41+44
 659 0058 1870     		strb	r0, [r3]
 603:Core/Src/main.c **** 
 660              		.loc 1 603 5 is_stmt 1 view .LVU160
 603:Core/Src/main.c **** 
 661              		.loc 1 603 24 is_stmt 0 view .LVU161
 662 005a 4FF40051 		mov	r1, #8192
 663 005e 2046     		mov	r0, r4
 664 0060 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 665              	.LVL29:
 603:Core/Src/main.c **** 
 666              		.loc 1 603 22 view .LVU162
 667 0064 314B     		ldr	r3, .L41+20
 668 0066 1870     		strb	r0, [r3]
 606:Core/Src/main.c ****     {
 669              		.loc 1 606 5 is_stmt 1 view .LVU163
 606:Core/Src/main.c ****     {
 670              		.loc 1 606 9 is_stmt 0 view .LVU164
 671 0068 374B     		ldr	r3, .L41+48
 672 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 606:Core/Src/main.c ****     {
 673              		.loc 1 606 8 view .LVU165
 674 006c 002B     		cmp	r3, #0
 675 006e 39D0     		beq	.L34
 609:Core/Src/main.c ****     }
 676              		.loc 1 609 7 is_stmt 1 view .LVU166
 677 0070 0122     		movs	r2, #1
 678 0072 4FF48061 		mov	r1, #1024
 679 0076 2046     		mov	r0, r4
 680 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 681              	.LVL30:
 682              	.L35:
 619:Core/Src/main.c ****       buzzerCounter++;
 683              		.loc 1 619 5 view .LVU167
ARM GAS  /tmp/ccvZiBna.s 			page 26


 619:Core/Src/main.c ****       buzzerCounter++;
 684              		.loc 1 619 21 is_stmt 0 view .LVU168
 685 007c 334B     		ldr	r3, .L41+52
 686 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 619:Core/Src/main.c ****       buzzerCounter++;
 687              		.loc 1 619 8 view .LVU169
 688 0080 012B     		cmp	r3, #1
 689 0082 39D0     		beq	.L40
 690              	.L36:
 630:Core/Src/main.c ****     TxData[1] = pedal1 >> 8;
 691              		.loc 1 630 5 is_stmt 1 view .LVU170
 630:Core/Src/main.c ****     TxData[1] = pedal1 >> 8;
 692              		.loc 1 630 15 is_stmt 0 view .LVU171
 693 0084 324B     		ldr	r3, .L41+56
 694 0086 1B88     		ldrh	r3, [r3]
 695 0088 274A     		ldr	r2, .L41+16
 696 008a 1370     		strb	r3, [r2]
 631:Core/Src/main.c ****     TxData[2] = switch_cooling;
 697              		.loc 1 631 5 is_stmt 1 view .LVU172
 631:Core/Src/main.c ****     TxData[2] = switch_cooling;
 698              		.loc 1 631 15 is_stmt 0 view .LVU173
 699 008c 1B0A     		lsrs	r3, r3, #8
 700 008e 5370     		strb	r3, [r2, #1]
 632:Core/Src/main.c ****     TxData[3] = pedalAverage & 0xFF;
 701              		.loc 1 632 5 is_stmt 1 view .LVU174
 632:Core/Src/main.c ****     TxData[3] = pedalAverage & 0xFF;
 702              		.loc 1 632 15 is_stmt 0 view .LVU175
 703 0090 2C4B     		ldr	r3, .L41+44
 704 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 705 0094 9370     		strb	r3, [r2, #2]
 633:Core/Src/main.c ****     TxData[4] = buzzerState;
 706              		.loc 1 633 5 is_stmt 1 view .LVU176
 633:Core/Src/main.c ****     TxData[4] = buzzerState;
 707              		.loc 1 633 15 is_stmt 0 view .LVU177
 708 0096 234B     		ldr	r3, .L41+12
 709 0098 1B88     		ldrh	r3, [r3]
 710 009a D370     		strb	r3, [r2, #3]
 634:Core/Src/main.c ****     TxData[6] = pedal0 & 0xFF;
 711              		.loc 1 634 5 is_stmt 1 view .LVU178
 634:Core/Src/main.c ****     TxData[6] = pedal0 & 0xFF;
 712              		.loc 1 634 15 is_stmt 0 view .LVU179
 713 009c 2B4D     		ldr	r5, .L41+52
 714 009e 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 715 00a0 1171     		strb	r1, [r2, #4]
 635:Core/Src/main.c ****     TxData[5] = pedal0 >> 8;
 716              		.loc 1 635 5 is_stmt 1 view .LVU180
 635:Core/Src/main.c ****     TxData[5] = pedal0 >> 8;
 717              		.loc 1 635 15 is_stmt 0 view .LVU181
 718 00a2 2C49     		ldr	r1, .L41+60
 719 00a4 0988     		ldrh	r1, [r1]
 720 00a6 9171     		strb	r1, [r2, #6]
 636:Core/Src/main.c ****     TxData[7] = pedalAverage >>8;
 721              		.loc 1 636 5 is_stmt 1 view .LVU182
 636:Core/Src/main.c ****     TxData[7] = pedalAverage >>8;
 722              		.loc 1 636 15 is_stmt 0 view .LVU183
 723 00a8 090A     		lsrs	r1, r1, #8
 724 00aa 5171     		strb	r1, [r2, #5]
ARM GAS  /tmp/ccvZiBna.s 			page 27


 637:Core/Src/main.c **** 
 725              		.loc 1 637 5 is_stmt 1 view .LVU184
 637:Core/Src/main.c **** 
 726              		.loc 1 637 15 is_stmt 0 view .LVU185
 727 00ac 1B0A     		lsrs	r3, r3, #8
 728 00ae D371     		strb	r3, [r2, #7]
 640:Core/Src/main.c **** 
 729              		.loc 1 640 5 is_stmt 1 view .LVU186
 730 00b0 204B     		ldr	r3, .L41+28
 731 00b2 2949     		ldr	r1, .L41+64
 732 00b4 2148     		ldr	r0, .L41+36
 733 00b6 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 734              	.LVL31:
 643:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, bmsFault);
 735              		.loc 1 643 5 view .LVU187
 736 00ba 214C     		ldr	r4, .L41+40
 737 00bc 274B     		ldr	r3, .L41+68
 738 00be 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 739 00c0 0421     		movs	r1, #4
 740 00c2 2046     		mov	r0, r4
 741 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 742              	.LVL32:
 644:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, buzzerState);
 743              		.loc 1 644 5 view .LVU188
 744 00c8 254B     		ldr	r3, .L41+72
 745 00ca 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 746 00cc 4FF48061 		mov	r1, #1024
 747 00d0 2448     		ldr	r0, .L41+76
 748 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 749              	.LVL33:
 645:Core/Src/main.c ****   }
 750              		.loc 1 645 5 view .LVU189
 751 00d6 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 752 00d8 4FF48071 		mov	r1, #256
 753 00dc 2046     		mov	r0, r4
 754 00de FFF7FEFF 		bl	HAL_GPIO_WritePin
 755              	.LVL34:
 647:Core/Src/main.c **** 
 756              		.loc 1 647 1 is_stmt 0 view .LVU190
 757 00e2 95E7     		b	.L31
 758              	.L34:
 614:Core/Src/main.c ****       enableInverter = 0;
 759              		.loc 1 614 7 is_stmt 1 view .LVU191
 760 00e4 0022     		movs	r2, #0
 761 00e6 4FF48061 		mov	r1, #1024
 762 00ea 1548     		ldr	r0, .L41+40
 763 00ec FFF7FEFF 		bl	HAL_GPIO_WritePin
 764              	.LVL35:
 615:Core/Src/main.c ****     }
 765              		.loc 1 615 7 view .LVU192
 615:Core/Src/main.c ****     }
 766              		.loc 1 615 22 is_stmt 0 view .LVU193
 767 00f0 0F4B     		ldr	r3, .L41+24
 768 00f2 0022     		movs	r2, #0
 769 00f4 1A70     		strb	r2, [r3]
 770 00f6 C1E7     		b	.L35
 771              	.L40:
ARM GAS  /tmp/ccvZiBna.s 			page 28


 620:Core/Src/main.c ****       if (buzzerCounter >= 20)   // buzzerCounter is being updated on a 10Hz interval, so after 20 
 772              		.loc 1 620 7 is_stmt 1 view .LVU194
 620:Core/Src/main.c ****       if (buzzerCounter >= 20)   // buzzerCounter is being updated on a 10Hz interval, so after 20 
 773              		.loc 1 620 20 is_stmt 0 view .LVU195
 774 00f8 1B4A     		ldr	r2, .L41+80
 775 00fa 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 776 00fc 0133     		adds	r3, r3, #1
 777 00fe DBB2     		uxtb	r3, r3
 778 0100 1370     		strb	r3, [r2]
 621:Core/Src/main.c ****       {
 779              		.loc 1 621 7 is_stmt 1 view .LVU196
 621:Core/Src/main.c ****       {
 780              		.loc 1 621 10 is_stmt 0 view .LVU197
 781 0102 132B     		cmp	r3, #19
 782 0104 BED9     		bls	.L36
 623:Core/Src/main.c ****         buzzerCounter = 0;
 783              		.loc 1 623 9 is_stmt 1 view .LVU198
 623:Core/Src/main.c ****         buzzerCounter = 0;
 784              		.loc 1 623 21 is_stmt 0 view .LVU199
 785 0106 0023     		movs	r3, #0
 786 0108 104A     		ldr	r2, .L41+52
 787 010a 1370     		strb	r3, [r2]
 624:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 788              		.loc 1 624 9 is_stmt 1 view .LVU200
 624:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 789              		.loc 1 624 23 is_stmt 0 view .LVU201
 790 010c 164A     		ldr	r2, .L41+80
 791 010e 1370     		strb	r3, [r2]
 625:Core/Src/main.c ****       }
 792              		.loc 1 625 9 is_stmt 1 view .LVU202
 625:Core/Src/main.c ****       }
 793              		.loc 1 625 24 is_stmt 0 view .LVU203
 794 0110 074B     		ldr	r3, .L41+24
 795 0112 0122     		movs	r2, #1
 796 0114 1A70     		strb	r2, [r3]
 797 0116 B5E7     		b	.L36
 798              	.L42:
 799              		.align	2
 800              	.L41:
 801 0118 00000000 		.word	htim13
 802 011c 00000000 		.word	htim14
 803 0120 00000000 		.word	.LANCHOR7
 804 0124 00000000 		.word	.LANCHOR4
 805 0128 00000000 		.word	TxData
 806 012c 00000000 		.word	.LANCHOR8
 807 0130 00000000 		.word	.LANCHOR9
 808 0134 00000000 		.word	TxMailbox
 809 0138 00000000 		.word	TxHeader2
 810 013c 00000000 		.word	hcan1
 811 0140 00040240 		.word	1073873920
 812 0144 00000000 		.word	.LANCHOR10
 813 0148 00000000 		.word	.LANCHOR0
 814 014c 00000000 		.word	.LANCHOR1
 815 0150 00000000 		.word	.LANCHOR3
 816 0154 00000000 		.word	.LANCHOR2
 817 0158 00000000 		.word	TxHeader
 818 015c 00000000 		.word	.LANCHOR12
ARM GAS  /tmp/ccvZiBna.s 			page 29


 819 0160 00000000 		.word	.LANCHOR13
 820 0164 00000240 		.word	1073872896
 821 0168 00000000 		.word	.LANCHOR11
 822              		.cfi_endproc
 823              	.LFE228:
 825              		.section	.text.Error_Handler,"ax",%progbits
 826              		.align	1
 827              		.global	Error_Handler
 828              		.syntax unified
 829              		.thumb
 830              		.thumb_func
 831              		.fpu fpv4-sp-d16
 833              	Error_Handler:
 834              	.LFB231:
 670:Core/Src/main.c **** 
 671:Core/Src/main.c **** /* USER CODE END 4 */
 672:Core/Src/main.c **** 
 673:Core/Src/main.c **** /**
 674:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 675:Core/Src/main.c ****   * @retval None
 676:Core/Src/main.c ****   */
 677:Core/Src/main.c **** void Error_Handler(void)
 678:Core/Src/main.c **** {
 835              		.loc 1 678 1 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ Volatile: function does not return.
 838              		@ args = 0, pretend = 0, frame = 0
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840              		@ link register save eliminated.
 679:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 680:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 681:Core/Src/main.c ****   __disable_irq();
 841              		.loc 1 681 3 view .LVU205
 842              	.LBB8:
 843              	.LBI8:
 844              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
ARM GAS  /tmp/ccvZiBna.s 			page 30


  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
ARM GAS  /tmp/ccvZiBna.s 			page 31


  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccvZiBna.s 			page 32


 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 845              		.loc 2 140 27 view .LVU206
 846              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 847              		.loc 2 142 3 view .LVU207
 848              		.syntax unified
 849              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 850 0000 72B6     		cpsid i
 851              	@ 0 "" 2
 852              		.thumb
 853              		.syntax unified
 854              	.L44:
 855              	.LBE9:
 856              	.LBE8:
 682:Core/Src/main.c ****   while (1)
 857              		.loc 1 682 3 discriminator 1 view .LVU208
 683:Core/Src/main.c ****   {
 684:Core/Src/main.c ****   }
 858              		.loc 1 684 3 discriminator 1 view .LVU209
 682:Core/Src/main.c ****   while (1)
 859              		.loc 1 682 9 discriminator 1 view .LVU210
 860 0002 FEE7     		b	.L44
 861              		.cfi_endproc
 862              	.LFE231:
 864              		.section	.text.MX_CAN1_Init,"ax",%progbits
 865              		.align	1
 866              		.syntax unified
 867              		.thumb
 868              		.thumb_func
 869              		.fpu fpv4-sp-d16
 871              	MX_CAN1_Init:
 872              	.LFB219:
 316:Core/Src/main.c **** 
 873              		.loc 1 316 1 view -0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 0
 876              		@ frame_needed = 0, uses_anonymous_args = 0
 877 0000 70B5     		push	{r4, r5, r6, lr}
 878              	.LCFI13:
 879              		.cfi_def_cfa_offset 16
 880              		.cfi_offset 4, -16
 881              		.cfi_offset 5, -12
 882              		.cfi_offset 6, -8
 883              		.cfi_offset 14, -4
 325:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 884              		.loc 1 325 3 view .LVU212
 325:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 885              		.loc 1 325 18 is_stmt 0 view .LVU213
 886 0002 1E48     		ldr	r0, .L49
 887 0004 1E4B     		ldr	r3, .L49+4
 888 0006 0360     		str	r3, [r0]
 326:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
ARM GAS  /tmp/ccvZiBna.s 			page 33


 889              		.loc 1 326 3 is_stmt 1 view .LVU214
 326:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 890              		.loc 1 326 24 is_stmt 0 view .LVU215
 891 0008 1223     		movs	r3, #18
 892 000a 4360     		str	r3, [r0, #4]
 327:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 893              		.loc 1 327 3 is_stmt 1 view .LVU216
 327:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 894              		.loc 1 327 19 is_stmt 0 view .LVU217
 895 000c 0023     		movs	r3, #0
 896 000e 8360     		str	r3, [r0, #8]
 328:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 897              		.loc 1 328 3 is_stmt 1 view .LVU218
 328:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 898              		.loc 1 328 28 is_stmt 0 view .LVU219
 899 0010 C360     		str	r3, [r0, #12]
 329:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 900              		.loc 1 329 3 is_stmt 1 view .LVU220
 329:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 901              		.loc 1 329 23 is_stmt 0 view .LVU221
 902 0012 4FF40032 		mov	r2, #131072
 903 0016 0261     		str	r2, [r0, #16]
 330:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 904              		.loc 1 330 3 is_stmt 1 view .LVU222
 330:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 905              		.loc 1 330 23 is_stmt 0 view .LVU223
 906 0018 4361     		str	r3, [r0, #20]
 331:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 907              		.loc 1 331 3 is_stmt 1 view .LVU224
 331:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 908              		.loc 1 331 32 is_stmt 0 view .LVU225
 909 001a 0376     		strb	r3, [r0, #24]
 332:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 910              		.loc 1 332 3 is_stmt 1 view .LVU226
 332:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 911              		.loc 1 332 25 is_stmt 0 view .LVU227
 912 001c 4376     		strb	r3, [r0, #25]
 333:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 913              		.loc 1 333 3 is_stmt 1 view .LVU228
 333:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 914              		.loc 1 333 25 is_stmt 0 view .LVU229
 915 001e 0122     		movs	r2, #1
 916 0020 8276     		strb	r2, [r0, #26]
 334:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 917              		.loc 1 334 3 is_stmt 1 view .LVU230
 334:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 918              		.loc 1 334 33 is_stmt 0 view .LVU231
 919 0022 C276     		strb	r2, [r0, #27]
 335:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 920              		.loc 1 335 3 is_stmt 1 view .LVU232
 335:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 921              		.loc 1 335 32 is_stmt 0 view .LVU233
 922 0024 0377     		strb	r3, [r0, #28]
 336:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 923              		.loc 1 336 3 is_stmt 1 view .LVU234
 336:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 924              		.loc 1 336 35 is_stmt 0 view .LVU235
ARM GAS  /tmp/ccvZiBna.s 			page 34


 925 0026 4377     		strb	r3, [r0, #29]
 337:Core/Src/main.c ****   {
 926              		.loc 1 337 3 is_stmt 1 view .LVU236
 337:Core/Src/main.c ****   {
 927              		.loc 1 337 7 is_stmt 0 view .LVU237
 928 0028 FFF7FEFF 		bl	HAL_CAN_Init
 929              	.LVL36:
 337:Core/Src/main.c ****   {
 930              		.loc 1 337 6 view .LVU238
 931 002c 20BB     		cbnz	r0, .L48
 343:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 932              		.loc 1 343 3 is_stmt 1 view .LVU239
 343:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 933              		.loc 1 343 24 is_stmt 0 view .LVU240
 934 002e 1549     		ldr	r1, .L49+8
 935 0030 4FF48253 		mov	r3, #4160
 936 0034 0B60     		str	r3, [r1]
 344:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 937              		.loc 1 344 3 is_stmt 1 view .LVU241
 344:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 938              		.loc 1 344 23 is_stmt 0 view .LVU242
 939 0036 0024     		movs	r4, #0
 940 0038 4C60     		str	r4, [r1, #4]
 345:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 941              		.loc 1 345 3 is_stmt 1 view .LVU243
 345:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 942              		.loc 1 345 28 is_stmt 0 view .LVU244
 943 003a 8B60     		str	r3, [r1, #8]
 346:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 944              		.loc 1 346 3 is_stmt 1 view .LVU245
 346:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 945              		.loc 1 346 27 is_stmt 0 view .LVU246
 946 003c CC60     		str	r4, [r1, #12]
 347:Core/Src/main.c ****   filter0.FilterBank = 1;
 947              		.loc 1 347 3 is_stmt 1 view .LVU247
 347:Core/Src/main.c ****   filter0.FilterBank = 1;
 948              		.loc 1 347 32 is_stmt 0 view .LVU248
 949 003e 0C61     		str	r4, [r1, #16]
 348:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 950              		.loc 1 348 3 is_stmt 1 view .LVU249
 348:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 951              		.loc 1 348 22 is_stmt 0 view .LVU250
 952 0040 0125     		movs	r5, #1
 953 0042 4D61     		str	r5, [r1, #20]
 349:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 954              		.loc 1 349 3 is_stmt 1 view .LVU251
 349:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 955              		.loc 1 349 22 is_stmt 0 view .LVU252
 956 0044 8C61     		str	r4, [r1, #24]
 350:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 957              		.loc 1 350 3 is_stmt 1 view .LVU253
 350:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 958              		.loc 1 350 23 is_stmt 0 view .LVU254
 959 0046 CD61     		str	r5, [r1, #28]
 351:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 960              		.loc 1 351 3 is_stmt 1 view .LVU255
 351:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
ARM GAS  /tmp/ccvZiBna.s 			page 35


 961              		.loc 1 351 28 is_stmt 0 view .LVU256
 962 0048 0D62     		str	r5, [r1, #32]
 352:Core/Src/main.c **** 
 963              		.loc 1 352 3 is_stmt 1 view .LVU257
 352:Core/Src/main.c **** 
 964              		.loc 1 352 32 is_stmt 0 view .LVU258
 965 004a 4C62     		str	r4, [r1, #36]
 354:Core/Src/main.c **** 
 966              		.loc 1 354 3 is_stmt 1 view .LVU259
 967 004c 0B4E     		ldr	r6, .L49
 968 004e 3046     		mov	r0, r6
 969 0050 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 970              	.LVL37:
 357:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 971              		.loc 1 357 3 view .LVU260
 357:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 972              		.loc 1 357 24 is_stmt 0 view .LVU261
 973 0054 0C49     		ldr	r1, .L49+12
 974 0056 4FF48753 		mov	r3, #4320
 975 005a 0B60     		str	r3, [r1]
 358:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x087 << 5;
 976              		.loc 1 358 3 is_stmt 1 view .LVU262
 358:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x087 << 5;
 977              		.loc 1 358 23 is_stmt 0 view .LVU263
 978 005c 4C60     		str	r4, [r1, #4]
 359:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 979              		.loc 1 359 3 is_stmt 1 view .LVU264
 359:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 980              		.loc 1 359 28 is_stmt 0 view .LVU265
 981 005e 8B60     		str	r3, [r1, #8]
 360:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 982              		.loc 1 360 3 is_stmt 1 view .LVU266
 360:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 983              		.loc 1 360 27 is_stmt 0 view .LVU267
 984 0060 CC60     		str	r4, [r1, #12]
 361:Core/Src/main.c ****   filter1.FilterBank = 2;
 985              		.loc 1 361 3 is_stmt 1 view .LVU268
 361:Core/Src/main.c ****   filter1.FilterBank = 2;
 986              		.loc 1 361 32 is_stmt 0 view .LVU269
 987 0062 0C61     		str	r4, [r1, #16]
 362:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 988              		.loc 1 362 3 is_stmt 1 view .LVU270
 362:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 989              		.loc 1 362 22 is_stmt 0 view .LVU271
 990 0064 0223     		movs	r3, #2
 991 0066 4B61     		str	r3, [r1, #20]
 363:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 992              		.loc 1 363 3 is_stmt 1 view .LVU272
 363:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 993              		.loc 1 363 22 is_stmt 0 view .LVU273
 994 0068 8C61     		str	r4, [r1, #24]
 364:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 995              		.loc 1 364 3 is_stmt 1 view .LVU274
 364:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 996              		.loc 1 364 23 is_stmt 0 view .LVU275
 997 006a CD61     		str	r5, [r1, #28]
 365:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
ARM GAS  /tmp/ccvZiBna.s 			page 36


 998              		.loc 1 365 3 is_stmt 1 view .LVU276
 365:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 999              		.loc 1 365 28 is_stmt 0 view .LVU277
 1000 006c 0D62     		str	r5, [r1, #32]
 366:Core/Src/main.c **** 
 1001              		.loc 1 366 3 is_stmt 1 view .LVU278
 366:Core/Src/main.c **** 
 1002              		.loc 1 366 32 is_stmt 0 view .LVU279
 1003 006e 4C62     		str	r4, [r1, #36]
 368:Core/Src/main.c **** 
 1004              		.loc 1 368 3 is_stmt 1 view .LVU280
 1005 0070 3046     		mov	r0, r6
 1006 0072 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1007              	.LVL38:
 372:Core/Src/main.c **** 
 1008              		.loc 1 372 1 is_stmt 0 view .LVU281
 1009 0076 70BD     		pop	{r4, r5, r6, pc}
 1010              	.L48:
 339:Core/Src/main.c ****   }
 1011              		.loc 1 339 5 is_stmt 1 view .LVU282
 1012 0078 FFF7FEFF 		bl	Error_Handler
 1013              	.LVL39:
 1014              	.L50:
 1015              		.align	2
 1016              	.L49:
 1017 007c 00000000 		.word	hcan1
 1018 0080 00640040 		.word	1073767424
 1019 0084 00000000 		.word	filter0
 1020 0088 00000000 		.word	filter1
 1021              		.cfi_endproc
 1022              	.LFE219:
 1024              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1025              		.align	1
 1026              		.syntax unified
 1027              		.thumb
 1028              		.thumb_func
 1029              		.fpu fpv4-sp-d16
 1031              	MX_ADC1_Init:
 1032              	.LFB218:
 242:Core/Src/main.c **** 
 1033              		.loc 1 242 1 view -0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 16
 1036              		@ frame_needed = 0, uses_anonymous_args = 0
 1037 0000 00B5     		push	{lr}
 1038              	.LCFI14:
 1039              		.cfi_def_cfa_offset 4
 1040              		.cfi_offset 14, -4
 1041 0002 85B0     		sub	sp, sp, #20
 1042              	.LCFI15:
 1043              		.cfi_def_cfa_offset 24
 248:Core/Src/main.c **** 
 1044              		.loc 1 248 3 view .LVU284
 248:Core/Src/main.c **** 
 1045              		.loc 1 248 26 is_stmt 0 view .LVU285
 1046 0004 0023     		movs	r3, #0
 1047 0006 0093     		str	r3, [sp]
ARM GAS  /tmp/ccvZiBna.s 			page 37


 1048 0008 0193     		str	r3, [sp, #4]
 1049 000a 0293     		str	r3, [sp, #8]
 1050 000c 0393     		str	r3, [sp, #12]
 255:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1051              		.loc 1 255 3 is_stmt 1 view .LVU286
 255:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1052              		.loc 1 255 18 is_stmt 0 view .LVU287
 1053 000e 2548     		ldr	r0, .L63
 1054 0010 254A     		ldr	r2, .L63+4
 1055 0012 0260     		str	r2, [r0]
 256:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1056              		.loc 1 256 3 is_stmt 1 view .LVU288
 256:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1057              		.loc 1 256 29 is_stmt 0 view .LVU289
 1058 0014 4FF48032 		mov	r2, #65536
 1059 0018 4260     		str	r2, [r0, #4]
 257:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1060              		.loc 1 257 3 is_stmt 1 view .LVU290
 257:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1061              		.loc 1 257 25 is_stmt 0 view .LVU291
 1062 001a 8360     		str	r3, [r0, #8]
 258:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1063              		.loc 1 258 3 is_stmt 1 view .LVU292
 258:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1064              		.loc 1 258 27 is_stmt 0 view .LVU293
 1065 001c 0122     		movs	r2, #1
 1066 001e 0261     		str	r2, [r0, #16]
 259:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1067              		.loc 1 259 3 is_stmt 1 view .LVU294
 259:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1068              		.loc 1 259 33 is_stmt 0 view .LVU295
 1069 0020 0276     		strb	r2, [r0, #24]
 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1070              		.loc 1 260 3 is_stmt 1 view .LVU296
 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1071              		.loc 1 260 36 is_stmt 0 view .LVU297
 1072 0022 80F82030 		strb	r3, [r0, #32]
 261:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1073              		.loc 1 261 3 is_stmt 1 view .LVU298
 261:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1074              		.loc 1 261 35 is_stmt 0 view .LVU299
 1075 0026 C362     		str	r3, [r0, #44]
 262:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1076              		.loc 1 262 3 is_stmt 1 view .LVU300
 262:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1077              		.loc 1 262 31 is_stmt 0 view .LVU301
 1078 0028 2049     		ldr	r1, .L63+8
 1079 002a 8162     		str	r1, [r0, #40]
 263:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1080              		.loc 1 263 3 is_stmt 1 view .LVU302
 263:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1081              		.loc 1 263 24 is_stmt 0 view .LVU303
 1082 002c C360     		str	r3, [r0, #12]
 264:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1083              		.loc 1 264 3 is_stmt 1 view .LVU304
 264:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1084              		.loc 1 264 30 is_stmt 0 view .LVU305
ARM GAS  /tmp/ccvZiBna.s 			page 38


 1085 002e 0423     		movs	r3, #4
 1086 0030 C361     		str	r3, [r0, #28]
 265:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1087              		.loc 1 265 3 is_stmt 1 view .LVU306
 265:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1088              		.loc 1 265 36 is_stmt 0 view .LVU307
 1089 0032 80F83020 		strb	r2, [r0, #48]
 266:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1090              		.loc 1 266 3 is_stmt 1 view .LVU308
 266:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1091              		.loc 1 266 27 is_stmt 0 view .LVU309
 1092 0036 4261     		str	r2, [r0, #20]
 267:Core/Src/main.c ****   {
 1093              		.loc 1 267 3 is_stmt 1 view .LVU310
 267:Core/Src/main.c ****   {
 1094              		.loc 1 267 7 is_stmt 0 view .LVU311
 1095 0038 FFF7FEFF 		bl	HAL_ADC_Init
 1096              	.LVL40:
 267:Core/Src/main.c ****   {
 1097              		.loc 1 267 6 view .LVU312
 1098 003c 40BB     		cbnz	r0, .L58
 273:Core/Src/main.c ****   sConfig.Rank = 1;
 1099              		.loc 1 273 3 is_stmt 1 view .LVU313
 273:Core/Src/main.c ****   sConfig.Rank = 1;
 1100              		.loc 1 273 19 is_stmt 0 view .LVU314
 1101 003e 0423     		movs	r3, #4
 1102 0040 0093     		str	r3, [sp]
 274:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1103              		.loc 1 274 3 is_stmt 1 view .LVU315
 274:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1104              		.loc 1 274 16 is_stmt 0 view .LVU316
 1105 0042 0123     		movs	r3, #1
 1106 0044 0193     		str	r3, [sp, #4]
 275:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1107              		.loc 1 275 3 is_stmt 1 view .LVU317
 275:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1108              		.loc 1 275 24 is_stmt 0 view .LVU318
 1109 0046 0023     		movs	r3, #0
 1110 0048 0293     		str	r3, [sp, #8]
 276:Core/Src/main.c ****   {
 1111              		.loc 1 276 3 is_stmt 1 view .LVU319
 276:Core/Src/main.c ****   {
 1112              		.loc 1 276 7 is_stmt 0 view .LVU320
 1113 004a 6946     		mov	r1, sp
 1114 004c 1548     		ldr	r0, .L63
 1115 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1116              	.LVL41:
 276:Core/Src/main.c ****   {
 1117              		.loc 1 276 6 view .LVU321
 1118 0052 F8B9     		cbnz	r0, .L59
 282:Core/Src/main.c ****   sConfig.Rank = 2;
 1119              		.loc 1 282 3 is_stmt 1 view .LVU322
 282:Core/Src/main.c ****   sConfig.Rank = 2;
 1120              		.loc 1 282 19 is_stmt 0 view .LVU323
 1121 0054 0523     		movs	r3, #5
 1122 0056 0093     		str	r3, [sp]
 283:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/ccvZiBna.s 			page 39


 1123              		.loc 1 283 3 is_stmt 1 view .LVU324
 283:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1124              		.loc 1 283 16 is_stmt 0 view .LVU325
 1125 0058 0223     		movs	r3, #2
 1126 005a 0193     		str	r3, [sp, #4]
 284:Core/Src/main.c ****   {
 1127              		.loc 1 284 3 is_stmt 1 view .LVU326
 284:Core/Src/main.c ****   {
 1128              		.loc 1 284 7 is_stmt 0 view .LVU327
 1129 005c 6946     		mov	r1, sp
 1130 005e 1148     		ldr	r0, .L63
 1131 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1132              	.LVL42:
 284:Core/Src/main.c ****   {
 1133              		.loc 1 284 6 view .LVU328
 1134 0064 C0B9     		cbnz	r0, .L60
 290:Core/Src/main.c ****   sConfig.Rank = 3;
 1135              		.loc 1 290 3 is_stmt 1 view .LVU329
 290:Core/Src/main.c ****   sConfig.Rank = 3;
 1136              		.loc 1 290 19 is_stmt 0 view .LVU330
 1137 0066 0623     		movs	r3, #6
 1138 0068 0093     		str	r3, [sp]
 291:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1139              		.loc 1 291 3 is_stmt 1 view .LVU331
 291:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1140              		.loc 1 291 16 is_stmt 0 view .LVU332
 1141 006a 0323     		movs	r3, #3
 1142 006c 0193     		str	r3, [sp, #4]
 292:Core/Src/main.c ****   {
 1143              		.loc 1 292 3 is_stmt 1 view .LVU333
 292:Core/Src/main.c ****   {
 1144              		.loc 1 292 7 is_stmt 0 view .LVU334
 1145 006e 6946     		mov	r1, sp
 1146 0070 0C48     		ldr	r0, .L63
 1147 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1148              	.LVL43:
 292:Core/Src/main.c ****   {
 1149              		.loc 1 292 6 view .LVU335
 1150 0076 88B9     		cbnz	r0, .L61
 298:Core/Src/main.c ****   sConfig.Rank = 4;
 1151              		.loc 1 298 3 is_stmt 1 view .LVU336
 298:Core/Src/main.c ****   sConfig.Rank = 4;
 1152              		.loc 1 298 19 is_stmt 0 view .LVU337
 1153 0078 0723     		movs	r3, #7
 1154 007a 0093     		str	r3, [sp]
 299:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1155              		.loc 1 299 3 is_stmt 1 view .LVU338
 299:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1156              		.loc 1 299 16 is_stmt 0 view .LVU339
 1157 007c 0423     		movs	r3, #4
 1158 007e 0193     		str	r3, [sp, #4]
 300:Core/Src/main.c ****   {
 1159              		.loc 1 300 3 is_stmt 1 view .LVU340
 300:Core/Src/main.c ****   {
 1160              		.loc 1 300 7 is_stmt 0 view .LVU341
 1161 0080 6946     		mov	r1, sp
 1162 0082 0848     		ldr	r0, .L63
ARM GAS  /tmp/ccvZiBna.s 			page 40


 1163 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1164              	.LVL44:
 300:Core/Src/main.c ****   {
 1165              		.loc 1 300 6 view .LVU342
 1166 0088 50B9     		cbnz	r0, .L62
 308:Core/Src/main.c **** 
 1167              		.loc 1 308 1 view .LVU343
 1168 008a 05B0     		add	sp, sp, #20
 1169              	.LCFI16:
 1170              		.cfi_remember_state
 1171              		.cfi_def_cfa_offset 4
 1172              		@ sp needed
 1173 008c 5DF804FB 		ldr	pc, [sp], #4
 1174              	.L58:
 1175              	.LCFI17:
 1176              		.cfi_restore_state
 269:Core/Src/main.c ****   }
 1177              		.loc 1 269 5 is_stmt 1 view .LVU344
 1178 0090 FFF7FEFF 		bl	Error_Handler
 1179              	.LVL45:
 1180              	.L59:
 278:Core/Src/main.c ****   }
 1181              		.loc 1 278 5 view .LVU345
 1182 0094 FFF7FEFF 		bl	Error_Handler
 1183              	.LVL46:
 1184              	.L60:
 286:Core/Src/main.c ****   }
 1185              		.loc 1 286 5 view .LVU346
 1186 0098 FFF7FEFF 		bl	Error_Handler
 1187              	.LVL47:
 1188              	.L61:
 294:Core/Src/main.c ****   }
 1189              		.loc 1 294 5 view .LVU347
 1190 009c FFF7FEFF 		bl	Error_Handler
 1191              	.LVL48:
 1192              	.L62:
 302:Core/Src/main.c ****   }
 1193              		.loc 1 302 5 view .LVU348
 1194 00a0 FFF7FEFF 		bl	Error_Handler
 1195              	.LVL49:
 1196              	.L64:
 1197              		.align	2
 1198              	.L63:
 1199 00a4 00000000 		.word	hadc1
 1200 00a8 00200140 		.word	1073815552
 1201 00ac 0100000F 		.word	251658241
 1202              		.cfi_endproc
 1203              	.LFE218:
 1205              		.section	.text.MX_TIM14_Init,"ax",%progbits
 1206              		.align	1
 1207              		.syntax unified
 1208              		.thumb
 1209              		.thumb_func
 1210              		.fpu fpv4-sp-d16
 1212              	MX_TIM14_Init:
 1213              	.LFB221:
 411:Core/Src/main.c **** 
ARM GAS  /tmp/ccvZiBna.s 			page 41


 1214              		.loc 1 411 1 view -0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 0, uses_anonymous_args = 0
 1218 0000 08B5     		push	{r3, lr}
 1219              	.LCFI18:
 1220              		.cfi_def_cfa_offset 8
 1221              		.cfi_offset 3, -8
 1222              		.cfi_offset 14, -4
 420:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1223              		.loc 1 420 3 view .LVU350
 420:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1224              		.loc 1 420 19 is_stmt 0 view .LVU351
 1225 0002 0948     		ldr	r0, .L69
 1226 0004 094B     		ldr	r3, .L69+4
 1227 0006 0360     		str	r3, [r0]
 421:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1228              		.loc 1 421 3 is_stmt 1 view .LVU352
 421:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1229              		.loc 1 421 25 is_stmt 0 view .LVU353
 1230 0008 42F22733 		movw	r3, #8999
 1231 000c 4360     		str	r3, [r0, #4]
 422:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 1232              		.loc 1 422 3 is_stmt 1 view .LVU354
 422:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 1233              		.loc 1 422 27 is_stmt 0 view .LVU355
 1234 000e 0023     		movs	r3, #0
 1235 0010 8360     		str	r3, [r0, #8]
 423:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1236              		.loc 1 423 3 is_stmt 1 view .LVU356
 423:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1237              		.loc 1 423 22 is_stmt 0 view .LVU357
 1238 0012 40F2E732 		movw	r2, #999
 1239 0016 C260     		str	r2, [r0, #12]
 424:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1240              		.loc 1 424 3 is_stmt 1 view .LVU358
 424:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1241              		.loc 1 424 29 is_stmt 0 view .LVU359
 1242 0018 0361     		str	r3, [r0, #16]
 425:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1243              		.loc 1 425 3 is_stmt 1 view .LVU360
 425:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1244              		.loc 1 425 33 is_stmt 0 view .LVU361
 1245 001a 8361     		str	r3, [r0, #24]
 426:Core/Src/main.c ****   {
 1246              		.loc 1 426 3 is_stmt 1 view .LVU362
 426:Core/Src/main.c ****   {
 1247              		.loc 1 426 7 is_stmt 0 view .LVU363
 1248 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1249              	.LVL50:
 426:Core/Src/main.c ****   {
 1250              		.loc 1 426 6 view .LVU364
 1251 0020 00B9     		cbnz	r0, .L68
 434:Core/Src/main.c **** 
 1252              		.loc 1 434 1 view .LVU365
 1253 0022 08BD     		pop	{r3, pc}
 1254              	.L68:
ARM GAS  /tmp/ccvZiBna.s 			page 42


 428:Core/Src/main.c ****   }
 1255              		.loc 1 428 5 is_stmt 1 view .LVU366
 1256 0024 FFF7FEFF 		bl	Error_Handler
 1257              	.LVL51:
 1258              	.L70:
 1259              		.align	2
 1260              	.L69:
 1261 0028 00000000 		.word	htim14
 1262 002c 00200040 		.word	1073750016
 1263              		.cfi_endproc
 1264              	.LFE221:
 1266              		.section	.text.MX_TIM13_Init,"ax",%progbits
 1267              		.align	1
 1268              		.syntax unified
 1269              		.thumb
 1270              		.thumb_func
 1271              		.fpu fpv4-sp-d16
 1273              	MX_TIM13_Init:
 1274              	.LFB220:
 380:Core/Src/main.c **** 
 1275              		.loc 1 380 1 view -0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 0, uses_anonymous_args = 0
 1279 0000 08B5     		push	{r3, lr}
 1280              	.LCFI19:
 1281              		.cfi_def_cfa_offset 8
 1282              		.cfi_offset 3, -8
 1283              		.cfi_offset 14, -4
 389:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1284              		.loc 1 389 3 view .LVU368
 389:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1285              		.loc 1 389 19 is_stmt 0 view .LVU369
 1286 0002 0948     		ldr	r0, .L75
 1287 0004 094B     		ldr	r3, .L75+4
 1288 0006 0360     		str	r3, [r0]
 390:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1289              		.loc 1 390 3 is_stmt 1 view .LVU370
 390:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1290              		.loc 1 390 25 is_stmt 0 view .LVU371
 1291 0008 42F22733 		movw	r3, #8999
 1292 000c 4360     		str	r3, [r0, #4]
 391:Core/Src/main.c ****   htim13.Init.Period = 500-1;
 1293              		.loc 1 391 3 is_stmt 1 view .LVU372
 391:Core/Src/main.c ****   htim13.Init.Period = 500-1;
 1294              		.loc 1 391 27 is_stmt 0 view .LVU373
 1295 000e 0023     		movs	r3, #0
 1296 0010 8360     		str	r3, [r0, #8]
 392:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1297              		.loc 1 392 3 is_stmt 1 view .LVU374
 392:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1298              		.loc 1 392 22 is_stmt 0 view .LVU375
 1299 0012 40F2F312 		movw	r2, #499
 1300 0016 C260     		str	r2, [r0, #12]
 393:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1301              		.loc 1 393 3 is_stmt 1 view .LVU376
 393:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/ccvZiBna.s 			page 43


 1302              		.loc 1 393 29 is_stmt 0 view .LVU377
 1303 0018 0361     		str	r3, [r0, #16]
 394:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1304              		.loc 1 394 3 is_stmt 1 view .LVU378
 394:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1305              		.loc 1 394 33 is_stmt 0 view .LVU379
 1306 001a 8361     		str	r3, [r0, #24]
 395:Core/Src/main.c ****   {
 1307              		.loc 1 395 3 is_stmt 1 view .LVU380
 395:Core/Src/main.c ****   {
 1308              		.loc 1 395 7 is_stmt 0 view .LVU381
 1309 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1310              	.LVL52:
 395:Core/Src/main.c ****   {
 1311              		.loc 1 395 6 view .LVU382
 1312 0020 00B9     		cbnz	r0, .L74
 403:Core/Src/main.c **** 
 1313              		.loc 1 403 1 view .LVU383
 1314 0022 08BD     		pop	{r3, pc}
 1315              	.L74:
 397:Core/Src/main.c ****   }
 1316              		.loc 1 397 5 is_stmt 1 view .LVU384
 1317 0024 FFF7FEFF 		bl	Error_Handler
 1318              	.LVL53:
 1319              	.L76:
 1320              		.align	2
 1321              	.L75:
 1322 0028 00000000 		.word	htim13
 1323 002c 001C0040 		.word	1073748992
 1324              		.cfi_endproc
 1325              	.LFE220:
 1327              		.section	.text.SystemClock_Config,"ax",%progbits
 1328              		.align	1
 1329              		.global	SystemClock_Config
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1333              		.fpu fpv4-sp-d16
 1335              	SystemClock_Config:
 1336              	.LFB217:
 196:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1337              		.loc 1 196 1 view -0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 80
 1340              		@ frame_needed = 0, uses_anonymous_args = 0
 1341 0000 00B5     		push	{lr}
 1342              	.LCFI20:
 1343              		.cfi_def_cfa_offset 4
 1344              		.cfi_offset 14, -4
 1345 0002 95B0     		sub	sp, sp, #84
 1346              	.LCFI21:
 1347              		.cfi_def_cfa_offset 88
 197:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1348              		.loc 1 197 3 view .LVU386
 197:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1349              		.loc 1 197 22 is_stmt 0 view .LVU387
 1350 0004 3422     		movs	r2, #52
ARM GAS  /tmp/ccvZiBna.s 			page 44


 1351 0006 0021     		movs	r1, #0
 1352 0008 07A8     		add	r0, sp, #28
 1353 000a FFF7FEFF 		bl	memset
 1354              	.LVL54:
 198:Core/Src/main.c **** 
 1355              		.loc 1 198 3 is_stmt 1 view .LVU388
 198:Core/Src/main.c **** 
 1356              		.loc 1 198 22 is_stmt 0 view .LVU389
 1357 000e 0023     		movs	r3, #0
 1358 0010 0293     		str	r3, [sp, #8]
 1359 0012 0393     		str	r3, [sp, #12]
 1360 0014 0493     		str	r3, [sp, #16]
 1361 0016 0593     		str	r3, [sp, #20]
 1362 0018 0693     		str	r3, [sp, #24]
 202:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1363              		.loc 1 202 3 is_stmt 1 view .LVU390
 1364              	.LBB10:
 202:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1365              		.loc 1 202 3 view .LVU391
 1366 001a 0093     		str	r3, [sp]
 202:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1367              		.loc 1 202 3 view .LVU392
 1368 001c 1E4A     		ldr	r2, .L83
 1369 001e 116C     		ldr	r1, [r2, #64]
 1370 0020 41F08051 		orr	r1, r1, #268435456
 1371 0024 1164     		str	r1, [r2, #64]
 202:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1372              		.loc 1 202 3 view .LVU393
 1373 0026 126C     		ldr	r2, [r2, #64]
 1374 0028 02F08052 		and	r2, r2, #268435456
 1375 002c 0092     		str	r2, [sp]
 202:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1376              		.loc 1 202 3 view .LVU394
 1377 002e 009A     		ldr	r2, [sp]
 1378              	.LBE10:
 202:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1379              		.loc 1 202 3 view .LVU395
 203:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1380              		.loc 1 203 3 view .LVU396
 1381              	.LBB11:
 203:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1382              		.loc 1 203 3 view .LVU397
 1383 0030 0193     		str	r3, [sp, #4]
 203:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1384              		.loc 1 203 3 view .LVU398
 1385 0032 1A4A     		ldr	r2, .L83+4
 1386 0034 1168     		ldr	r1, [r2]
 1387 0036 41F44041 		orr	r1, r1, #49152
 1388 003a 1160     		str	r1, [r2]
 203:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1389              		.loc 1 203 3 view .LVU399
 1390 003c 1268     		ldr	r2, [r2]
 1391 003e 02F44042 		and	r2, r2, #49152
 1392 0042 0192     		str	r2, [sp, #4]
 203:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1393              		.loc 1 203 3 view .LVU400
 1394 0044 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/ccvZiBna.s 			page 45


 1395              	.LBE11:
 203:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1396              		.loc 1 203 3 view .LVU401
 207:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1397              		.loc 1 207 3 view .LVU402
 207:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1398              		.loc 1 207 36 is_stmt 0 view .LVU403
 1399 0046 0222     		movs	r2, #2
 1400 0048 0792     		str	r2, [sp, #28]
 208:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1401              		.loc 1 208 3 is_stmt 1 view .LVU404
 208:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1402              		.loc 1 208 30 is_stmt 0 view .LVU405
 1403 004a 0121     		movs	r1, #1
 1404 004c 0A91     		str	r1, [sp, #40]
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1405              		.loc 1 209 3 is_stmt 1 view .LVU406
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1406              		.loc 1 209 41 is_stmt 0 view .LVU407
 1407 004e 1021     		movs	r1, #16
 1408 0050 0B91     		str	r1, [sp, #44]
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1409              		.loc 1 210 3 is_stmt 1 view .LVU408
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1410              		.loc 1 210 34 is_stmt 0 view .LVU409
 1411 0052 0D92     		str	r2, [sp, #52]
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1412              		.loc 1 211 3 is_stmt 1 view .LVU410
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1413              		.loc 1 211 35 is_stmt 0 view .LVU411
 1414 0054 0E93     		str	r3, [sp, #56]
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1415              		.loc 1 212 3 is_stmt 1 view .LVU412
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1416              		.loc 1 212 30 is_stmt 0 view .LVU413
 1417 0056 0823     		movs	r3, #8
 1418 0058 0F93     		str	r3, [sp, #60]
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1419              		.loc 1 213 3 is_stmt 1 view .LVU414
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1420              		.loc 1 213 30 is_stmt 0 view .LVU415
 1421 005a 5A23     		movs	r3, #90
 1422 005c 1093     		str	r3, [sp, #64]
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1423              		.loc 1 214 3 is_stmt 1 view .LVU416
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1424              		.loc 1 214 30 is_stmt 0 view .LVU417
 1425 005e 1192     		str	r2, [sp, #68]
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1426              		.loc 1 215 3 is_stmt 1 view .LVU418
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1427              		.loc 1 215 30 is_stmt 0 view .LVU419
 1428 0060 1292     		str	r2, [sp, #72]
 216:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1429              		.loc 1 216 3 is_stmt 1 view .LVU420
 216:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1430              		.loc 1 216 30 is_stmt 0 view .LVU421
ARM GAS  /tmp/ccvZiBna.s 			page 46


 1431 0062 1392     		str	r2, [sp, #76]
 217:Core/Src/main.c ****   {
 1432              		.loc 1 217 3 is_stmt 1 view .LVU422
 217:Core/Src/main.c ****   {
 1433              		.loc 1 217 7 is_stmt 0 view .LVU423
 1434 0064 07A8     		add	r0, sp, #28
 1435 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1436              	.LVL55:
 217:Core/Src/main.c ****   {
 1437              		.loc 1 217 6 view .LVU424
 1438 006a 88B9     		cbnz	r0, .L81
 223:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1439              		.loc 1 223 3 is_stmt 1 view .LVU425
 223:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1440              		.loc 1 223 31 is_stmt 0 view .LVU426
 1441 006c 0F23     		movs	r3, #15
 1442 006e 0293     		str	r3, [sp, #8]
 225:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1443              		.loc 1 225 3 is_stmt 1 view .LVU427
 225:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1444              		.loc 1 225 34 is_stmt 0 view .LVU428
 1445 0070 0223     		movs	r3, #2
 1446 0072 0393     		str	r3, [sp, #12]
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1447              		.loc 1 226 3 is_stmt 1 view .LVU429
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1448              		.loc 1 226 35 is_stmt 0 view .LVU430
 1449 0074 0023     		movs	r3, #0
 1450 0076 0493     		str	r3, [sp, #16]
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1451              		.loc 1 227 3 is_stmt 1 view .LVU431
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1452              		.loc 1 227 36 is_stmt 0 view .LVU432
 1453 0078 4FF48052 		mov	r2, #4096
 1454 007c 0592     		str	r2, [sp, #20]
 228:Core/Src/main.c **** 
 1455              		.loc 1 228 3 is_stmt 1 view .LVU433
 228:Core/Src/main.c **** 
 1456              		.loc 1 228 36 is_stmt 0 view .LVU434
 1457 007e 0693     		str	r3, [sp, #24]
 230:Core/Src/main.c ****   {
 1458              		.loc 1 230 3 is_stmt 1 view .LVU435
 230:Core/Src/main.c ****   {
 1459              		.loc 1 230 7 is_stmt 0 view .LVU436
 1460 0080 0321     		movs	r1, #3
 1461 0082 02A8     		add	r0, sp, #8
 1462 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1463              	.LVL56:
 230:Core/Src/main.c ****   {
 1464              		.loc 1 230 6 view .LVU437
 1465 0088 20B9     		cbnz	r0, .L82
 234:Core/Src/main.c **** 
 1466              		.loc 1 234 1 view .LVU438
 1467 008a 15B0     		add	sp, sp, #84
 1468              	.LCFI22:
 1469              		.cfi_remember_state
 1470              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccvZiBna.s 			page 47


 1471              		@ sp needed
 1472 008c 5DF804FB 		ldr	pc, [sp], #4
 1473              	.L81:
 1474              	.LCFI23:
 1475              		.cfi_restore_state
 219:Core/Src/main.c ****   }
 1476              		.loc 1 219 5 is_stmt 1 view .LVU439
 1477 0090 FFF7FEFF 		bl	Error_Handler
 1478              	.LVL57:
 1479              	.L82:
 232:Core/Src/main.c ****   }
 1480              		.loc 1 232 5 view .LVU440
 1481 0094 FFF7FEFF 		bl	Error_Handler
 1482              	.LVL58:
 1483              	.L84:
 1484              		.align	2
 1485              	.L83:
 1486 0098 00380240 		.word	1073887232
 1487 009c 00700040 		.word	1073770496
 1488              		.cfi_endproc
 1489              	.LFE217:
 1491              		.section	.text.main,"ax",%progbits
 1492              		.align	1
 1493              		.global	main
 1494              		.syntax unified
 1495              		.thumb
 1496              		.thumb_func
 1497              		.fpu fpv4-sp-d16
 1499              	main:
 1500              	.LFB216:
 124:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1501              		.loc 1 124 1 view -0
 1502              		.cfi_startproc
 1503              		@ Volatile: function does not return.
 1504              		@ args = 0, pretend = 0, frame = 0
 1505              		@ frame_needed = 0, uses_anonymous_args = 0
 1506 0000 08B5     		push	{r3, lr}
 1507              	.LCFI24:
 1508              		.cfi_def_cfa_offset 8
 1509              		.cfi_offset 3, -8
 1510              		.cfi_offset 14, -4
 128:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 1511              		.loc 1 128 3 view .LVU442
 128:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 1512              		.loc 1 128 18 is_stmt 0 view .LVU443
 1513 0002 1B4A     		ldr	r2, .L88
 1514 0004 9323     		movs	r3, #147
 1515 0006 1360     		str	r3, [r2]
 129:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 1516              		.loc 1 129 3 is_stmt 1 view .LVU444
 129:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 1517              		.loc 1 129 18 is_stmt 0 view .LVU445
 1518 0008 0023     		movs	r3, #0
 1519 000a 5360     		str	r3, [r2, #4]
 130:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 1520              		.loc 1 130 3 is_stmt 1 view .LVU446
 130:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
ARM GAS  /tmp/ccvZiBna.s 			page 48


 1521              		.loc 1 130 16 is_stmt 0 view .LVU447
 1522 000c 9360     		str	r3, [r2, #8]
 131:Core/Src/main.c ****   TxHeader.DLC = 8;
 1523              		.loc 1 131 3 is_stmt 1 view .LVU448
 131:Core/Src/main.c ****   TxHeader.DLC = 8;
 1524              		.loc 1 131 16 is_stmt 0 view .LVU449
 1525 000e D360     		str	r3, [r2, #12]
 132:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 1526              		.loc 1 132 3 is_stmt 1 view .LVU450
 132:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 1527              		.loc 1 132 16 is_stmt 0 view .LVU451
 1528 0010 0821     		movs	r1, #8
 1529 0012 1161     		str	r1, [r2, #16]
 133:Core/Src/main.c ****   
 1530              		.loc 1 133 3 is_stmt 1 view .LVU452
 133:Core/Src/main.c ****   
 1531              		.loc 1 133 31 is_stmt 0 view .LVU453
 1532 0014 1375     		strb	r3, [r2, #20]
 136:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 1533              		.loc 1 136 3 is_stmt 1 view .LVU454
 136:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 1534              		.loc 1 136 19 is_stmt 0 view .LVU455
 1535 0016 174A     		ldr	r2, .L88+4
 1536 0018 C020     		movs	r0, #192
 1537 001a 1060     		str	r0, [r2]
 137:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 1538              		.loc 1 137 3 is_stmt 1 view .LVU456
 137:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 1539              		.loc 1 137 19 is_stmt 0 view .LVU457
 1540 001c 5360     		str	r3, [r2, #4]
 138:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 1541              		.loc 1 138 3 is_stmt 1 view .LVU458
 138:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 1542              		.loc 1 138 17 is_stmt 0 view .LVU459
 1543 001e 9360     		str	r3, [r2, #8]
 139:Core/Src/main.c ****   TxHeader2.DLC = 8;
 1544              		.loc 1 139 3 is_stmt 1 view .LVU460
 139:Core/Src/main.c ****   TxHeader2.DLC = 8;
 1545              		.loc 1 139 17 is_stmt 0 view .LVU461
 1546 0020 D360     		str	r3, [r2, #12]
 140:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 1547              		.loc 1 140 3 is_stmt 1 view .LVU462
 140:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 1548              		.loc 1 140 17 is_stmt 0 view .LVU463
 1549 0022 1161     		str	r1, [r2, #16]
 141:Core/Src/main.c **** 
 1550              		.loc 1 141 3 is_stmt 1 view .LVU464
 141:Core/Src/main.c **** 
 1551              		.loc 1 141 32 is_stmt 0 view .LVU465
 1552 0024 1375     		strb	r3, [r2, #20]
 148:Core/Src/main.c **** 
 1553              		.loc 1 148 3 is_stmt 1 view .LVU466
 1554 0026 FFF7FEFF 		bl	HAL_Init
 1555              	.LVL59:
 155:Core/Src/main.c **** 
 1556              		.loc 1 155 3 view .LVU467
 1557 002a FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /tmp/ccvZiBna.s 			page 49


 1558              	.LVL60:
 162:Core/Src/main.c ****   MX_CAN1_Init();
 1559              		.loc 1 162 3 view .LVU468
 1560 002e FFF7FEFF 		bl	MX_GPIO_Init
 1561              	.LVL61:
 163:Core/Src/main.c ****   MX_DMA_Init();
 1562              		.loc 1 163 3 view .LVU469
 1563 0032 FFF7FEFF 		bl	MX_CAN1_Init
 1564              	.LVL62:
 164:Core/Src/main.c ****   MX_ADC1_Init();
 1565              		.loc 1 164 3 view .LVU470
 1566 0036 FFF7FEFF 		bl	MX_DMA_Init
 1567              	.LVL63:
 165:Core/Src/main.c ****   MX_TIM14_Init();
 1568              		.loc 1 165 3 view .LVU471
 1569 003a FFF7FEFF 		bl	MX_ADC1_Init
 1570              	.LVL64:
 166:Core/Src/main.c ****   MX_TIM13_Init();
 1571              		.loc 1 166 3 view .LVU472
 1572 003e FFF7FEFF 		bl	MX_TIM14_Init
 1573              	.LVL65:
 167:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1574              		.loc 1 167 3 view .LVU473
 1575 0042 FFF7FEFF 		bl	MX_TIM13_Init
 1576              	.LVL66:
 171:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 1577              		.loc 1 171 3 view .LVU474
 1578 0046 0C4C     		ldr	r4, .L88+8
 1579 0048 2046     		mov	r0, r4
 1580 004a FFF7FEFF 		bl	HAL_CAN_Start
 1581              	.LVL67:
 172:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1582              		.loc 1 172 3 view .LVU475
 1583 004e 0221     		movs	r1, #2
 1584 0050 2046     		mov	r0, r4
 1585 0052 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1586              	.LVL68:
 173:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 1587              		.loc 1 173 3 view .LVU476
 1588 0056 0948     		ldr	r0, .L88+12
 1589 0058 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1590              	.LVL69:
 174:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 1591              		.loc 1 174 3 view .LVU477
 1592 005c 0848     		ldr	r0, .L88+16
 1593 005e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1594              	.LVL70:
 175:Core/Src/main.c **** 
 1595              		.loc 1 175 3 view .LVU478
 1596 0062 0422     		movs	r2, #4
 1597 0064 0749     		ldr	r1, .L88+20
 1598 0066 0848     		ldr	r0, .L88+24
 1599 0068 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1600              	.LVL71:
 1601              	.L86:
 181:Core/Src/main.c ****   {
 1602              		.loc 1 181 3 discriminator 1 view .LVU479
ARM GAS  /tmp/ccvZiBna.s 			page 50


 187:Core/Src/main.c ****   /* USER CODE END 3 */
 1603              		.loc 1 187 3 discriminator 1 view .LVU480
 181:Core/Src/main.c ****   {
 1604              		.loc 1 181 9 discriminator 1 view .LVU481
 1605 006c FEE7     		b	.L86
 1606              	.L89:
 1607 006e 00BF     		.align	2
 1608              	.L88:
 1609 0070 00000000 		.word	TxHeader
 1610 0074 00000000 		.word	TxHeader2
 1611 0078 00000000 		.word	hcan1
 1612 007c 00000000 		.word	htim14
 1613 0080 00000000 		.word	htim13
 1614 0084 00000000 		.word	adc_buf
 1615 0088 00000000 		.word	hadc1
 1616              		.cfi_endproc
 1617              	.LFE216:
 1619              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1620              		.align	1
 1621              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 1622              		.syntax unified
 1623              		.thumb
 1624              		.thumb_func
 1625              		.fpu fpv4-sp-d16
 1627              	HAL_CAN_RxFifo0MsgPendingCallback:
 1628              	.LVL72:
 1629              	.LFB226:
 545:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 1630              		.loc 1 545 1 view -0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 0
 1633              		@ frame_needed = 0, uses_anonymous_args = 0
 545:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 1634              		.loc 1 545 1 is_stmt 0 view .LVU483
 1635 0000 08B5     		push	{r3, lr}
 1636              	.LCFI25:
 1637              		.cfi_def_cfa_offset 8
 1638              		.cfi_offset 3, -8
 1639              		.cfi_offset 14, -4
 546:Core/Src/main.c ****     Error_Handler();
 1640              		.loc 1 546 3 is_stmt 1 view .LVU484
 546:Core/Src/main.c ****     Error_Handler();
 1641              		.loc 1 546 7 is_stmt 0 view .LVU485
 1642 0002 0E4B     		ldr	r3, .L98
 1643 0004 0E4A     		ldr	r2, .L98+4
 1644 0006 0021     		movs	r1, #0
 1645 0008 0E48     		ldr	r0, .L98+8
 1646              	.LVL73:
 546:Core/Src/main.c ****     Error_Handler();
 1647              		.loc 1 546 7 view .LVU486
 1648 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1649              	.LVL74:
 546:Core/Src/main.c ****     Error_Handler();
 1650              		.loc 1 546 6 view .LVU487
 1651 000e 30B9     		cbnz	r0, .L95
 551:Core/Src/main.c ****       imdFault = RxData[0];
 1652              		.loc 1 551 3 is_stmt 1 view .LVU488
ARM GAS  /tmp/ccvZiBna.s 			page 51


 551:Core/Src/main.c ****       imdFault = RxData[0];
 1653              		.loc 1 551 15 is_stmt 0 view .LVU489
 1654 0010 0B4B     		ldr	r3, .L98+4
 1655 0012 1B68     		ldr	r3, [r3]
 551:Core/Src/main.c ****       imdFault = RxData[0];
 1656              		.loc 1 551 6 view .LVU490
 1657 0014 822B     		cmp	r3, #130
 1658 0016 04D0     		beq	.L96
 1659              	.L92:
 557:Core/Src/main.c ****       ready_to_drive = RxData[0];
 1660              		.loc 1 557 3 is_stmt 1 view .LVU491
 557:Core/Src/main.c ****       ready_to_drive = RxData[0];
 1661              		.loc 1 557 6 is_stmt 0 view .LVU492
 1662 0018 872B     		cmp	r3, #135
 1663 001a 0AD0     		beq	.L97
 1664              	.L90:
 560:Core/Src/main.c **** 
 1665              		.loc 1 560 1 view .LVU493
 1666 001c 08BD     		pop	{r3, pc}
 1667              	.L95:
 547:Core/Src/main.c ****   }
 1668              		.loc 1 547 5 is_stmt 1 view .LVU494
 1669 001e FFF7FEFF 		bl	Error_Handler
 1670              	.LVL75:
 1671              	.L96:
 552:Core/Src/main.c ****       bmsFault = RxData[1];
 1672              		.loc 1 552 7 view .LVU495
 552:Core/Src/main.c ****       bmsFault = RxData[1];
 1673              		.loc 1 552 24 is_stmt 0 view .LVU496
 1674 0022 064A     		ldr	r2, .L98
 1675 0024 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 552:Core/Src/main.c ****       bmsFault = RxData[1];
 1676              		.loc 1 552 16 view .LVU497
 1677 0026 0849     		ldr	r1, .L98+12
 1678 0028 0870     		strb	r0, [r1]
 553:Core/Src/main.c ****   }
 1679              		.loc 1 553 7 is_stmt 1 view .LVU498
 553:Core/Src/main.c ****   }
 1680              		.loc 1 553 24 is_stmt 0 view .LVU499
 1681 002a 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 553:Core/Src/main.c ****   }
 1682              		.loc 1 553 16 view .LVU500
 1683 002c 074A     		ldr	r2, .L98+16
 1684 002e 1170     		strb	r1, [r2]
 1685 0030 F2E7     		b	.L92
 1686              	.L97:
 558:Core/Src/main.c ****   }
 1687              		.loc 1 558 7 is_stmt 1 view .LVU501
 558:Core/Src/main.c ****   }
 1688              		.loc 1 558 30 is_stmt 0 view .LVU502
 1689 0032 024B     		ldr	r3, .L98
 1690 0034 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 558:Core/Src/main.c ****   }
 1691              		.loc 1 558 22 view .LVU503
 1692 0036 064B     		ldr	r3, .L98+20
 1693 0038 1A70     		strb	r2, [r3]
 560:Core/Src/main.c **** 
ARM GAS  /tmp/ccvZiBna.s 			page 52


 1694              		.loc 1 560 1 view .LVU504
 1695 003a EFE7     		b	.L90
 1696              	.L99:
 1697              		.align	2
 1698              	.L98:
 1699 003c 00000000 		.word	RxData
 1700 0040 00000000 		.word	RxHeader
 1701 0044 00000000 		.word	hcan1
 1702 0048 00000000 		.word	.LANCHOR12
 1703 004c 00000000 		.word	.LANCHOR13
 1704 0050 00000000 		.word	.LANCHOR0
 1705              		.cfi_endproc
 1706              	.LFE226:
 1708              		.global	driveMode
 1709              		.global	command_torque_limit
 1710              		.global	commandedTorque
 1711              		.global	enableInverter
 1712              		.global	buzzerCounter
 1713              		.global	buzzerState
 1714              		.global	ready_to_drive
 1715              		.global	pedalAverage
 1716              		.global	pedal1
 1717              		.global	pedal0
 1718              		.comm	adc_buf,8,4
 1719              		.global	switch_direction
 1720              		.global	switch_cooling
 1721              		.global	bmsFault
 1722              		.global	imdFault
 1723              		.comm	filter1,40,4
 1724              		.comm	filter0,40,4
 1725              		.comm	RxData,8,4
 1726              		.comm	RxHeader,28,4
 1727              		.comm	TxMailbox,4,4
 1728              		.comm	TxData,8,4
 1729              		.comm	TxHeader2,24,4
 1730              		.comm	TxHeader,24,4
 1731              		.comm	htim14,72,4
 1732              		.comm	htim13,72,4
 1733              		.comm	hcan1,40,4
 1734              		.comm	hdma_adc1,96,4
 1735              		.comm	hadc1,72,4
 1736              		.section	.bss.bmsFault,"aw",%nobits
 1737              		.set	.LANCHOR13,. + 0
 1740              	bmsFault:
 1741 0000 00       		.space	1
 1742              		.section	.bss.buzzerCounter,"aw",%nobits
 1743              		.set	.LANCHOR11,. + 0
 1746              	buzzerCounter:
 1747 0000 00       		.space	1
 1748              		.section	.bss.buzzerState,"aw",%nobits
 1749              		.set	.LANCHOR1,. + 0
 1752              	buzzerState:
 1753 0000 00       		.space	1
 1754              		.section	.bss.command_torque_limit,"aw",%nobits
 1755              		.align	1
 1756              		.set	.LANCHOR6,. + 0
 1759              	command_torque_limit:
ARM GAS  /tmp/ccvZiBna.s 			page 53


 1760 0000 0000     		.space	2
 1761              		.section	.bss.commandedTorque,"aw",%nobits
 1762              		.align	1
 1763              		.set	.LANCHOR7,. + 0
 1766              	commandedTorque:
 1767 0000 0000     		.space	2
 1768              		.section	.bss.enableInverter,"aw",%nobits
 1769              		.set	.LANCHOR9,. + 0
 1772              	enableInverter:
 1773 0000 00       		.space	1
 1774              		.section	.bss.imdFault,"aw",%nobits
 1775              		.set	.LANCHOR12,. + 0
 1778              	imdFault:
 1779 0000 00       		.space	1
 1780              		.section	.bss.pedal0,"aw",%nobits
 1781              		.align	1
 1782              		.set	.LANCHOR2,. + 0
 1785              	pedal0:
 1786 0000 0000     		.space	2
 1787              		.section	.bss.pedalAverage,"aw",%nobits
 1788              		.align	1
 1789              		.set	.LANCHOR4,. + 0
 1792              	pedalAverage:
 1793 0000 0000     		.space	2
 1794              		.section	.bss.ready_to_drive,"aw",%nobits
 1795              		.set	.LANCHOR0,. + 0
 1798              	ready_to_drive:
 1799 0000 00       		.space	1
 1800              		.section	.bss.switch_cooling,"aw",%nobits
 1801              		.set	.LANCHOR10,. + 0
 1804              	switch_cooling:
 1805 0000 00       		.space	1
 1806              		.section	.bss.switch_direction,"aw",%nobits
 1807              		.set	.LANCHOR8,. + 0
 1810              	switch_direction:
 1811 0000 00       		.space	1
 1812              		.section	.data.driveMode,"aw"
 1813              		.align	2
 1814              		.set	.LANCHOR5,. + 0
 1817              	driveMode:
 1818 0000 01000000 		.word	1
 1819              		.section	.data.pedal1,"aw"
 1820              		.align	1
 1821              		.set	.LANCHOR3,. + 0
 1824              	pedal1:
 1825 0000 0100     		.short	1
 1826              		.text
 1827              	.Letext0:
 1828              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1829              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1830              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1831              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1832              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1833              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1834              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1835              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1836              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  /tmp/ccvZiBna.s 			page 54


 1837              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1838              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1839              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1840              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1841              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1842              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1843              		.file 18 "<built-in>"
ARM GAS  /tmp/ccvZiBna.s 			page 55


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccvZiBna.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccvZiBna.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccvZiBna.s:186    .text.MX_GPIO_Init:00000000000000c0 $d
     /tmp/ccvZiBna.s:193    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccvZiBna.s:199    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccvZiBna.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccvZiBna.s:253    .text.mapValue:0000000000000000 $t
     /tmp/ccvZiBna.s:260    .text.mapValue:0000000000000000 mapValue
     /tmp/ccvZiBna.s:300    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccvZiBna.s:307    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccvZiBna.s:340    .text.HAL_GPIO_EXTI_Callback:0000000000000018 $d
     /tmp/ccvZiBna.s:346    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccvZiBna.s:353    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccvZiBna.s:379    .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
                            *COM*:0000000000000008 adc_buf
     /tmp/ccvZiBna.s:386    .text.pedal_conversion:0000000000000000 $t
     /tmp/ccvZiBna.s:393    .text.pedal_conversion:0000000000000000 pedal_conversion
     /tmp/ccvZiBna.s:415    .text.pedal_conversion:000000000000000c $d
     /tmp/ccvZiBna.s:420    .text.getCommandedTorque:0000000000000000 $t
     /tmp/ccvZiBna.s:427    .text.getCommandedTorque:0000000000000000 getCommandedTorque
     /tmp/ccvZiBna.s:548    .text.getCommandedTorque:0000000000000088 $d
     /tmp/ccvZiBna.s:558    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccvZiBna.s:565    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccvZiBna.s:801    .text.HAL_TIM_PeriodElapsedCallback:0000000000000118 $d
                            *COM*:0000000000000048 htim13
                            *COM*:0000000000000048 htim14
                            *COM*:0000000000000008 TxData
                            *COM*:0000000000000004 TxMailbox
                            *COM*:0000000000000018 TxHeader2
                            *COM*:0000000000000028 hcan1
                            *COM*:0000000000000018 TxHeader
     /tmp/ccvZiBna.s:826    .text.Error_Handler:0000000000000000 $t
     /tmp/ccvZiBna.s:833    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccvZiBna.s:865    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccvZiBna.s:871    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccvZiBna.s:1017   .text.MX_CAN1_Init:000000000000007c $d
                            *COM*:0000000000000028 filter0
                            *COM*:0000000000000028 filter1
     /tmp/ccvZiBna.s:1025   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccvZiBna.s:1031   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccvZiBna.s:1199   .text.MX_ADC1_Init:00000000000000a4 $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccvZiBna.s:1206   .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/ccvZiBna.s:1212   .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/ccvZiBna.s:1261   .text.MX_TIM14_Init:0000000000000028 $d
     /tmp/ccvZiBna.s:1267   .text.MX_TIM13_Init:0000000000000000 $t
     /tmp/ccvZiBna.s:1273   .text.MX_TIM13_Init:0000000000000000 MX_TIM13_Init
     /tmp/ccvZiBna.s:1322   .text.MX_TIM13_Init:0000000000000028 $d
     /tmp/ccvZiBna.s:1328   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccvZiBna.s:1335   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccvZiBna.s:1486   .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccvZiBna.s:1492   .text.main:0000000000000000 $t
     /tmp/ccvZiBna.s:1499   .text.main:0000000000000000 main
     /tmp/ccvZiBna.s:1609   .text.main:0000000000000070 $d
     /tmp/ccvZiBna.s:1620   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
ARM GAS  /tmp/ccvZiBna.s 			page 56


     /tmp/ccvZiBna.s:1627   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccvZiBna.s:1699   .text.HAL_CAN_RxFifo0MsgPendingCallback:000000000000003c $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
     /tmp/ccvZiBna.s:1817   .data.driveMode:0000000000000000 driveMode
     /tmp/ccvZiBna.s:1759   .bss.command_torque_limit:0000000000000000 command_torque_limit
     /tmp/ccvZiBna.s:1766   .bss.commandedTorque:0000000000000000 commandedTorque
     /tmp/ccvZiBna.s:1772   .bss.enableInverter:0000000000000000 enableInverter
     /tmp/ccvZiBna.s:1746   .bss.buzzerCounter:0000000000000000 buzzerCounter
     /tmp/ccvZiBna.s:1752   .bss.buzzerState:0000000000000000 buzzerState
     /tmp/ccvZiBna.s:1798   .bss.ready_to_drive:0000000000000000 ready_to_drive
     /tmp/ccvZiBna.s:1792   .bss.pedalAverage:0000000000000000 pedalAverage
     /tmp/ccvZiBna.s:1824   .data.pedal1:0000000000000000 pedal1
     /tmp/ccvZiBna.s:1785   .bss.pedal0:0000000000000000 pedal0
     /tmp/ccvZiBna.s:1810   .bss.switch_direction:0000000000000000 switch_direction
     /tmp/ccvZiBna.s:1804   .bss.switch_cooling:0000000000000000 switch_cooling
     /tmp/ccvZiBna.s:1740   .bss.bmsFault:0000000000000000 bmsFault
     /tmp/ccvZiBna.s:1778   .bss.imdFault:0000000000000000 imdFault
                            *COM*:0000000000000060 hdma_adc1
     /tmp/ccvZiBna.s:1741   .bss.bmsFault:0000000000000000 $d
     /tmp/ccvZiBna.s:1747   .bss.buzzerCounter:0000000000000000 $d
     /tmp/ccvZiBna.s:1753   .bss.buzzerState:0000000000000000 $d
     /tmp/ccvZiBna.s:1755   .bss.command_torque_limit:0000000000000000 $d
     /tmp/ccvZiBna.s:1762   .bss.commandedTorque:0000000000000000 $d
     /tmp/ccvZiBna.s:1773   .bss.enableInverter:0000000000000000 $d
     /tmp/ccvZiBna.s:1779   .bss.imdFault:0000000000000000 $d
     /tmp/ccvZiBna.s:1781   .bss.pedal0:0000000000000000 $d
     /tmp/ccvZiBna.s:1788   .bss.pedalAverage:0000000000000000 $d
     /tmp/ccvZiBna.s:1799   .bss.ready_to_drive:0000000000000000 $d
     /tmp/ccvZiBna.s:1805   .bss.switch_cooling:0000000000000000 $d
     /tmp/ccvZiBna.s:1811   .bss.switch_direction:0000000000000000 $d
     /tmp/ccvZiBna.s:1813   .data.driveMode:0000000000000000 $d
     /tmp/ccvZiBna.s:1820   .data.pedal1:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_CAN_AddTxMessage
HAL_GPIO_ReadPin
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start_IT
HAL_ADC_Start_DMA
HAL_CAN_GetRxMessage
