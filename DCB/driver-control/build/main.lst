ARM GAS  /tmp/ccSF8koB.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB223:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccSF8koB.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** #define ADC_BUF_LEN               4
  35:Core/Src/main.c **** #define MAX_PEDAL_SKEW            100
  36:Core/Src/main.c **** #define PEDAL_MAX                 600     // max pedal found from Accelerator test 12bit ADC
  37:Core/Src/main.c **** #define PEDAL_MIN                 128     // max pedal found from Accelerator test 12bit ADC
  38:Core/Src/main.c **** #define PEDAL_DEADBAND            10      // max pedal found from Accelerator test 12bit ADC
  39:Core/Src/main.c **** #define BRAKE_LIGHT_THRESHOLD     10      // when the brake light turns on
  40:Core/Src/main.c **** #define TORQUE_DEADBAND           5       // commanded torque deadband 
  41:Core/Src/main.c **** #define MAX_TORQUE                220     // MAX TORQUE RINEHART CAN ACCEPT, DO NOT CHANGE (230)
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  52:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** TIM_HandleTypeDef htim13;
  57:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE BEGIN PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** // CAN transmitting
  62:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader;               // either daq or control idk which one address 
  63:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader2;              // rinehart command message address
  64:Core/Src/main.c **** uint8_t TxData[8];
  65:Core/Src/main.c **** uint32_t TxMailbox;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** // CAN reciving 
  68:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
  69:Core/Src/main.c **** uint8_t RxData[8];
  70:Core/Src/main.c **** CAN_FilterTypeDef filter0;                  // filter for __________
  71:Core/Src/main.c **** CAN_FilterTypeDef filter1;                  // fiter for ___________
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** // signal variables (0 = off | 1 = on)
  74:Core/Src/main.c **** uint8_t imdFault = 0;             
  75:Core/Src/main.c **** uint8_t bmsFault = 0;
  76:Core/Src/main.c **** uint8_t switch_cooling = 0;
  77:Core/Src/main.c **** uint8_t switch_direction = 0;               // 0 = forward | 1 = reverse (this changes requires an 
  78:Core/Src/main.c **** uint8_t brakeLight = 0;
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** // analog pins
  81:Core/Src/main.c **** uint16_t adc_buf[ADC_BUF_LEN];
  82:Core/Src/main.c **** uint16_t brake0 = 0;
  83:Core/Src/main.c **** uint16_t brake1 = 0;
  84:Core/Src/main.c **** uint16_t pedal0 = 0;
  85:Core/Src/main.c **** uint16_t pedal1 = 1;
  86:Core/Src/main.c **** uint16_t brakeAverage = 0;
  87:Core/Src/main.c **** uint16_t pedalAverage = 0;
  88:Core/Src/main.c **** 
ARM GAS  /tmp/ccSF8koB.s 			page 3


  89:Core/Src/main.c **** // state variables (0 = off | 1 = on)
  90:Core/Src/main.c **** uint8_t ready_to_drive = 0;                 // 0 until precharge is done
  91:Core/Src/main.c **** uint8_t buzzerState = 0;                    // for controlling the buzzer
  92:Core/Src/main.c **** uint8_t buzzerCounter = 0;                  // counter for how long the buzzer has been buzzing
  93:Core/Src/main.c **** uint8_t enableInverter = 0;                 // stores state of inverter, can only be 1 after buzzer
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** // rinehart commands
  96:Core/Src/main.c **** uint16_t commandedTorque = 0;               // torque request sent to rinehart, init with 0 to prev
  97:Core/Src/main.c **** uint16_t command_torque_limit = 0;          // max torque allowed to be requested from rinehart, in
  98:Core/Src/main.c **** enum mode                                   // create an enumeration for the drive modes
  99:Core/Src/main.c **** {
 100:Core/Src/main.c ****   SLOW,       // 50% power 
 101:Core/Src/main.c ****   ECO,        // 75% power
 102:Core/Src/main.c ****   FAST        // 100% power 
 103:Core/Src/main.c **** };
 104:Core/Src/main.c **** int driveMode = ECO;                        // set the inital drive mode of the car
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** /* USER CODE END PV */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 109:Core/Src/main.c **** void SystemClock_Config(void);
 110:Core/Src/main.c **** static void MX_GPIO_Init(void);
 111:Core/Src/main.c **** static void MX_CAN1_Init(void);
 112:Core/Src/main.c **** static void MX_DMA_Init(void);
 113:Core/Src/main.c **** static void MX_ADC1_Init(void);
 114:Core/Src/main.c **** static void MX_TIM14_Init(void);
 115:Core/Src/main.c **** static void MX_TIM13_Init(void);
 116:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 117:Core/Src/main.c **** uint16_t adc_average(uint16_t adc0, uint16_t adc1);
 118:Core/Src/main.c **** long mapValue(long x, long in_min, long in_max, long out_min, long out_max);
 119:Core/Src/main.c **** uint16_t getCommandedTorque();
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /* USER CODE END PFP */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 124:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** /* USER CODE END 0 */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** /**
 129:Core/Src/main.c ****   * @brief  The application entry point.
 130:Core/Src/main.c ****   * @retval int
 131:Core/Src/main.c ****   */
 132:Core/Src/main.c **** int main(void)
 133:Core/Src/main.c **** {
 134:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   // define TX header
 137:Core/Src/main.c ****   TxHeader.StdId = 0x093;
 138:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 139:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 140:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 141:Core/Src/main.c ****   TxHeader.DLC = 8;
 142:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 143:Core/Src/main.c ****   
 144:Core/Src/main.c ****   // Rinehart command message
 145:Core/Src/main.c ****   TxHeader2.StdId = 0x0C0;
ARM GAS  /tmp/ccSF8koB.s 			page 4


 146:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 147:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 148:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 149:Core/Src/main.c ****   TxHeader2.DLC = 8;
 150:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE END 1 */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 157:Core/Src/main.c ****   HAL_Init();
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   /* USER CODE END Init */
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /* Configure the system clock */
 164:Core/Src/main.c ****   SystemClock_Config();
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* USER CODE END SysInit */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* Initialize all configured peripherals */
 171:Core/Src/main.c ****   MX_GPIO_Init();
 172:Core/Src/main.c ****   MX_CAN1_Init();
 173:Core/Src/main.c ****   MX_DMA_Init();
 174:Core/Src/main.c ****   MX_ADC1_Init();
 175:Core/Src/main.c ****   MX_TIM14_Init();
 176:Core/Src/main.c ****   MX_TIM13_Init();
 177:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   // start interrupts
 180:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 181:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 182:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 183:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 184:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* USER CODE END 2 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* Infinite loop */
 189:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 190:Core/Src/main.c ****   while (1)
 191:Core/Src/main.c ****   {
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****     /* USER CODE END WHILE */
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 196:Core/Src/main.c ****   }
 197:Core/Src/main.c ****   /* USER CODE END 3 */
 198:Core/Src/main.c **** }
 199:Core/Src/main.c **** 
 200:Core/Src/main.c **** /**
 201:Core/Src/main.c ****   * @brief System Clock Configuration
 202:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccSF8koB.s 			page 5


 203:Core/Src/main.c ****   */
 204:Core/Src/main.c **** void SystemClock_Config(void)
 205:Core/Src/main.c **** {
 206:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 207:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 210:Core/Src/main.c ****   */
 211:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 212:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 213:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 214:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 215:Core/Src/main.c ****   */
 216:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 217:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 218:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 226:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 227:Core/Src/main.c ****   {
 228:Core/Src/main.c ****     Error_Handler();
 229:Core/Src/main.c ****   }
 230:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 231:Core/Src/main.c ****   */
 232:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 233:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 234:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 235:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 236:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 237:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 240:Core/Src/main.c ****   {
 241:Core/Src/main.c ****     Error_Handler();
 242:Core/Src/main.c ****   }
 243:Core/Src/main.c **** }
 244:Core/Src/main.c **** 
 245:Core/Src/main.c **** /**
 246:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 247:Core/Src/main.c ****   * @param None
 248:Core/Src/main.c ****   * @retval None
 249:Core/Src/main.c ****   */
 250:Core/Src/main.c **** static void MX_ADC1_Init(void)
 251:Core/Src/main.c **** {
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
ARM GAS  /tmp/ccSF8koB.s 			page 6


 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 262:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 263:Core/Src/main.c ****   */
 264:Core/Src/main.c ****   hadc1.Instance = ADC1;
 265:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 266:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 267:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 268:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 269:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 270:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 271:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 272:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 273:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 274:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 275:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 276:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 277:Core/Src/main.c ****   {
 278:Core/Src/main.c ****     Error_Handler();
 279:Core/Src/main.c ****   }
 280:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 281:Core/Src/main.c ****   */
 282:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 283:Core/Src/main.c ****   sConfig.Rank = 1;
 284:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 285:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 286:Core/Src/main.c ****   {
 287:Core/Src/main.c ****     Error_Handler();
 288:Core/Src/main.c ****   }
 289:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 290:Core/Src/main.c ****   */
 291:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 292:Core/Src/main.c ****   sConfig.Rank = 2;
 293:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 294:Core/Src/main.c ****   {
 295:Core/Src/main.c ****     Error_Handler();
 296:Core/Src/main.c ****   }
 297:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 298:Core/Src/main.c ****   */
 299:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 300:Core/Src/main.c ****   sConfig.Rank = 3;
 301:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 302:Core/Src/main.c ****   {
 303:Core/Src/main.c ****     Error_Handler();
 304:Core/Src/main.c ****   }
 305:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 306:Core/Src/main.c ****   */
 307:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
 308:Core/Src/main.c ****   sConfig.Rank = 4;
 309:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 310:Core/Src/main.c ****   {
 311:Core/Src/main.c ****     Error_Handler();
 312:Core/Src/main.c ****   }
 313:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 316:Core/Src/main.c **** 
ARM GAS  /tmp/ccSF8koB.s 			page 7


 317:Core/Src/main.c **** }
 318:Core/Src/main.c **** 
 319:Core/Src/main.c **** /**
 320:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 321:Core/Src/main.c ****   * @param None
 322:Core/Src/main.c ****   * @retval None
 323:Core/Src/main.c ****   */
 324:Core/Src/main.c **** static void MX_CAN1_Init(void)
 325:Core/Src/main.c **** {
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 334:Core/Src/main.c ****   hcan1.Instance = CAN1;
 335:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 336:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 337:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 338:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 339:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 340:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 341:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 342:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 343:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 344:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 345:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 346:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 347:Core/Src/main.c ****   {
 348:Core/Src/main.c ****     Error_Handler();
 349:Core/Src/main.c ****   }
 350:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   // listen for RCB
 353:Core/Src/main.c ****   filter0.FilterIdHigh = 0x082 << 5;
 354:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 355:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 356:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 357:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 358:Core/Src/main.c ****   filter0.FilterBank = 1;
 359:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 360:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 361:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 362:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan1, &filter0);
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   // listen for HVB
 367:Core/Src/main.c ****   filter1.FilterIdHigh = 0x087 << 5;
 368:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 369:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x087 << 5;
 370:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 371:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 372:Core/Src/main.c ****   filter1.FilterBank = 2;
 373:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
ARM GAS  /tmp/ccSF8koB.s 			page 8


 374:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 375:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 376:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan1, &filter1);
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c **** }
 383:Core/Src/main.c **** 
 384:Core/Src/main.c **** /**
 385:Core/Src/main.c ****   * @brief TIM13 Initialization Function
 386:Core/Src/main.c ****   * @param None
 387:Core/Src/main.c ****   * @retval None
 388:Core/Src/main.c ****   */
 389:Core/Src/main.c **** static void MX_TIM13_Init(void)
 390:Core/Src/main.c **** {
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 0 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE END TIM13_Init 0 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 1 */
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /* USER CODE END TIM13_Init 1 */
 399:Core/Src/main.c ****   htim13.Instance = TIM13;
 400:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 401:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 402:Core/Src/main.c ****   htim13.Init.Period = 500-1;
 403:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 404:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 405:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 406:Core/Src/main.c ****   {
 407:Core/Src/main.c ****     Error_Handler();
 408:Core/Src/main.c ****   }
 409:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 2 */
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****   /* USER CODE END TIM13_Init 2 */
 412:Core/Src/main.c **** 
 413:Core/Src/main.c **** }
 414:Core/Src/main.c **** 
 415:Core/Src/main.c **** /**
 416:Core/Src/main.c ****   * @brief TIM14 Initialization Function
 417:Core/Src/main.c ****   * @param None
 418:Core/Src/main.c ****   * @retval None
 419:Core/Src/main.c ****   */
 420:Core/Src/main.c **** static void MX_TIM14_Init(void)
 421:Core/Src/main.c **** {
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
 430:Core/Src/main.c ****   htim14.Instance = TIM14;
ARM GAS  /tmp/ccSF8koB.s 			page 9


 431:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 432:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 433:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 434:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 435:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 436:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 437:Core/Src/main.c ****   {
 438:Core/Src/main.c ****     Error_Handler();
 439:Core/Src/main.c ****   }
 440:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
 443:Core/Src/main.c **** 
 444:Core/Src/main.c **** }
 445:Core/Src/main.c **** 
 446:Core/Src/main.c **** /**
 447:Core/Src/main.c ****   * Enable DMA controller clock
 448:Core/Src/main.c ****   */
 449:Core/Src/main.c **** static void MX_DMA_Init(void)
 450:Core/Src/main.c **** {
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* DMA controller clock enable */
 453:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 454:Core/Src/main.c **** 
 455:Core/Src/main.c ****   /* DMA interrupt init */
 456:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 457:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 458:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 459:Core/Src/main.c **** 
 460:Core/Src/main.c **** }
 461:Core/Src/main.c **** 
 462:Core/Src/main.c **** /**
 463:Core/Src/main.c ****   * @brief GPIO Initialization Function
 464:Core/Src/main.c ****   * @param None
 465:Core/Src/main.c ****   * @retval None
 466:Core/Src/main.c ****   */
 467:Core/Src/main.c **** static void MX_GPIO_Init(void)
 468:Core/Src/main.c **** {
  28              		.loc 1 468 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 56
 469:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 469 3 view .LVU1
  44              		.loc 1 469 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
ARM GAS  /tmp/ccSF8koB.s 			page 10


  46 0006 0394     		str	r4, [sp, #12]
  47 0008 0494     		str	r4, [sp, #16]
  48 000a 0594     		str	r4, [sp, #20]
  49 000c 0694     		str	r4, [sp, #24]
  50 000e 0794     		str	r4, [sp, #28]
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 472:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 472 3 is_stmt 1 view .LVU3
  52              	.LBB4:
  53              		.loc 1 472 3 view .LVU4
  54 0010 0094     		str	r4, [sp]
  55              		.loc 1 472 3 view .LVU5
  56 0012 2B4B     		ldr	r3, .L3
  57 0014 1A6B     		ldr	r2, [r3, #48]
  58 0016 42F08002 		orr	r2, r2, #128
  59 001a 1A63     		str	r2, [r3, #48]
  60              		.loc 1 472 3 view .LVU6
  61 001c 1A6B     		ldr	r2, [r3, #48]
  62 001e 02F08002 		and	r2, r2, #128
  63 0022 0092     		str	r2, [sp]
  64              		.loc 1 472 3 view .LVU7
  65 0024 009A     		ldr	r2, [sp]
  66              	.LBE4:
  67              		.loc 1 472 3 view .LVU8
 473:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  68              		.loc 1 473 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 473 3 view .LVU10
  71 0026 0194     		str	r4, [sp, #4]
  72              		.loc 1 473 3 view .LVU11
  73 0028 1A6B     		ldr	r2, [r3, #48]
  74 002a 42F00102 		orr	r2, r2, #1
  75 002e 1A63     		str	r2, [r3, #48]
  76              		.loc 1 473 3 view .LVU12
  77 0030 1A6B     		ldr	r2, [r3, #48]
  78 0032 02F00102 		and	r2, r2, #1
  79 0036 0192     		str	r2, [sp, #4]
  80              		.loc 1 473 3 view .LVU13
  81 0038 019A     		ldr	r2, [sp, #4]
  82              	.LBE5:
  83              		.loc 1 473 3 view .LVU14
 474:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  84              		.loc 1 474 3 view .LVU15
  85              	.LBB6:
  86              		.loc 1 474 3 view .LVU16
  87 003a 0294     		str	r4, [sp, #8]
  88              		.loc 1 474 3 view .LVU17
  89 003c 1A6B     		ldr	r2, [r3, #48]
  90 003e 42F00202 		orr	r2, r2, #2
  91 0042 1A63     		str	r2, [r3, #48]
  92              		.loc 1 474 3 view .LVU18
  93 0044 1B6B     		ldr	r3, [r3, #48]
  94 0046 03F00203 		and	r3, r3, #2
  95 004a 0293     		str	r3, [sp, #8]
  96              		.loc 1 474 3 view .LVU19
  97 004c 029B     		ldr	r3, [sp, #8]
ARM GAS  /tmp/ccSF8koB.s 			page 11


  98              	.LBE6:
  99              		.loc 1 474 3 view .LVU20
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 477:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 100              		.loc 1 477 3 view .LVU21
 101 004e 1D4D     		ldr	r5, .L3+4
 102 0050 2246     		mov	r2, r4
 103 0052 4FF48271 		mov	r1, #260
 104 0056 2846     		mov	r0, r5
 105 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 106              	.LVL0:
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 480:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 107              		.loc 1 480 3 view .LVU22
 108 005c 1A4E     		ldr	r6, .L3+8
 109 005e 2246     		mov	r2, r4
 110 0060 4FF48061 		mov	r1, #1024
 111 0064 3046     		mov	r0, r6
 112 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 113              	.LVL1:
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /*Configure GPIO pins : PB2 PB8 */
 483:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 114              		.loc 1 483 3 view .LVU23
 115              		.loc 1 483 23 is_stmt 0 view .LVU24
 116 006a 4FF48273 		mov	r3, #260
 117 006e 0393     		str	r3, [sp, #12]
 484:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 484 3 is_stmt 1 view .LVU25
 119              		.loc 1 484 24 is_stmt 0 view .LVU26
 120 0070 0127     		movs	r7, #1
 121 0072 0497     		str	r7, [sp, #16]
 485:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 122              		.loc 1 485 3 is_stmt 1 view .LVU27
 123              		.loc 1 485 24 is_stmt 0 view .LVU28
 124 0074 0594     		str	r4, [sp, #20]
 486:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 486 3 is_stmt 1 view .LVU29
 126              		.loc 1 486 25 is_stmt 0 view .LVU30
 127 0076 0694     		str	r4, [sp, #24]
 487:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 128              		.loc 1 487 3 is_stmt 1 view .LVU31
 129 0078 03A9     		add	r1, sp, #12
 130 007a 2846     		mov	r0, r5
 131 007c FFF7FEFF 		bl	HAL_GPIO_Init
 132              	.LVL2:
 488:Core/Src/main.c **** 
 489:Core/Src/main.c ****   /*Configure GPIO pin : PB15 */
 490:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 133              		.loc 1 490 3 view .LVU32
 134              		.loc 1 490 23 is_stmt 0 view .LVU33
 135 0080 4FF40043 		mov	r3, #32768
 136 0084 0393     		str	r3, [sp, #12]
 491:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 137              		.loc 1 491 3 is_stmt 1 view .LVU34
ARM GAS  /tmp/ccSF8koB.s 			page 12


 138              		.loc 1 491 24 is_stmt 0 view .LVU35
 139 0086 4FF48813 		mov	r3, #1114112
 140 008a 0493     		str	r3, [sp, #16]
 492:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 141              		.loc 1 492 3 is_stmt 1 view .LVU36
 142              		.loc 1 492 24 is_stmt 0 view .LVU37
 143 008c 0594     		str	r4, [sp, #20]
 493:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 144              		.loc 1 493 3 is_stmt 1 view .LVU38
 145 008e 03A9     		add	r1, sp, #12
 146 0090 2846     		mov	r0, r5
 147 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 148              	.LVL3:
 494:Core/Src/main.c **** 
 495:Core/Src/main.c ****   /*Configure GPIO pin : PA10 */
 496:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 149              		.loc 1 496 3 view .LVU39
 150              		.loc 1 496 23 is_stmt 0 view .LVU40
 151 0096 4FF48063 		mov	r3, #1024
 152 009a 0393     		str	r3, [sp, #12]
 497:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 153              		.loc 1 497 3 is_stmt 1 view .LVU41
 154              		.loc 1 497 24 is_stmt 0 view .LVU42
 155 009c 0497     		str	r7, [sp, #16]
 498:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 156              		.loc 1 498 3 is_stmt 1 view .LVU43
 157              		.loc 1 498 24 is_stmt 0 view .LVU44
 158 009e 0594     		str	r4, [sp, #20]
 499:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 159              		.loc 1 499 3 is_stmt 1 view .LVU45
 160              		.loc 1 499 25 is_stmt 0 view .LVU46
 161 00a0 0694     		str	r4, [sp, #24]
 500:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 162              		.loc 1 500 3 is_stmt 1 view .LVU47
 163 00a2 03A9     		add	r1, sp, #12
 164 00a4 3046     		mov	r0, r6
 165 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 166              	.LVL4:
 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****   /* EXTI interrupt init*/
 503:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 167              		.loc 1 503 3 view .LVU48
 168 00aa 2246     		mov	r2, r4
 169 00ac 2146     		mov	r1, r4
 170 00ae 2820     		movs	r0, #40
 171 00b0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 172              	.LVL5:
 504:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 173              		.loc 1 504 3 view .LVU49
 174 00b4 2820     		movs	r0, #40
 175 00b6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 176              	.LVL6:
 505:Core/Src/main.c **** 
 506:Core/Src/main.c **** }
 177              		.loc 1 506 1 is_stmt 0 view .LVU50
 178 00ba 09B0     		add	sp, sp, #36
 179              	.LCFI2:
ARM GAS  /tmp/ccSF8koB.s 			page 13


 180              		.cfi_def_cfa_offset 20
 181              		@ sp needed
 182 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 183              	.L4:
 184 00be 00BF     		.align	2
 185              	.L3:
 186 00c0 00380240 		.word	1073887232
 187 00c4 00040240 		.word	1073873920
 188 00c8 00000240 		.word	1073872896
 189              		.cfi_endproc
 190              	.LFE223:
 192              		.section	.text.MX_DMA_Init,"ax",%progbits
 193              		.align	1
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	MX_DMA_Init:
 200              	.LFB222:
 450:Core/Src/main.c **** 
 201              		.loc 1 450 1 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 8
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 00B5     		push	{lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 14, -4
 209 0002 83B0     		sub	sp, sp, #12
 210              	.LCFI4:
 211              		.cfi_def_cfa_offset 16
 453:Core/Src/main.c **** 
 212              		.loc 1 453 3 view .LVU52
 213              	.LBB7:
 453:Core/Src/main.c **** 
 214              		.loc 1 453 3 view .LVU53
 215 0004 0021     		movs	r1, #0
 216 0006 0191     		str	r1, [sp, #4]
 453:Core/Src/main.c **** 
 217              		.loc 1 453 3 view .LVU54
 218 0008 094B     		ldr	r3, .L7
 219 000a 1A6B     		ldr	r2, [r3, #48]
 220 000c 42F48002 		orr	r2, r2, #4194304
 221 0010 1A63     		str	r2, [r3, #48]
 453:Core/Src/main.c **** 
 222              		.loc 1 453 3 view .LVU55
 223 0012 1B6B     		ldr	r3, [r3, #48]
 224 0014 03F48003 		and	r3, r3, #4194304
 225 0018 0193     		str	r3, [sp, #4]
 453:Core/Src/main.c **** 
 226              		.loc 1 453 3 view .LVU56
 227 001a 019B     		ldr	r3, [sp, #4]
 228              	.LBE7:
 453:Core/Src/main.c **** 
 229              		.loc 1 453 3 view .LVU57
 457:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 457 3 view .LVU58
ARM GAS  /tmp/ccSF8koB.s 			page 14


 231 001c 0A46     		mov	r2, r1
 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL7:
 458:Core/Src/main.c **** 
 235              		.loc 1 458 3 view .LVU59
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 238              	.LVL8:
 460:Core/Src/main.c **** 
 239              		.loc 1 460 1 is_stmt 0 view .LVU60
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE222:
 252              		.section	.text.mapValue,"ax",%progbits
 253              		.align	1
 254              		.global	mapValue
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu fpv4-sp-d16
 260              	mapValue:
 261              	.LVL9:
 262              	.LFB224:
 507:Core/Src/main.c **** 
 508:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 509:Core/Src/main.c **** 
 510:Core/Src/main.c **** // re-map function
 511:Core/Src/main.c **** long mapValue(long x, long in_min, long in_max, long out_min, long out_max) {
 263              		.loc 1 511 77 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 4, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 268              		.loc 1 511 77 is_stmt 0 view .LVU62
 269 0000 10B4     		push	{r4}
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 4
 272              		.cfi_offset 4, -4
 512:Core/Src/main.c ****   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 273              		.loc 1 512 3 is_stmt 1 view .LVU63
 274              		.loc 1 512 13 is_stmt 0 view .LVU64
 275 0002 401A     		subs	r0, r0, r1
 276              	.LVL10:
 277              		.loc 1 512 34 view .LVU65
 278 0004 019C     		ldr	r4, [sp, #4]
 279 0006 E41A     		subs	r4, r4, r3
 280              		.loc 1 512 23 view .LVU66
 281 0008 04FB00F4 		mul	r4, r4, r0
ARM GAS  /tmp/ccSF8koB.s 			page 15


 282              		.loc 1 512 55 view .LVU67
 283 000c 511A     		subs	r1, r2, r1
 284              	.LVL11:
 285              		.loc 1 512 45 view .LVU68
 286 000e 94FBF1F4 		sdiv	r4, r4, r1
 513:Core/Src/main.c **** }
 287              		.loc 1 513 1 view .LVU69
 288 0012 E018     		adds	r0, r4, r3
 289 0014 5DF8044B 		ldr	r4, [sp], #4
 290              	.LCFI7:
 291              		.cfi_restore 4
 292              		.cfi_def_cfa_offset 0
 293              	.LVL12:
 294              		.loc 1 513 1 view .LVU70
 295 0018 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE224:
 299              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 300              		.align	1
 301              		.global	HAL_GPIO_EXTI_Callback
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	HAL_GPIO_EXTI_Callback:
 308              	.LVL13:
 309              	.LFB227:
 514:Core/Src/main.c **** 
 515:Core/Src/main.c **** 
 516:Core/Src/main.c **** // function to re-map the pedal value to a torque value based on the drive mode
 517:Core/Src/main.c **** uint16_t getCommandedTorque()
 518:Core/Src/main.c **** {
 519:Core/Src/main.c ****   // get the pedal average
 520:Core/Src/main.c ****   pedalAverage = adc_average(pedal0, pedal1);
 521:Core/Src/main.c **** 
 522:Core/Src/main.c ****   // drive mode logic
 523:Core/Src/main.c ****   switch (driveMode)
 524:Core/Src/main.c ****   {
 525:Core/Src/main.c ****     case SLOW:  // runs at 50% power
 526:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, MAX_TORQUE * 0.50);
 527:Core/Src/main.c ****     break;
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****     case ECO:   // runs at 75% power
 530:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, MAX_TORQUE * 0.75);
 531:Core/Src/main.c ****     break;
 532:Core/Src/main.c **** 
 533:Core/Src/main.c ****     case FAST:  // runs at 100% power
 534:Core/Src/main.c ****       commandedTorque = mapValue(pedalAverage, PEDAL_MIN, PEDAL_MAX, 0, MAX_TORQUE);
 535:Core/Src/main.c ****     break;
 536:Core/Src/main.c ****     
 537:Core/Src/main.c ****     // error state, set the mode to ECO
 538:Core/Src/main.c ****     default:
 539:Core/Src/main.c ****       // set the state to ECO for next time
 540:Core/Src/main.c ****       driveMode = ECO;
 541:Core/Src/main.c **** 
 542:Core/Src/main.c ****       // we don't want to send a torque if we are in an undefined state
 543:Core/Src/main.c ****       commandedTorque = 0;
ARM GAS  /tmp/ccSF8koB.s 			page 16


 544:Core/Src/main.c ****     break;
 545:Core/Src/main.c ****   }
 546:Core/Src/main.c **** 
 547:Core/Src/main.c ****   // for throttle safety, we will have a deadband
 548:Core/Src/main.c ****   if (commandedTorque <= TORQUE_DEADBAND)   // if less than 5% power is requested, just call it 0
 549:Core/Src/main.c ****   {
 550:Core/Src/main.c ****     commandedTorque = 0;
 551:Core/Src/main.c ****   }
 552:Core/Src/main.c **** 
 553:Core/Src/main.c ****   return commandedTorque;
 554:Core/Src/main.c **** }
 555:Core/Src/main.c **** 
 556:Core/Src/main.c **** // Recive CAN Messages
 557:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 558:Core/Src/main.c **** {
 559:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 560:Core/Src/main.c ****     Error_Handler();
 561:Core/Src/main.c ****   }
 562:Core/Src/main.c **** 
 563:Core/Src/main.c ****   // read CAN data from Rear Control Board
 564:Core/Src/main.c ****   if (RxHeader.StdId == 0x082)
 565:Core/Src/main.c ****   {
 566:Core/Src/main.c ****       imdFault = RxData[0];
 567:Core/Src/main.c ****       bmsFault = RxData[1];
 568:Core/Src/main.c ****   }
 569:Core/Src/main.c **** 
 570:Core/Src/main.c ****   // read CAN data from High Voltage Board 
 571:Core/Src/main.c ****   if (RxHeader.StdId == 0x087)
 572:Core/Src/main.c ****   {
 573:Core/Src/main.c ****       ready_to_drive = RxData[0];
 574:Core/Src/main.c ****   }
 575:Core/Src/main.c **** }
 576:Core/Src/main.c **** 
 577:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 578:Core/Src/main.c **** {
 310              		.loc 1 578 1 is_stmt 1 view -0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 579:Core/Src/main.c ****   // handle start button interrupt
 580:Core/Src/main.c ****   if (GPIO_Pin == GPIO_PIN_15)
 315              		.loc 1 580 3 view .LVU72
 316              		.loc 1 580 6 is_stmt 0 view .LVU73
 317 0000 B0F5004F 		cmp	r0, #32768
 318 0004 00D0     		beq	.L13
 319              	.L11:
 581:Core/Src/main.c ****   {
 582:Core/Src/main.c ****     // if ready to drive & the button has been pushed, start the buzzer
 583:Core/Src/main.c ****     if (ready_to_drive)
 584:Core/Src/main.c ****     {
 585:Core/Src/main.c ****       buzzerState = 1;
 586:Core/Src/main.c ****     }
 587:Core/Src/main.c ****   }
 588:Core/Src/main.c **** }
 320              		.loc 1 588 1 view .LVU74
 321 0006 7047     		bx	lr
ARM GAS  /tmp/ccSF8koB.s 			page 17


 322              	.L13:
 583:Core/Src/main.c ****     {
 323              		.loc 1 583 5 is_stmt 1 view .LVU75
 583:Core/Src/main.c ****     {
 324              		.loc 1 583 9 is_stmt 0 view .LVU76
 325 0008 034B     		ldr	r3, .L14
 326 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 583:Core/Src/main.c ****     {
 327              		.loc 1 583 8 view .LVU77
 328 000c 002B     		cmp	r3, #0
 329 000e FAD0     		beq	.L11
 585:Core/Src/main.c ****     }
 330              		.loc 1 585 7 is_stmt 1 view .LVU78
 585:Core/Src/main.c ****     }
 331              		.loc 1 585 19 is_stmt 0 view .LVU79
 332 0010 024B     		ldr	r3, .L14+4
 333 0012 0122     		movs	r2, #1
 334 0014 1A70     		strb	r2, [r3]
 335              		.loc 1 588 1 view .LVU80
 336 0016 F6E7     		b	.L11
 337              	.L15:
 338              		.align	2
 339              	.L14:
 340 0018 00000000 		.word	.LANCHOR0
 341 001c 00000000 		.word	.LANCHOR1
 342              		.cfi_endproc
 343              	.LFE227:
 345              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 346              		.align	1
 347              		.global	HAL_ADC_ConvCpltCallback
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu fpv4-sp-d16
 353              	HAL_ADC_ConvCpltCallback:
 354              	.LVL14:
 355              	.LFB229:
 589:Core/Src/main.c **** 
 590:Core/Src/main.c **** // Timer Interrupts
 591:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 592:Core/Src/main.c **** {
 593:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 594:Core/Src/main.c ****   if (htim == &htim13)
 595:Core/Src/main.c ****   {
 596:Core/Src/main.c ****     // drive mode logic
 597:Core/Src/main.c ****     commandedTorque = getCommandedTorque();
 598:Core/Src/main.c ****     
 599:Core/Src/main.c ****     // build CONTROL CAN message - sending to rinehart to address C0
 600:Core/Src/main.c ****     TxData[0] = commandedTorque & 0xFF;
 601:Core/Src/main.c ****     TxData[1] = commandedTorque >> 8;
 602:Core/Src/main.c ****     TxData[2] = 0;                        // speed command NOT USING
 603:Core/Src/main.c ****     TxData[3] = 0;                        // speed command NOT USING
 604:Core/Src/main.c ****     TxData[4] = 0;                        // switch_direction is usually here, 0 is reverse (we run
 605:Core/Src/main.c ****     TxData[5] = enableInverter;
 606:Core/Src/main.c ****     TxData[6] =  0xDC;                    // this is the max  torque value that we are establishing
 607:Core/Src/main.c ****     TxData[7] =  0x00;                    // HARDCODED AS 220, MAX VALUE ACCEPTED BY MOTOR is 230 
 608:Core/Src/main.c **** 
ARM GAS  /tmp/ccSF8koB.s 			page 18


 609:Core/Src/main.c ****     // send message
 610:Core/Src/main.c ****     HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData, &TxMailbox);
 611:Core/Src/main.c ****   }
 612:Core/Src/main.c ****   
 613:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 614:Core/Src/main.c ****   if (htim == &htim14)
 615:Core/Src/main.c ****   {
 616:Core/Src/main.c ****     // sample cooling switch and drive direction switch
 617:Core/Src/main.c ****     switch_cooling = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 618:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 619:Core/Src/main.c **** 
 620:Core/Src/main.c ****     // start button led logic
 621:Core/Src/main.c ****     if (ready_to_drive)
 622:Core/Src/main.c ****     {
 623:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);      // turn the LED on
 624:Core/Src/main.c ****     }
 625:Core/Src/main.c ****     else
 626:Core/Src/main.c ****     {
 627:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);    // turn the LED off
 628:Core/Src/main.c ****       enableInverter = 0;                                       // disable inverter
 629:Core/Src/main.c ****     }
 630:Core/Src/main.c ****     
 631:Core/Src/main.c ****     // buzzer logic
 632:Core/Src/main.c ****     if (buzzerState == 1){
 633:Core/Src/main.c ****       buzzerCounter++;
 634:Core/Src/main.c ****       if (buzzerCounter >= 20)    // buzzerCounter is being updated on a 10Hz interval, so after 20
 635:Core/Src/main.c ****       {
 636:Core/Src/main.c ****         buzzerState = 0;
 637:Core/Src/main.c ****         buzzerCounter = 0;
 638:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 639:Core/Src/main.c ****       }
 640:Core/Src/main.c ****     }
 641:Core/Src/main.c **** 
 642:Core/Src/main.c ****     // brake light logic 
 643:Core/Src/main.c ****     brakeAverage = adc_average(brake0, brake1);
 644:Core/Src/main.c ****     if (brakeAverage >= BRAKE_LIGHT_THRESHOLD)
 645:Core/Src/main.c ****     {
 646:Core/Src/main.c ****       brakeLight = 1;     // turn it on 
 647:Core/Src/main.c ****     }
 648:Core/Src/main.c **** 
 649:Core/Src/main.c ****     else
 650:Core/Src/main.c ****     {
 651:Core/Src/main.c ****       brakeLight = 0;     // turn it off
 652:Core/Src/main.c ****     }
 653:Core/Src/main.c **** 
 654:Core/Src/main.c **** 
 655:Core/Src/main.c ****     // build CAN message - sends from address 0x93
 656:Core/Src/main.c ****     TxData[0] = pedalAverage >> 8;
 657:Core/Src/main.c ****     TxData[1] = pedalAverage & 0xFF;
 658:Core/Src/main.c ****     TxData[2] = brakeAverage >> 8;
 659:Core/Src/main.c ****     TxData[3] = brakeAverage & 0xFF;
 660:Core/Src/main.c ****     TxData[4] = brakeLight;
 661:Core/Src/main.c ****     TxData[5] = buzzerState;
 662:Core/Src/main.c ****     TxData[6] = driveMode;
 663:Core/Src/main.c ****     TxData[7] = 0x07;
 664:Core/Src/main.c **** 
 665:Core/Src/main.c ****     // send message
ARM GAS  /tmp/ccSF8koB.s 			page 19


 666:Core/Src/main.c ****     HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 667:Core/Src/main.c **** 
 668:Core/Src/main.c ****     // update LEDS and inverter drive direction 
 669:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, imdFault);
 670:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, bmsFault);
 671:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, buzzerState);
 672:Core/Src/main.c ****   }
 673:Core/Src/main.c **** }
 674:Core/Src/main.c **** 
 675:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 676:Core/Src/main.c **** {
 356              		.loc 1 676 1 is_stmt 1 view -0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 677:Core/Src/main.c ****   // read values from DMA
 678:Core/Src/main.c ****   brake0 = adc_buf[0];
 361              		.loc 1 678 3 view .LVU82
 362              		.loc 1 678 19 is_stmt 0 view .LVU83
 363 0000 064B     		ldr	r3, .L17
 364 0002 1988     		ldrh	r1, [r3]
 365              		.loc 1 678 10 view .LVU84
 366 0004 064A     		ldr	r2, .L17+4
 367 0006 1180     		strh	r1, [r2]	@ movhi
 679:Core/Src/main.c ****   brake1 = adc_buf[1];
 368              		.loc 1 679 3 is_stmt 1 view .LVU85
 369              		.loc 1 679 19 is_stmt 0 view .LVU86
 370 0008 5988     		ldrh	r1, [r3, #2]
 371              		.loc 1 679 10 view .LVU87
 372 000a 064A     		ldr	r2, .L17+8
 373 000c 1180     		strh	r1, [r2]	@ movhi
 680:Core/Src/main.c ****   pedal0 = adc_buf[2];
 374              		.loc 1 680 3 is_stmt 1 view .LVU88
 375              		.loc 1 680 19 is_stmt 0 view .LVU89
 376 000e 9988     		ldrh	r1, [r3, #4]
 377              		.loc 1 680 10 view .LVU90
 378 0010 054A     		ldr	r2, .L17+12
 379 0012 1180     		strh	r1, [r2]	@ movhi
 681:Core/Src/main.c ****   pedal1 = adc_buf[3];
 380              		.loc 1 681 3 is_stmt 1 view .LVU91
 381              		.loc 1 681 19 is_stmt 0 view .LVU92
 382 0014 DA88     		ldrh	r2, [r3, #6]
 383              		.loc 1 681 10 view .LVU93
 384 0016 054B     		ldr	r3, .L17+16
 385 0018 1A80     		strh	r2, [r3]	@ movhi
 682:Core/Src/main.c **** }
 386              		.loc 1 682 1 view .LVU94
 387 001a 7047     		bx	lr
 388              	.L18:
 389              		.align	2
 390              	.L17:
 391 001c 00000000 		.word	adc_buf
 392 0020 00000000 		.word	.LANCHOR2
 393 0024 00000000 		.word	.LANCHOR3
 394 0028 00000000 		.word	.LANCHOR4
 395 002c 00000000 		.word	.LANCHOR5
ARM GAS  /tmp/ccSF8koB.s 			page 20


 396              		.cfi_endproc
 397              	.LFE229:
 399              		.section	.text.adc_average,"ax",%progbits
 400              		.align	1
 401              		.global	adc_average
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu fpv4-sp-d16
 407              	adc_average:
 408              	.LVL15:
 409              	.LFB230:
 683:Core/Src/main.c **** 
 684:Core/Src/main.c **** uint16_t adc_average(uint16_t adc0, uint16_t adc1)
 685:Core/Src/main.c **** {
 410              		.loc 1 685 1 is_stmt 1 view -0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              		@ link register save eliminated.
 686:Core/Src/main.c ****   // calculate the average of the two pedal potentiometer readings 
 687:Core/Src/main.c ****   uint16_t average = (adc0 + adc1) / 2;
 415              		.loc 1 687 3 view .LVU96
 416              		.loc 1 687 36 is_stmt 0 view .LVU97
 417 0000 0844     		add	r0, r0, r1
 418              	.LVL16:
 688:Core/Src/main.c **** 
 689:Core/Src/main.c ****   // ensure the pedal skew isn't dangerously out of bounds
 690:Core/Src/main.c ****   // if (pow(pedal0 - pedalAverage, 2) > MAX_PEDAL_SKEW || 
 691:Core/Src/main.c ****   //     pow(pedal1 - pedalAverage, 2) > MAX_PEDAL_SKEW ){
 692:Core/Src/main.c ****   //     pedalAverage = 0;
 693:Core/Src/main.c ****   // }
 694:Core/Src/main.c **** 
 695:Core/Src/main.c ****   return average;
 419              		.loc 1 695 3 is_stmt 1 view .LVU98
 696:Core/Src/main.c **** }
 420              		.loc 1 696 1 is_stmt 0 view .LVU99
 421 0002 4008     		lsrs	r0, r0, #1
 422              	.LVL17:
 423              		.loc 1 696 1 view .LVU100
 424 0004 7047     		bx	lr
 425              		.cfi_endproc
 426              	.LFE230:
 428              		.section	.text.getCommandedTorque,"ax",%progbits
 429              		.align	1
 430              		.global	getCommandedTorque
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu fpv4-sp-d16
 436              	getCommandedTorque:
 437              	.LFB225:
 518:Core/Src/main.c ****   // get the pedal average
 438              		.loc 1 518 1 is_stmt 1 view -0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccSF8koB.s 			page 21


 442 0000 00B5     		push	{lr}
 443              	.LCFI8:
 444              		.cfi_def_cfa_offset 4
 445              		.cfi_offset 14, -4
 446 0002 83B0     		sub	sp, sp, #12
 447              	.LCFI9:
 448              		.cfi_def_cfa_offset 16
 520:Core/Src/main.c **** 
 449              		.loc 1 520 3 view .LVU102
 520:Core/Src/main.c **** 
 450              		.loc 1 520 18 is_stmt 0 view .LVU103
 451 0004 204B     		ldr	r3, .L28
 452 0006 1988     		ldrh	r1, [r3]
 453 0008 204B     		ldr	r3, .L28+4
 454 000a 1888     		ldrh	r0, [r3]
 455 000c FFF7FEFF 		bl	adc_average
 456              	.LVL18:
 520:Core/Src/main.c **** 
 457              		.loc 1 520 16 view .LVU104
 458 0010 1F4B     		ldr	r3, .L28+8
 459 0012 1880     		strh	r0, [r3]	@ movhi
 523:Core/Src/main.c ****   {
 460              		.loc 1 523 3 is_stmt 1 view .LVU105
 461 0014 1F4B     		ldr	r3, .L28+12
 462 0016 1B68     		ldr	r3, [r3]
 463 0018 012B     		cmp	r3, #1
 464 001a 1FD0     		beq	.L21
 465 001c 022B     		cmp	r3, #2
 466 001e 28D0     		beq	.L22
 467 0020 33B1     		cbz	r3, .L27
 540:Core/Src/main.c **** 
 468              		.loc 1 540 7 view .LVU106
 540:Core/Src/main.c **** 
 469              		.loc 1 540 17 is_stmt 0 view .LVU107
 470 0022 1C4B     		ldr	r3, .L28+12
 471 0024 0122     		movs	r2, #1
 472 0026 1A60     		str	r2, [r3]
 543:Core/Src/main.c ****     break;
 473              		.loc 1 543 7 is_stmt 1 view .LVU108
 543:Core/Src/main.c ****     break;
 474              		.loc 1 543 23 is_stmt 0 view .LVU109
 475 0028 1B4B     		ldr	r3, .L28+16
 476 002a 0022     		movs	r2, #0
 477 002c 1A80     		strh	r2, [r3]	@ movhi
 544:Core/Src/main.c ****   }
 478              		.loc 1 544 5 is_stmt 1 view .LVU110
 479 002e 09E0     		b	.L24
 480              	.L27:
 526:Core/Src/main.c ****     break;
 481              		.loc 1 526 7 view .LVU111
 526:Core/Src/main.c ****     break;
 482              		.loc 1 526 25 is_stmt 0 view .LVU112
 483 0030 6E23     		movs	r3, #110
 484 0032 0093     		str	r3, [sp]
 485 0034 0023     		movs	r3, #0
 486 0036 4FF41672 		mov	r2, #600
 487 003a 8021     		movs	r1, #128
ARM GAS  /tmp/ccSF8koB.s 			page 22


 488 003c FFF7FEFF 		bl	mapValue
 489              	.LVL19:
 526:Core/Src/main.c ****     break;
 490              		.loc 1 526 23 view .LVU113
 491 0040 154B     		ldr	r3, .L28+16
 492 0042 1880     		strh	r0, [r3]	@ movhi
 527:Core/Src/main.c **** 
 493              		.loc 1 527 5 is_stmt 1 view .LVU114
 494              	.L24:
 548:Core/Src/main.c ****   {
 495              		.loc 1 548 3 view .LVU115
 548:Core/Src/main.c ****   {
 496              		.loc 1 548 23 is_stmt 0 view .LVU116
 497 0044 144B     		ldr	r3, .L28+16
 498 0046 1B88     		ldrh	r3, [r3]
 548:Core/Src/main.c ****   {
 499              		.loc 1 548 6 view .LVU117
 500 0048 052B     		cmp	r3, #5
 501 004a 02D8     		bhi	.L25
 550:Core/Src/main.c ****   }
 502              		.loc 1 550 5 is_stmt 1 view .LVU118
 550:Core/Src/main.c ****   }
 503              		.loc 1 550 21 is_stmt 0 view .LVU119
 504 004c 124B     		ldr	r3, .L28+16
 505 004e 0022     		movs	r2, #0
 506 0050 1A80     		strh	r2, [r3]	@ movhi
 507              	.L25:
 553:Core/Src/main.c **** }
 508              		.loc 1 553 3 is_stmt 1 view .LVU120
 554:Core/Src/main.c **** 
 509              		.loc 1 554 1 is_stmt 0 view .LVU121
 510 0052 114B     		ldr	r3, .L28+16
 511 0054 1888     		ldrh	r0, [r3]
 512 0056 03B0     		add	sp, sp, #12
 513              	.LCFI10:
 514              		.cfi_remember_state
 515              		.cfi_def_cfa_offset 4
 516              		@ sp needed
 517 0058 5DF804FB 		ldr	pc, [sp], #4
 518              	.L21:
 519              	.LCFI11:
 520              		.cfi_restore_state
 530:Core/Src/main.c ****     break;
 521              		.loc 1 530 7 is_stmt 1 view .LVU122
 530:Core/Src/main.c ****     break;
 522              		.loc 1 530 25 is_stmt 0 view .LVU123
 523 005c A523     		movs	r3, #165
 524 005e 0093     		str	r3, [sp]
 525 0060 0023     		movs	r3, #0
 526 0062 4FF41672 		mov	r2, #600
 527 0066 8021     		movs	r1, #128
 528 0068 FFF7FEFF 		bl	mapValue
 529              	.LVL20:
 530:Core/Src/main.c ****     break;
 530              		.loc 1 530 23 view .LVU124
 531 006c 0A4B     		ldr	r3, .L28+16
 532 006e 1880     		strh	r0, [r3]	@ movhi
ARM GAS  /tmp/ccSF8koB.s 			page 23


 531:Core/Src/main.c **** 
 533              		.loc 1 531 5 is_stmt 1 view .LVU125
 534 0070 E8E7     		b	.L24
 535              	.L22:
 534:Core/Src/main.c ****     break;
 536              		.loc 1 534 7 view .LVU126
 534:Core/Src/main.c ****     break;
 537              		.loc 1 534 25 is_stmt 0 view .LVU127
 538 0072 DC23     		movs	r3, #220
 539 0074 0093     		str	r3, [sp]
 540 0076 0023     		movs	r3, #0
 541 0078 4FF41672 		mov	r2, #600
 542 007c 8021     		movs	r1, #128
 543 007e FFF7FEFF 		bl	mapValue
 544              	.LVL21:
 534:Core/Src/main.c ****     break;
 545              		.loc 1 534 23 view .LVU128
 546 0082 054B     		ldr	r3, .L28+16
 547 0084 1880     		strh	r0, [r3]	@ movhi
 535:Core/Src/main.c ****     
 548              		.loc 1 535 5 is_stmt 1 view .LVU129
 549 0086 DDE7     		b	.L24
 550              	.L29:
 551              		.align	2
 552              	.L28:
 553 0088 00000000 		.word	.LANCHOR5
 554 008c 00000000 		.word	.LANCHOR4
 555 0090 00000000 		.word	.LANCHOR6
 556 0094 00000000 		.word	.LANCHOR7
 557 0098 00000000 		.word	.LANCHOR8
 558              		.cfi_endproc
 559              	.LFE225:
 561              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 562              		.align	1
 563              		.global	HAL_TIM_PeriodElapsedCallback
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu fpv4-sp-d16
 569              	HAL_TIM_PeriodElapsedCallback:
 570              	.LVL22:
 571              	.LFB228:
 592:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 572              		.loc 1 592 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 592:Core/Src/main.c ****   // Timer Interrupt on a __Hz interval
 576              		.loc 1 592 1 is_stmt 0 view .LVU131
 577 0000 38B5     		push	{r3, r4, r5, lr}
 578              	.LCFI12:
 579              		.cfi_def_cfa_offset 16
 580              		.cfi_offset 3, -16
 581              		.cfi_offset 4, -12
 582              		.cfi_offset 5, -8
 583              		.cfi_offset 14, -4
 584 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccSF8koB.s 			page 24


 594:Core/Src/main.c ****   {
 585              		.loc 1 594 3 is_stmt 1 view .LVU132
 594:Core/Src/main.c ****   {
 586              		.loc 1 594 6 is_stmt 0 view .LVU133
 587 0004 4A4B     		ldr	r3, .L42
 588 0006 9842     		cmp	r0, r3
 589 0008 03D0     		beq	.L39
 590              	.LVL23:
 591              	.L31:
 614:Core/Src/main.c ****   {
 592              		.loc 1 614 3 is_stmt 1 view .LVU134
 614:Core/Src/main.c ****   {
 593              		.loc 1 614 6 is_stmt 0 view .LVU135
 594 000a 4A4B     		ldr	r3, .L42+4
 595 000c 9C42     		cmp	r4, r3
 596 000e 18D0     		beq	.L40
 597              	.LVL24:
 598              	.L30:
 673:Core/Src/main.c **** 
 599              		.loc 1 673 1 view .LVU136
 600 0010 38BD     		pop	{r3, r4, r5, pc}
 601              	.LVL25:
 602              	.L39:
 597:Core/Src/main.c ****     
 603              		.loc 1 597 5 is_stmt 1 view .LVU137
 597:Core/Src/main.c ****     
 604              		.loc 1 597 23 is_stmt 0 view .LVU138
 605 0012 FFF7FEFF 		bl	getCommandedTorque
 606              	.LVL26:
 597:Core/Src/main.c ****     
 607              		.loc 1 597 21 view .LVU139
 608 0016 484B     		ldr	r3, .L42+8
 609 0018 1880     		strh	r0, [r3]	@ movhi
 600:Core/Src/main.c ****     TxData[1] = commandedTorque >> 8;
 610              		.loc 1 600 5 is_stmt 1 view .LVU140
 600:Core/Src/main.c ****     TxData[1] = commandedTorque >> 8;
 611              		.loc 1 600 15 is_stmt 0 view .LVU141
 612 001a 484A     		ldr	r2, .L42+12
 613 001c 1070     		strb	r0, [r2]
 601:Core/Src/main.c ****     TxData[2] = 0;                        // speed command NOT USING
 614              		.loc 1 601 5 is_stmt 1 view .LVU142
 601:Core/Src/main.c ****     TxData[2] = 0;                        // speed command NOT USING
 615              		.loc 1 601 15 is_stmt 0 view .LVU143
 616 001e 000A     		lsrs	r0, r0, #8
 617 0020 5070     		strb	r0, [r2, #1]
 602:Core/Src/main.c ****     TxData[3] = 0;                        // speed command NOT USING
 618              		.loc 1 602 5 is_stmt 1 view .LVU144
 602:Core/Src/main.c ****     TxData[3] = 0;                        // speed command NOT USING
 619              		.loc 1 602 15 is_stmt 0 view .LVU145
 620 0022 0023     		movs	r3, #0
 621 0024 9370     		strb	r3, [r2, #2]
 603:Core/Src/main.c ****     TxData[4] = 0;                        // switch_direction is usually here, 0 is reverse (we run
 622              		.loc 1 603 5 is_stmt 1 view .LVU146
 603:Core/Src/main.c ****     TxData[4] = 0;                        // switch_direction is usually here, 0 is reverse (we run
 623              		.loc 1 603 15 is_stmt 0 view .LVU147
 624 0026 D370     		strb	r3, [r2, #3]
 604:Core/Src/main.c ****     TxData[5] = enableInverter;
ARM GAS  /tmp/ccSF8koB.s 			page 25


 625              		.loc 1 604 5 is_stmt 1 view .LVU148
 604:Core/Src/main.c ****     TxData[5] = enableInverter;
 626              		.loc 1 604 15 is_stmt 0 view .LVU149
 627 0028 1371     		strb	r3, [r2, #4]
 605:Core/Src/main.c ****     TxData[6] =  0xDC;                    // this is the max  torque value that we are establishing
 628              		.loc 1 605 5 is_stmt 1 view .LVU150
 605:Core/Src/main.c ****     TxData[6] =  0xDC;                    // this is the max  torque value that we are establishing
 629              		.loc 1 605 15 is_stmt 0 view .LVU151
 630 002a 4549     		ldr	r1, .L42+16
 631 002c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 632 002e 5171     		strb	r1, [r2, #5]
 606:Core/Src/main.c ****     TxData[7] =  0x00;                    // HARDCODED AS 220, MAX VALUE ACCEPTED BY MOTOR is 230 
 633              		.loc 1 606 5 is_stmt 1 view .LVU152
 606:Core/Src/main.c ****     TxData[7] =  0x00;                    // HARDCODED AS 220, MAX VALUE ACCEPTED BY MOTOR is 230 
 634              		.loc 1 606 15 is_stmt 0 view .LVU153
 635 0030 DC21     		movs	r1, #220
 636 0032 9171     		strb	r1, [r2, #6]
 607:Core/Src/main.c **** 
 637              		.loc 1 607 5 is_stmt 1 view .LVU154
 607:Core/Src/main.c **** 
 638              		.loc 1 607 15 is_stmt 0 view .LVU155
 639 0034 D371     		strb	r3, [r2, #7]
 610:Core/Src/main.c ****   }
 640              		.loc 1 610 5 is_stmt 1 view .LVU156
 641 0036 434B     		ldr	r3, .L42+20
 642 0038 4349     		ldr	r1, .L42+24
 643 003a 4448     		ldr	r0, .L42+28
 644 003c FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 645              	.LVL27:
 646 0040 E3E7     		b	.L31
 647              	.L40:
 617:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 648              		.loc 1 617 5 view .LVU157
 617:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 649              		.loc 1 617 22 is_stmt 0 view .LVU158
 650 0042 434C     		ldr	r4, .L42+32
 651              	.LVL28:
 617:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 652              		.loc 1 617 22 view .LVU159
 653 0044 4FF48051 		mov	r1, #4096
 654 0048 2046     		mov	r0, r4
 655 004a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 656              	.LVL29:
 617:Core/Src/main.c ****     switch_direction = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 657              		.loc 1 617 20 view .LVU160
 658 004e 414B     		ldr	r3, .L42+36
 659 0050 1870     		strb	r0, [r3]
 618:Core/Src/main.c **** 
 660              		.loc 1 618 5 is_stmt 1 view .LVU161
 618:Core/Src/main.c **** 
 661              		.loc 1 618 24 is_stmt 0 view .LVU162
 662 0052 4FF40051 		mov	r1, #8192
 663 0056 2046     		mov	r0, r4
 664 0058 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 665              	.LVL30:
 618:Core/Src/main.c **** 
 666              		.loc 1 618 22 view .LVU163
ARM GAS  /tmp/ccSF8koB.s 			page 26


 667 005c 3E4B     		ldr	r3, .L42+40
 668 005e 1870     		strb	r0, [r3]
 621:Core/Src/main.c ****     {
 669              		.loc 1 621 5 is_stmt 1 view .LVU164
 621:Core/Src/main.c ****     {
 670              		.loc 1 621 9 is_stmt 0 view .LVU165
 671 0060 3E4B     		ldr	r3, .L42+44
 672 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 621:Core/Src/main.c ****     {
 673              		.loc 1 621 8 view .LVU166
 674 0064 002B     		cmp	r3, #0
 675 0066 44D0     		beq	.L33
 623:Core/Src/main.c ****     }
 676              		.loc 1 623 7 is_stmt 1 view .LVU167
 677 0068 0122     		movs	r2, #1
 678 006a 4FF48061 		mov	r1, #1024
 679 006e 2046     		mov	r0, r4
 680 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 681              	.LVL31:
 682              	.L34:
 632:Core/Src/main.c ****       buzzerCounter++;
 683              		.loc 1 632 5 view .LVU168
 632:Core/Src/main.c ****       buzzerCounter++;
 684              		.loc 1 632 21 is_stmt 0 view .LVU169
 685 0074 3A4B     		ldr	r3, .L42+48
 686 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 632:Core/Src/main.c ****       buzzerCounter++;
 687              		.loc 1 632 8 view .LVU170
 688 0078 012B     		cmp	r3, #1
 689 007a 44D0     		beq	.L41
 690              	.L35:
 643:Core/Src/main.c ****     if (brakeAverage >= BRAKE_LIGHT_THRESHOLD)
 691              		.loc 1 643 5 is_stmt 1 view .LVU171
 643:Core/Src/main.c ****     if (brakeAverage >= BRAKE_LIGHT_THRESHOLD)
 692              		.loc 1 643 20 is_stmt 0 view .LVU172
 693 007c 394B     		ldr	r3, .L42+52
 694 007e 1988     		ldrh	r1, [r3]
 695 0080 394B     		ldr	r3, .L42+56
 696 0082 1888     		ldrh	r0, [r3]
 697 0084 FFF7FEFF 		bl	adc_average
 698              	.LVL32:
 643:Core/Src/main.c ****     if (brakeAverage >= BRAKE_LIGHT_THRESHOLD)
 699              		.loc 1 643 18 view .LVU173
 700 0088 384B     		ldr	r3, .L42+60
 701 008a 1880     		strh	r0, [r3]	@ movhi
 644:Core/Src/main.c ****     {
 702              		.loc 1 644 5 is_stmt 1 view .LVU174
 644:Core/Src/main.c ****     {
 703              		.loc 1 644 8 is_stmt 0 view .LVU175
 704 008c 0928     		cmp	r0, #9
 705 008e 4AD9     		bls	.L36
 646:Core/Src/main.c ****     }
 706              		.loc 1 646 7 is_stmt 1 view .LVU176
 646:Core/Src/main.c ****     }
 707              		.loc 1 646 18 is_stmt 0 view .LVU177
 708 0090 374B     		ldr	r3, .L42+64
 709 0092 0122     		movs	r2, #1
ARM GAS  /tmp/ccSF8koB.s 			page 27


 710 0094 1A70     		strb	r2, [r3]
 711              	.L37:
 656:Core/Src/main.c ****     TxData[1] = pedalAverage & 0xFF;
 712              		.loc 1 656 5 is_stmt 1 view .LVU178
 656:Core/Src/main.c ****     TxData[1] = pedalAverage & 0xFF;
 713              		.loc 1 656 15 is_stmt 0 view .LVU179
 714 0096 374B     		ldr	r3, .L42+68
 715 0098 1B88     		ldrh	r3, [r3]
 716 009a 284A     		ldr	r2, .L42+12
 717 009c 190A     		lsrs	r1, r3, #8
 718 009e 1170     		strb	r1, [r2]
 657:Core/Src/main.c ****     TxData[2] = brakeAverage >> 8;
 719              		.loc 1 657 5 is_stmt 1 view .LVU180
 657:Core/Src/main.c ****     TxData[2] = brakeAverage >> 8;
 720              		.loc 1 657 15 is_stmt 0 view .LVU181
 721 00a0 5370     		strb	r3, [r2, #1]
 658:Core/Src/main.c ****     TxData[3] = brakeAverage & 0xFF;
 722              		.loc 1 658 5 is_stmt 1 view .LVU182
 658:Core/Src/main.c ****     TxData[3] = brakeAverage & 0xFF;
 723              		.loc 1 658 15 is_stmt 0 view .LVU183
 724 00a2 030A     		lsrs	r3, r0, #8
 725 00a4 9370     		strb	r3, [r2, #2]
 659:Core/Src/main.c ****     TxData[4] = brakeLight;
 726              		.loc 1 659 5 is_stmt 1 view .LVU184
 659:Core/Src/main.c ****     TxData[4] = brakeLight;
 727              		.loc 1 659 15 is_stmt 0 view .LVU185
 728 00a6 D070     		strb	r0, [r2, #3]
 660:Core/Src/main.c ****     TxData[5] = buzzerState;
 729              		.loc 1 660 5 is_stmt 1 view .LVU186
 660:Core/Src/main.c ****     TxData[5] = buzzerState;
 730              		.loc 1 660 15 is_stmt 0 view .LVU187
 731 00a8 314B     		ldr	r3, .L42+64
 732 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 733 00ac 1371     		strb	r3, [r2, #4]
 661:Core/Src/main.c ****     TxData[6] = driveMode;
 734              		.loc 1 661 5 is_stmt 1 view .LVU188
 661:Core/Src/main.c ****     TxData[6] = driveMode;
 735              		.loc 1 661 15 is_stmt 0 view .LVU189
 736 00ae 2C4D     		ldr	r5, .L42+48
 737 00b0 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 738 00b2 5371     		strb	r3, [r2, #5]
 662:Core/Src/main.c ****     TxData[7] = 0x07;
 739              		.loc 1 662 5 is_stmt 1 view .LVU190
 662:Core/Src/main.c ****     TxData[7] = 0x07;
 740              		.loc 1 662 15 is_stmt 0 view .LVU191
 741 00b4 304B     		ldr	r3, .L42+72
 742 00b6 1B68     		ldr	r3, [r3]
 743 00b8 9371     		strb	r3, [r2, #6]
 663:Core/Src/main.c **** 
 744              		.loc 1 663 5 is_stmt 1 view .LVU192
 663:Core/Src/main.c **** 
 745              		.loc 1 663 15 is_stmt 0 view .LVU193
 746 00ba 0723     		movs	r3, #7
 747 00bc D371     		strb	r3, [r2, #7]
 666:Core/Src/main.c **** 
 748              		.loc 1 666 5 is_stmt 1 view .LVU194
 749 00be 214B     		ldr	r3, .L42+20
ARM GAS  /tmp/ccSF8koB.s 			page 28


 750 00c0 2E49     		ldr	r1, .L42+76
 751 00c2 2248     		ldr	r0, .L42+28
 752 00c4 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 753              	.LVL33:
 669:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, bmsFault);
 754              		.loc 1 669 5 view .LVU195
 755 00c8 214C     		ldr	r4, .L42+32
 756 00ca 2D4B     		ldr	r3, .L42+80
 757 00cc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 758 00ce 0421     		movs	r1, #4
 759 00d0 2046     		mov	r0, r4
 760 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 761              	.LVL34:
 670:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, buzzerState);
 762              		.loc 1 670 5 view .LVU196
 763 00d6 2B4B     		ldr	r3, .L42+84
 764 00d8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 765 00da 4FF48061 		mov	r1, #1024
 766 00de 2A48     		ldr	r0, .L42+88
 767 00e0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 768              	.LVL35:
 671:Core/Src/main.c ****   }
 769              		.loc 1 671 5 view .LVU197
 770 00e4 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 771 00e6 4FF48071 		mov	r1, #256
 772 00ea 2046     		mov	r0, r4
 773 00ec FFF7FEFF 		bl	HAL_GPIO_WritePin
 774              	.LVL36:
 673:Core/Src/main.c **** 
 775              		.loc 1 673 1 is_stmt 0 view .LVU198
 776 00f0 8EE7     		b	.L30
 777              	.L33:
 627:Core/Src/main.c ****       enableInverter = 0;                                       // disable inverter
 778              		.loc 1 627 7 is_stmt 1 view .LVU199
 779 00f2 0022     		movs	r2, #0
 780 00f4 4FF48061 		mov	r1, #1024
 781 00f8 1548     		ldr	r0, .L42+32
 782 00fa FFF7FEFF 		bl	HAL_GPIO_WritePin
 783              	.LVL37:
 628:Core/Src/main.c ****     }
 784              		.loc 1 628 7 view .LVU200
 628:Core/Src/main.c ****     }
 785              		.loc 1 628 22 is_stmt 0 view .LVU201
 786 00fe 104B     		ldr	r3, .L42+16
 787 0100 0022     		movs	r2, #0
 788 0102 1A70     		strb	r2, [r3]
 789 0104 B6E7     		b	.L34
 790              	.L41:
 633:Core/Src/main.c ****       if (buzzerCounter >= 20)    // buzzerCounter is being updated on a 10Hz interval, so after 20
 791              		.loc 1 633 7 is_stmt 1 view .LVU202
 633:Core/Src/main.c ****       if (buzzerCounter >= 20)    // buzzerCounter is being updated on a 10Hz interval, so after 20
 792              		.loc 1 633 20 is_stmt 0 view .LVU203
 793 0106 214A     		ldr	r2, .L42+92
 794 0108 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 795 010a 0133     		adds	r3, r3, #1
 796 010c DBB2     		uxtb	r3, r3
 797 010e 1370     		strb	r3, [r2]
ARM GAS  /tmp/ccSF8koB.s 			page 29


 634:Core/Src/main.c ****       {
 798              		.loc 1 634 7 is_stmt 1 view .LVU204
 634:Core/Src/main.c ****       {
 799              		.loc 1 634 10 is_stmt 0 view .LVU205
 800 0110 132B     		cmp	r3, #19
 801 0112 B3D9     		bls	.L35
 636:Core/Src/main.c ****         buzzerCounter = 0;
 802              		.loc 1 636 9 is_stmt 1 view .LVU206
 636:Core/Src/main.c ****         buzzerCounter = 0;
 803              		.loc 1 636 21 is_stmt 0 view .LVU207
 804 0114 0023     		movs	r3, #0
 805 0116 124A     		ldr	r2, .L42+48
 806 0118 1370     		strb	r3, [r2]
 637:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 807              		.loc 1 637 9 is_stmt 1 view .LVU208
 637:Core/Src/main.c ****         enableInverter = 1;       // enable the inverter so that we can tell rinehart to turn inver
 808              		.loc 1 637 23 is_stmt 0 view .LVU209
 809 011a 1C4A     		ldr	r2, .L42+92
 810 011c 1370     		strb	r3, [r2]
 638:Core/Src/main.c ****       }
 811              		.loc 1 638 9 is_stmt 1 view .LVU210
 638:Core/Src/main.c ****       }
 812              		.loc 1 638 24 is_stmt 0 view .LVU211
 813 011e 084B     		ldr	r3, .L42+16
 814 0120 0122     		movs	r2, #1
 815 0122 1A70     		strb	r2, [r3]
 816 0124 AAE7     		b	.L35
 817              	.L36:
 651:Core/Src/main.c ****     }
 818              		.loc 1 651 7 is_stmt 1 view .LVU212
 651:Core/Src/main.c ****     }
 819              		.loc 1 651 18 is_stmt 0 view .LVU213
 820 0126 124B     		ldr	r3, .L42+64
 821 0128 0022     		movs	r2, #0
 822 012a 1A70     		strb	r2, [r3]
 823 012c B3E7     		b	.L37
 824              	.L43:
 825 012e 00BF     		.align	2
 826              	.L42:
 827 0130 00000000 		.word	htim13
 828 0134 00000000 		.word	htim14
 829 0138 00000000 		.word	.LANCHOR8
 830 013c 00000000 		.word	TxData
 831 0140 00000000 		.word	.LANCHOR9
 832 0144 00000000 		.word	TxMailbox
 833 0148 00000000 		.word	TxHeader2
 834 014c 00000000 		.word	hcan1
 835 0150 00040240 		.word	1073873920
 836 0154 00000000 		.word	.LANCHOR10
 837 0158 00000000 		.word	.LANCHOR11
 838 015c 00000000 		.word	.LANCHOR0
 839 0160 00000000 		.word	.LANCHOR1
 840 0164 00000000 		.word	.LANCHOR3
 841 0168 00000000 		.word	.LANCHOR2
 842 016c 00000000 		.word	.LANCHOR13
 843 0170 00000000 		.word	.LANCHOR14
 844 0174 00000000 		.word	.LANCHOR6
ARM GAS  /tmp/ccSF8koB.s 			page 30


 845 0178 00000000 		.word	.LANCHOR7
 846 017c 00000000 		.word	TxHeader
 847 0180 00000000 		.word	.LANCHOR15
 848 0184 00000000 		.word	.LANCHOR16
 849 0188 00000240 		.word	1073872896
 850 018c 00000000 		.word	.LANCHOR12
 851              		.cfi_endproc
 852              	.LFE228:
 854              		.section	.text.Error_Handler,"ax",%progbits
 855              		.align	1
 856              		.global	Error_Handler
 857              		.syntax unified
 858              		.thumb
 859              		.thumb_func
 860              		.fpu fpv4-sp-d16
 862              	Error_Handler:
 863              	.LFB231:
 697:Core/Src/main.c **** 
 698:Core/Src/main.c **** /* USER CODE END 4 */
 699:Core/Src/main.c **** 
 700:Core/Src/main.c **** /**
 701:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 702:Core/Src/main.c ****   * @retval None
 703:Core/Src/main.c ****   */
 704:Core/Src/main.c **** void Error_Handler(void)
 705:Core/Src/main.c **** {
 864              		.loc 1 705 1 is_stmt 1 view -0
 865              		.cfi_startproc
 866              		@ Volatile: function does not return.
 867              		@ args = 0, pretend = 0, frame = 0
 868              		@ frame_needed = 0, uses_anonymous_args = 0
 869              		@ link register save eliminated.
 706:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 707:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 708:Core/Src/main.c ****   __disable_irq();
 870              		.loc 1 708 3 view .LVU215
 871              	.LBB8:
 872              	.LBI8:
 873              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  /tmp/ccSF8koB.s 			page 31


  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccSF8koB.s 			page 32


  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccSF8koB.s 			page 33


 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 874              		.loc 2 140 27 view .LVU216
 875              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 876              		.loc 2 142 3 view .LVU217
 877              		.syntax unified
 878              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 879 0000 72B6     		cpsid i
 880              	@ 0 "" 2
 881              		.thumb
 882              		.syntax unified
 883              	.L45:
 884              	.LBE9:
 885              	.LBE8:
 709:Core/Src/main.c ****   while (1)
 886              		.loc 1 709 3 discriminator 1 view .LVU218
 710:Core/Src/main.c ****   {
 711:Core/Src/main.c ****   }
 887              		.loc 1 711 3 discriminator 1 view .LVU219
 709:Core/Src/main.c ****   while (1)
 888              		.loc 1 709 9 discriminator 1 view .LVU220
 889 0002 FEE7     		b	.L45
 890              		.cfi_endproc
 891              	.LFE231:
 893              		.section	.text.MX_CAN1_Init,"ax",%progbits
 894              		.align	1
 895              		.syntax unified
 896              		.thumb
 897              		.thumb_func
 898              		.fpu fpv4-sp-d16
 900              	MX_CAN1_Init:
 901              	.LFB219:
 325:Core/Src/main.c **** 
 902              		.loc 1 325 1 view -0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906 0000 70B5     		push	{r4, r5, r6, lr}
 907              	.LCFI13:
 908              		.cfi_def_cfa_offset 16
 909              		.cfi_offset 4, -16
 910              		.cfi_offset 5, -12
 911              		.cfi_offset 6, -8
 912              		.cfi_offset 14, -4
 334:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 913              		.loc 1 334 3 view .LVU222
 334:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 914              		.loc 1 334 18 is_stmt 0 view .LVU223
 915 0002 1E48     		ldr	r0, .L50
ARM GAS  /tmp/ccSF8koB.s 			page 34


 916 0004 1E4B     		ldr	r3, .L50+4
 917 0006 0360     		str	r3, [r0]
 335:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 918              		.loc 1 335 3 is_stmt 1 view .LVU224
 335:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 919              		.loc 1 335 24 is_stmt 0 view .LVU225
 920 0008 1223     		movs	r3, #18
 921 000a 4360     		str	r3, [r0, #4]
 336:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 922              		.loc 1 336 3 is_stmt 1 view .LVU226
 336:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 923              		.loc 1 336 19 is_stmt 0 view .LVU227
 924 000c 0023     		movs	r3, #0
 925 000e 8360     		str	r3, [r0, #8]
 337:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 926              		.loc 1 337 3 is_stmt 1 view .LVU228
 337:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 927              		.loc 1 337 28 is_stmt 0 view .LVU229
 928 0010 C360     		str	r3, [r0, #12]
 338:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 929              		.loc 1 338 3 is_stmt 1 view .LVU230
 338:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 930              		.loc 1 338 23 is_stmt 0 view .LVU231
 931 0012 4FF40032 		mov	r2, #131072
 932 0016 0261     		str	r2, [r0, #16]
 339:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 933              		.loc 1 339 3 is_stmt 1 view .LVU232
 339:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 934              		.loc 1 339 23 is_stmt 0 view .LVU233
 935 0018 4361     		str	r3, [r0, #20]
 340:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 936              		.loc 1 340 3 is_stmt 1 view .LVU234
 340:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 937              		.loc 1 340 32 is_stmt 0 view .LVU235
 938 001a 0376     		strb	r3, [r0, #24]
 341:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 939              		.loc 1 341 3 is_stmt 1 view .LVU236
 341:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 940              		.loc 1 341 25 is_stmt 0 view .LVU237
 941 001c 4376     		strb	r3, [r0, #25]
 342:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 942              		.loc 1 342 3 is_stmt 1 view .LVU238
 342:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 943              		.loc 1 342 25 is_stmt 0 view .LVU239
 944 001e 0122     		movs	r2, #1
 945 0020 8276     		strb	r2, [r0, #26]
 343:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 946              		.loc 1 343 3 is_stmt 1 view .LVU240
 343:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 947              		.loc 1 343 33 is_stmt 0 view .LVU241
 948 0022 C276     		strb	r2, [r0, #27]
 344:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 949              		.loc 1 344 3 is_stmt 1 view .LVU242
 344:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 950              		.loc 1 344 32 is_stmt 0 view .LVU243
 951 0024 0377     		strb	r3, [r0, #28]
 345:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
ARM GAS  /tmp/ccSF8koB.s 			page 35


 952              		.loc 1 345 3 is_stmt 1 view .LVU244
 345:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 953              		.loc 1 345 35 is_stmt 0 view .LVU245
 954 0026 4377     		strb	r3, [r0, #29]
 346:Core/Src/main.c ****   {
 955              		.loc 1 346 3 is_stmt 1 view .LVU246
 346:Core/Src/main.c ****   {
 956              		.loc 1 346 7 is_stmt 0 view .LVU247
 957 0028 FFF7FEFF 		bl	HAL_CAN_Init
 958              	.LVL38:
 346:Core/Src/main.c ****   {
 959              		.loc 1 346 6 view .LVU248
 960 002c 20BB     		cbnz	r0, .L49
 353:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 961              		.loc 1 353 3 is_stmt 1 view .LVU249
 353:Core/Src/main.c ****   filter0.FilterIdLow = 0x000;
 962              		.loc 1 353 24 is_stmt 0 view .LVU250
 963 002e 1549     		ldr	r1, .L50+8
 964 0030 4FF48253 		mov	r3, #4160
 965 0034 0B60     		str	r3, [r1]
 354:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 966              		.loc 1 354 3 is_stmt 1 view .LVU251
 354:Core/Src/main.c ****   filter0.FilterMaskIdHigh = 0x082 << 5;
 967              		.loc 1 354 23 is_stmt 0 view .LVU252
 968 0036 0024     		movs	r4, #0
 969 0038 4C60     		str	r4, [r1, #4]
 355:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 970              		.loc 1 355 3 is_stmt 1 view .LVU253
 355:Core/Src/main.c ****   filter0.FilterMaskIdLow = 0x000;
 971              		.loc 1 355 28 is_stmt 0 view .LVU254
 972 003a 8B60     		str	r3, [r1, #8]
 356:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 973              		.loc 1 356 3 is_stmt 1 view .LVU255
 356:Core/Src/main.c ****   filter0.FilterFIFOAssignment =  CAN_RX_FIFO0;
 974              		.loc 1 356 27 is_stmt 0 view .LVU256
 975 003c CC60     		str	r4, [r1, #12]
 357:Core/Src/main.c ****   filter0.FilterBank = 1;
 976              		.loc 1 357 3 is_stmt 1 view .LVU257
 357:Core/Src/main.c ****   filter0.FilterBank = 1;
 977              		.loc 1 357 32 is_stmt 0 view .LVU258
 978 003e 0C61     		str	r4, [r1, #16]
 358:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 979              		.loc 1 358 3 is_stmt 1 view .LVU259
 358:Core/Src/main.c ****   filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 980              		.loc 1 358 22 is_stmt 0 view .LVU260
 981 0040 0125     		movs	r5, #1
 982 0042 4D61     		str	r5, [r1, #20]
 359:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 983              		.loc 1 359 3 is_stmt 1 view .LVU261
 359:Core/Src/main.c ****   filter0.FilterScale = CAN_FILTERSCALE_32BIT;
 984              		.loc 1 359 22 is_stmt 0 view .LVU262
 985 0044 8C61     		str	r4, [r1, #24]
 360:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 986              		.loc 1 360 3 is_stmt 1 view .LVU263
 360:Core/Src/main.c ****   filter0.FilterActivation = ENABLE;
 987              		.loc 1 360 23 is_stmt 0 view .LVU264
 988 0046 CD61     		str	r5, [r1, #28]
ARM GAS  /tmp/ccSF8koB.s 			page 36


 361:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 989              		.loc 1 361 3 is_stmt 1 view .LVU265
 361:Core/Src/main.c ****   filter0.SlaveStartFilterBank = 0;
 990              		.loc 1 361 28 is_stmt 0 view .LVU266
 991 0048 0D62     		str	r5, [r1, #32]
 362:Core/Src/main.c **** 
 992              		.loc 1 362 3 is_stmt 1 view .LVU267
 362:Core/Src/main.c **** 
 993              		.loc 1 362 32 is_stmt 0 view .LVU268
 994 004a 4C62     		str	r4, [r1, #36]
 364:Core/Src/main.c **** 
 995              		.loc 1 364 3 is_stmt 1 view .LVU269
 996 004c 0B4E     		ldr	r6, .L50
 997 004e 3046     		mov	r0, r6
 998 0050 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 999              	.LVL39:
 367:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 1000              		.loc 1 367 3 view .LVU270
 367:Core/Src/main.c ****   filter1.FilterIdLow = 0x000;
 1001              		.loc 1 367 24 is_stmt 0 view .LVU271
 1002 0054 0C49     		ldr	r1, .L50+12
 1003 0056 4FF48753 		mov	r3, #4320
 1004 005a 0B60     		str	r3, [r1]
 368:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x087 << 5;
 1005              		.loc 1 368 3 is_stmt 1 view .LVU272
 368:Core/Src/main.c ****   filter1.FilterMaskIdHigh = 0x087 << 5;
 1006              		.loc 1 368 23 is_stmt 0 view .LVU273
 1007 005c 4C60     		str	r4, [r1, #4]
 369:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 1008              		.loc 1 369 3 is_stmt 1 view .LVU274
 369:Core/Src/main.c ****   filter1.FilterMaskIdLow = 0x000;
 1009              		.loc 1 369 28 is_stmt 0 view .LVU275
 1010 005e 8B60     		str	r3, [r1, #8]
 370:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 1011              		.loc 1 370 3 is_stmt 1 view .LVU276
 370:Core/Src/main.c ****   filter1.FilterFIFOAssignment =  CAN_RX_FIFO0;
 1012              		.loc 1 370 27 is_stmt 0 view .LVU277
 1013 0060 CC60     		str	r4, [r1, #12]
 371:Core/Src/main.c ****   filter1.FilterBank = 2;
 1014              		.loc 1 371 3 is_stmt 1 view .LVU278
 371:Core/Src/main.c ****   filter1.FilterBank = 2;
 1015              		.loc 1 371 32 is_stmt 0 view .LVU279
 1016 0062 0C61     		str	r4, [r1, #16]
 372:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 1017              		.loc 1 372 3 is_stmt 1 view .LVU280
 372:Core/Src/main.c ****   filter1.FilterMode = CAN_FILTERMODE_IDMASK;
 1018              		.loc 1 372 22 is_stmt 0 view .LVU281
 1019 0064 0223     		movs	r3, #2
 1020 0066 4B61     		str	r3, [r1, #20]
 373:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 1021              		.loc 1 373 3 is_stmt 1 view .LVU282
 373:Core/Src/main.c ****   filter1.FilterScale = CAN_FILTERSCALE_32BIT;
 1022              		.loc 1 373 22 is_stmt 0 view .LVU283
 1023 0068 8C61     		str	r4, [r1, #24]
 374:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
 1024              		.loc 1 374 3 is_stmt 1 view .LVU284
 374:Core/Src/main.c ****   filter1.FilterActivation = ENABLE;
ARM GAS  /tmp/ccSF8koB.s 			page 37


 1025              		.loc 1 374 23 is_stmt 0 view .LVU285
 1026 006a CD61     		str	r5, [r1, #28]
 375:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 1027              		.loc 1 375 3 is_stmt 1 view .LVU286
 375:Core/Src/main.c ****   filter1.SlaveStartFilterBank = 0;
 1028              		.loc 1 375 28 is_stmt 0 view .LVU287
 1029 006c 0D62     		str	r5, [r1, #32]
 376:Core/Src/main.c **** 
 1030              		.loc 1 376 3 is_stmt 1 view .LVU288
 376:Core/Src/main.c **** 
 1031              		.loc 1 376 32 is_stmt 0 view .LVU289
 1032 006e 4C62     		str	r4, [r1, #36]
 378:Core/Src/main.c **** 
 1033              		.loc 1 378 3 is_stmt 1 view .LVU290
 1034 0070 3046     		mov	r0, r6
 1035 0072 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1036              	.LVL40:
 382:Core/Src/main.c **** 
 1037              		.loc 1 382 1 is_stmt 0 view .LVU291
 1038 0076 70BD     		pop	{r4, r5, r6, pc}
 1039              	.L49:
 348:Core/Src/main.c ****   }
 1040              		.loc 1 348 5 is_stmt 1 view .LVU292
 1041 0078 FFF7FEFF 		bl	Error_Handler
 1042              	.LVL41:
 1043              	.L51:
 1044              		.align	2
 1045              	.L50:
 1046 007c 00000000 		.word	hcan1
 1047 0080 00640040 		.word	1073767424
 1048 0084 00000000 		.word	filter0
 1049 0088 00000000 		.word	filter1
 1050              		.cfi_endproc
 1051              	.LFE219:
 1053              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1054              		.align	1
 1055              		.syntax unified
 1056              		.thumb
 1057              		.thumb_func
 1058              		.fpu fpv4-sp-d16
 1060              	MX_ADC1_Init:
 1061              	.LFB218:
 251:Core/Src/main.c **** 
 1062              		.loc 1 251 1 view -0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 16
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 1066 0000 00B5     		push	{lr}
 1067              	.LCFI14:
 1068              		.cfi_def_cfa_offset 4
 1069              		.cfi_offset 14, -4
 1070 0002 85B0     		sub	sp, sp, #20
 1071              	.LCFI15:
 1072              		.cfi_def_cfa_offset 24
 257:Core/Src/main.c **** 
 1073              		.loc 1 257 3 view .LVU294
 257:Core/Src/main.c **** 
ARM GAS  /tmp/ccSF8koB.s 			page 38


 1074              		.loc 1 257 26 is_stmt 0 view .LVU295
 1075 0004 0023     		movs	r3, #0
 1076 0006 0093     		str	r3, [sp]
 1077 0008 0193     		str	r3, [sp, #4]
 1078 000a 0293     		str	r3, [sp, #8]
 1079 000c 0393     		str	r3, [sp, #12]
 264:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1080              		.loc 1 264 3 is_stmt 1 view .LVU296
 264:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1081              		.loc 1 264 18 is_stmt 0 view .LVU297
 1082 000e 2548     		ldr	r0, .L64
 1083 0010 254A     		ldr	r2, .L64+4
 1084 0012 0260     		str	r2, [r0]
 265:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1085              		.loc 1 265 3 is_stmt 1 view .LVU298
 265:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1086              		.loc 1 265 29 is_stmt 0 view .LVU299
 1087 0014 4FF48032 		mov	r2, #65536
 1088 0018 4260     		str	r2, [r0, #4]
 266:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1089              		.loc 1 266 3 is_stmt 1 view .LVU300
 266:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1090              		.loc 1 266 25 is_stmt 0 view .LVU301
 1091 001a 8360     		str	r3, [r0, #8]
 267:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1092              		.loc 1 267 3 is_stmt 1 view .LVU302
 267:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1093              		.loc 1 267 27 is_stmt 0 view .LVU303
 1094 001c 0122     		movs	r2, #1
 1095 001e 0261     		str	r2, [r0, #16]
 268:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1096              		.loc 1 268 3 is_stmt 1 view .LVU304
 268:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1097              		.loc 1 268 33 is_stmt 0 view .LVU305
 1098 0020 0276     		strb	r2, [r0, #24]
 269:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1099              		.loc 1 269 3 is_stmt 1 view .LVU306
 269:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1100              		.loc 1 269 36 is_stmt 0 view .LVU307
 1101 0022 80F82030 		strb	r3, [r0, #32]
 270:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1102              		.loc 1 270 3 is_stmt 1 view .LVU308
 270:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1103              		.loc 1 270 35 is_stmt 0 view .LVU309
 1104 0026 C362     		str	r3, [r0, #44]
 271:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1105              		.loc 1 271 3 is_stmt 1 view .LVU310
 271:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1106              		.loc 1 271 31 is_stmt 0 view .LVU311
 1107 0028 2049     		ldr	r1, .L64+8
 1108 002a 8162     		str	r1, [r0, #40]
 272:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1109              		.loc 1 272 3 is_stmt 1 view .LVU312
 272:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1110              		.loc 1 272 24 is_stmt 0 view .LVU313
 1111 002c C360     		str	r3, [r0, #12]
 273:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
ARM GAS  /tmp/ccSF8koB.s 			page 39


 1112              		.loc 1 273 3 is_stmt 1 view .LVU314
 273:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1113              		.loc 1 273 30 is_stmt 0 view .LVU315
 1114 002e 0423     		movs	r3, #4
 1115 0030 C361     		str	r3, [r0, #28]
 274:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1116              		.loc 1 274 3 is_stmt 1 view .LVU316
 274:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1117              		.loc 1 274 36 is_stmt 0 view .LVU317
 1118 0032 80F83020 		strb	r2, [r0, #48]
 275:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1119              		.loc 1 275 3 is_stmt 1 view .LVU318
 275:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1120              		.loc 1 275 27 is_stmt 0 view .LVU319
 1121 0036 4261     		str	r2, [r0, #20]
 276:Core/Src/main.c ****   {
 1122              		.loc 1 276 3 is_stmt 1 view .LVU320
 276:Core/Src/main.c ****   {
 1123              		.loc 1 276 7 is_stmt 0 view .LVU321
 1124 0038 FFF7FEFF 		bl	HAL_ADC_Init
 1125              	.LVL42:
 276:Core/Src/main.c ****   {
 1126              		.loc 1 276 6 view .LVU322
 1127 003c 40BB     		cbnz	r0, .L59
 282:Core/Src/main.c ****   sConfig.Rank = 1;
 1128              		.loc 1 282 3 is_stmt 1 view .LVU323
 282:Core/Src/main.c ****   sConfig.Rank = 1;
 1129              		.loc 1 282 19 is_stmt 0 view .LVU324
 1130 003e 0423     		movs	r3, #4
 1131 0040 0093     		str	r3, [sp]
 283:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1132              		.loc 1 283 3 is_stmt 1 view .LVU325
 283:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1133              		.loc 1 283 16 is_stmt 0 view .LVU326
 1134 0042 0123     		movs	r3, #1
 1135 0044 0193     		str	r3, [sp, #4]
 284:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1136              		.loc 1 284 3 is_stmt 1 view .LVU327
 284:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1137              		.loc 1 284 24 is_stmt 0 view .LVU328
 1138 0046 0023     		movs	r3, #0
 1139 0048 0293     		str	r3, [sp, #8]
 285:Core/Src/main.c ****   {
 1140              		.loc 1 285 3 is_stmt 1 view .LVU329
 285:Core/Src/main.c ****   {
 1141              		.loc 1 285 7 is_stmt 0 view .LVU330
 1142 004a 6946     		mov	r1, sp
 1143 004c 1548     		ldr	r0, .L64
 1144 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1145              	.LVL43:
 285:Core/Src/main.c ****   {
 1146              		.loc 1 285 6 view .LVU331
 1147 0052 F8B9     		cbnz	r0, .L60
 291:Core/Src/main.c ****   sConfig.Rank = 2;
 1148              		.loc 1 291 3 is_stmt 1 view .LVU332
 291:Core/Src/main.c ****   sConfig.Rank = 2;
 1149              		.loc 1 291 19 is_stmt 0 view .LVU333
ARM GAS  /tmp/ccSF8koB.s 			page 40


 1150 0054 0523     		movs	r3, #5
 1151 0056 0093     		str	r3, [sp]
 292:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1152              		.loc 1 292 3 is_stmt 1 view .LVU334
 292:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1153              		.loc 1 292 16 is_stmt 0 view .LVU335
 1154 0058 0223     		movs	r3, #2
 1155 005a 0193     		str	r3, [sp, #4]
 293:Core/Src/main.c ****   {
 1156              		.loc 1 293 3 is_stmt 1 view .LVU336
 293:Core/Src/main.c ****   {
 1157              		.loc 1 293 7 is_stmt 0 view .LVU337
 1158 005c 6946     		mov	r1, sp
 1159 005e 1148     		ldr	r0, .L64
 1160 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1161              	.LVL44:
 293:Core/Src/main.c ****   {
 1162              		.loc 1 293 6 view .LVU338
 1163 0064 C0B9     		cbnz	r0, .L61
 299:Core/Src/main.c ****   sConfig.Rank = 3;
 1164              		.loc 1 299 3 is_stmt 1 view .LVU339
 299:Core/Src/main.c ****   sConfig.Rank = 3;
 1165              		.loc 1 299 19 is_stmt 0 view .LVU340
 1166 0066 0623     		movs	r3, #6
 1167 0068 0093     		str	r3, [sp]
 300:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1168              		.loc 1 300 3 is_stmt 1 view .LVU341
 300:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1169              		.loc 1 300 16 is_stmt 0 view .LVU342
 1170 006a 0323     		movs	r3, #3
 1171 006c 0193     		str	r3, [sp, #4]
 301:Core/Src/main.c ****   {
 1172              		.loc 1 301 3 is_stmt 1 view .LVU343
 301:Core/Src/main.c ****   {
 1173              		.loc 1 301 7 is_stmt 0 view .LVU344
 1174 006e 6946     		mov	r1, sp
 1175 0070 0C48     		ldr	r0, .L64
 1176 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1177              	.LVL45:
 301:Core/Src/main.c ****   {
 1178              		.loc 1 301 6 view .LVU345
 1179 0076 88B9     		cbnz	r0, .L62
 307:Core/Src/main.c ****   sConfig.Rank = 4;
 1180              		.loc 1 307 3 is_stmt 1 view .LVU346
 307:Core/Src/main.c ****   sConfig.Rank = 4;
 1181              		.loc 1 307 19 is_stmt 0 view .LVU347
 1182 0078 0723     		movs	r3, #7
 1183 007a 0093     		str	r3, [sp]
 308:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1184              		.loc 1 308 3 is_stmt 1 view .LVU348
 308:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1185              		.loc 1 308 16 is_stmt 0 view .LVU349
 1186 007c 0423     		movs	r3, #4
 1187 007e 0193     		str	r3, [sp, #4]
 309:Core/Src/main.c ****   {
 1188              		.loc 1 309 3 is_stmt 1 view .LVU350
 309:Core/Src/main.c ****   {
ARM GAS  /tmp/ccSF8koB.s 			page 41


 1189              		.loc 1 309 7 is_stmt 0 view .LVU351
 1190 0080 6946     		mov	r1, sp
 1191 0082 0848     		ldr	r0, .L64
 1192 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1193              	.LVL46:
 309:Core/Src/main.c ****   {
 1194              		.loc 1 309 6 view .LVU352
 1195 0088 50B9     		cbnz	r0, .L63
 317:Core/Src/main.c **** 
 1196              		.loc 1 317 1 view .LVU353
 1197 008a 05B0     		add	sp, sp, #20
 1198              	.LCFI16:
 1199              		.cfi_remember_state
 1200              		.cfi_def_cfa_offset 4
 1201              		@ sp needed
 1202 008c 5DF804FB 		ldr	pc, [sp], #4
 1203              	.L59:
 1204              	.LCFI17:
 1205              		.cfi_restore_state
 278:Core/Src/main.c ****   }
 1206              		.loc 1 278 5 is_stmt 1 view .LVU354
 1207 0090 FFF7FEFF 		bl	Error_Handler
 1208              	.LVL47:
 1209              	.L60:
 287:Core/Src/main.c ****   }
 1210              		.loc 1 287 5 view .LVU355
 1211 0094 FFF7FEFF 		bl	Error_Handler
 1212              	.LVL48:
 1213              	.L61:
 295:Core/Src/main.c ****   }
 1214              		.loc 1 295 5 view .LVU356
 1215 0098 FFF7FEFF 		bl	Error_Handler
 1216              	.LVL49:
 1217              	.L62:
 303:Core/Src/main.c ****   }
 1218              		.loc 1 303 5 view .LVU357
 1219 009c FFF7FEFF 		bl	Error_Handler
 1220              	.LVL50:
 1221              	.L63:
 311:Core/Src/main.c ****   }
 1222              		.loc 1 311 5 view .LVU358
 1223 00a0 FFF7FEFF 		bl	Error_Handler
 1224              	.LVL51:
 1225              	.L65:
 1226              		.align	2
 1227              	.L64:
 1228 00a4 00000000 		.word	hadc1
 1229 00a8 00200140 		.word	1073815552
 1230 00ac 0100000F 		.word	251658241
 1231              		.cfi_endproc
 1232              	.LFE218:
 1234              		.section	.text.MX_TIM14_Init,"ax",%progbits
 1235              		.align	1
 1236              		.syntax unified
 1237              		.thumb
 1238              		.thumb_func
 1239              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccSF8koB.s 			page 42


 1241              	MX_TIM14_Init:
 1242              	.LFB221:
 421:Core/Src/main.c **** 
 1243              		.loc 1 421 1 view -0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 0
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 1247 0000 08B5     		push	{r3, lr}
 1248              	.LCFI18:
 1249              		.cfi_def_cfa_offset 8
 1250              		.cfi_offset 3, -8
 1251              		.cfi_offset 14, -4
 430:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1252              		.loc 1 430 3 view .LVU360
 430:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1253              		.loc 1 430 19 is_stmt 0 view .LVU361
 1254 0002 0948     		ldr	r0, .L70
 1255 0004 094B     		ldr	r3, .L70+4
 1256 0006 0360     		str	r3, [r0]
 431:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1257              		.loc 1 431 3 is_stmt 1 view .LVU362
 431:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1258              		.loc 1 431 25 is_stmt 0 view .LVU363
 1259 0008 42F22733 		movw	r3, #8999
 1260 000c 4360     		str	r3, [r0, #4]
 432:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 1261              		.loc 1 432 3 is_stmt 1 view .LVU364
 432:Core/Src/main.c ****   htim14.Init.Period = 1000-1;
 1262              		.loc 1 432 27 is_stmt 0 view .LVU365
 1263 000e 0023     		movs	r3, #0
 1264 0010 8360     		str	r3, [r0, #8]
 433:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1265              		.loc 1 433 3 is_stmt 1 view .LVU366
 433:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1266              		.loc 1 433 22 is_stmt 0 view .LVU367
 1267 0012 40F2E732 		movw	r2, #999
 1268 0016 C260     		str	r2, [r0, #12]
 434:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1269              		.loc 1 434 3 is_stmt 1 view .LVU368
 434:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1270              		.loc 1 434 29 is_stmt 0 view .LVU369
 1271 0018 0361     		str	r3, [r0, #16]
 435:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1272              		.loc 1 435 3 is_stmt 1 view .LVU370
 435:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1273              		.loc 1 435 33 is_stmt 0 view .LVU371
 1274 001a 8361     		str	r3, [r0, #24]
 436:Core/Src/main.c ****   {
 1275              		.loc 1 436 3 is_stmt 1 view .LVU372
 436:Core/Src/main.c ****   {
 1276              		.loc 1 436 7 is_stmt 0 view .LVU373
 1277 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1278              	.LVL52:
 436:Core/Src/main.c ****   {
 1279              		.loc 1 436 6 view .LVU374
 1280 0020 00B9     		cbnz	r0, .L69
 444:Core/Src/main.c **** 
ARM GAS  /tmp/ccSF8koB.s 			page 43


 1281              		.loc 1 444 1 view .LVU375
 1282 0022 08BD     		pop	{r3, pc}
 1283              	.L69:
 438:Core/Src/main.c ****   }
 1284              		.loc 1 438 5 is_stmt 1 view .LVU376
 1285 0024 FFF7FEFF 		bl	Error_Handler
 1286              	.LVL53:
 1287              	.L71:
 1288              		.align	2
 1289              	.L70:
 1290 0028 00000000 		.word	htim14
 1291 002c 00200040 		.word	1073750016
 1292              		.cfi_endproc
 1293              	.LFE221:
 1295              		.section	.text.MX_TIM13_Init,"ax",%progbits
 1296              		.align	1
 1297              		.syntax unified
 1298              		.thumb
 1299              		.thumb_func
 1300              		.fpu fpv4-sp-d16
 1302              	MX_TIM13_Init:
 1303              	.LFB220:
 390:Core/Src/main.c **** 
 1304              		.loc 1 390 1 view -0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308 0000 08B5     		push	{r3, lr}
 1309              	.LCFI19:
 1310              		.cfi_def_cfa_offset 8
 1311              		.cfi_offset 3, -8
 1312              		.cfi_offset 14, -4
 399:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1313              		.loc 1 399 3 view .LVU378
 399:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1314              		.loc 1 399 19 is_stmt 0 view .LVU379
 1315 0002 0948     		ldr	r0, .L76
 1316 0004 094B     		ldr	r3, .L76+4
 1317 0006 0360     		str	r3, [r0]
 400:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1318              		.loc 1 400 3 is_stmt 1 view .LVU380
 400:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1319              		.loc 1 400 25 is_stmt 0 view .LVU381
 1320 0008 42F22733 		movw	r3, #8999
 1321 000c 4360     		str	r3, [r0, #4]
 401:Core/Src/main.c ****   htim13.Init.Period = 500-1;
 1322              		.loc 1 401 3 is_stmt 1 view .LVU382
 401:Core/Src/main.c ****   htim13.Init.Period = 500-1;
 1323              		.loc 1 401 27 is_stmt 0 view .LVU383
 1324 000e 0023     		movs	r3, #0
 1325 0010 8360     		str	r3, [r0, #8]
 402:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1326              		.loc 1 402 3 is_stmt 1 view .LVU384
 402:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1327              		.loc 1 402 22 is_stmt 0 view .LVU385
 1328 0012 40F2F312 		movw	r2, #499
 1329 0016 C260     		str	r2, [r0, #12]
ARM GAS  /tmp/ccSF8koB.s 			page 44


 403:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1330              		.loc 1 403 3 is_stmt 1 view .LVU386
 403:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1331              		.loc 1 403 29 is_stmt 0 view .LVU387
 1332 0018 0361     		str	r3, [r0, #16]
 404:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1333              		.loc 1 404 3 is_stmt 1 view .LVU388
 404:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1334              		.loc 1 404 33 is_stmt 0 view .LVU389
 1335 001a 8361     		str	r3, [r0, #24]
 405:Core/Src/main.c ****   {
 1336              		.loc 1 405 3 is_stmt 1 view .LVU390
 405:Core/Src/main.c ****   {
 1337              		.loc 1 405 7 is_stmt 0 view .LVU391
 1338 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1339              	.LVL54:
 405:Core/Src/main.c ****   {
 1340              		.loc 1 405 6 view .LVU392
 1341 0020 00B9     		cbnz	r0, .L75
 413:Core/Src/main.c **** 
 1342              		.loc 1 413 1 view .LVU393
 1343 0022 08BD     		pop	{r3, pc}
 1344              	.L75:
 407:Core/Src/main.c ****   }
 1345              		.loc 1 407 5 is_stmt 1 view .LVU394
 1346 0024 FFF7FEFF 		bl	Error_Handler
 1347              	.LVL55:
 1348              	.L77:
 1349              		.align	2
 1350              	.L76:
 1351 0028 00000000 		.word	htim13
 1352 002c 001C0040 		.word	1073748992
 1353              		.cfi_endproc
 1354              	.LFE220:
 1356              		.section	.text.SystemClock_Config,"ax",%progbits
 1357              		.align	1
 1358              		.global	SystemClock_Config
 1359              		.syntax unified
 1360              		.thumb
 1361              		.thumb_func
 1362              		.fpu fpv4-sp-d16
 1364              	SystemClock_Config:
 1365              	.LFB217:
 205:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1366              		.loc 1 205 1 view -0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 80
 1369              		@ frame_needed = 0, uses_anonymous_args = 0
 1370 0000 00B5     		push	{lr}
 1371              	.LCFI20:
 1372              		.cfi_def_cfa_offset 4
 1373              		.cfi_offset 14, -4
 1374 0002 95B0     		sub	sp, sp, #84
 1375              	.LCFI21:
 1376              		.cfi_def_cfa_offset 88
 206:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1377              		.loc 1 206 3 view .LVU396
ARM GAS  /tmp/ccSF8koB.s 			page 45


 206:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1378              		.loc 1 206 22 is_stmt 0 view .LVU397
 1379 0004 3422     		movs	r2, #52
 1380 0006 0021     		movs	r1, #0
 1381 0008 07A8     		add	r0, sp, #28
 1382 000a FFF7FEFF 		bl	memset
 1383              	.LVL56:
 207:Core/Src/main.c **** 
 1384              		.loc 1 207 3 is_stmt 1 view .LVU398
 207:Core/Src/main.c **** 
 1385              		.loc 1 207 22 is_stmt 0 view .LVU399
 1386 000e 0023     		movs	r3, #0
 1387 0010 0293     		str	r3, [sp, #8]
 1388 0012 0393     		str	r3, [sp, #12]
 1389 0014 0493     		str	r3, [sp, #16]
 1390 0016 0593     		str	r3, [sp, #20]
 1391 0018 0693     		str	r3, [sp, #24]
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1392              		.loc 1 211 3 is_stmt 1 view .LVU400
 1393              	.LBB10:
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1394              		.loc 1 211 3 view .LVU401
 1395 001a 0093     		str	r3, [sp]
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1396              		.loc 1 211 3 view .LVU402
 1397 001c 1E4A     		ldr	r2, .L84
 1398 001e 116C     		ldr	r1, [r2, #64]
 1399 0020 41F08051 		orr	r1, r1, #268435456
 1400 0024 1164     		str	r1, [r2, #64]
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1401              		.loc 1 211 3 view .LVU403
 1402 0026 126C     		ldr	r2, [r2, #64]
 1403 0028 02F08052 		and	r2, r2, #268435456
 1404 002c 0092     		str	r2, [sp]
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1405              		.loc 1 211 3 view .LVU404
 1406 002e 009A     		ldr	r2, [sp]
 1407              	.LBE10:
 211:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1408              		.loc 1 211 3 view .LVU405
 212:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1409              		.loc 1 212 3 view .LVU406
 1410              	.LBB11:
 212:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1411              		.loc 1 212 3 view .LVU407
 1412 0030 0193     		str	r3, [sp, #4]
 212:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1413              		.loc 1 212 3 view .LVU408
 1414 0032 1A4A     		ldr	r2, .L84+4
 1415 0034 1168     		ldr	r1, [r2]
 1416 0036 41F44041 		orr	r1, r1, #49152
 1417 003a 1160     		str	r1, [r2]
 212:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1418              		.loc 1 212 3 view .LVU409
 1419 003c 1268     		ldr	r2, [r2]
 1420 003e 02F44042 		and	r2, r2, #49152
 1421 0042 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/ccSF8koB.s 			page 46


 212:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1422              		.loc 1 212 3 view .LVU410
 1423 0044 019A     		ldr	r2, [sp, #4]
 1424              	.LBE11:
 212:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1425              		.loc 1 212 3 view .LVU411
 216:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1426              		.loc 1 216 3 view .LVU412
 216:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1427              		.loc 1 216 36 is_stmt 0 view .LVU413
 1428 0046 0222     		movs	r2, #2
 1429 0048 0792     		str	r2, [sp, #28]
 217:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1430              		.loc 1 217 3 is_stmt 1 view .LVU414
 217:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1431              		.loc 1 217 30 is_stmt 0 view .LVU415
 1432 004a 0121     		movs	r1, #1
 1433 004c 0A91     		str	r1, [sp, #40]
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1434              		.loc 1 218 3 is_stmt 1 view .LVU416
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1435              		.loc 1 218 41 is_stmt 0 view .LVU417
 1436 004e 1021     		movs	r1, #16
 1437 0050 0B91     		str	r1, [sp, #44]
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1438              		.loc 1 219 3 is_stmt 1 view .LVU418
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1439              		.loc 1 219 34 is_stmt 0 view .LVU419
 1440 0052 0D92     		str	r2, [sp, #52]
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1441              		.loc 1 220 3 is_stmt 1 view .LVU420
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1442              		.loc 1 220 35 is_stmt 0 view .LVU421
 1443 0054 0E93     		str	r3, [sp, #56]
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1444              		.loc 1 221 3 is_stmt 1 view .LVU422
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1445              		.loc 1 221 30 is_stmt 0 view .LVU423
 1446 0056 0823     		movs	r3, #8
 1447 0058 0F93     		str	r3, [sp, #60]
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1448              		.loc 1 222 3 is_stmt 1 view .LVU424
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1449              		.loc 1 222 30 is_stmt 0 view .LVU425
 1450 005a 5A23     		movs	r3, #90
 1451 005c 1093     		str	r3, [sp, #64]
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1452              		.loc 1 223 3 is_stmt 1 view .LVU426
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1453              		.loc 1 223 30 is_stmt 0 view .LVU427
 1454 005e 1192     		str	r2, [sp, #68]
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1455              		.loc 1 224 3 is_stmt 1 view .LVU428
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1456              		.loc 1 224 30 is_stmt 0 view .LVU429
 1457 0060 1292     		str	r2, [sp, #72]
 225:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /tmp/ccSF8koB.s 			page 47


 1458              		.loc 1 225 3 is_stmt 1 view .LVU430
 225:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1459              		.loc 1 225 30 is_stmt 0 view .LVU431
 1460 0062 1392     		str	r2, [sp, #76]
 226:Core/Src/main.c ****   {
 1461              		.loc 1 226 3 is_stmt 1 view .LVU432
 226:Core/Src/main.c ****   {
 1462              		.loc 1 226 7 is_stmt 0 view .LVU433
 1463 0064 07A8     		add	r0, sp, #28
 1464 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1465              	.LVL57:
 226:Core/Src/main.c ****   {
 1466              		.loc 1 226 6 view .LVU434
 1467 006a 88B9     		cbnz	r0, .L82
 232:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1468              		.loc 1 232 3 is_stmt 1 view .LVU435
 232:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1469              		.loc 1 232 31 is_stmt 0 view .LVU436
 1470 006c 0F23     		movs	r3, #15
 1471 006e 0293     		str	r3, [sp, #8]
 234:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1472              		.loc 1 234 3 is_stmt 1 view .LVU437
 234:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1473              		.loc 1 234 34 is_stmt 0 view .LVU438
 1474 0070 0223     		movs	r3, #2
 1475 0072 0393     		str	r3, [sp, #12]
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1476              		.loc 1 235 3 is_stmt 1 view .LVU439
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1477              		.loc 1 235 35 is_stmt 0 view .LVU440
 1478 0074 0023     		movs	r3, #0
 1479 0076 0493     		str	r3, [sp, #16]
 236:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1480              		.loc 1 236 3 is_stmt 1 view .LVU441
 236:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1481              		.loc 1 236 36 is_stmt 0 view .LVU442
 1482 0078 4FF48052 		mov	r2, #4096
 1483 007c 0592     		str	r2, [sp, #20]
 237:Core/Src/main.c **** 
 1484              		.loc 1 237 3 is_stmt 1 view .LVU443
 237:Core/Src/main.c **** 
 1485              		.loc 1 237 36 is_stmt 0 view .LVU444
 1486 007e 0693     		str	r3, [sp, #24]
 239:Core/Src/main.c ****   {
 1487              		.loc 1 239 3 is_stmt 1 view .LVU445
 239:Core/Src/main.c ****   {
 1488              		.loc 1 239 7 is_stmt 0 view .LVU446
 1489 0080 0321     		movs	r1, #3
 1490 0082 02A8     		add	r0, sp, #8
 1491 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1492              	.LVL58:
 239:Core/Src/main.c ****   {
 1493              		.loc 1 239 6 view .LVU447
 1494 0088 20B9     		cbnz	r0, .L83
 243:Core/Src/main.c **** 
 1495              		.loc 1 243 1 view .LVU448
 1496 008a 15B0     		add	sp, sp, #84
ARM GAS  /tmp/ccSF8koB.s 			page 48


 1497              	.LCFI22:
 1498              		.cfi_remember_state
 1499              		.cfi_def_cfa_offset 4
 1500              		@ sp needed
 1501 008c 5DF804FB 		ldr	pc, [sp], #4
 1502              	.L82:
 1503              	.LCFI23:
 1504              		.cfi_restore_state
 228:Core/Src/main.c ****   }
 1505              		.loc 1 228 5 is_stmt 1 view .LVU449
 1506 0090 FFF7FEFF 		bl	Error_Handler
 1507              	.LVL59:
 1508              	.L83:
 241:Core/Src/main.c ****   }
 1509              		.loc 1 241 5 view .LVU450
 1510 0094 FFF7FEFF 		bl	Error_Handler
 1511              	.LVL60:
 1512              	.L85:
 1513              		.align	2
 1514              	.L84:
 1515 0098 00380240 		.word	1073887232
 1516 009c 00700040 		.word	1073770496
 1517              		.cfi_endproc
 1518              	.LFE217:
 1520              		.section	.text.main,"ax",%progbits
 1521              		.align	1
 1522              		.global	main
 1523              		.syntax unified
 1524              		.thumb
 1525              		.thumb_func
 1526              		.fpu fpv4-sp-d16
 1528              	main:
 1529              	.LFB216:
 133:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1530              		.loc 1 133 1 view -0
 1531              		.cfi_startproc
 1532              		@ Volatile: function does not return.
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 0, uses_anonymous_args = 0
 1535 0000 08B5     		push	{r3, lr}
 1536              	.LCFI24:
 1537              		.cfi_def_cfa_offset 8
 1538              		.cfi_offset 3, -8
 1539              		.cfi_offset 14, -4
 137:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 1540              		.loc 1 137 3 view .LVU452
 137:Core/Src/main.c ****   TxHeader.ExtId = 0x0;
 1541              		.loc 1 137 18 is_stmt 0 view .LVU453
 1542 0002 1B4A     		ldr	r2, .L89
 1543 0004 9323     		movs	r3, #147
 1544 0006 1360     		str	r3, [r2]
 138:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 1545              		.loc 1 138 3 is_stmt 1 view .LVU454
 138:Core/Src/main.c ****   TxHeader.IDE = CAN_ID_STD;
 1546              		.loc 1 138 18 is_stmt 0 view .LVU455
 1547 0008 0023     		movs	r3, #0
 1548 000a 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccSF8koB.s 			page 49


 139:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 1549              		.loc 1 139 3 is_stmt 1 view .LVU456
 139:Core/Src/main.c ****   TxHeader.RTR = CAN_RTR_DATA;
 1550              		.loc 1 139 16 is_stmt 0 view .LVU457
 1551 000c 9360     		str	r3, [r2, #8]
 140:Core/Src/main.c ****   TxHeader.DLC = 8;
 1552              		.loc 1 140 3 is_stmt 1 view .LVU458
 140:Core/Src/main.c ****   TxHeader.DLC = 8;
 1553              		.loc 1 140 16 is_stmt 0 view .LVU459
 1554 000e D360     		str	r3, [r2, #12]
 141:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 1555              		.loc 1 141 3 is_stmt 1 view .LVU460
 141:Core/Src/main.c ****   TxHeader.TransmitGlobalTime = DISABLE;
 1556              		.loc 1 141 16 is_stmt 0 view .LVU461
 1557 0010 0821     		movs	r1, #8
 1558 0012 1161     		str	r1, [r2, #16]
 142:Core/Src/main.c ****   
 1559              		.loc 1 142 3 is_stmt 1 view .LVU462
 142:Core/Src/main.c ****   
 1560              		.loc 1 142 31 is_stmt 0 view .LVU463
 1561 0014 1375     		strb	r3, [r2, #20]
 145:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 1562              		.loc 1 145 3 is_stmt 1 view .LVU464
 145:Core/Src/main.c ****   TxHeader2.ExtId = 0x0;
 1563              		.loc 1 145 19 is_stmt 0 view .LVU465
 1564 0016 174A     		ldr	r2, .L89+4
 1565 0018 C020     		movs	r0, #192
 1566 001a 1060     		str	r0, [r2]
 146:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 1567              		.loc 1 146 3 is_stmt 1 view .LVU466
 146:Core/Src/main.c ****   TxHeader2.IDE = CAN_ID_STD;
 1568              		.loc 1 146 19 is_stmt 0 view .LVU467
 1569 001c 5360     		str	r3, [r2, #4]
 147:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 1570              		.loc 1 147 3 is_stmt 1 view .LVU468
 147:Core/Src/main.c ****   TxHeader2.RTR = CAN_RTR_DATA;
 1571              		.loc 1 147 17 is_stmt 0 view .LVU469
 1572 001e 9360     		str	r3, [r2, #8]
 148:Core/Src/main.c ****   TxHeader2.DLC = 8;
 1573              		.loc 1 148 3 is_stmt 1 view .LVU470
 148:Core/Src/main.c ****   TxHeader2.DLC = 8;
 1574              		.loc 1 148 17 is_stmt 0 view .LVU471
 1575 0020 D360     		str	r3, [r2, #12]
 149:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 1576              		.loc 1 149 3 is_stmt 1 view .LVU472
 149:Core/Src/main.c ****   TxHeader2.TransmitGlobalTime = DISABLE;
 1577              		.loc 1 149 17 is_stmt 0 view .LVU473
 1578 0022 1161     		str	r1, [r2, #16]
 150:Core/Src/main.c **** 
 1579              		.loc 1 150 3 is_stmt 1 view .LVU474
 150:Core/Src/main.c **** 
 1580              		.loc 1 150 32 is_stmt 0 view .LVU475
 1581 0024 1375     		strb	r3, [r2, #20]
 157:Core/Src/main.c **** 
 1582              		.loc 1 157 3 is_stmt 1 view .LVU476
 1583 0026 FFF7FEFF 		bl	HAL_Init
 1584              	.LVL61:
ARM GAS  /tmp/ccSF8koB.s 			page 50


 164:Core/Src/main.c **** 
 1585              		.loc 1 164 3 view .LVU477
 1586 002a FFF7FEFF 		bl	SystemClock_Config
 1587              	.LVL62:
 171:Core/Src/main.c ****   MX_CAN1_Init();
 1588              		.loc 1 171 3 view .LVU478
 1589 002e FFF7FEFF 		bl	MX_GPIO_Init
 1590              	.LVL63:
 172:Core/Src/main.c ****   MX_DMA_Init();
 1591              		.loc 1 172 3 view .LVU479
 1592 0032 FFF7FEFF 		bl	MX_CAN1_Init
 1593              	.LVL64:
 173:Core/Src/main.c ****   MX_ADC1_Init();
 1594              		.loc 1 173 3 view .LVU480
 1595 0036 FFF7FEFF 		bl	MX_DMA_Init
 1596              	.LVL65:
 174:Core/Src/main.c ****   MX_TIM14_Init();
 1597              		.loc 1 174 3 view .LVU481
 1598 003a FFF7FEFF 		bl	MX_ADC1_Init
 1599              	.LVL66:
 175:Core/Src/main.c ****   MX_TIM13_Init();
 1600              		.loc 1 175 3 view .LVU482
 1601 003e FFF7FEFF 		bl	MX_TIM14_Init
 1602              	.LVL67:
 176:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1603              		.loc 1 176 3 view .LVU483
 1604 0042 FFF7FEFF 		bl	MX_TIM13_Init
 1605              	.LVL68:
 180:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 1606              		.loc 1 180 3 view .LVU484
 1607 0046 0C4C     		ldr	r4, .L89+8
 1608 0048 2046     		mov	r0, r4
 1609 004a FFF7FEFF 		bl	HAL_CAN_Start
 1610              	.LVL69:
 181:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1611              		.loc 1 181 3 view .LVU485
 1612 004e 0221     		movs	r1, #2
 1613 0050 2046     		mov	r0, r4
 1614 0052 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1615              	.LVL70:
 182:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 1616              		.loc 1 182 3 view .LVU486
 1617 0056 0948     		ldr	r0, .L89+12
 1618 0058 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1619              	.LVL71:
 183:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 1620              		.loc 1 183 3 view .LVU487
 1621 005c 0848     		ldr	r0, .L89+16
 1622 005e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1623              	.LVL72:
 184:Core/Src/main.c **** 
 1624              		.loc 1 184 3 view .LVU488
 1625 0062 0422     		movs	r2, #4
 1626 0064 0749     		ldr	r1, .L89+20
 1627 0066 0848     		ldr	r0, .L89+24
 1628 0068 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1629              	.LVL73:
ARM GAS  /tmp/ccSF8koB.s 			page 51


 1630              	.L87:
 190:Core/Src/main.c ****   {
 1631              		.loc 1 190 3 discriminator 1 view .LVU489
 196:Core/Src/main.c ****   /* USER CODE END 3 */
 1632              		.loc 1 196 3 discriminator 1 view .LVU490
 190:Core/Src/main.c ****   {
 1633              		.loc 1 190 9 discriminator 1 view .LVU491
 1634 006c FEE7     		b	.L87
 1635              	.L90:
 1636 006e 00BF     		.align	2
 1637              	.L89:
 1638 0070 00000000 		.word	TxHeader
 1639 0074 00000000 		.word	TxHeader2
 1640 0078 00000000 		.word	hcan1
 1641 007c 00000000 		.word	htim14
 1642 0080 00000000 		.word	htim13
 1643 0084 00000000 		.word	adc_buf
 1644 0088 00000000 		.word	hadc1
 1645              		.cfi_endproc
 1646              	.LFE216:
 1648              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1649              		.align	1
 1650              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 1651              		.syntax unified
 1652              		.thumb
 1653              		.thumb_func
 1654              		.fpu fpv4-sp-d16
 1656              	HAL_CAN_RxFifo0MsgPendingCallback:
 1657              	.LVL74:
 1658              	.LFB226:
 558:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 1659              		.loc 1 558 1 view -0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 558:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 1663              		.loc 1 558 1 is_stmt 0 view .LVU493
 1664 0000 08B5     		push	{r3, lr}
 1665              	.LCFI25:
 1666              		.cfi_def_cfa_offset 8
 1667              		.cfi_offset 3, -8
 1668              		.cfi_offset 14, -4
 559:Core/Src/main.c ****     Error_Handler();
 1669              		.loc 1 559 3 is_stmt 1 view .LVU494
 559:Core/Src/main.c ****     Error_Handler();
 1670              		.loc 1 559 7 is_stmt 0 view .LVU495
 1671 0002 0E4B     		ldr	r3, .L99
 1672 0004 0E4A     		ldr	r2, .L99+4
 1673 0006 0021     		movs	r1, #0
 1674 0008 0E48     		ldr	r0, .L99+8
 1675              	.LVL75:
 559:Core/Src/main.c ****     Error_Handler();
 1676              		.loc 1 559 7 view .LVU496
 1677 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1678              	.LVL76:
 559:Core/Src/main.c ****     Error_Handler();
 1679              		.loc 1 559 6 view .LVU497
ARM GAS  /tmp/ccSF8koB.s 			page 52


 1680 000e 30B9     		cbnz	r0, .L96
 564:Core/Src/main.c ****   {
 1681              		.loc 1 564 3 is_stmt 1 view .LVU498
 564:Core/Src/main.c ****   {
 1682              		.loc 1 564 15 is_stmt 0 view .LVU499
 1683 0010 0B4B     		ldr	r3, .L99+4
 1684 0012 1B68     		ldr	r3, [r3]
 564:Core/Src/main.c ****   {
 1685              		.loc 1 564 6 view .LVU500
 1686 0014 822B     		cmp	r3, #130
 1687 0016 04D0     		beq	.L97
 1688              	.L93:
 571:Core/Src/main.c ****   {
 1689              		.loc 1 571 3 is_stmt 1 view .LVU501
 571:Core/Src/main.c ****   {
 1690              		.loc 1 571 6 is_stmt 0 view .LVU502
 1691 0018 872B     		cmp	r3, #135
 1692 001a 0AD0     		beq	.L98
 1693              	.L91:
 575:Core/Src/main.c **** 
 1694              		.loc 1 575 1 view .LVU503
 1695 001c 08BD     		pop	{r3, pc}
 1696              	.L96:
 560:Core/Src/main.c ****   }
 1697              		.loc 1 560 5 is_stmt 1 view .LVU504
 1698 001e FFF7FEFF 		bl	Error_Handler
 1699              	.LVL77:
 1700              	.L97:
 566:Core/Src/main.c ****       bmsFault = RxData[1];
 1701              		.loc 1 566 7 view .LVU505
 566:Core/Src/main.c ****       bmsFault = RxData[1];
 1702              		.loc 1 566 24 is_stmt 0 view .LVU506
 1703 0022 064A     		ldr	r2, .L99
 1704 0024 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 566:Core/Src/main.c ****       bmsFault = RxData[1];
 1705              		.loc 1 566 16 view .LVU507
 1706 0026 0849     		ldr	r1, .L99+12
 1707 0028 0870     		strb	r0, [r1]
 567:Core/Src/main.c ****   }
 1708              		.loc 1 567 7 is_stmt 1 view .LVU508
 567:Core/Src/main.c ****   }
 1709              		.loc 1 567 24 is_stmt 0 view .LVU509
 1710 002a 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 567:Core/Src/main.c ****   }
 1711              		.loc 1 567 16 view .LVU510
 1712 002c 074A     		ldr	r2, .L99+16
 1713 002e 1170     		strb	r1, [r2]
 1714 0030 F2E7     		b	.L93
 1715              	.L98:
 573:Core/Src/main.c ****   }
 1716              		.loc 1 573 7 is_stmt 1 view .LVU511
 573:Core/Src/main.c ****   }
 1717              		.loc 1 573 30 is_stmt 0 view .LVU512
 1718 0032 024B     		ldr	r3, .L99
 1719 0034 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 573:Core/Src/main.c ****   }
 1720              		.loc 1 573 22 view .LVU513
ARM GAS  /tmp/ccSF8koB.s 			page 53


 1721 0036 064B     		ldr	r3, .L99+20
 1722 0038 1A70     		strb	r2, [r3]
 575:Core/Src/main.c **** 
 1723              		.loc 1 575 1 view .LVU514
 1724 003a EFE7     		b	.L91
 1725              	.L100:
 1726              		.align	2
 1727              	.L99:
 1728 003c 00000000 		.word	RxData
 1729 0040 00000000 		.word	RxHeader
 1730 0044 00000000 		.word	hcan1
 1731 0048 00000000 		.word	.LANCHOR15
 1732 004c 00000000 		.word	.LANCHOR16
 1733 0050 00000000 		.word	.LANCHOR0
 1734              		.cfi_endproc
 1735              	.LFE226:
 1737              		.global	driveMode
 1738              		.global	command_torque_limit
 1739              		.global	commandedTorque
 1740              		.global	enableInverter
 1741              		.global	buzzerCounter
 1742              		.global	buzzerState
 1743              		.global	ready_to_drive
 1744              		.global	pedalAverage
 1745              		.global	brakeAverage
 1746              		.global	pedal1
 1747              		.global	pedal0
 1748              		.global	brake1
 1749              		.global	brake0
 1750              		.comm	adc_buf,8,4
 1751              		.global	brakeLight
 1752              		.global	switch_direction
 1753              		.global	switch_cooling
 1754              		.global	bmsFault
 1755              		.global	imdFault
 1756              		.comm	filter1,40,4
 1757              		.comm	filter0,40,4
 1758              		.comm	RxData,8,4
 1759              		.comm	RxHeader,28,4
 1760              		.comm	TxMailbox,4,4
 1761              		.comm	TxData,8,4
 1762              		.comm	TxHeader2,24,4
 1763              		.comm	TxHeader,24,4
 1764              		.comm	htim14,72,4
 1765              		.comm	htim13,72,4
 1766              		.comm	hcan1,40,4
 1767              		.comm	hdma_adc1,96,4
 1768              		.comm	hadc1,72,4
 1769              		.section	.bss.bmsFault,"aw",%nobits
 1770              		.set	.LANCHOR16,. + 0
 1773              	bmsFault:
 1774 0000 00       		.space	1
 1775              		.section	.bss.brake0,"aw",%nobits
 1776              		.align	1
 1777              		.set	.LANCHOR2,. + 0
 1780              	brake0:
 1781 0000 0000     		.space	2
ARM GAS  /tmp/ccSF8koB.s 			page 54


 1782              		.section	.bss.brake1,"aw",%nobits
 1783              		.align	1
 1784              		.set	.LANCHOR3,. + 0
 1787              	brake1:
 1788 0000 0000     		.space	2
 1789              		.section	.bss.brakeAverage,"aw",%nobits
 1790              		.align	1
 1791              		.set	.LANCHOR13,. + 0
 1794              	brakeAverage:
 1795 0000 0000     		.space	2
 1796              		.section	.bss.brakeLight,"aw",%nobits
 1797              		.set	.LANCHOR14,. + 0
 1800              	brakeLight:
 1801 0000 00       		.space	1
 1802              		.section	.bss.buzzerCounter,"aw",%nobits
 1803              		.set	.LANCHOR12,. + 0
 1806              	buzzerCounter:
 1807 0000 00       		.space	1
 1808              		.section	.bss.buzzerState,"aw",%nobits
 1809              		.set	.LANCHOR1,. + 0
 1812              	buzzerState:
 1813 0000 00       		.space	1
 1814              		.section	.bss.command_torque_limit,"aw",%nobits
 1815              		.align	1
 1818              	command_torque_limit:
 1819 0000 0000     		.space	2
 1820              		.section	.bss.commandedTorque,"aw",%nobits
 1821              		.align	1
 1822              		.set	.LANCHOR8,. + 0
 1825              	commandedTorque:
 1826 0000 0000     		.space	2
 1827              		.section	.bss.enableInverter,"aw",%nobits
 1828              		.set	.LANCHOR9,. + 0
 1831              	enableInverter:
 1832 0000 00       		.space	1
 1833              		.section	.bss.imdFault,"aw",%nobits
 1834              		.set	.LANCHOR15,. + 0
 1837              	imdFault:
 1838 0000 00       		.space	1
 1839              		.section	.bss.pedal0,"aw",%nobits
 1840              		.align	1
 1841              		.set	.LANCHOR4,. + 0
 1844              	pedal0:
 1845 0000 0000     		.space	2
 1846              		.section	.bss.pedalAverage,"aw",%nobits
 1847              		.align	1
 1848              		.set	.LANCHOR6,. + 0
 1851              	pedalAverage:
 1852 0000 0000     		.space	2
 1853              		.section	.bss.ready_to_drive,"aw",%nobits
 1854              		.set	.LANCHOR0,. + 0
 1857              	ready_to_drive:
 1858 0000 00       		.space	1
 1859              		.section	.bss.switch_cooling,"aw",%nobits
 1860              		.set	.LANCHOR10,. + 0
 1863              	switch_cooling:
 1864 0000 00       		.space	1
ARM GAS  /tmp/ccSF8koB.s 			page 55


 1865              		.section	.bss.switch_direction,"aw",%nobits
 1866              		.set	.LANCHOR11,. + 0
 1869              	switch_direction:
 1870 0000 00       		.space	1
 1871              		.section	.data.driveMode,"aw"
 1872              		.align	2
 1873              		.set	.LANCHOR7,. + 0
 1876              	driveMode:
 1877 0000 01000000 		.word	1
 1878              		.section	.data.pedal1,"aw"
 1879              		.align	1
 1880              		.set	.LANCHOR5,. + 0
 1883              	pedal1:
 1884 0000 0100     		.short	1
 1885              		.text
 1886              	.Letext0:
 1887              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1888              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1889              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1890              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1891              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1892              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1893              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1894              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1895              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1896              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1897              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1898              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1899              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1900              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1901              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1902              		.file 18 "<built-in>"
ARM GAS  /tmp/ccSF8koB.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccSF8koB.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccSF8koB.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccSF8koB.s:186    .text.MX_GPIO_Init:00000000000000c0 $d
     /tmp/ccSF8koB.s:193    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccSF8koB.s:199    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccSF8koB.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccSF8koB.s:253    .text.mapValue:0000000000000000 $t
     /tmp/ccSF8koB.s:260    .text.mapValue:0000000000000000 mapValue
     /tmp/ccSF8koB.s:300    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccSF8koB.s:307    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccSF8koB.s:340    .text.HAL_GPIO_EXTI_Callback:0000000000000018 $d
     /tmp/ccSF8koB.s:346    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccSF8koB.s:353    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccSF8koB.s:391    .text.HAL_ADC_ConvCpltCallback:000000000000001c $d
                            *COM*:0000000000000008 adc_buf
     /tmp/ccSF8koB.s:400    .text.adc_average:0000000000000000 $t
     /tmp/ccSF8koB.s:407    .text.adc_average:0000000000000000 adc_average
     /tmp/ccSF8koB.s:429    .text.getCommandedTorque:0000000000000000 $t
     /tmp/ccSF8koB.s:436    .text.getCommandedTorque:0000000000000000 getCommandedTorque
     /tmp/ccSF8koB.s:553    .text.getCommandedTorque:0000000000000088 $d
     /tmp/ccSF8koB.s:562    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccSF8koB.s:569    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccSF8koB.s:827    .text.HAL_TIM_PeriodElapsedCallback:0000000000000130 $d
                            *COM*:0000000000000048 htim13
                            *COM*:0000000000000048 htim14
                            *COM*:0000000000000008 TxData
                            *COM*:0000000000000004 TxMailbox
                            *COM*:0000000000000018 TxHeader2
                            *COM*:0000000000000028 hcan1
                            *COM*:0000000000000018 TxHeader
     /tmp/ccSF8koB.s:855    .text.Error_Handler:0000000000000000 $t
     /tmp/ccSF8koB.s:862    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccSF8koB.s:894    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccSF8koB.s:900    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccSF8koB.s:1046   .text.MX_CAN1_Init:000000000000007c $d
                            *COM*:0000000000000028 filter0
                            *COM*:0000000000000028 filter1
     /tmp/ccSF8koB.s:1054   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccSF8koB.s:1060   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccSF8koB.s:1228   .text.MX_ADC1_Init:00000000000000a4 $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccSF8koB.s:1235   .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/ccSF8koB.s:1241   .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/ccSF8koB.s:1290   .text.MX_TIM14_Init:0000000000000028 $d
     /tmp/ccSF8koB.s:1296   .text.MX_TIM13_Init:0000000000000000 $t
     /tmp/ccSF8koB.s:1302   .text.MX_TIM13_Init:0000000000000000 MX_TIM13_Init
     /tmp/ccSF8koB.s:1351   .text.MX_TIM13_Init:0000000000000028 $d
     /tmp/ccSF8koB.s:1357   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccSF8koB.s:1364   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccSF8koB.s:1515   .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccSF8koB.s:1521   .text.main:0000000000000000 $t
     /tmp/ccSF8koB.s:1528   .text.main:0000000000000000 main
     /tmp/ccSF8koB.s:1638   .text.main:0000000000000070 $d
     /tmp/ccSF8koB.s:1649   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccSF8koB.s:1656   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
ARM GAS  /tmp/ccSF8koB.s 			page 57


     /tmp/ccSF8koB.s:1728   .text.HAL_CAN_RxFifo0MsgPendingCallback:000000000000003c $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
     /tmp/ccSF8koB.s:1876   .data.driveMode:0000000000000000 driveMode
     /tmp/ccSF8koB.s:1818   .bss.command_torque_limit:0000000000000000 command_torque_limit
     /tmp/ccSF8koB.s:1825   .bss.commandedTorque:0000000000000000 commandedTorque
     /tmp/ccSF8koB.s:1831   .bss.enableInverter:0000000000000000 enableInverter
     /tmp/ccSF8koB.s:1806   .bss.buzzerCounter:0000000000000000 buzzerCounter
     /tmp/ccSF8koB.s:1812   .bss.buzzerState:0000000000000000 buzzerState
     /tmp/ccSF8koB.s:1857   .bss.ready_to_drive:0000000000000000 ready_to_drive
     /tmp/ccSF8koB.s:1851   .bss.pedalAverage:0000000000000000 pedalAverage
     /tmp/ccSF8koB.s:1794   .bss.brakeAverage:0000000000000000 brakeAverage
     /tmp/ccSF8koB.s:1883   .data.pedal1:0000000000000000 pedal1
     /tmp/ccSF8koB.s:1844   .bss.pedal0:0000000000000000 pedal0
     /tmp/ccSF8koB.s:1787   .bss.brake1:0000000000000000 brake1
     /tmp/ccSF8koB.s:1780   .bss.brake0:0000000000000000 brake0
     /tmp/ccSF8koB.s:1800   .bss.brakeLight:0000000000000000 brakeLight
     /tmp/ccSF8koB.s:1869   .bss.switch_direction:0000000000000000 switch_direction
     /tmp/ccSF8koB.s:1863   .bss.switch_cooling:0000000000000000 switch_cooling
     /tmp/ccSF8koB.s:1773   .bss.bmsFault:0000000000000000 bmsFault
     /tmp/ccSF8koB.s:1837   .bss.imdFault:0000000000000000 imdFault
                            *COM*:0000000000000060 hdma_adc1
     /tmp/ccSF8koB.s:1774   .bss.bmsFault:0000000000000000 $d
     /tmp/ccSF8koB.s:1776   .bss.brake0:0000000000000000 $d
     /tmp/ccSF8koB.s:1783   .bss.brake1:0000000000000000 $d
     /tmp/ccSF8koB.s:1790   .bss.brakeAverage:0000000000000000 $d
     /tmp/ccSF8koB.s:1801   .bss.brakeLight:0000000000000000 $d
     /tmp/ccSF8koB.s:1807   .bss.buzzerCounter:0000000000000000 $d
     /tmp/ccSF8koB.s:1813   .bss.buzzerState:0000000000000000 $d
     /tmp/ccSF8koB.s:1815   .bss.command_torque_limit:0000000000000000 $d
     /tmp/ccSF8koB.s:1821   .bss.commandedTorque:0000000000000000 $d
     /tmp/ccSF8koB.s:1832   .bss.enableInverter:0000000000000000 $d
     /tmp/ccSF8koB.s:1838   .bss.imdFault:0000000000000000 $d
     /tmp/ccSF8koB.s:1840   .bss.pedal0:0000000000000000 $d
     /tmp/ccSF8koB.s:1847   .bss.pedalAverage:0000000000000000 $d
     /tmp/ccSF8koB.s:1858   .bss.ready_to_drive:0000000000000000 $d
     /tmp/ccSF8koB.s:1864   .bss.switch_cooling:0000000000000000 $d
     /tmp/ccSF8koB.s:1870   .bss.switch_direction:0000000000000000 $d
     /tmp/ccSF8koB.s:1872   .data.driveMode:0000000000000000 $d
     /tmp/ccSF8koB.s:1879   .data.pedal1:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_CAN_AddTxMessage
HAL_GPIO_ReadPin
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
ARM GAS  /tmp/ccSF8koB.s 			page 58


HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start_IT
HAL_ADC_Start_DMA
HAL_CAN_GetRxMessage
