ARM GAS  /tmp/ccfyujML.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB223:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** /* USER CODE END PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccfyujML.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** // analog buffer
  35:Core/Src/main.c **** #define ADC_BUF_LEN 4086
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** // precharge
  38:Core/Src/main.c **** #define PRECHARGE_COEFFICIENT       0.9		      // 90% complete with precharge so it's probably safe
  39:Core/Src/main.c **** #define NUM_COMMAND_MSG             10
  40:Core/Src/main.c **** #define NUM_VOLTAGE_CHECKS          500         // since we're checking at 10ms Interrupts, 500 wou
  41:Core/Src/main.c ****                                                 // precharge should be done in less than 2 seconds.
  42:Core/Src/main.c **** /* USER CODE END PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PM */
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  50:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** TIM_HandleTypeDef htim13;
  55:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE BEGIN PV */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** // counters for Rinehart message sending in precharge
  60:Core/Src/main.c **** uint8_t rinehart_send_command_count = 0;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** // inputs
  63:Core/Src/main.c **** uint32_t rinehartVoltage = 0;                 // read from CAN
  64:Core/Src/main.c **** uint32_t emusVoltage = 0;					            // read from CAN
  65:Core/Src/main.c **** int vicoreTemp = 0;					                  // read from DMA, vicore temp
  66:Core/Src/main.c **** int DCDCEnable = 0;                           // dc-dc enable (0 = disabled, 1 = enabled)
  67:Core/Src/main.c **** int RTDButtonPressed = 0;                     // read this from CAN, if it's 1 we can finish precha
  68:Core/Src/main.c **** uint32_t adc_buf[ADC_BUF_LEN];				        // adc read buffer
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** // output
  71:Core/Src/main.c **** int DCDCFault = 0;                            // the dc-dc fault indicator (0 = no fault, 1 = fault
  72:Core/Src/main.c **** int readyToDrive = 0;					                // the car is ready to drive! (0 = not ready, 1 = ready)
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** // precharge states
  75:Core/Src/main.c **** enum prechargeStates
  76:Core/Src/main.c **** {
  77:Core/Src/main.c **** 	PRECHARGE_OFF,
  78:Core/Src/main.c **** 	PRECHARGE_ON,
  79:Core/Src/main.c **** 	PRECHARGE_DONE,
  80:Core/Src/main.c **** 	PRECHARGE_ERROR
  81:Core/Src/main.c **** };
  82:Core/Src/main.c **** uint8_t prechargeState = PRECHARGE_OFF;			  // set initial precharge state to OFF
  83:Core/Src/main.c **** uint8_t lastPrechargeState = PRECHARGE_OFF;
  84:Core/Src/main.c **** uint8_t voltageCheckCount = 0;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** // CAN transmit 
  87:Core/Src/main.c **** uint32_t TxMailbox; 							            // CAN Bus Mail box variable
  88:Core/Src/main.c **** CAN_TxHeaderTypeDef txHeader0; 					      // CAN Bus Transmit Header BASE
ARM GAS  /tmp/ccfyujML.s 			page 3


  89:Core/Src/main.c **** CAN_TxHeaderTypeDef txHeader1; 					      // CAN Bus Transmit Header DATA
  90:Core/Src/main.c **** CAN_TxHeaderTypeDef txHeader2; 					      // CAN Bus Transmit Header DATA
  91:Core/Src/main.c **** uint8_t TxData[8];                            // CAN transmit buffer
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** // CAN recive
  94:Core/Src/main.c **** CAN_RxHeaderTypeDef rxHeader; 					      // CAN Bus Receive Header
  95:Core/Src/main.c **** uint8_t canRX[8] = {0, 0, 0, 0, 0, 0, 0, 0}; 	// CAN Bus Receive Buffer
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** CAN_FilterTypeDef canFilter0; 					      // CAN Bus Filter for BMS
  98:Core/Src/main.c **** CAN_FilterTypeDef canFilter1;                 // CAN Bus Filter for Rinehart
  99:Core/Src/main.c **** /* USER CODE END PV */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 102:Core/Src/main.c **** void SystemClock_Config(void);
 103:Core/Src/main.c **** static void MX_GPIO_Init(void);
 104:Core/Src/main.c **** static void MX_CAN1_Init(void);
 105:Core/Src/main.c **** static void MX_DMA_Init(void);
 106:Core/Src/main.c **** static void MX_ADC1_Init(void);
 107:Core/Src/main.c **** static void MX_TIM14_Init(void);
 108:Core/Src/main.c **** static void MX_TIM13_Init(void);
 109:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 110:Core/Src/main.c **** void prechargeControl();
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* USER CODE END PFP */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 115:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 116:Core/Src/main.c **** /* USER CODE END 0 */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c **** /**
 119:Core/Src/main.c ****   * @brief  The application entry point.
 120:Core/Src/main.c ****   * @retval int
 121:Core/Src/main.c ****   */
 122:Core/Src/main.c **** int main(void)
 123:Core/Src/main.c **** {
 124:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE END 1 */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 131:Core/Src/main.c ****   HAL_Init();
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 134:Core/Src/main.c ****   /* USER CODE END Init */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* Configure the system clock */
 137:Core/Src/main.c ****   SystemClock_Config();
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 140:Core/Src/main.c ****   /* USER CODE END SysInit */
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /* Initialize all configured peripherals */
 143:Core/Src/main.c ****   MX_GPIO_Init();
 144:Core/Src/main.c ****   MX_CAN1_Init();
 145:Core/Src/main.c ****   MX_DMA_Init();
ARM GAS  /tmp/ccfyujML.s 			page 4


 146:Core/Src/main.c ****   MX_ADC1_Init();
 147:Core/Src/main.c ****   MX_TIM14_Init();
 148:Core/Src/main.c ****   MX_TIM13_Init();
 149:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   // init the CAN mailbox for BASE
 152:Core/Src/main.c ****   txHeader0.DLC = 8; // Number of bites to be transmitted max- 8
 153:Core/Src/main.c ****   txHeader0.IDE = CAN_ID_STD;
 154:Core/Src/main.c ****   txHeader0.RTR = CAN_RTR_DATA;
 155:Core/Src/main.c ****   txHeader0.StdId = 0x086;
 156:Core/Src/main.c ****   txHeader0.ExtId = 0;
 157:Core/Src/main.c ****   txHeader0.TransmitGlobalTime = DISABLE;
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   // init the CAN mailbox for DATA
 160:Core/Src/main.c ****   txHeader1.DLC = 8; // Number of bites to be transmitted max- 8
 161:Core/Src/main.c ****   txHeader1.IDE = CAN_ID_STD;
 162:Core/Src/main.c ****   txHeader1.RTR = CAN_RTR_DATA;
 163:Core/Src/main.c ****   txHeader1.StdId = 0x087;
 164:Core/Src/main.c ****   txHeader1.ExtId = 0;
 165:Core/Src/main.c ****   txHeader1.TransmitGlobalTime = DISABLE;
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   // header for rinehart (Parameter Command Message)
 168:Core/Src/main.c ****   txHeader2.DLC = 8; // Number of bites to be transmitted max- 8
 169:Core/Src/main.c ****   txHeader2.IDE = CAN_ID_STD;
 170:Core/Src/main.c ****   txHeader2.RTR = CAN_RTR_DATA;
 171:Core/Src/main.c ****   txHeader2.StdId = 0x0C1;
 172:Core/Src/main.c ****   txHeader2.ExtId = 0;
 173:Core/Src/main.c ****   txHeader2.TransmitGlobalTime = DISABLE;
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** 	HAL_CAN_Start(&hcan1); // Initialize CAN Bus
 176:Core/Src/main.c **** 	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Inte
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   // start timers
 179:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 180:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** 	// start ADC DMA
 183:Core/Src/main.c **** 	HAL_ADC_Start_DMA(&hadc1, adc_buf, ADC_BUF_LEN);
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* USER CODE END 2 */
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /* Infinite loop */
 188:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 189:Core/Src/main.c ****   while (1)
 190:Core/Src/main.c ****   {
 191:Core/Src/main.c ****     /* USER CODE END WHILE */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 194:Core/Src/main.c ****   }
 195:Core/Src/main.c ****   /* USER CODE END 3 */
 196:Core/Src/main.c **** }
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** /**
 199:Core/Src/main.c ****   * @brief System Clock Configuration
 200:Core/Src/main.c ****   * @retval None
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c **** void SystemClock_Config(void)
ARM GAS  /tmp/ccfyujML.s 			page 5


 203:Core/Src/main.c **** {
 204:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 205:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 210:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 211:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 212:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 216:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 224:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 225:Core/Src/main.c ****   {
 226:Core/Src/main.c ****     Error_Handler();
 227:Core/Src/main.c ****   }
 228:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 229:Core/Src/main.c ****   */
 230:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 231:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 232:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 233:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 238:Core/Src/main.c ****   {
 239:Core/Src/main.c ****     Error_Handler();
 240:Core/Src/main.c ****   }
 241:Core/Src/main.c **** }
 242:Core/Src/main.c **** 
 243:Core/Src/main.c **** /**
 244:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 245:Core/Src/main.c ****   * @param None
 246:Core/Src/main.c ****   * @retval None
 247:Core/Src/main.c ****   */
 248:Core/Src/main.c **** static void MX_ADC1_Init(void)
 249:Core/Src/main.c **** {
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 252:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 257:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 258:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 259:Core/Src/main.c ****   */
ARM GAS  /tmp/ccfyujML.s 			page 6


 260:Core/Src/main.c ****   hadc1.Instance = ADC1;
 261:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 262:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 263:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 264:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 265:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 266:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 267:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 268:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 269:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 270:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 271:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 272:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 277:Core/Src/main.c ****   */
 278:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
 279:Core/Src/main.c ****   sConfig.Rank = 1;
 280:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 281:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 282:Core/Src/main.c ****   {
 283:Core/Src/main.c ****     Error_Handler();
 284:Core/Src/main.c ****   }
 285:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 286:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 287:Core/Src/main.c **** 
 288:Core/Src/main.c **** }
 289:Core/Src/main.c **** 
 290:Core/Src/main.c **** /**
 291:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 292:Core/Src/main.c ****   * @param None
 293:Core/Src/main.c ****   * @retval None
 294:Core/Src/main.c ****   */
 295:Core/Src/main.c **** static void MX_CAN1_Init(void)
 296:Core/Src/main.c **** {
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 299:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 302:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 303:Core/Src/main.c ****   hcan1.Instance = CAN1;
 304:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 305:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 306:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 307:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 308:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 309:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 310:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 311:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 312:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 313:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 314:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 315:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 316:Core/Src/main.c ****   {
ARM GAS  /tmp/ccfyujML.s 			page 7


 317:Core/Src/main.c ****     Error_Handler();
 318:Core/Src/main.c ****   }
 319:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   // init the CAN filter for BMS messages
 322:Core/Src/main.c ****     canFilter0.FilterIdHigh = 0x001 << 5;   // BMS IDs: 0 - 0x72
 323:Core/Src/main.c ****   	canFilter0.FilterIdLow = 0x000;
 324:Core/Src/main.c ****     canFilter0.FilterMaskIdHigh = 0x001 << 5;
 325:Core/Src/main.c ****   	canFilter0.FilterMaskIdLow = 0x000;
 326:Core/Src/main.c ****     canFilter0.FilterBank = 0;
 327:Core/Src/main.c ****   	canFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 328:Core/Src/main.c ****   	canFilter0.FilterFIFOAssignment = CAN_RX_FIFO0;
 329:Core/Src/main.c ****   	canFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 330:Core/Src/main.c ****   	canFilter0.FilterActivation = ENABLE;
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****     HAL_CAN_ConfigFilter(&hcan1, &canFilter0);
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****     // init the CAN filter for Rinehart messages
 335:Core/Src/main.c ****     canFilter1.FilterIdHigh = 0x0A7 << 5;      // Rinehart IDs: 0xA0 - 0xB1
 336:Core/Src/main.c ****   	canFilter1.FilterIdLow = 0x00;
 337:Core/Src/main.c ****     canFilter1.FilterMaskIdHigh = 0x0A7 << 5;
 338:Core/Src/main.c ****   	canFilter1.FilterMaskIdLow = 0x000;
 339:Core/Src/main.c ****     canFilter1.FilterBank = 1;
 340:Core/Src/main.c ****   	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 341:Core/Src/main.c ****   	canFilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 342:Core/Src/main.c ****   	canFilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 343:Core/Src/main.c ****   	canFilter1.FilterActivation = ENABLE;
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****     HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 348:Core/Src/main.c **** 
 349:Core/Src/main.c **** }
 350:Core/Src/main.c **** 
 351:Core/Src/main.c **** /**
 352:Core/Src/main.c ****   * @brief TIM13 Initialization Function
 353:Core/Src/main.c ****   * @param None
 354:Core/Src/main.c ****   * @retval None
 355:Core/Src/main.c ****   */
 356:Core/Src/main.c **** static void MX_TIM13_Init(void)
 357:Core/Src/main.c **** {
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 0 */
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /* USER CODE END TIM13_Init 0 */
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 1 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE END TIM13_Init 1 */
 366:Core/Src/main.c ****   htim13.Instance = TIM13;
 367:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 368:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 369:Core/Src/main.c ****   htim13.Init.Period = 1000-1;
 370:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 371:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 372:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 373:Core/Src/main.c ****   {
ARM GAS  /tmp/ccfyujML.s 			page 8


 374:Core/Src/main.c ****     Error_Handler();
 375:Core/Src/main.c ****   }
 376:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 2 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE END TIM13_Init 2 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** }
 381:Core/Src/main.c **** 
 382:Core/Src/main.c **** /**
 383:Core/Src/main.c ****   * @brief TIM14 Initialization Function
 384:Core/Src/main.c ****   * @param None
 385:Core/Src/main.c ****   * @retval None
 386:Core/Src/main.c ****   */
 387:Core/Src/main.c **** static void MX_TIM14_Init(void)
 388:Core/Src/main.c **** {
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
 397:Core/Src/main.c ****   htim14.Instance = TIM14;
 398:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 399:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 400:Core/Src/main.c ****   htim14.Init.Period = 500-1;
 401:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 402:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 403:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 404:Core/Src/main.c ****   {
 405:Core/Src/main.c ****     Error_Handler();
 406:Core/Src/main.c ****   }
 407:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
 410:Core/Src/main.c **** 
 411:Core/Src/main.c **** }
 412:Core/Src/main.c **** 
 413:Core/Src/main.c **** /**
 414:Core/Src/main.c ****   * Enable DMA controller clock
 415:Core/Src/main.c ****   */
 416:Core/Src/main.c **** static void MX_DMA_Init(void)
 417:Core/Src/main.c **** {
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /* DMA controller clock enable */
 420:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****   /* DMA interrupt init */
 423:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 424:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 425:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 426:Core/Src/main.c **** 
 427:Core/Src/main.c **** }
 428:Core/Src/main.c **** 
 429:Core/Src/main.c **** /**
 430:Core/Src/main.c ****   * @brief GPIO Initialization Function
ARM GAS  /tmp/ccfyujML.s 			page 9


 431:Core/Src/main.c ****   * @param None
 432:Core/Src/main.c ****   * @retval None
 433:Core/Src/main.c ****   */
 434:Core/Src/main.c **** static void MX_GPIO_Init(void)
 435:Core/Src/main.c **** {
  28              		.loc 1 435 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 56
 436:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 436 3 view .LVU1
  44              		.loc 1 436 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0394     		str	r4, [sp, #12]
  47 0008 0494     		str	r4, [sp, #16]
  48 000a 0594     		str	r4, [sp, #20]
  49 000c 0694     		str	r4, [sp, #24]
  50 000e 0794     		str	r4, [sp, #28]
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 439:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 439 3 is_stmt 1 view .LVU3
  52              	.LBB4:
  53              		.loc 1 439 3 view .LVU4
  54 0010 0194     		str	r4, [sp, #4]
  55              		.loc 1 439 3 view .LVU5
  56 0012 1B4B     		ldr	r3, .L3
  57 0014 1A6B     		ldr	r2, [r3, #48]
  58 0016 42F08002 		orr	r2, r2, #128
  59 001a 1A63     		str	r2, [r3, #48]
  60              		.loc 1 439 3 view .LVU6
  61 001c 1A6B     		ldr	r2, [r3, #48]
  62 001e 02F08002 		and	r2, r2, #128
  63 0022 0192     		str	r2, [sp, #4]
  64              		.loc 1 439 3 view .LVU7
  65 0024 019A     		ldr	r2, [sp, #4]
  66              	.LBE4:
  67              		.loc 1 439 3 view .LVU8
 440:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  68              		.loc 1 440 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 440 3 view .LVU10
  71 0026 0294     		str	r4, [sp, #8]
  72              		.loc 1 440 3 view .LVU11
  73 0028 1A6B     		ldr	r2, [r3, #48]
  74 002a 42F00102 		orr	r2, r2, #1
ARM GAS  /tmp/ccfyujML.s 			page 10


  75 002e 1A63     		str	r2, [r3, #48]
  76              		.loc 1 440 3 view .LVU12
  77 0030 1B6B     		ldr	r3, [r3, #48]
  78 0032 03F00103 		and	r3, r3, #1
  79 0036 0293     		str	r3, [sp, #8]
  80              		.loc 1 440 3 view .LVU13
  81 0038 029B     		ldr	r3, [sp, #8]
  82              	.LBE5:
  83              		.loc 1 440 3 view .LVU14
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 443:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
  84              		.loc 1 443 3 view .LVU15
  85 003a 124D     		ldr	r5, .L3+4
  86 003c 2246     		mov	r2, r4
  87 003e 0321     		movs	r1, #3
  88 0040 2846     		mov	r0, r5
  89 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  90              	.LVL0:
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /*Configure GPIO pin : PA0 */
 446:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
  91              		.loc 1 446 3 view .LVU16
  92              		.loc 1 446 23 is_stmt 0 view .LVU17
  93 0046 0126     		movs	r6, #1
  94 0048 0396     		str	r6, [sp, #12]
 447:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  95              		.loc 1 447 3 is_stmt 1 view .LVU18
  96              		.loc 1 447 24 is_stmt 0 view .LVU19
  97 004a 0496     		str	r6, [sp, #16]
 448:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  98              		.loc 1 448 3 is_stmt 1 view .LVU20
  99              		.loc 1 448 24 is_stmt 0 view .LVU21
 100 004c 0227     		movs	r7, #2
 101 004e 0597     		str	r7, [sp, #20]
 449:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 102              		.loc 1 449 3 is_stmt 1 view .LVU22
 103              		.loc 1 449 25 is_stmt 0 view .LVU23
 104 0050 0694     		str	r4, [sp, #24]
 450:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 105              		.loc 1 450 3 is_stmt 1 view .LVU24
 106 0052 03A9     		add	r1, sp, #12
 107 0054 2846     		mov	r0, r5
 108 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 109              	.LVL1:
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /*Configure GPIO pin : PA1 */
 453:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1;
 110              		.loc 1 453 3 view .LVU25
 111              		.loc 1 453 23 is_stmt 0 view .LVU26
 112 005a 0397     		str	r7, [sp, #12]
 454:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 113              		.loc 1 454 3 is_stmt 1 view .LVU27
 114              		.loc 1 454 24 is_stmt 0 view .LVU28
 115 005c 0496     		str	r6, [sp, #16]
 455:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 116              		.loc 1 455 3 is_stmt 1 view .LVU29
ARM GAS  /tmp/ccfyujML.s 			page 11


 117              		.loc 1 455 24 is_stmt 0 view .LVU30
 118 005e 0596     		str	r6, [sp, #20]
 456:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 119              		.loc 1 456 3 is_stmt 1 view .LVU31
 120              		.loc 1 456 25 is_stmt 0 view .LVU32
 121 0060 0694     		str	r4, [sp, #24]
 457:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 122              		.loc 1 457 3 is_stmt 1 view .LVU33
 123 0062 03A9     		add	r1, sp, #12
 124 0064 2846     		mov	r0, r5
 125 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 126              	.LVL2:
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   /*Configure GPIO pin : PA2 */
 460:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 127              		.loc 1 460 3 view .LVU34
 128              		.loc 1 460 23 is_stmt 0 view .LVU35
 129 006a 0423     		movs	r3, #4
 130 006c 0393     		str	r3, [sp, #12]
 461:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 131              		.loc 1 461 3 is_stmt 1 view .LVU36
 132              		.loc 1 461 24 is_stmt 0 view .LVU37
 133 006e 0494     		str	r4, [sp, #16]
 462:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 134              		.loc 1 462 3 is_stmt 1 view .LVU38
 135              		.loc 1 462 24 is_stmt 0 view .LVU39
 136 0070 0594     		str	r4, [sp, #20]
 463:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 137              		.loc 1 463 3 is_stmt 1 view .LVU40
 138 0072 03A9     		add	r1, sp, #12
 139 0074 2846     		mov	r0, r5
 140 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL3:
 464:Core/Src/main.c **** 
 465:Core/Src/main.c **** }
 142              		.loc 1 465 1 is_stmt 0 view .LVU41
 143 007a 09B0     		add	sp, sp, #36
 144              	.LCFI2:
 145              		.cfi_def_cfa_offset 20
 146              		@ sp needed
 147 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 148              	.L4:
 149 007e 00BF     		.align	2
 150              	.L3:
 151 0080 00380240 		.word	1073887232
 152 0084 00000240 		.word	1073872896
 153              		.cfi_endproc
 154              	.LFE223:
 156              		.section	.text.MX_DMA_Init,"ax",%progbits
 157              		.align	1
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu fpv4-sp-d16
 163              	MX_DMA_Init:
 164              	.LFB222:
 417:Core/Src/main.c **** 
ARM GAS  /tmp/ccfyujML.s 			page 12


 165              		.loc 1 417 1 is_stmt 1 view -0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 8
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169 0000 00B5     		push	{lr}
 170              	.LCFI3:
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 14, -4
 173 0002 83B0     		sub	sp, sp, #12
 174              	.LCFI4:
 175              		.cfi_def_cfa_offset 16
 420:Core/Src/main.c **** 
 176              		.loc 1 420 3 view .LVU43
 177              	.LBB6:
 420:Core/Src/main.c **** 
 178              		.loc 1 420 3 view .LVU44
 179 0004 0021     		movs	r1, #0
 180 0006 0191     		str	r1, [sp, #4]
 420:Core/Src/main.c **** 
 181              		.loc 1 420 3 view .LVU45
 182 0008 094B     		ldr	r3, .L7
 183 000a 1A6B     		ldr	r2, [r3, #48]
 184 000c 42F48002 		orr	r2, r2, #4194304
 185 0010 1A63     		str	r2, [r3, #48]
 420:Core/Src/main.c **** 
 186              		.loc 1 420 3 view .LVU46
 187 0012 1B6B     		ldr	r3, [r3, #48]
 188 0014 03F48003 		and	r3, r3, #4194304
 189 0018 0193     		str	r3, [sp, #4]
 420:Core/Src/main.c **** 
 190              		.loc 1 420 3 view .LVU47
 191 001a 019B     		ldr	r3, [sp, #4]
 192              	.LBE6:
 420:Core/Src/main.c **** 
 193              		.loc 1 420 3 view .LVU48
 424:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 194              		.loc 1 424 3 view .LVU49
 195 001c 0A46     		mov	r2, r1
 196 001e 3820     		movs	r0, #56
 197 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 198              	.LVL4:
 425:Core/Src/main.c **** 
 199              		.loc 1 425 3 view .LVU50
 200 0024 3820     		movs	r0, #56
 201 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 202              	.LVL5:
 427:Core/Src/main.c **** 
 203              		.loc 1 427 1 is_stmt 0 view .LVU51
 204 002a 03B0     		add	sp, sp, #12
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 4
 207              		@ sp needed
 208 002c 5DF804FB 		ldr	pc, [sp], #4
 209              	.L8:
 210              		.align	2
 211              	.L7:
 212 0030 00380240 		.word	1073887232
ARM GAS  /tmp/ccfyujML.s 			page 13


 213              		.cfi_endproc
 214              	.LFE222:
 216              		.global	__aeabi_ui2d
 217              		.global	__aeabi_dmul
 218              		.global	__aeabi_dcmpgt
 219              		.global	__aeabi_dsub
 220              		.global	__aeabi_dcmple
 221              		.section	.text.prechargeControl,"ax",%progbits
 222              		.align	1
 223              		.global	prechargeControl
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 227              		.fpu fpv4-sp-d16
 229              	prechargeControl:
 230              	.LFB225:
 466:Core/Src/main.c **** 
 467:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c **** // *** functions *** //
 470:Core/Src/main.c **** 
 471:Core/Src/main.c **** 
 472:Core/Src/main.c **** /**
 473:Core/Src/main.c ****  * overwriting the weak function defined in the includes which is the ISR for the CAN interrupt
 474:Core/Src/main.c ****  */
 475:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
 476:Core/Src/main.c **** {
 477:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 478:Core/Src/main.c ****     Error_Handler();
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   // get rinehart bus voltage
 481:Core/Src/main.c ****   if (rxHeader.StdId == 0x0A7)
 482:Core/Src/main.c ****   {
 483:Core/Src/main.c ****     // rinehart voltage is spread across the first 2 bytes
 484:Core/Src/main.c **** 	  int rine1 = canRX[0];
 485:Core/Src/main.c ****     int rine2 = canRX[1];
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****     // combine the first two bytes and assign that to the rinehart voltage
 488:Core/Src/main.c ****     rinehartVoltage = (rine1 << 8) | rine2;
 489:Core/Src/main.c ****   }
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   // get BMS total voltages
 492:Core/Src/main.c ****   if (rxHeader.StdId == 0x001)
 493:Core/Src/main.c ****   {
 494:Core/Src/main.c ****     uint8_t volt1 = canRX[4] >> 8 & 0xFF;
 495:Core/Src/main.c ****     uint8_t volt2 = canRX[3] & 0xFF;
 496:Core/Src/main.c ****     uint8_t volt3 = canRX[6] >> 24;
 497:Core/Src/main.c ****     uint8_t volt4 = canRX[5] >> 16 & 0xFF;
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****     uint16_t emus1 = (volt2 << 8) | volt1;
 500:Core/Src/main.c ****     uint16_t emus2 = (volt4 << 8) | volt3;
 501:Core/Src/main.c ****     emusVoltage = volt3 << 24 | (((volt4 << 16) | ((volt1 << 8)) | (volt2)));
 502:Core/Src/main.c ****     emusVoltage = emusVoltage / 10; // scale down to rinehart *10 scaler
 503:Core/Src/main.c ****   }
 504:Core/Src/main.c **** }
 505:Core/Src/main.c **** 
 506:Core/Src/main.c **** 
ARM GAS  /tmp/ccfyujML.s 			page 14


 507:Core/Src/main.c **** /**
 508:Core/Src/main.c ****  * @brief 
 509:Core/Src/main.c ****  * 
 510:Core/Src/main.c ****  */
 511:Core/Src/main.c **** void prechargeControl()
 512:Core/Src/main.c **** {
 231              		.loc 1 512 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235 0000 38B5     		push	{r3, r4, r5, lr}
 236              	.LCFI6:
 237              		.cfi_def_cfa_offset 16
 238              		.cfi_offset 3, -16
 239              		.cfi_offset 4, -12
 240              		.cfi_offset 5, -8
 241              		.cfi_offset 14, -4
 513:Core/Src/main.c **** 
 514:Core/Src/main.c ****   // NOTE: Weird thing about Rinehart 0x0A7 message: 
 515:Core/Src/main.c ****   //      Sometimes it sends a 0 byte length data. Make sure we're only reading
 516:Core/Src/main.c ****   //      The value if the DLC is 8
 517:Core/Src/main.c **** 	switch (prechargeState)
 242              		.loc 1 517 2 view .LVU53
 243 0002 634B     		ldr	r3, .L28+8
 244 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 245 0006 032B     		cmp	r3, #3
 246 0008 00F2B780 		bhi	.L10
 247 000c DFE803F0 		tbb	[pc, r3]
 248              	.L12:
 249 0010 02       		.byte	(.L15-.L12)/2
 250 0011 23       		.byte	(.L14-.L12)/2
 251 0012 5B       		.byte	(.L13-.L12)/2
 252 0013 97       		.byte	(.L11-.L12)/2
 253              		.p2align 1
 254              	.L15:
 518:Core/Src/main.c **** 	{
 519:Core/Src/main.c **** 		case (PRECHARGE_OFF):
 520:Core/Src/main.c **** 			// set ready to drive to false
 521:Core/Src/main.c **** 			readyToDrive = 0;
 255              		.loc 1 521 4 view .LVU54
 256              		.loc 1 521 17 is_stmt 0 view .LVU55
 257 0014 5F4A     		ldr	r2, .L28+12
 258 0016 0021     		movs	r1, #0
 259 0018 1160     		str	r1, [r2]
 522:Core/Src/main.c **** 
 523:Core/Src/main.c ****       // this state sends a message to rinehart
 524:Core/Src/main.c ****       if (lastPrechargeState != prechargeState)
 260              		.loc 1 524 7 is_stmt 1 view .LVU56
 261              		.loc 1 524 30 is_stmt 0 view .LVU57
 262 001a 5F4A     		ldr	r2, .L28+16
 263 001c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 264              		.loc 1 524 10 view .LVU58
 265 001e 9342     		cmp	r3, r2
 266 0020 03D1     		bne	.L25
 267              	.L16:
 525:Core/Src/main.c ****       {
 526:Core/Src/main.c ****         // message is sent to rinehart to turn everything off
ARM GAS  /tmp/ccfyujML.s 			page 15


 527:Core/Src/main.c ****         TxData[0] = 1; // parameter address. LSB
 528:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 529:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 530:Core/Src/main.c ****         TxData[3] = 0; // N/A
 531:Core/Src/main.c ****         TxData[4] = 0; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 532:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 533:Core/Src/main.c ****         TxData[6] = 0; // N/A
 534:Core/Src/main.c ****         TxData[7] = 0; // N/A
 535:Core/Src/main.c ****         // send message
 536:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &txHeader2, TxData, &TxMailbox);
 537:Core/Src/main.c ****         
 538:Core/Src/main.c ****         // update last precharge state
 539:Core/Src/main.c ****         lastPrechargeState = prechargeState;
 540:Core/Src/main.c ****       }
 541:Core/Src/main.c **** 
 542:Core/Src/main.c ****       // move to precharge on
 543:Core/Src/main.c ****       prechargeState = PRECHARGE_ON;
 268              		.loc 1 543 7 is_stmt 1 view .LVU59
 269              		.loc 1 543 22 is_stmt 0 view .LVU60
 270 0022 5B4B     		ldr	r3, .L28+8
 271 0024 0122     		movs	r2, #1
 272 0026 1A70     		strb	r2, [r3]
 544:Core/Src/main.c **** 
 545:Core/Src/main.c **** 		break;
 273              		.loc 1 545 3 is_stmt 1 view .LVU61
 274              	.L9:
 546:Core/Src/main.c **** 
 547:Core/Src/main.c **** 		case (PRECHARGE_ON):
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****       // not ready to drive yet
 550:Core/Src/main.c ****       readyToDrive = 0;
 551:Core/Src/main.c **** 
 552:Core/Src/main.c ****       // turn on precharge relay
 553:Core/Src/main.c ****       // this state sends a message to rinehart to turn 
 554:Core/Src/main.c ****       if (lastPrechargeState != prechargeState)
 555:Core/Src/main.c ****       {
 556:Core/Src/main.c ****         // message is sent to rinehart to turn on precharge relay
 557:Core/Src/main.c ****         // precharge relay is on relay 1 from Rinehart
 558:Core/Src/main.c ****         TxData[0] = 1; // parameter address. LSB
 559:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 560:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 561:Core/Src/main.c ****         TxData[3] = 0; // N/A
 562:Core/Src/main.c ****         TxData[4] = 1; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 563:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 564:Core/Src/main.c ****         TxData[6] = 0; // N/A
 565:Core/Src/main.c ****         TxData[7] = 0; // N/A
 566:Core/Src/main.c **** 
 567:Core/Src/main.c ****         // send message
 568:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &txHeader2, TxData, &TxMailbox);
 569:Core/Src/main.c ****         
 570:Core/Src/main.c ****         // update last precharge state
 571:Core/Src/main.c ****         lastPrechargeState = prechargeState;
 572:Core/Src/main.c ****       }
 573:Core/Src/main.c ****       
 574:Core/Src/main.c **** 			// ensure voltages are above correct values
 575:Core/Src/main.c **** 			if (rinehartVoltage > (emusVoltage * PRECHARGE_COEFFICIENT))
 576:Core/Src/main.c ****       {
ARM GAS  /tmp/ccfyujML.s 			page 16


 577:Core/Src/main.c ****         prechargeState = PRECHARGE_DONE;
 578:Core/Src/main.c ****       }
 579:Core/Src/main.c **** 
 580:Core/Src/main.c ****       // if we do this for too long, move to error state
 581:Core/Src/main.c ****       if (voltageCheckCount >= NUM_VOLTAGE_CHECKS)
 582:Core/Src/main.c ****       {
 583:Core/Src/main.c ****         prechargeState = PRECHARGE_ERROR;
 584:Core/Src/main.c ****       }
 585:Core/Src/main.c ****       
 586:Core/Src/main.c ****       // else
 587:Core/Src/main.c ****       // {
 588:Core/Src/main.c ****       //   voltageCheckCount++; // add to the counter. 
 589:Core/Src/main.c ****       // }
 590:Core/Src/main.c **** 		break;
 591:Core/Src/main.c **** 
 592:Core/Src/main.c **** 		case (PRECHARGE_DONE):
 593:Core/Src/main.c **** 			// now that precharge is complete we can drive the car
 594:Core/Src/main.c **** 			readyToDrive = 1;
 595:Core/Src/main.c **** 
 596:Core/Src/main.c ****       // this state sends a message to rinehart to turn 
 597:Core/Src/main.c ****       if (lastPrechargeState != prechargeState)
 598:Core/Src/main.c ****       {
 599:Core/Src/main.c ****         // message is sent to rinehart to turn everything on
 600:Core/Src/main.c ****         // Keep precharge relay on and turn on main contactor
 601:Core/Src/main.c ****         TxData[0] = 1; // parameter address. LSB
 602:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 603:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 604:Core/Src/main.c ****         TxData[3] = 0; // N/A
 605:Core/Src/main.c ****         TxData[4] = 3; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 606:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 607:Core/Src/main.c ****         TxData[6] = 0; // N/A
 608:Core/Src/main.c ****         TxData[7] = 0; // N/A
 609:Core/Src/main.c **** 
 610:Core/Src/main.c ****         // send message
 611:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &txHeader2, TxData, &TxMailbox);
 612:Core/Src/main.c ****         
 613:Core/Src/main.c ****         // update last precharge state
 614:Core/Src/main.c ****         lastPrechargeState = prechargeState;
 615:Core/Src/main.c ****       }
 616:Core/Src/main.c **** 
 617:Core/Src/main.c ****       // if rinehart voltage drops below battery, something's wrong, 
 618:Core/Src/main.c ****       // turn everything off
 619:Core/Src/main.c **** 			if (rinehartVoltage <= (emusVoltage * (PRECHARGE_COEFFICIENT)-20)) // 20 is a magic number
 620:Core/Src/main.c ****       {
 621:Core/Src/main.c ****         prechargeState = PRECHARGE_OFF;
 622:Core/Src/main.c ****       }
 623:Core/Src/main.c **** 
 624:Core/Src/main.c **** 		break;
 625:Core/Src/main.c **** 
 626:Core/Src/main.c **** 		case (PRECHARGE_ERROR):
 627:Core/Src/main.c **** 			// the car is most definitly not ready to drive
 628:Core/Src/main.c ****       // set ready to drive off 
 629:Core/Src/main.c **** 			readyToDrive = 0;
 630:Core/Src/main.c **** 
 631:Core/Src/main.c ****       if (lastPrechargeState != prechargeState)
 632:Core/Src/main.c ****       {
 633:Core/Src/main.c ****         // message is sent to rinehart to turn everything off
ARM GAS  /tmp/ccfyujML.s 			page 17


 634:Core/Src/main.c ****         TxData[0] = 1; // parameter address. LSB
 635:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 636:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 637:Core/Src/main.c ****         TxData[3] = 0; // N/A
 638:Core/Src/main.c ****         TxData[4] = 1; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 639:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 640:Core/Src/main.c ****         TxData[6] = 0; // N/A
 641:Core/Src/main.c ****         TxData[7] = 0; // N/A
 642:Core/Src/main.c **** 
 643:Core/Src/main.c ****         // send message
 644:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &txHeader2, TxData, &TxMailbox);
 645:Core/Src/main.c ****         
 646:Core/Src/main.c ****         // update last precharge state
 647:Core/Src/main.c ****         lastPrechargeState = prechargeState;
 648:Core/Src/main.c ****       }
 649:Core/Src/main.c **** 		break;
 650:Core/Src/main.c **** 
 651:Core/Src/main.c **** 		default:
 652:Core/Src/main.c ****       // fall back state, this indicates we did some undefined action that brought us here
 653:Core/Src/main.c ****       // we will move to PRECHARGE_ERROR to ensure readyToDrive stays false :)
 654:Core/Src/main.c **** 			prechargeState = PRECHARGE_ERROR;
 655:Core/Src/main.c **** 		break;
 656:Core/Src/main.c **** 	}
 657:Core/Src/main.c **** }
 275              		.loc 1 657 1 is_stmt 0 view .LVU62
 276 0028 38BD     		pop	{r3, r4, r5, pc}
 277              	.L25:
 527:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 278              		.loc 1 527 9 is_stmt 1 view .LVU63
 527:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 279              		.loc 1 527 19 is_stmt 0 view .LVU64
 280 002a 5C4A     		ldr	r2, .L28+20
 281 002c 0121     		movs	r1, #1
 282 002e 1170     		strb	r1, [r2]
 528:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 283              		.loc 1 528 9 is_stmt 1 view .LVU65
 528:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 284              		.loc 1 528 19 is_stmt 0 view .LVU66
 285 0030 0023     		movs	r3, #0
 286 0032 5370     		strb	r3, [r2, #1]
 529:Core/Src/main.c ****         TxData[3] = 0; // N/A
 287              		.loc 1 529 9 is_stmt 1 view .LVU67
 529:Core/Src/main.c ****         TxData[3] = 0; // N/A
 288              		.loc 1 529 19 is_stmt 0 view .LVU68
 289 0034 9170     		strb	r1, [r2, #2]
 530:Core/Src/main.c ****         TxData[4] = 0; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 290              		.loc 1 530 9 is_stmt 1 view .LVU69
 530:Core/Src/main.c ****         TxData[4] = 0; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 291              		.loc 1 530 19 is_stmt 0 view .LVU70
 292 0036 D370     		strb	r3, [r2, #3]
 531:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 293              		.loc 1 531 9 is_stmt 1 view .LVU71
 531:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 294              		.loc 1 531 19 is_stmt 0 view .LVU72
 295 0038 1371     		strb	r3, [r2, #4]
 532:Core/Src/main.c ****         TxData[6] = 0; // N/A
 296              		.loc 1 532 9 is_stmt 1 view .LVU73
ARM GAS  /tmp/ccfyujML.s 			page 18


 532:Core/Src/main.c ****         TxData[6] = 0; // N/A
 297              		.loc 1 532 19 is_stmt 0 view .LVU74
 298 003a 3721     		movs	r1, #55
 299 003c 5171     		strb	r1, [r2, #5]
 533:Core/Src/main.c ****         TxData[7] = 0; // N/A
 300              		.loc 1 533 9 is_stmt 1 view .LVU75
 533:Core/Src/main.c ****         TxData[7] = 0; // N/A
 301              		.loc 1 533 19 is_stmt 0 view .LVU76
 302 003e 9371     		strb	r3, [r2, #6]
 534:Core/Src/main.c ****         // send message
 303              		.loc 1 534 9 is_stmt 1 view .LVU77
 534:Core/Src/main.c ****         // send message
 304              		.loc 1 534 19 is_stmt 0 view .LVU78
 305 0040 D371     		strb	r3, [r2, #7]
 536:Core/Src/main.c ****         
 306              		.loc 1 536 9 is_stmt 1 view .LVU79
 307 0042 574B     		ldr	r3, .L28+24
 308 0044 5749     		ldr	r1, .L28+28
 309 0046 5848     		ldr	r0, .L28+32
 310 0048 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 311              	.LVL6:
 539:Core/Src/main.c ****       }
 312              		.loc 1 539 9 view .LVU80
 539:Core/Src/main.c ****       }
 313              		.loc 1 539 28 is_stmt 0 view .LVU81
 314 004c 504B     		ldr	r3, .L28+8
 315 004e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 316 0050 514B     		ldr	r3, .L28+16
 317 0052 1A70     		strb	r2, [r3]
 318 0054 E5E7     		b	.L16
 319              	.L14:
 550:Core/Src/main.c **** 
 320              		.loc 1 550 7 is_stmt 1 view .LVU82
 550:Core/Src/main.c **** 
 321              		.loc 1 550 20 is_stmt 0 view .LVU83
 322 0056 4F4A     		ldr	r2, .L28+12
 323 0058 0021     		movs	r1, #0
 324 005a 1160     		str	r1, [r2]
 554:Core/Src/main.c ****       {
 325              		.loc 1 554 7 is_stmt 1 view .LVU84
 554:Core/Src/main.c ****       {
 326              		.loc 1 554 30 is_stmt 0 view .LVU85
 327 005c 4E4A     		ldr	r2, .L28+16
 328 005e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 554:Core/Src/main.c ****       {
 329              		.loc 1 554 10 view .LVU86
 330 0060 9342     		cmp	r3, r2
 331 0062 1AD1     		bne	.L26
 332              	.L18:
 575:Core/Src/main.c ****       {
 333              		.loc 1 575 4 is_stmt 1 view .LVU87
 575:Core/Src/main.c ****       {
 334              		.loc 1 575 24 is_stmt 0 view .LVU88
 335 0064 514B     		ldr	r3, .L28+36
 336 0066 1868     		ldr	r0, [r3]
 337 0068 FFF7FEFF 		bl	__aeabi_ui2d
 338              	.LVL7:
ARM GAS  /tmp/ccfyujML.s 			page 19


 339 006c 0446     		mov	r4, r0
 340 006e 0D46     		mov	r5, r1
 575:Core/Src/main.c ****       {
 341              		.loc 1 575 39 view .LVU89
 342 0070 4F4B     		ldr	r3, .L28+40
 343 0072 1868     		ldr	r0, [r3]
 344 0074 FFF7FEFF 		bl	__aeabi_ui2d
 345              	.LVL8:
 346 0078 43A3     		adr	r3, .L28
 347 007a D3E90023 		ldrd	r2, [r3]
 348 007e FFF7FEFF 		bl	__aeabi_dmul
 349              	.LVL9:
 350 0082 0246     		mov	r2, r0
 351 0084 0B46     		mov	r3, r1
 575:Core/Src/main.c ****       {
 352              		.loc 1 575 7 view .LVU90
 353 0086 2046     		mov	r0, r4
 354 0088 2946     		mov	r1, r5
 355 008a FFF7FEFF 		bl	__aeabi_dcmpgt
 356              	.LVL10:
 357 008e 0028     		cmp	r0, #0
 358 0090 CAD0     		beq	.L9
 577:Core/Src/main.c ****       }
 359              		.loc 1 577 9 is_stmt 1 view .LVU91
 577:Core/Src/main.c ****       }
 360              		.loc 1 577 24 is_stmt 0 view .LVU92
 361 0092 3F4B     		ldr	r3, .L28+8
 362 0094 0222     		movs	r2, #2
 363 0096 1A70     		strb	r2, [r3]
 364 0098 C6E7     		b	.L9
 365              	.L26:
 558:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 366              		.loc 1 558 9 is_stmt 1 view .LVU93
 558:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 367              		.loc 1 558 19 is_stmt 0 view .LVU94
 368 009a 404A     		ldr	r2, .L28+20
 369 009c 0121     		movs	r1, #1
 370 009e 1170     		strb	r1, [r2]
 559:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 371              		.loc 1 559 9 is_stmt 1 view .LVU95
 559:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 372              		.loc 1 559 19 is_stmt 0 view .LVU96
 373 00a0 0023     		movs	r3, #0
 374 00a2 5370     		strb	r3, [r2, #1]
 560:Core/Src/main.c ****         TxData[3] = 0; // N/A
 375              		.loc 1 560 9 is_stmt 1 view .LVU97
 560:Core/Src/main.c ****         TxData[3] = 0; // N/A
 376              		.loc 1 560 19 is_stmt 0 view .LVU98
 377 00a4 9170     		strb	r1, [r2, #2]
 561:Core/Src/main.c ****         TxData[4] = 1; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 378              		.loc 1 561 9 is_stmt 1 view .LVU99
 561:Core/Src/main.c ****         TxData[4] = 1; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 379              		.loc 1 561 19 is_stmt 0 view .LVU100
 380 00a6 D370     		strb	r3, [r2, #3]
 562:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 381              		.loc 1 562 9 is_stmt 1 view .LVU101
 562:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
ARM GAS  /tmp/ccfyujML.s 			page 20


 382              		.loc 1 562 19 is_stmt 0 view .LVU102
 383 00a8 1171     		strb	r1, [r2, #4]
 563:Core/Src/main.c ****         TxData[6] = 0; // N/A
 384              		.loc 1 563 9 is_stmt 1 view .LVU103
 563:Core/Src/main.c ****         TxData[6] = 0; // N/A
 385              		.loc 1 563 19 is_stmt 0 view .LVU104
 386 00aa 3721     		movs	r1, #55
 387 00ac 5171     		strb	r1, [r2, #5]
 564:Core/Src/main.c ****         TxData[7] = 0; // N/A
 388              		.loc 1 564 9 is_stmt 1 view .LVU105
 564:Core/Src/main.c ****         TxData[7] = 0; // N/A
 389              		.loc 1 564 19 is_stmt 0 view .LVU106
 390 00ae 9371     		strb	r3, [r2, #6]
 565:Core/Src/main.c **** 
 391              		.loc 1 565 9 is_stmt 1 view .LVU107
 565:Core/Src/main.c **** 
 392              		.loc 1 565 19 is_stmt 0 view .LVU108
 393 00b0 D371     		strb	r3, [r2, #7]
 568:Core/Src/main.c ****         
 394              		.loc 1 568 9 is_stmt 1 view .LVU109
 395 00b2 3B4B     		ldr	r3, .L28+24
 396 00b4 3B49     		ldr	r1, .L28+28
 397 00b6 3C48     		ldr	r0, .L28+32
 398 00b8 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 399              	.LVL11:
 571:Core/Src/main.c ****       }
 400              		.loc 1 571 9 view .LVU110
 571:Core/Src/main.c ****       }
 401              		.loc 1 571 28 is_stmt 0 view .LVU111
 402 00bc 344B     		ldr	r3, .L28+8
 403 00be 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 404 00c0 354B     		ldr	r3, .L28+16
 405 00c2 1A70     		strb	r2, [r3]
 406 00c4 CEE7     		b	.L18
 407              	.L13:
 594:Core/Src/main.c **** 
 408              		.loc 1 594 4 is_stmt 1 view .LVU112
 594:Core/Src/main.c **** 
 409              		.loc 1 594 17 is_stmt 0 view .LVU113
 410 00c6 334A     		ldr	r2, .L28+12
 411 00c8 0121     		movs	r1, #1
 412 00ca 1160     		str	r1, [r2]
 597:Core/Src/main.c ****       {
 413              		.loc 1 597 7 is_stmt 1 view .LVU114
 597:Core/Src/main.c ****       {
 414              		.loc 1 597 30 is_stmt 0 view .LVU115
 415 00cc 324A     		ldr	r2, .L28+16
 416 00ce 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 597:Core/Src/main.c ****       {
 417              		.loc 1 597 10 view .LVU116
 418 00d0 9342     		cmp	r3, r2
 419 00d2 1ED1     		bne	.L27
 420              	.L20:
 619:Core/Src/main.c ****       {
 421              		.loc 1 619 4 is_stmt 1 view .LVU117
 619:Core/Src/main.c ****       {
 422              		.loc 1 619 24 is_stmt 0 view .LVU118
ARM GAS  /tmp/ccfyujML.s 			page 21


 423 00d4 354B     		ldr	r3, .L28+36
 424 00d6 1868     		ldr	r0, [r3]
 425 00d8 FFF7FEFF 		bl	__aeabi_ui2d
 426              	.LVL12:
 427 00dc 0446     		mov	r4, r0
 428 00de 0D46     		mov	r5, r1
 619:Core/Src/main.c ****       {
 429              		.loc 1 619 40 view .LVU119
 430 00e0 334B     		ldr	r3, .L28+40
 431 00e2 1868     		ldr	r0, [r3]
 432 00e4 FFF7FEFF 		bl	__aeabi_ui2d
 433              	.LVL13:
 434 00e8 27A3     		adr	r3, .L28
 435 00ea D3E90023 		ldrd	r2, [r3]
 436 00ee FFF7FEFF 		bl	__aeabi_dmul
 437              	.LVL14:
 619:Core/Src/main.c ****       {
 438              		.loc 1 619 65 view .LVU120
 439 00f2 0022     		movs	r2, #0
 440 00f4 2F4B     		ldr	r3, .L28+44
 441 00f6 FFF7FEFF 		bl	__aeabi_dsub
 442              	.LVL15:
 443 00fa 0246     		mov	r2, r0
 444 00fc 0B46     		mov	r3, r1
 619:Core/Src/main.c ****       {
 445              		.loc 1 619 7 view .LVU121
 446 00fe 2046     		mov	r0, r4
 447 0100 2946     		mov	r1, r5
 448 0102 FFF7FEFF 		bl	__aeabi_dcmple
 449              	.LVL16:
 450 0106 0028     		cmp	r0, #0
 451 0108 8ED0     		beq	.L9
 621:Core/Src/main.c ****       }
 452              		.loc 1 621 9 is_stmt 1 view .LVU122
 621:Core/Src/main.c ****       }
 453              		.loc 1 621 24 is_stmt 0 view .LVU123
 454 010a 214B     		ldr	r3, .L28+8
 455 010c 0022     		movs	r2, #0
 456 010e 1A70     		strb	r2, [r3]
 457 0110 8AE7     		b	.L9
 458              	.L27:
 601:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 459              		.loc 1 601 9 is_stmt 1 view .LVU124
 601:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 460              		.loc 1 601 19 is_stmt 0 view .LVU125
 461 0112 224A     		ldr	r2, .L28+20
 462 0114 1170     		strb	r1, [r2]
 602:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 463              		.loc 1 602 9 is_stmt 1 view .LVU126
 602:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 464              		.loc 1 602 19 is_stmt 0 view .LVU127
 465 0116 0023     		movs	r3, #0
 466 0118 5370     		strb	r3, [r2, #1]
 603:Core/Src/main.c ****         TxData[3] = 0; // N/A
 467              		.loc 1 603 9 is_stmt 1 view .LVU128
 603:Core/Src/main.c ****         TxData[3] = 0; // N/A
 468              		.loc 1 603 19 is_stmt 0 view .LVU129
ARM GAS  /tmp/ccfyujML.s 			page 22


 469 011a 9170     		strb	r1, [r2, #2]
 604:Core/Src/main.c ****         TxData[4] = 3; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 470              		.loc 1 604 9 is_stmt 1 view .LVU130
 604:Core/Src/main.c ****         TxData[4] = 3; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 471              		.loc 1 604 19 is_stmt 0 view .LVU131
 472 011c D370     		strb	r3, [r2, #3]
 605:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 473              		.loc 1 605 9 is_stmt 1 view .LVU132
 605:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 474              		.loc 1 605 19 is_stmt 0 view .LVU133
 475 011e 0321     		movs	r1, #3
 476 0120 1171     		strb	r1, [r2, #4]
 606:Core/Src/main.c ****         TxData[6] = 0; // N/A
 477              		.loc 1 606 9 is_stmt 1 view .LVU134
 606:Core/Src/main.c ****         TxData[6] = 0; // N/A
 478              		.loc 1 606 19 is_stmt 0 view .LVU135
 479 0122 3721     		movs	r1, #55
 480 0124 5171     		strb	r1, [r2, #5]
 607:Core/Src/main.c ****         TxData[7] = 0; // N/A
 481              		.loc 1 607 9 is_stmt 1 view .LVU136
 607:Core/Src/main.c ****         TxData[7] = 0; // N/A
 482              		.loc 1 607 19 is_stmt 0 view .LVU137
 483 0126 9371     		strb	r3, [r2, #6]
 608:Core/Src/main.c **** 
 484              		.loc 1 608 9 is_stmt 1 view .LVU138
 608:Core/Src/main.c **** 
 485              		.loc 1 608 19 is_stmt 0 view .LVU139
 486 0128 D371     		strb	r3, [r2, #7]
 611:Core/Src/main.c ****         
 487              		.loc 1 611 9 is_stmt 1 view .LVU140
 488 012a 1D4B     		ldr	r3, .L28+24
 489 012c 1D49     		ldr	r1, .L28+28
 490 012e 1E48     		ldr	r0, .L28+32
 491 0130 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 492              	.LVL17:
 614:Core/Src/main.c ****       }
 493              		.loc 1 614 9 view .LVU141
 614:Core/Src/main.c ****       }
 494              		.loc 1 614 28 is_stmt 0 view .LVU142
 495 0134 164B     		ldr	r3, .L28+8
 496 0136 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 497 0138 174B     		ldr	r3, .L28+16
 498 013a 1A70     		strb	r2, [r3]
 499 013c CAE7     		b	.L20
 500              	.L11:
 629:Core/Src/main.c **** 
 501              		.loc 1 629 4 is_stmt 1 view .LVU143
 629:Core/Src/main.c **** 
 502              		.loc 1 629 17 is_stmt 0 view .LVU144
 503 013e 154A     		ldr	r2, .L28+12
 504 0140 0021     		movs	r1, #0
 505 0142 1160     		str	r1, [r2]
 631:Core/Src/main.c ****       {
 506              		.loc 1 631 7 is_stmt 1 view .LVU145
 631:Core/Src/main.c ****       {
 507              		.loc 1 631 30 is_stmt 0 view .LVU146
 508 0144 144A     		ldr	r2, .L28+16
ARM GAS  /tmp/ccfyujML.s 			page 23


 509 0146 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 631:Core/Src/main.c ****       {
 510              		.loc 1 631 10 view .LVU147
 511 0148 9342     		cmp	r3, r2
 512 014a 3FF46DAF 		beq	.L9
 634:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 513              		.loc 1 634 9 is_stmt 1 view .LVU148
 634:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 514              		.loc 1 634 19 is_stmt 0 view .LVU149
 515 014e 134A     		ldr	r2, .L28+20
 516 0150 0121     		movs	r1, #1
 517 0152 1170     		strb	r1, [r2]
 635:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 518              		.loc 1 635 9 is_stmt 1 view .LVU150
 635:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 519              		.loc 1 635 19 is_stmt 0 view .LVU151
 520 0154 0023     		movs	r3, #0
 521 0156 5370     		strb	r3, [r2, #1]
 636:Core/Src/main.c ****         TxData[3] = 0; // N/A
 522              		.loc 1 636 9 is_stmt 1 view .LVU152
 636:Core/Src/main.c ****         TxData[3] = 0; // N/A
 523              		.loc 1 636 19 is_stmt 0 view .LVU153
 524 0158 9170     		strb	r1, [r2, #2]
 637:Core/Src/main.c ****         TxData[4] = 1; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 525              		.loc 1 637 9 is_stmt 1 view .LVU154
 637:Core/Src/main.c ****         TxData[4] = 1; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 526              		.loc 1 637 19 is_stmt 0 view .LVU155
 527 015a D370     		strb	r3, [r2, #3]
 638:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 528              		.loc 1 638 9 is_stmt 1 view .LVU156
 638:Core/Src/main.c ****         TxData[5] = 55; // 55 means relay control
 529              		.loc 1 638 19 is_stmt 0 view .LVU157
 530 015c 1171     		strb	r1, [r2, #4]
 639:Core/Src/main.c ****         TxData[6] = 0; // N/A
 531              		.loc 1 639 9 is_stmt 1 view .LVU158
 639:Core/Src/main.c ****         TxData[6] = 0; // N/A
 532              		.loc 1 639 19 is_stmt 0 view .LVU159
 533 015e 3721     		movs	r1, #55
 534 0160 5171     		strb	r1, [r2, #5]
 640:Core/Src/main.c ****         TxData[7] = 0; // N/A
 535              		.loc 1 640 9 is_stmt 1 view .LVU160
 640:Core/Src/main.c ****         TxData[7] = 0; // N/A
 536              		.loc 1 640 19 is_stmt 0 view .LVU161
 537 0162 9371     		strb	r3, [r2, #6]
 641:Core/Src/main.c **** 
 538              		.loc 1 641 9 is_stmt 1 view .LVU162
 641:Core/Src/main.c **** 
 539              		.loc 1 641 19 is_stmt 0 view .LVU163
 540 0164 D371     		strb	r3, [r2, #7]
 644:Core/Src/main.c ****         
 541              		.loc 1 644 9 is_stmt 1 view .LVU164
 542 0166 0E4B     		ldr	r3, .L28+24
 543 0168 0E49     		ldr	r1, .L28+28
 544 016a 0F48     		ldr	r0, .L28+32
 545 016c FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 546              	.LVL18:
 647:Core/Src/main.c ****       }
ARM GAS  /tmp/ccfyujML.s 			page 24


 547              		.loc 1 647 9 view .LVU165
 647:Core/Src/main.c ****       }
 548              		.loc 1 647 28 is_stmt 0 view .LVU166
 549 0170 074B     		ldr	r3, .L28+8
 550 0172 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 551 0174 084B     		ldr	r3, .L28+16
 552 0176 1A70     		strb	r2, [r3]
 553 0178 56E7     		b	.L9
 554              	.L10:
 654:Core/Src/main.c **** 		break;
 555              		.loc 1 654 4 is_stmt 1 view .LVU167
 654:Core/Src/main.c **** 		break;
 556              		.loc 1 654 19 is_stmt 0 view .LVU168
 557 017a 054B     		ldr	r3, .L28+8
 558 017c 0322     		movs	r2, #3
 559 017e 1A70     		strb	r2, [r3]
 655:Core/Src/main.c **** 	}
 560              		.loc 1 655 3 is_stmt 1 view .LVU169
 561              		.loc 1 657 1 is_stmt 0 view .LVU170
 562 0180 52E7     		b	.L9
 563              	.L29:
 564 0182 00BFAFF3 		.align	3
 564      0080
 565              	.L28:
 566 0188 CDCCCCCC 		.word	3435973837
 567 018c CCCCEC3F 		.word	1072483532
 568 0190 00000000 		.word	.LANCHOR0
 569 0194 00000000 		.word	.LANCHOR1
 570 0198 00000000 		.word	.LANCHOR2
 571 019c 00000000 		.word	TxData
 572 01a0 00000000 		.word	TxMailbox
 573 01a4 00000000 		.word	txHeader2
 574 01a8 00000000 		.word	hcan1
 575 01ac 00000000 		.word	.LANCHOR3
 576 01b0 00000000 		.word	.LANCHOR4
 577 01b4 00003440 		.word	1077149696
 578              		.cfi_endproc
 579              	.LFE225:
 581              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 582              		.align	1
 583              		.global	HAL_TIM_PeriodElapsedCallback
 584              		.syntax unified
 585              		.thumb
 586              		.thumb_func
 587              		.fpu fpv4-sp-d16
 589              	HAL_TIM_PeriodElapsedCallback:
 590              	.LVL19:
 591              	.LFB226:
 658:Core/Src/main.c **** 
 659:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 660:Core/Src/main.c **** {
 592              		.loc 1 660 1 is_stmt 1 view -0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		.loc 1 660 1 is_stmt 0 view .LVU172
 597 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccfyujML.s 			page 25


 598              	.LCFI7:
 599              		.cfi_def_cfa_offset 8
 600              		.cfi_offset 4, -8
 601              		.cfi_offset 14, -4
 602 0002 0446     		mov	r4, r0
 661:Core/Src/main.c ****   // on __Hz interval
 662:Core/Src/main.c ****   if (htim == &htim14)
 603              		.loc 1 662 3 is_stmt 1 view .LVU173
 604              		.loc 1 662 6 is_stmt 0 view .LVU174
 605 0004 124B     		ldr	r3, .L36
 606 0006 9842     		cmp	r0, r3
 607 0008 03D0     		beq	.L34
 608              	.LVL20:
 609              	.L31:
 663:Core/Src/main.c ****   {
 664:Core/Src/main.c ****     // build message for _____
 665:Core/Src/main.c ****     TxData[0] = readyToDrive; // controled by precharge
 666:Core/Src/main.c ****     TxData[1] = DCDCFault; // 0 for now TODO: implement fault detection
 667:Core/Src/main.c ****     TxData[2] = vicoreTemp; // DMA update
 668:Core/Src/main.c ****     TxData[3] = rinehartVoltage & 0xFF; // update on CAN message LSB
 669:Core/Src/main.c ****     TxData[4] = rinehartVoltage >> 8; // update on CAN message MSB
 670:Core/Src/main.c ****     TxData[5] = emusVoltage & 0xFF; // update on CAN message LSB
 671:Core/Src/main.c ****     TxData[6] = emusVoltage >> 8; // update on CAN message MSB
 672:Core/Src/main.c ****     TxData[7] = 0;
 673:Core/Src/main.c **** 
 674:Core/Src/main.c ****     // send message
 675:Core/Src/main.c ****     HAL_CAN_AddTxMessage(&hcan1, &txHeader1, TxData, &TxMailbox);
 676:Core/Src/main.c ****   }
 677:Core/Src/main.c **** 
 678:Core/Src/main.c ****   // on __Hz interval 
 679:Core/Src/main.c ****   if(htim == &htim13)
 610              		.loc 1 679 3 is_stmt 1 view .LVU175
 611              		.loc 1 679 5 is_stmt 0 view .LVU176
 612 000a 124B     		ldr	r3, .L36+4
 613 000c 9C42     		cmp	r4, r3
 614 000e 1CD0     		beq	.L35
 615              	.L30:
 680:Core/Src/main.c ****   {
 681:Core/Src/main.c ****     // check precharge status
 682:Core/Src/main.c ****     prechargeControl();
 683:Core/Src/main.c ****   }
 684:Core/Src/main.c **** }
 616              		.loc 1 684 1 view .LVU177
 617 0010 10BD     		pop	{r4, pc}
 618              	.LVL21:
 619              	.L34:
 665:Core/Src/main.c ****     TxData[1] = DCDCFault; // 0 for now TODO: implement fault detection
 620              		.loc 1 665 5 is_stmt 1 view .LVU178
 665:Core/Src/main.c ****     TxData[1] = DCDCFault; // 0 for now TODO: implement fault detection
 621              		.loc 1 665 15 is_stmt 0 view .LVU179
 622 0012 114A     		ldr	r2, .L36+8
 623 0014 114B     		ldr	r3, .L36+12
 624 0016 1B68     		ldr	r3, [r3]
 625 0018 1370     		strb	r3, [r2]
 666:Core/Src/main.c ****     TxData[2] = vicoreTemp; // DMA update
 626              		.loc 1 666 5 is_stmt 1 view .LVU180
 666:Core/Src/main.c ****     TxData[2] = vicoreTemp; // DMA update
ARM GAS  /tmp/ccfyujML.s 			page 26


 627              		.loc 1 666 15 is_stmt 0 view .LVU181
 628 001a 114B     		ldr	r3, .L36+16
 629 001c 1B68     		ldr	r3, [r3]
 630 001e 5370     		strb	r3, [r2, #1]
 667:Core/Src/main.c ****     TxData[3] = rinehartVoltage & 0xFF; // update on CAN message LSB
 631              		.loc 1 667 5 is_stmt 1 view .LVU182
 667:Core/Src/main.c ****     TxData[3] = rinehartVoltage & 0xFF; // update on CAN message LSB
 632              		.loc 1 667 15 is_stmt 0 view .LVU183
 633 0020 104B     		ldr	r3, .L36+20
 634 0022 1B68     		ldr	r3, [r3]
 635 0024 9370     		strb	r3, [r2, #2]
 668:Core/Src/main.c ****     TxData[4] = rinehartVoltage >> 8; // update on CAN message MSB
 636              		.loc 1 668 5 is_stmt 1 view .LVU184
 668:Core/Src/main.c ****     TxData[4] = rinehartVoltage >> 8; // update on CAN message MSB
 637              		.loc 1 668 15 is_stmt 0 view .LVU185
 638 0026 104B     		ldr	r3, .L36+24
 639 0028 1B68     		ldr	r3, [r3]
 640 002a D370     		strb	r3, [r2, #3]
 669:Core/Src/main.c ****     TxData[5] = emusVoltage & 0xFF; // update on CAN message LSB
 641              		.loc 1 669 5 is_stmt 1 view .LVU186
 669:Core/Src/main.c ****     TxData[5] = emusVoltage & 0xFF; // update on CAN message LSB
 642              		.loc 1 669 33 is_stmt 0 view .LVU187
 643 002c 1B0A     		lsrs	r3, r3, #8
 669:Core/Src/main.c ****     TxData[5] = emusVoltage & 0xFF; // update on CAN message LSB
 644              		.loc 1 669 15 view .LVU188
 645 002e 1371     		strb	r3, [r2, #4]
 670:Core/Src/main.c ****     TxData[6] = emusVoltage >> 8; // update on CAN message MSB
 646              		.loc 1 670 5 is_stmt 1 view .LVU189
 670:Core/Src/main.c ****     TxData[6] = emusVoltage >> 8; // update on CAN message MSB
 647              		.loc 1 670 15 is_stmt 0 view .LVU190
 648 0030 0E4B     		ldr	r3, .L36+28
 649 0032 1B68     		ldr	r3, [r3]
 650 0034 5371     		strb	r3, [r2, #5]
 671:Core/Src/main.c ****     TxData[7] = 0;
 651              		.loc 1 671 5 is_stmt 1 view .LVU191
 671:Core/Src/main.c ****     TxData[7] = 0;
 652              		.loc 1 671 29 is_stmt 0 view .LVU192
 653 0036 1B0A     		lsrs	r3, r3, #8
 671:Core/Src/main.c ****     TxData[7] = 0;
 654              		.loc 1 671 15 view .LVU193
 655 0038 9371     		strb	r3, [r2, #6]
 672:Core/Src/main.c **** 
 656              		.loc 1 672 5 is_stmt 1 view .LVU194
 672:Core/Src/main.c **** 
 657              		.loc 1 672 15 is_stmt 0 view .LVU195
 658 003a 0023     		movs	r3, #0
 659 003c D371     		strb	r3, [r2, #7]
 675:Core/Src/main.c ****   }
 660              		.loc 1 675 5 is_stmt 1 view .LVU196
 661 003e 0C4B     		ldr	r3, .L36+32
 662 0040 0C49     		ldr	r1, .L36+36
 663 0042 0D48     		ldr	r0, .L36+40
 664              	.LVL22:
 675:Core/Src/main.c ****   }
 665              		.loc 1 675 5 is_stmt 0 view .LVU197
 666 0044 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 667              	.LVL23:
ARM GAS  /tmp/ccfyujML.s 			page 27


 668 0048 DFE7     		b	.L31
 669              	.L35:
 682:Core/Src/main.c ****   }
 670              		.loc 1 682 5 is_stmt 1 view .LVU198
 671 004a FFF7FEFF 		bl	prechargeControl
 672              	.LVL24:
 673              		.loc 1 684 1 is_stmt 0 view .LVU199
 674 004e DFE7     		b	.L30
 675              	.L37:
 676              		.align	2
 677              	.L36:
 678 0050 00000000 		.word	htim14
 679 0054 00000000 		.word	htim13
 680 0058 00000000 		.word	TxData
 681 005c 00000000 		.word	.LANCHOR1
 682 0060 00000000 		.word	.LANCHOR5
 683 0064 00000000 		.word	.LANCHOR6
 684 0068 00000000 		.word	.LANCHOR3
 685 006c 00000000 		.word	.LANCHOR4
 686 0070 00000000 		.word	TxMailbox
 687 0074 00000000 		.word	txHeader1
 688 0078 00000000 		.word	hcan1
 689              		.cfi_endproc
 690              	.LFE226:
 692              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 693              		.align	1
 694              		.global	HAL_ADC_ConvCpltCallback
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 698              		.fpu fpv4-sp-d16
 700              	HAL_ADC_ConvCpltCallback:
 701              	.LVL25:
 702              	.LFB227:
 685:Core/Src/main.c **** 
 686:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 687:Core/Src/main.c **** {
 703              		.loc 1 687 1 is_stmt 1 view -0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              		.loc 1 687 1 is_stmt 0 view .LVU201
 708 0000 08B5     		push	{r3, lr}
 709              	.LCFI8:
 710              		.cfi_def_cfa_offset 8
 711              		.cfi_offset 3, -8
 712              		.cfi_offset 14, -4
 688:Core/Src/main.c ****   // TODO: check analog values for the temperature conversion
 689:Core/Src/main.c ****   // Define threshold for when the fan should turn on
 690:Core/Src/main.c **** 
 691:Core/Src/main.c ****   // update vicor temp
 692:Core/Src/main.c ****   vicoreTemp = adc_buf[0];
 713              		.loc 1 692 3 is_stmt 1 view .LVU202
 714              		.loc 1 692 23 is_stmt 0 view .LVU203
 715 0002 094B     		ldr	r3, .L42
 716 0004 1B68     		ldr	r3, [r3]
 717              		.loc 1 692 14 view .LVU204
ARM GAS  /tmp/ccfyujML.s 			page 28


 718 0006 094A     		ldr	r2, .L42+4
 719 0008 1360     		str	r3, [r2]
 693:Core/Src/main.c **** 
 694:Core/Src/main.c ****   // set fan based on value
 695:Core/Src/main.c ****   if (vicoreTemp >= 2048)
 720              		.loc 1 695 3 is_stmt 1 view .LVU205
 721              		.loc 1 695 6 is_stmt 0 view .LVU206
 722 000a B3F5006F 		cmp	r3, #2048
 723 000e 05DB     		blt	.L39
 696:Core/Src/main.c ****   {
 697:Core/Src/main.c ****     // set the fan high
 698:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 724              		.loc 1 698 5 is_stmt 1 view .LVU207
 725 0010 0122     		movs	r2, #1
 726 0012 1146     		mov	r1, r2
 727 0014 0648     		ldr	r0, .L42+8
 728              	.LVL26:
 729              		.loc 1 698 5 is_stmt 0 view .LVU208
 730 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 731              	.LVL27:
 732              	.L38:
 699:Core/Src/main.c ****   }
 700:Core/Src/main.c **** 
 701:Core/Src/main.c ****   else
 702:Core/Src/main.c ****   {
 703:Core/Src/main.c ****     // set fan low
 704:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 705:Core/Src/main.c ****   }
 706:Core/Src/main.c **** }
 733              		.loc 1 706 1 view .LVU209
 734 001a 08BD     		pop	{r3, pc}
 735              	.LVL28:
 736              	.L39:
 704:Core/Src/main.c ****   }
 737              		.loc 1 704 5 is_stmt 1 view .LVU210
 738 001c 0022     		movs	r2, #0
 739 001e 0121     		movs	r1, #1
 740 0020 0348     		ldr	r0, .L42+8
 741              	.LVL29:
 704:Core/Src/main.c ****   }
 742              		.loc 1 704 5 is_stmt 0 view .LVU211
 743 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 744              	.LVL30:
 745              		.loc 1 706 1 view .LVU212
 746 0026 F8E7     		b	.L38
 747              	.L43:
 748              		.align	2
 749              	.L42:
 750 0028 00000000 		.word	adc_buf
 751 002c 00000000 		.word	.LANCHOR6
 752 0030 00000240 		.word	1073872896
 753              		.cfi_endproc
 754              	.LFE227:
 756              		.section	.text.Error_Handler,"ax",%progbits
 757              		.align	1
 758              		.global	Error_Handler
 759              		.syntax unified
ARM GAS  /tmp/ccfyujML.s 			page 29


 760              		.thumb
 761              		.thumb_func
 762              		.fpu fpv4-sp-d16
 764              	Error_Handler:
 765              	.LFB228:
 707:Core/Src/main.c **** 
 708:Core/Src/main.c **** /* USER CODE END 4 */
 709:Core/Src/main.c **** 
 710:Core/Src/main.c **** /**
 711:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 712:Core/Src/main.c ****   * @retval None
 713:Core/Src/main.c ****   */
 714:Core/Src/main.c **** void Error_Handler(void)
 715:Core/Src/main.c **** {
 766              		.loc 1 715 1 is_stmt 1 view -0
 767              		.cfi_startproc
 768              		@ Volatile: function does not return.
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 716:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 717:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 718:Core/Src/main.c ****   __disable_irq();
 772              		.loc 1 718 3 view .LVU214
 773              	.LBB7:
 774              	.LBI7:
 775              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
ARM GAS  /tmp/ccfyujML.s 			page 30


  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccfyujML.s 			page 31


  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 776              		.loc 2 140 27 view .LVU215
 777              	.LBB8:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
ARM GAS  /tmp/ccfyujML.s 			page 32


 778              		.loc 2 142 3 view .LVU216
 779              		.syntax unified
 780              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 781 0000 72B6     		cpsid i
 782              	@ 0 "" 2
 783              		.thumb
 784              		.syntax unified
 785              	.L45:
 786              	.LBE8:
 787              	.LBE7:
 719:Core/Src/main.c ****   while (1)
 788              		.loc 1 719 3 discriminator 1 view .LVU217
 720:Core/Src/main.c ****   {
 721:Core/Src/main.c ****   }
 789              		.loc 1 721 3 discriminator 1 view .LVU218
 719:Core/Src/main.c ****   while (1)
 790              		.loc 1 719 9 discriminator 1 view .LVU219
 791 0002 FEE7     		b	.L45
 792              		.cfi_endproc
 793              	.LFE228:
 795              		.section	.text.MX_CAN1_Init,"ax",%progbits
 796              		.align	1
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu fpv4-sp-d16
 802              	MX_CAN1_Init:
 803              	.LFB219:
 296:Core/Src/main.c **** 
 804              		.loc 1 296 1 view -0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808 0000 70B5     		push	{r4, r5, r6, lr}
 809              	.LCFI9:
 810              		.cfi_def_cfa_offset 16
 811              		.cfi_offset 4, -16
 812              		.cfi_offset 5, -12
 813              		.cfi_offset 6, -8
 814              		.cfi_offset 14, -4
 303:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 815              		.loc 1 303 3 view .LVU221
 303:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 816              		.loc 1 303 18 is_stmt 0 view .LVU222
 817 0002 1C48     		ldr	r0, .L50
 818 0004 1C4B     		ldr	r3, .L50+4
 819 0006 0360     		str	r3, [r0]
 304:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 820              		.loc 1 304 3 is_stmt 1 view .LVU223
 304:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 821              		.loc 1 304 24 is_stmt 0 view .LVU224
 822 0008 1223     		movs	r3, #18
 823 000a 4360     		str	r3, [r0, #4]
 305:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 824              		.loc 1 305 3 is_stmt 1 view .LVU225
 305:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 825              		.loc 1 305 19 is_stmt 0 view .LVU226
ARM GAS  /tmp/ccfyujML.s 			page 33


 826 000c 0023     		movs	r3, #0
 827 000e 8360     		str	r3, [r0, #8]
 306:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 828              		.loc 1 306 3 is_stmt 1 view .LVU227
 306:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 829              		.loc 1 306 28 is_stmt 0 view .LVU228
 830 0010 C360     		str	r3, [r0, #12]
 307:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 831              		.loc 1 307 3 is_stmt 1 view .LVU229
 307:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 832              		.loc 1 307 23 is_stmt 0 view .LVU230
 833 0012 4FF40032 		mov	r2, #131072
 834 0016 0261     		str	r2, [r0, #16]
 308:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 835              		.loc 1 308 3 is_stmt 1 view .LVU231
 308:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 836              		.loc 1 308 23 is_stmt 0 view .LVU232
 837 0018 4361     		str	r3, [r0, #20]
 309:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 838              		.loc 1 309 3 is_stmt 1 view .LVU233
 309:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 839              		.loc 1 309 32 is_stmt 0 view .LVU234
 840 001a 0376     		strb	r3, [r0, #24]
 310:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 841              		.loc 1 310 3 is_stmt 1 view .LVU235
 310:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = ENABLE;
 842              		.loc 1 310 25 is_stmt 0 view .LVU236
 843 001c 4376     		strb	r3, [r0, #25]
 311:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 844              		.loc 1 311 3 is_stmt 1 view .LVU237
 311:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 845              		.loc 1 311 25 is_stmt 0 view .LVU238
 846 001e 0122     		movs	r2, #1
 847 0020 8276     		strb	r2, [r0, #26]
 312:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 848              		.loc 1 312 3 is_stmt 1 view .LVU239
 312:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 849              		.loc 1 312 33 is_stmt 0 view .LVU240
 850 0022 C276     		strb	r2, [r0, #27]
 313:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 851              		.loc 1 313 3 is_stmt 1 view .LVU241
 313:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 852              		.loc 1 313 32 is_stmt 0 view .LVU242
 853 0024 0377     		strb	r3, [r0, #28]
 314:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 854              		.loc 1 314 3 is_stmt 1 view .LVU243
 314:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 855              		.loc 1 314 35 is_stmt 0 view .LVU244
 856 0026 4377     		strb	r3, [r0, #29]
 315:Core/Src/main.c ****   {
 857              		.loc 1 315 3 is_stmt 1 view .LVU245
 315:Core/Src/main.c ****   {
 858              		.loc 1 315 7 is_stmt 0 view .LVU246
 859 0028 FFF7FEFF 		bl	HAL_CAN_Init
 860              	.LVL31:
 315:Core/Src/main.c ****   {
 861              		.loc 1 315 6 view .LVU247
ARM GAS  /tmp/ccfyujML.s 			page 34


 862 002c 00BB     		cbnz	r0, .L49
 322:Core/Src/main.c ****   	canFilter0.FilterIdLow = 0x000;
 863              		.loc 1 322 5 is_stmt 1 view .LVU248
 322:Core/Src/main.c ****   	canFilter0.FilterIdLow = 0x000;
 864              		.loc 1 322 29 is_stmt 0 view .LVU249
 865 002e 1349     		ldr	r1, .L50+8
 866 0030 2023     		movs	r3, #32
 867 0032 0B60     		str	r3, [r1]
 323:Core/Src/main.c ****     canFilter0.FilterMaskIdHigh = 0x001 << 5;
 868              		.loc 1 323 4 is_stmt 1 view .LVU250
 323:Core/Src/main.c ****     canFilter0.FilterMaskIdHigh = 0x001 << 5;
 869              		.loc 1 323 27 is_stmt 0 view .LVU251
 870 0034 0024     		movs	r4, #0
 871 0036 4C60     		str	r4, [r1, #4]
 324:Core/Src/main.c ****   	canFilter0.FilterMaskIdLow = 0x000;
 872              		.loc 1 324 5 is_stmt 1 view .LVU252
 324:Core/Src/main.c ****   	canFilter0.FilterMaskIdLow = 0x000;
 873              		.loc 1 324 33 is_stmt 0 view .LVU253
 874 0038 8B60     		str	r3, [r1, #8]
 325:Core/Src/main.c ****     canFilter0.FilterBank = 0;
 875              		.loc 1 325 4 is_stmt 1 view .LVU254
 325:Core/Src/main.c ****     canFilter0.FilterBank = 0;
 876              		.loc 1 325 31 is_stmt 0 view .LVU255
 877 003a CC60     		str	r4, [r1, #12]
 326:Core/Src/main.c ****   	canFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 878              		.loc 1 326 5 is_stmt 1 view .LVU256
 326:Core/Src/main.c ****   	canFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 879              		.loc 1 326 27 is_stmt 0 view .LVU257
 880 003c 4C61     		str	r4, [r1, #20]
 327:Core/Src/main.c ****   	canFilter0.FilterFIFOAssignment = CAN_RX_FIFO0;
 881              		.loc 1 327 4 is_stmt 1 view .LVU258
 327:Core/Src/main.c ****   	canFilter0.FilterFIFOAssignment = CAN_RX_FIFO0;
 882              		.loc 1 327 26 is_stmt 0 view .LVU259
 883 003e 8C61     		str	r4, [r1, #24]
 328:Core/Src/main.c ****   	canFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 884              		.loc 1 328 4 is_stmt 1 view .LVU260
 328:Core/Src/main.c ****   	canFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 885              		.loc 1 328 36 is_stmt 0 view .LVU261
 886 0040 0C61     		str	r4, [r1, #16]
 329:Core/Src/main.c ****   	canFilter0.FilterActivation = ENABLE;
 887              		.loc 1 329 4 is_stmt 1 view .LVU262
 329:Core/Src/main.c ****   	canFilter0.FilterActivation = ENABLE;
 888              		.loc 1 329 27 is_stmt 0 view .LVU263
 889 0042 0125     		movs	r5, #1
 890 0044 CD61     		str	r5, [r1, #28]
 330:Core/Src/main.c **** 
 891              		.loc 1 330 4 is_stmt 1 view .LVU264
 330:Core/Src/main.c **** 
 892              		.loc 1 330 32 is_stmt 0 view .LVU265
 893 0046 0D62     		str	r5, [r1, #32]
 332:Core/Src/main.c **** 
 894              		.loc 1 332 5 is_stmt 1 view .LVU266
 895 0048 0A4E     		ldr	r6, .L50
 896 004a 3046     		mov	r0, r6
 897 004c FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 898              	.LVL32:
 335:Core/Src/main.c ****   	canFilter1.FilterIdLow = 0x00;
ARM GAS  /tmp/ccfyujML.s 			page 35


 899              		.loc 1 335 5 view .LVU267
 335:Core/Src/main.c ****   	canFilter1.FilterIdLow = 0x00;
 900              		.loc 1 335 29 is_stmt 0 view .LVU268
 901 0050 0B49     		ldr	r1, .L50+12
 902 0052 4FF4A753 		mov	r3, #5344
 903 0056 0B60     		str	r3, [r1]
 336:Core/Src/main.c ****     canFilter1.FilterMaskIdHigh = 0x0A7 << 5;
 904              		.loc 1 336 4 is_stmt 1 view .LVU269
 336:Core/Src/main.c ****     canFilter1.FilterMaskIdHigh = 0x0A7 << 5;
 905              		.loc 1 336 27 is_stmt 0 view .LVU270
 906 0058 4C60     		str	r4, [r1, #4]
 337:Core/Src/main.c ****   	canFilter1.FilterMaskIdLow = 0x000;
 907              		.loc 1 337 5 is_stmt 1 view .LVU271
 337:Core/Src/main.c ****   	canFilter1.FilterMaskIdLow = 0x000;
 908              		.loc 1 337 33 is_stmt 0 view .LVU272
 909 005a 8B60     		str	r3, [r1, #8]
 338:Core/Src/main.c ****     canFilter1.FilterBank = 1;
 910              		.loc 1 338 4 is_stmt 1 view .LVU273
 338:Core/Src/main.c ****     canFilter1.FilterBank = 1;
 911              		.loc 1 338 31 is_stmt 0 view .LVU274
 912 005c CC60     		str	r4, [r1, #12]
 339:Core/Src/main.c ****   	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 913              		.loc 1 339 5 is_stmt 1 view .LVU275
 339:Core/Src/main.c ****   	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 914              		.loc 1 339 27 is_stmt 0 view .LVU276
 915 005e 4D61     		str	r5, [r1, #20]
 340:Core/Src/main.c ****   	canFilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 916              		.loc 1 340 4 is_stmt 1 view .LVU277
 340:Core/Src/main.c ****   	canFilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 917              		.loc 1 340 26 is_stmt 0 view .LVU278
 918 0060 8C61     		str	r4, [r1, #24]
 341:Core/Src/main.c ****   	canFilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 919              		.loc 1 341 4 is_stmt 1 view .LVU279
 341:Core/Src/main.c ****   	canFilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 920              		.loc 1 341 36 is_stmt 0 view .LVU280
 921 0062 0C61     		str	r4, [r1, #16]
 342:Core/Src/main.c ****   	canFilter1.FilterActivation = ENABLE;
 922              		.loc 1 342 4 is_stmt 1 view .LVU281
 342:Core/Src/main.c ****   	canFilter1.FilterActivation = ENABLE;
 923              		.loc 1 342 27 is_stmt 0 view .LVU282
 924 0064 CD61     		str	r5, [r1, #28]
 343:Core/Src/main.c **** 
 925              		.loc 1 343 4 is_stmt 1 view .LVU283
 343:Core/Src/main.c **** 
 926              		.loc 1 343 32 is_stmt 0 view .LVU284
 927 0066 0D62     		str	r5, [r1, #32]
 345:Core/Src/main.c **** 
 928              		.loc 1 345 5 is_stmt 1 view .LVU285
 929 0068 3046     		mov	r0, r6
 930 006a FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 931              	.LVL33:
 349:Core/Src/main.c **** 
 932              		.loc 1 349 1 is_stmt 0 view .LVU286
 933 006e 70BD     		pop	{r4, r5, r6, pc}
 934              	.L49:
 317:Core/Src/main.c ****   }
 935              		.loc 1 317 5 is_stmt 1 view .LVU287
ARM GAS  /tmp/ccfyujML.s 			page 36


 936 0070 FFF7FEFF 		bl	Error_Handler
 937              	.LVL34:
 938              	.L51:
 939              		.align	2
 940              	.L50:
 941 0074 00000000 		.word	hcan1
 942 0078 00640040 		.word	1073767424
 943 007c 00000000 		.word	canFilter0
 944 0080 00000000 		.word	canFilter1
 945              		.cfi_endproc
 946              	.LFE219:
 948              		.section	.text.MX_ADC1_Init,"ax",%progbits
 949              		.align	1
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv4-sp-d16
 955              	MX_ADC1_Init:
 956              	.LFB218:
 249:Core/Src/main.c **** 
 957              		.loc 1 249 1 view -0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 16
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961 0000 00B5     		push	{lr}
 962              	.LCFI10:
 963              		.cfi_def_cfa_offset 4
 964              		.cfi_offset 14, -4
 965 0002 85B0     		sub	sp, sp, #20
 966              	.LCFI11:
 967              		.cfi_def_cfa_offset 24
 254:Core/Src/main.c **** 
 968              		.loc 1 254 3 view .LVU289
 254:Core/Src/main.c **** 
 969              		.loc 1 254 26 is_stmt 0 view .LVU290
 970 0004 0023     		movs	r3, #0
 971 0006 0093     		str	r3, [sp]
 972 0008 0193     		str	r3, [sp, #4]
 973 000a 0293     		str	r3, [sp, #8]
 974 000c 0393     		str	r3, [sp, #12]
 260:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 975              		.loc 1 260 3 is_stmt 1 view .LVU291
 260:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 976              		.loc 1 260 18 is_stmt 0 view .LVU292
 977 000e 1448     		ldr	r0, .L58
 978 0010 144A     		ldr	r2, .L58+4
 979 0012 0260     		str	r2, [r0]
 261:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 980              		.loc 1 261 3 is_stmt 1 view .LVU293
 261:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 981              		.loc 1 261 29 is_stmt 0 view .LVU294
 982 0014 4FF48032 		mov	r2, #65536
 983 0018 4260     		str	r2, [r0, #4]
 262:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 984              		.loc 1 262 3 is_stmt 1 view .LVU295
 262:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 985              		.loc 1 262 25 is_stmt 0 view .LVU296
ARM GAS  /tmp/ccfyujML.s 			page 37


 986 001a 8360     		str	r3, [r0, #8]
 263:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 987              		.loc 1 263 3 is_stmt 1 view .LVU297
 263:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 988              		.loc 1 263 27 is_stmt 0 view .LVU298
 989 001c 0361     		str	r3, [r0, #16]
 264:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 990              		.loc 1 264 3 is_stmt 1 view .LVU299
 264:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 991              		.loc 1 264 33 is_stmt 0 view .LVU300
 992 001e 0122     		movs	r2, #1
 993 0020 0276     		strb	r2, [r0, #24]
 265:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 994              		.loc 1 265 3 is_stmt 1 view .LVU301
 265:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 995              		.loc 1 265 36 is_stmt 0 view .LVU302
 996 0022 80F82030 		strb	r3, [r0, #32]
 266:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 997              		.loc 1 266 3 is_stmt 1 view .LVU303
 266:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 998              		.loc 1 266 35 is_stmt 0 view .LVU304
 999 0026 C362     		str	r3, [r0, #44]
 267:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1000              		.loc 1 267 3 is_stmt 1 view .LVU305
 267:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1001              		.loc 1 267 31 is_stmt 0 view .LVU306
 1002 0028 0F49     		ldr	r1, .L58+8
 1003 002a 8162     		str	r1, [r0, #40]
 268:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1004              		.loc 1 268 3 is_stmt 1 view .LVU307
 268:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 1005              		.loc 1 268 24 is_stmt 0 view .LVU308
 1006 002c C360     		str	r3, [r0, #12]
 269:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1007              		.loc 1 269 3 is_stmt 1 view .LVU309
 269:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1008              		.loc 1 269 30 is_stmt 0 view .LVU310
 1009 002e C261     		str	r2, [r0, #28]
 270:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1010              		.loc 1 270 3 is_stmt 1 view .LVU311
 270:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1011              		.loc 1 270 36 is_stmt 0 view .LVU312
 1012 0030 80F83020 		strb	r2, [r0, #48]
 271:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1013              		.loc 1 271 3 is_stmt 1 view .LVU313
 271:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1014              		.loc 1 271 27 is_stmt 0 view .LVU314
 1015 0034 4261     		str	r2, [r0, #20]
 272:Core/Src/main.c ****   {
 1016              		.loc 1 272 3 is_stmt 1 view .LVU315
 272:Core/Src/main.c ****   {
 1017              		.loc 1 272 7 is_stmt 0 view .LVU316
 1018 0036 FFF7FEFF 		bl	HAL_ADC_Init
 1019              	.LVL35:
 272:Core/Src/main.c ****   {
 1020              		.loc 1 272 6 view .LVU317
 1021 003a 68B9     		cbnz	r0, .L56
ARM GAS  /tmp/ccfyujML.s 			page 38


 278:Core/Src/main.c ****   sConfig.Rank = 1;
 1022              		.loc 1 278 3 is_stmt 1 view .LVU318
 278:Core/Src/main.c ****   sConfig.Rank = 1;
 1023              		.loc 1 278 19 is_stmt 0 view .LVU319
 1024 003c 0723     		movs	r3, #7
 1025 003e 0093     		str	r3, [sp]
 279:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1026              		.loc 1 279 3 is_stmt 1 view .LVU320
 279:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1027              		.loc 1 279 16 is_stmt 0 view .LVU321
 1028 0040 0123     		movs	r3, #1
 1029 0042 0193     		str	r3, [sp, #4]
 280:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1030              		.loc 1 280 3 is_stmt 1 view .LVU322
 280:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1031              		.loc 1 280 24 is_stmt 0 view .LVU323
 1032 0044 0023     		movs	r3, #0
 1033 0046 0293     		str	r3, [sp, #8]
 281:Core/Src/main.c ****   {
 1034              		.loc 1 281 3 is_stmt 1 view .LVU324
 281:Core/Src/main.c ****   {
 1035              		.loc 1 281 7 is_stmt 0 view .LVU325
 1036 0048 6946     		mov	r1, sp
 1037 004a 0548     		ldr	r0, .L58
 1038 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1039              	.LVL36:
 281:Core/Src/main.c ****   {
 1040              		.loc 1 281 6 view .LVU326
 1041 0050 20B9     		cbnz	r0, .L57
 288:Core/Src/main.c **** 
 1042              		.loc 1 288 1 view .LVU327
 1043 0052 05B0     		add	sp, sp, #20
 1044              	.LCFI12:
 1045              		.cfi_remember_state
 1046              		.cfi_def_cfa_offset 4
 1047              		@ sp needed
 1048 0054 5DF804FB 		ldr	pc, [sp], #4
 1049              	.L56:
 1050              	.LCFI13:
 1051              		.cfi_restore_state
 274:Core/Src/main.c ****   }
 1052              		.loc 1 274 5 is_stmt 1 view .LVU328
 1053 0058 FFF7FEFF 		bl	Error_Handler
 1054              	.LVL37:
 1055              	.L57:
 283:Core/Src/main.c ****   }
 1056              		.loc 1 283 5 view .LVU329
 1057 005c FFF7FEFF 		bl	Error_Handler
 1058              	.LVL38:
 1059              	.L59:
 1060              		.align	2
 1061              	.L58:
 1062 0060 00000000 		.word	hadc1
 1063 0064 00200140 		.word	1073815552
 1064 0068 0100000F 		.word	251658241
 1065              		.cfi_endproc
 1066              	.LFE218:
ARM GAS  /tmp/ccfyujML.s 			page 39


 1068              		.section	.text.MX_TIM14_Init,"ax",%progbits
 1069              		.align	1
 1070              		.syntax unified
 1071              		.thumb
 1072              		.thumb_func
 1073              		.fpu fpv4-sp-d16
 1075              	MX_TIM14_Init:
 1076              	.LFB221:
 388:Core/Src/main.c **** 
 1077              		.loc 1 388 1 view -0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 0
 1080              		@ frame_needed = 0, uses_anonymous_args = 0
 1081 0000 08B5     		push	{r3, lr}
 1082              	.LCFI14:
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 3, -8
 1085              		.cfi_offset 14, -4
 397:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1086              		.loc 1 397 3 view .LVU331
 397:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 1087              		.loc 1 397 19 is_stmt 0 view .LVU332
 1088 0002 0948     		ldr	r0, .L64
 1089 0004 094B     		ldr	r3, .L64+4
 1090 0006 0360     		str	r3, [r0]
 398:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1091              		.loc 1 398 3 is_stmt 1 view .LVU333
 398:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 1092              		.loc 1 398 25 is_stmt 0 view .LVU334
 1093 0008 42F22733 		movw	r3, #8999
 1094 000c 4360     		str	r3, [r0, #4]
 399:Core/Src/main.c ****   htim14.Init.Period = 500-1;
 1095              		.loc 1 399 3 is_stmt 1 view .LVU335
 399:Core/Src/main.c ****   htim14.Init.Period = 500-1;
 1096              		.loc 1 399 27 is_stmt 0 view .LVU336
 1097 000e 0023     		movs	r3, #0
 1098 0010 8360     		str	r3, [r0, #8]
 400:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1099              		.loc 1 400 3 is_stmt 1 view .LVU337
 400:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1100              		.loc 1 400 22 is_stmt 0 view .LVU338
 1101 0012 40F2F312 		movw	r2, #499
 1102 0016 C260     		str	r2, [r0, #12]
 401:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1103              		.loc 1 401 3 is_stmt 1 view .LVU339
 401:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1104              		.loc 1 401 29 is_stmt 0 view .LVU340
 1105 0018 0361     		str	r3, [r0, #16]
 402:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1106              		.loc 1 402 3 is_stmt 1 view .LVU341
 402:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1107              		.loc 1 402 33 is_stmt 0 view .LVU342
 1108 001a 8361     		str	r3, [r0, #24]
 403:Core/Src/main.c ****   {
 1109              		.loc 1 403 3 is_stmt 1 view .LVU343
 403:Core/Src/main.c ****   {
 1110              		.loc 1 403 7 is_stmt 0 view .LVU344
ARM GAS  /tmp/ccfyujML.s 			page 40


 1111 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1112              	.LVL39:
 403:Core/Src/main.c ****   {
 1113              		.loc 1 403 6 view .LVU345
 1114 0020 00B9     		cbnz	r0, .L63
 411:Core/Src/main.c **** 
 1115              		.loc 1 411 1 view .LVU346
 1116 0022 08BD     		pop	{r3, pc}
 1117              	.L63:
 405:Core/Src/main.c ****   }
 1118              		.loc 1 405 5 is_stmt 1 view .LVU347
 1119 0024 FFF7FEFF 		bl	Error_Handler
 1120              	.LVL40:
 1121              	.L65:
 1122              		.align	2
 1123              	.L64:
 1124 0028 00000000 		.word	htim14
 1125 002c 00200040 		.word	1073750016
 1126              		.cfi_endproc
 1127              	.LFE221:
 1129              		.section	.text.MX_TIM13_Init,"ax",%progbits
 1130              		.align	1
 1131              		.syntax unified
 1132              		.thumb
 1133              		.thumb_func
 1134              		.fpu fpv4-sp-d16
 1136              	MX_TIM13_Init:
 1137              	.LFB220:
 357:Core/Src/main.c **** 
 1138              		.loc 1 357 1 view -0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142 0000 08B5     		push	{r3, lr}
 1143              	.LCFI15:
 1144              		.cfi_def_cfa_offset 8
 1145              		.cfi_offset 3, -8
 1146              		.cfi_offset 14, -4
 366:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1147              		.loc 1 366 3 view .LVU349
 366:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1148              		.loc 1 366 19 is_stmt 0 view .LVU350
 1149 0002 0948     		ldr	r0, .L70
 1150 0004 094B     		ldr	r3, .L70+4
 1151 0006 0360     		str	r3, [r0]
 367:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1152              		.loc 1 367 3 is_stmt 1 view .LVU351
 367:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1153              		.loc 1 367 25 is_stmt 0 view .LVU352
 1154 0008 42F22733 		movw	r3, #8999
 1155 000c 4360     		str	r3, [r0, #4]
 368:Core/Src/main.c ****   htim13.Init.Period = 1000-1;
 1156              		.loc 1 368 3 is_stmt 1 view .LVU353
 368:Core/Src/main.c ****   htim13.Init.Period = 1000-1;
 1157              		.loc 1 368 27 is_stmt 0 view .LVU354
 1158 000e 0023     		movs	r3, #0
 1159 0010 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccfyujML.s 			page 41


 369:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1160              		.loc 1 369 3 is_stmt 1 view .LVU355
 369:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1161              		.loc 1 369 22 is_stmt 0 view .LVU356
 1162 0012 40F2E732 		movw	r2, #999
 1163 0016 C260     		str	r2, [r0, #12]
 370:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1164              		.loc 1 370 3 is_stmt 1 view .LVU357
 370:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1165              		.loc 1 370 29 is_stmt 0 view .LVU358
 1166 0018 0361     		str	r3, [r0, #16]
 371:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1167              		.loc 1 371 3 is_stmt 1 view .LVU359
 371:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1168              		.loc 1 371 33 is_stmt 0 view .LVU360
 1169 001a 8361     		str	r3, [r0, #24]
 372:Core/Src/main.c ****   {
 1170              		.loc 1 372 3 is_stmt 1 view .LVU361
 372:Core/Src/main.c ****   {
 1171              		.loc 1 372 7 is_stmt 0 view .LVU362
 1172 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1173              	.LVL41:
 372:Core/Src/main.c ****   {
 1174              		.loc 1 372 6 view .LVU363
 1175 0020 00B9     		cbnz	r0, .L69
 380:Core/Src/main.c **** 
 1176              		.loc 1 380 1 view .LVU364
 1177 0022 08BD     		pop	{r3, pc}
 1178              	.L69:
 374:Core/Src/main.c ****   }
 1179              		.loc 1 374 5 is_stmt 1 view .LVU365
 1180 0024 FFF7FEFF 		bl	Error_Handler
 1181              	.LVL42:
 1182              	.L71:
 1183              		.align	2
 1184              	.L70:
 1185 0028 00000000 		.word	htim13
 1186 002c 001C0040 		.word	1073748992
 1187              		.cfi_endproc
 1188              	.LFE220:
 1190              		.section	.text.SystemClock_Config,"ax",%progbits
 1191              		.align	1
 1192              		.global	SystemClock_Config
 1193              		.syntax unified
 1194              		.thumb
 1195              		.thumb_func
 1196              		.fpu fpv4-sp-d16
 1198              	SystemClock_Config:
 1199              	.LFB217:
 203:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1200              		.loc 1 203 1 view -0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 80
 1203              		@ frame_needed = 0, uses_anonymous_args = 0
 1204 0000 00B5     		push	{lr}
 1205              	.LCFI16:
 1206              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccfyujML.s 			page 42


 1207              		.cfi_offset 14, -4
 1208 0002 95B0     		sub	sp, sp, #84
 1209              	.LCFI17:
 1210              		.cfi_def_cfa_offset 88
 204:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1211              		.loc 1 204 3 view .LVU367
 204:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1212              		.loc 1 204 22 is_stmt 0 view .LVU368
 1213 0004 3422     		movs	r2, #52
 1214 0006 0021     		movs	r1, #0
 1215 0008 07A8     		add	r0, sp, #28
 1216 000a FFF7FEFF 		bl	memset
 1217              	.LVL43:
 205:Core/Src/main.c **** 
 1218              		.loc 1 205 3 is_stmt 1 view .LVU369
 205:Core/Src/main.c **** 
 1219              		.loc 1 205 22 is_stmt 0 view .LVU370
 1220 000e 0023     		movs	r3, #0
 1221 0010 0293     		str	r3, [sp, #8]
 1222 0012 0393     		str	r3, [sp, #12]
 1223 0014 0493     		str	r3, [sp, #16]
 1224 0016 0593     		str	r3, [sp, #20]
 1225 0018 0693     		str	r3, [sp, #24]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1226              		.loc 1 209 3 is_stmt 1 view .LVU371
 1227              	.LBB9:
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1228              		.loc 1 209 3 view .LVU372
 1229 001a 0093     		str	r3, [sp]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1230              		.loc 1 209 3 view .LVU373
 1231 001c 1E4A     		ldr	r2, .L78
 1232 001e 116C     		ldr	r1, [r2, #64]
 1233 0020 41F08051 		orr	r1, r1, #268435456
 1234 0024 1164     		str	r1, [r2, #64]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1235              		.loc 1 209 3 view .LVU374
 1236 0026 126C     		ldr	r2, [r2, #64]
 1237 0028 02F08052 		and	r2, r2, #268435456
 1238 002c 0092     		str	r2, [sp]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1239              		.loc 1 209 3 view .LVU375
 1240 002e 009A     		ldr	r2, [sp]
 1241              	.LBE9:
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1242              		.loc 1 209 3 view .LVU376
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1243              		.loc 1 210 3 view .LVU377
 1244              	.LBB10:
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1245              		.loc 1 210 3 view .LVU378
 1246 0030 0193     		str	r3, [sp, #4]
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1247              		.loc 1 210 3 view .LVU379
 1248 0032 1A4A     		ldr	r2, .L78+4
 1249 0034 1168     		ldr	r1, [r2]
 1250 0036 41F44041 		orr	r1, r1, #49152
ARM GAS  /tmp/ccfyujML.s 			page 43


 1251 003a 1160     		str	r1, [r2]
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1252              		.loc 1 210 3 view .LVU380
 1253 003c 1268     		ldr	r2, [r2]
 1254 003e 02F44042 		and	r2, r2, #49152
 1255 0042 0192     		str	r2, [sp, #4]
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1256              		.loc 1 210 3 view .LVU381
 1257 0044 019A     		ldr	r2, [sp, #4]
 1258              	.LBE10:
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1259              		.loc 1 210 3 view .LVU382
 214:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1260              		.loc 1 214 3 view .LVU383
 214:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1261              		.loc 1 214 36 is_stmt 0 view .LVU384
 1262 0046 0222     		movs	r2, #2
 1263 0048 0792     		str	r2, [sp, #28]
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1264              		.loc 1 215 3 is_stmt 1 view .LVU385
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1265              		.loc 1 215 30 is_stmt 0 view .LVU386
 1266 004a 0121     		movs	r1, #1
 1267 004c 0A91     		str	r1, [sp, #40]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1268              		.loc 1 216 3 is_stmt 1 view .LVU387
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1269              		.loc 1 216 41 is_stmt 0 view .LVU388
 1270 004e 1021     		movs	r1, #16
 1271 0050 0B91     		str	r1, [sp, #44]
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1272              		.loc 1 217 3 is_stmt 1 view .LVU389
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1273              		.loc 1 217 34 is_stmt 0 view .LVU390
 1274 0052 0D92     		str	r2, [sp, #52]
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1275              		.loc 1 218 3 is_stmt 1 view .LVU391
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1276              		.loc 1 218 35 is_stmt 0 view .LVU392
 1277 0054 0E93     		str	r3, [sp, #56]
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1278              		.loc 1 219 3 is_stmt 1 view .LVU393
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1279              		.loc 1 219 30 is_stmt 0 view .LVU394
 1280 0056 0823     		movs	r3, #8
 1281 0058 0F93     		str	r3, [sp, #60]
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1282              		.loc 1 220 3 is_stmt 1 view .LVU395
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1283              		.loc 1 220 30 is_stmt 0 view .LVU396
 1284 005a 5A23     		movs	r3, #90
 1285 005c 1093     		str	r3, [sp, #64]
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1286              		.loc 1 221 3 is_stmt 1 view .LVU397
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1287              		.loc 1 221 30 is_stmt 0 view .LVU398
 1288 005e 1192     		str	r2, [sp, #68]
ARM GAS  /tmp/ccfyujML.s 			page 44


 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1289              		.loc 1 222 3 is_stmt 1 view .LVU399
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1290              		.loc 1 222 30 is_stmt 0 view .LVU400
 1291 0060 1292     		str	r2, [sp, #72]
 223:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1292              		.loc 1 223 3 is_stmt 1 view .LVU401
 223:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1293              		.loc 1 223 30 is_stmt 0 view .LVU402
 1294 0062 1392     		str	r2, [sp, #76]
 224:Core/Src/main.c ****   {
 1295              		.loc 1 224 3 is_stmt 1 view .LVU403
 224:Core/Src/main.c ****   {
 1296              		.loc 1 224 7 is_stmt 0 view .LVU404
 1297 0064 07A8     		add	r0, sp, #28
 1298 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1299              	.LVL44:
 224:Core/Src/main.c ****   {
 1300              		.loc 1 224 6 view .LVU405
 1301 006a 88B9     		cbnz	r0, .L76
 230:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1302              		.loc 1 230 3 is_stmt 1 view .LVU406
 230:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1303              		.loc 1 230 31 is_stmt 0 view .LVU407
 1304 006c 0F23     		movs	r3, #15
 1305 006e 0293     		str	r3, [sp, #8]
 232:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1306              		.loc 1 232 3 is_stmt 1 view .LVU408
 232:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1307              		.loc 1 232 34 is_stmt 0 view .LVU409
 1308 0070 0223     		movs	r3, #2
 1309 0072 0393     		str	r3, [sp, #12]
 233:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1310              		.loc 1 233 3 is_stmt 1 view .LVU410
 233:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1311              		.loc 1 233 35 is_stmt 0 view .LVU411
 1312 0074 0023     		movs	r3, #0
 1313 0076 0493     		str	r3, [sp, #16]
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1314              		.loc 1 234 3 is_stmt 1 view .LVU412
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1315              		.loc 1 234 36 is_stmt 0 view .LVU413
 1316 0078 4FF48052 		mov	r2, #4096
 1317 007c 0592     		str	r2, [sp, #20]
 235:Core/Src/main.c **** 
 1318              		.loc 1 235 3 is_stmt 1 view .LVU414
 235:Core/Src/main.c **** 
 1319              		.loc 1 235 36 is_stmt 0 view .LVU415
 1320 007e 0693     		str	r3, [sp, #24]
 237:Core/Src/main.c ****   {
 1321              		.loc 1 237 3 is_stmt 1 view .LVU416
 237:Core/Src/main.c ****   {
 1322              		.loc 1 237 7 is_stmt 0 view .LVU417
 1323 0080 0321     		movs	r1, #3
 1324 0082 02A8     		add	r0, sp, #8
 1325 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1326              	.LVL45:
ARM GAS  /tmp/ccfyujML.s 			page 45


 237:Core/Src/main.c ****   {
 1327              		.loc 1 237 6 view .LVU418
 1328 0088 20B9     		cbnz	r0, .L77
 241:Core/Src/main.c **** 
 1329              		.loc 1 241 1 view .LVU419
 1330 008a 15B0     		add	sp, sp, #84
 1331              	.LCFI18:
 1332              		.cfi_remember_state
 1333              		.cfi_def_cfa_offset 4
 1334              		@ sp needed
 1335 008c 5DF804FB 		ldr	pc, [sp], #4
 1336              	.L76:
 1337              	.LCFI19:
 1338              		.cfi_restore_state
 226:Core/Src/main.c ****   }
 1339              		.loc 1 226 5 is_stmt 1 view .LVU420
 1340 0090 FFF7FEFF 		bl	Error_Handler
 1341              	.LVL46:
 1342              	.L77:
 239:Core/Src/main.c ****   }
 1343              		.loc 1 239 5 view .LVU421
 1344 0094 FFF7FEFF 		bl	Error_Handler
 1345              	.LVL47:
 1346              	.L79:
 1347              		.align	2
 1348              	.L78:
 1349 0098 00380240 		.word	1073887232
 1350 009c 00700040 		.word	1073770496
 1351              		.cfi_endproc
 1352              	.LFE217:
 1354              		.section	.text.main,"ax",%progbits
 1355              		.align	1
 1356              		.global	main
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	main:
 1363              	.LFB216:
 123:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1364              		.loc 1 123 1 view -0
 1365              		.cfi_startproc
 1366              		@ Volatile: function does not return.
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369 0000 08B5     		push	{r3, lr}
 1370              	.LCFI20:
 1371              		.cfi_def_cfa_offset 8
 1372              		.cfi_offset 3, -8
 1373              		.cfi_offset 14, -4
 131:Core/Src/main.c **** 
 1374              		.loc 1 131 3 view .LVU423
 1375 0002 FFF7FEFF 		bl	HAL_Init
 1376              	.LVL48:
 137:Core/Src/main.c **** 
 1377              		.loc 1 137 3 view .LVU424
 1378 0006 FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /tmp/ccfyujML.s 			page 46


 1379              	.LVL49:
 143:Core/Src/main.c ****   MX_CAN1_Init();
 1380              		.loc 1 143 3 view .LVU425
 1381 000a FFF7FEFF 		bl	MX_GPIO_Init
 1382              	.LVL50:
 144:Core/Src/main.c ****   MX_DMA_Init();
 1383              		.loc 1 144 3 view .LVU426
 1384 000e FFF7FEFF 		bl	MX_CAN1_Init
 1385              	.LVL51:
 145:Core/Src/main.c ****   MX_ADC1_Init();
 1386              		.loc 1 145 3 view .LVU427
 1387 0012 FFF7FEFF 		bl	MX_DMA_Init
 1388              	.LVL52:
 146:Core/Src/main.c ****   MX_TIM14_Init();
 1389              		.loc 1 146 3 view .LVU428
 1390 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1391              	.LVL53:
 147:Core/Src/main.c ****   MX_TIM13_Init();
 1392              		.loc 1 147 3 view .LVU429
 1393 001a FFF7FEFF 		bl	MX_TIM14_Init
 1394              	.LVL54:
 148:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1395              		.loc 1 148 3 view .LVU430
 1396 001e FFF7FEFF 		bl	MX_TIM13_Init
 1397              	.LVL55:
 152:Core/Src/main.c ****   txHeader0.IDE = CAN_ID_STD;
 1398              		.loc 1 152 3 view .LVU431
 152:Core/Src/main.c ****   txHeader0.IDE = CAN_ID_STD;
 1399              		.loc 1 152 17 is_stmt 0 view .LVU432
 1400 0022 174A     		ldr	r2, .L83
 1401 0024 0821     		movs	r1, #8
 1402 0026 1161     		str	r1, [r2, #16]
 153:Core/Src/main.c ****   txHeader0.RTR = CAN_RTR_DATA;
 1403              		.loc 1 153 3 is_stmt 1 view .LVU433
 153:Core/Src/main.c ****   txHeader0.RTR = CAN_RTR_DATA;
 1404              		.loc 1 153 17 is_stmt 0 view .LVU434
 1405 0028 0023     		movs	r3, #0
 1406 002a 9360     		str	r3, [r2, #8]
 154:Core/Src/main.c ****   txHeader0.StdId = 0x086;
 1407              		.loc 1 154 3 is_stmt 1 view .LVU435
 154:Core/Src/main.c ****   txHeader0.StdId = 0x086;
 1408              		.loc 1 154 17 is_stmt 0 view .LVU436
 1409 002c D360     		str	r3, [r2, #12]
 155:Core/Src/main.c ****   txHeader0.ExtId = 0;
 1410              		.loc 1 155 3 is_stmt 1 view .LVU437
 155:Core/Src/main.c ****   txHeader0.ExtId = 0;
 1411              		.loc 1 155 19 is_stmt 0 view .LVU438
 1412 002e 8620     		movs	r0, #134
 1413 0030 1060     		str	r0, [r2]
 156:Core/Src/main.c ****   txHeader0.TransmitGlobalTime = DISABLE;
 1414              		.loc 1 156 3 is_stmt 1 view .LVU439
 156:Core/Src/main.c ****   txHeader0.TransmitGlobalTime = DISABLE;
 1415              		.loc 1 156 19 is_stmt 0 view .LVU440
 1416 0032 5360     		str	r3, [r2, #4]
 157:Core/Src/main.c **** 
 1417              		.loc 1 157 3 is_stmt 1 view .LVU441
 157:Core/Src/main.c **** 
ARM GAS  /tmp/ccfyujML.s 			page 47


 1418              		.loc 1 157 32 is_stmt 0 view .LVU442
 1419 0034 1375     		strb	r3, [r2, #20]
 160:Core/Src/main.c ****   txHeader1.IDE = CAN_ID_STD;
 1420              		.loc 1 160 3 is_stmt 1 view .LVU443
 160:Core/Src/main.c ****   txHeader1.IDE = CAN_ID_STD;
 1421              		.loc 1 160 17 is_stmt 0 view .LVU444
 1422 0036 134A     		ldr	r2, .L83+4
 1423 0038 1161     		str	r1, [r2, #16]
 161:Core/Src/main.c ****   txHeader1.RTR = CAN_RTR_DATA;
 1424              		.loc 1 161 3 is_stmt 1 view .LVU445
 161:Core/Src/main.c ****   txHeader1.RTR = CAN_RTR_DATA;
 1425              		.loc 1 161 17 is_stmt 0 view .LVU446
 1426 003a 9360     		str	r3, [r2, #8]
 162:Core/Src/main.c ****   txHeader1.StdId = 0x087;
 1427              		.loc 1 162 3 is_stmt 1 view .LVU447
 162:Core/Src/main.c ****   txHeader1.StdId = 0x087;
 1428              		.loc 1 162 17 is_stmt 0 view .LVU448
 1429 003c D360     		str	r3, [r2, #12]
 163:Core/Src/main.c ****   txHeader1.ExtId = 0;
 1430              		.loc 1 163 3 is_stmt 1 view .LVU449
 163:Core/Src/main.c ****   txHeader1.ExtId = 0;
 1431              		.loc 1 163 19 is_stmt 0 view .LVU450
 1432 003e 8720     		movs	r0, #135
 1433 0040 1060     		str	r0, [r2]
 164:Core/Src/main.c ****   txHeader1.TransmitGlobalTime = DISABLE;
 1434              		.loc 1 164 3 is_stmt 1 view .LVU451
 164:Core/Src/main.c ****   txHeader1.TransmitGlobalTime = DISABLE;
 1435              		.loc 1 164 19 is_stmt 0 view .LVU452
 1436 0042 5360     		str	r3, [r2, #4]
 165:Core/Src/main.c **** 
 1437              		.loc 1 165 3 is_stmt 1 view .LVU453
 165:Core/Src/main.c **** 
 1438              		.loc 1 165 32 is_stmt 0 view .LVU454
 1439 0044 1375     		strb	r3, [r2, #20]
 168:Core/Src/main.c ****   txHeader2.IDE = CAN_ID_STD;
 1440              		.loc 1 168 3 is_stmt 1 view .LVU455
 168:Core/Src/main.c ****   txHeader2.IDE = CAN_ID_STD;
 1441              		.loc 1 168 17 is_stmt 0 view .LVU456
 1442 0046 104A     		ldr	r2, .L83+8
 1443 0048 1161     		str	r1, [r2, #16]
 169:Core/Src/main.c ****   txHeader2.RTR = CAN_RTR_DATA;
 1444              		.loc 1 169 3 is_stmt 1 view .LVU457
 169:Core/Src/main.c ****   txHeader2.RTR = CAN_RTR_DATA;
 1445              		.loc 1 169 17 is_stmt 0 view .LVU458
 1446 004a 9360     		str	r3, [r2, #8]
 170:Core/Src/main.c ****   txHeader2.StdId = 0x0C1;
 1447              		.loc 1 170 3 is_stmt 1 view .LVU459
 170:Core/Src/main.c ****   txHeader2.StdId = 0x0C1;
 1448              		.loc 1 170 17 is_stmt 0 view .LVU460
 1449 004c D360     		str	r3, [r2, #12]
 171:Core/Src/main.c ****   txHeader2.ExtId = 0;
 1450              		.loc 1 171 3 is_stmt 1 view .LVU461
 171:Core/Src/main.c ****   txHeader2.ExtId = 0;
 1451              		.loc 1 171 19 is_stmt 0 view .LVU462
 1452 004e C121     		movs	r1, #193
 1453 0050 1160     		str	r1, [r2]
 172:Core/Src/main.c ****   txHeader2.TransmitGlobalTime = DISABLE;
ARM GAS  /tmp/ccfyujML.s 			page 48


 1454              		.loc 1 172 3 is_stmt 1 view .LVU463
 172:Core/Src/main.c ****   txHeader2.TransmitGlobalTime = DISABLE;
 1455              		.loc 1 172 19 is_stmt 0 view .LVU464
 1456 0052 5360     		str	r3, [r2, #4]
 173:Core/Src/main.c **** 
 1457              		.loc 1 173 3 is_stmt 1 view .LVU465
 173:Core/Src/main.c **** 
 1458              		.loc 1 173 32 is_stmt 0 view .LVU466
 1459 0054 1375     		strb	r3, [r2, #20]
 175:Core/Src/main.c **** 	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Inte
 1460              		.loc 1 175 2 is_stmt 1 view .LVU467
 1461 0056 0D4C     		ldr	r4, .L83+12
 1462 0058 2046     		mov	r0, r4
 1463 005a FFF7FEFF 		bl	HAL_CAN_Start
 1464              	.LVL56:
 176:Core/Src/main.c **** 
 1465              		.loc 1 176 2 view .LVU468
 1466 005e 0221     		movs	r1, #2
 1467 0060 2046     		mov	r0, r4
 1468 0062 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1469              	.LVL57:
 179:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 1470              		.loc 1 179 3 view .LVU469
 1471 0066 0A48     		ldr	r0, .L83+16
 1472 0068 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1473              	.LVL58:
 180:Core/Src/main.c **** 
 1474              		.loc 1 180 3 view .LVU470
 1475 006c 0948     		ldr	r0, .L83+20
 1476 006e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1477              	.LVL59:
 183:Core/Src/main.c **** 
 1478              		.loc 1 183 2 view .LVU471
 1479 0072 40F6F672 		movw	r2, #4086
 1480 0076 0849     		ldr	r1, .L83+24
 1481 0078 0848     		ldr	r0, .L83+28
 1482 007a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1483              	.LVL60:
 1484              	.L81:
 189:Core/Src/main.c ****   {
 1485              		.loc 1 189 3 discriminator 1 view .LVU472
 194:Core/Src/main.c ****   /* USER CODE END 3 */
 1486              		.loc 1 194 3 discriminator 1 view .LVU473
 189:Core/Src/main.c ****   {
 1487              		.loc 1 189 9 discriminator 1 view .LVU474
 1488 007e FEE7     		b	.L81
 1489              	.L84:
 1490              		.align	2
 1491              	.L83:
 1492 0080 00000000 		.word	txHeader0
 1493 0084 00000000 		.word	txHeader1
 1494 0088 00000000 		.word	txHeader2
 1495 008c 00000000 		.word	hcan1
 1496 0090 00000000 		.word	htim14
 1497 0094 00000000 		.word	htim13
 1498 0098 00000000 		.word	adc_buf
 1499 009c 00000000 		.word	hadc1
ARM GAS  /tmp/ccfyujML.s 			page 49


 1500              		.cfi_endproc
 1501              	.LFE216:
 1503              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1504              		.align	1
 1505              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1509              		.fpu fpv4-sp-d16
 1511              	HAL_CAN_RxFifo0MsgPendingCallback:
 1512              	.LVL61:
 1513              	.LFB224:
 476:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 1514              		.loc 1 476 1 view -0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 476:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 1518              		.loc 1 476 1 is_stmt 0 view .LVU476
 1519 0000 08B5     		push	{r3, lr}
 1520              	.LCFI21:
 1521              		.cfi_def_cfa_offset 8
 1522              		.cfi_offset 3, -8
 1523              		.cfi_offset 14, -4
 477:Core/Src/main.c ****     Error_Handler();
 1524              		.loc 1 477 3 is_stmt 1 view .LVU477
 477:Core/Src/main.c ****     Error_Handler();
 1525              		.loc 1 477 7 is_stmt 0 view .LVU478
 1526 0002 104B     		ldr	r3, .L93
 1527 0004 104A     		ldr	r2, .L93+4
 1528 0006 0021     		movs	r1, #0
 1529 0008 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1530              	.LVL62:
 477:Core/Src/main.c ****     Error_Handler();
 1531              		.loc 1 477 6 view .LVU479
 1532 000c 30B9     		cbnz	r0, .L90
 481:Core/Src/main.c ****   {
 1533              		.loc 1 481 3 is_stmt 1 view .LVU480
 481:Core/Src/main.c ****   {
 1534              		.loc 1 481 15 is_stmt 0 view .LVU481
 1535 000e 0E4B     		ldr	r3, .L93+4
 1536 0010 1B68     		ldr	r3, [r3]
 481:Core/Src/main.c ****   {
 1537              		.loc 1 481 6 view .LVU482
 1538 0012 A72B     		cmp	r3, #167
 1539 0014 04D0     		beq	.L91
 1540              	.L87:
 492:Core/Src/main.c ****   {
 1541              		.loc 1 492 3 is_stmt 1 view .LVU483
 492:Core/Src/main.c ****   {
 1542              		.loc 1 492 6 is_stmt 0 view .LVU484
 1543 0016 012B     		cmp	r3, #1
 1544 0018 0AD0     		beq	.L92
 1545              	.L85:
 504:Core/Src/main.c **** 
 1546              		.loc 1 504 1 view .LVU485
 1547 001a 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccfyujML.s 			page 50


 1548              	.L90:
 478:Core/Src/main.c **** 
 1549              		.loc 1 478 5 is_stmt 1 view .LVU486
 1550 001c FFF7FEFF 		bl	Error_Handler
 1551              	.LVL63:
 1552              	.L91:
 1553              	.LBB11:
 484:Core/Src/main.c ****     int rine2 = canRX[1];
 1554              		.loc 1 484 4 view .LVU487
 484:Core/Src/main.c ****     int rine2 = canRX[1];
 1555              		.loc 1 484 21 is_stmt 0 view .LVU488
 1556 0020 0849     		ldr	r1, .L93
 1557 0022 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1558              	.LVL64:
 485:Core/Src/main.c **** 
 1559              		.loc 1 485 5 is_stmt 1 view .LVU489
 485:Core/Src/main.c **** 
 1560              		.loc 1 485 22 is_stmt 0 view .LVU490
 1561 0024 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 1562              	.LVL65:
 488:Core/Src/main.c ****   }
 1563              		.loc 1 488 5 is_stmt 1 view .LVU491
 488:Core/Src/main.c ****   }
 1564              		.loc 1 488 36 is_stmt 0 view .LVU492
 1565 0026 42EA0022 		orr	r2, r2, r0, lsl #8
 1566              	.LVL66:
 488:Core/Src/main.c ****   }
 1567              		.loc 1 488 21 view .LVU493
 1568 002a 0849     		ldr	r1, .L93+8
 1569 002c 0A60     		str	r2, [r1]
 1570 002e F2E7     		b	.L87
 1571              	.LVL67:
 1572              	.L92:
 488:Core/Src/main.c ****   }
 1573              		.loc 1 488 21 view .LVU494
 1574              	.LBE11:
 1575              	.LBB12:
 494:Core/Src/main.c ****     uint8_t volt2 = canRX[3] & 0xFF;
 1576              		.loc 1 494 5 is_stmt 1 view .LVU495
 495:Core/Src/main.c ****     uint8_t volt3 = canRX[6] >> 24;
 1577              		.loc 1 495 5 view .LVU496
 495:Core/Src/main.c ****     uint8_t volt3 = canRX[6] >> 24;
 1578              		.loc 1 495 13 is_stmt 0 view .LVU497
 1579 0030 044B     		ldr	r3, .L93
 1580 0032 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1581              	.LVL68:
 496:Core/Src/main.c ****     uint8_t volt4 = canRX[5] >> 16 & 0xFF;
 1582              		.loc 1 496 5 is_stmt 1 view .LVU498
 497:Core/Src/main.c **** 
 1583              		.loc 1 497 5 view .LVU499
 499:Core/Src/main.c ****     uint16_t emus2 = (volt4 << 8) | volt3;
 1584              		.loc 1 499 5 view .LVU500
 500:Core/Src/main.c ****     emusVoltage = volt3 << 24 | (((volt4 << 16) | ((volt1 << 8)) | (volt2)));
 1585              		.loc 1 500 5 view .LVU501
 501:Core/Src/main.c ****     emusVoltage = emusVoltage / 10; // scale down to rinehart *10 scaler
 1586              		.loc 1 501 5 view .LVU502
 502:Core/Src/main.c ****   }
ARM GAS  /tmp/ccfyujML.s 			page 51


 1587              		.loc 1 502 5 view .LVU503
 502:Core/Src/main.c ****   }
 1588              		.loc 1 502 31 is_stmt 0 view .LVU504
 1589 0034 064A     		ldr	r2, .L93+12
 1590 0036 A2FB0323 		umull	r2, r3, r2, r3
 1591              	.LVL69:
 502:Core/Src/main.c ****   }
 1592              		.loc 1 502 31 view .LVU505
 1593 003a DB08     		lsrs	r3, r3, #3
 502:Core/Src/main.c ****   }
 1594              		.loc 1 502 17 view .LVU506
 1595 003c 054A     		ldr	r2, .L93+16
 1596 003e 1360     		str	r3, [r2]
 1597              	.LBE12:
 504:Core/Src/main.c **** 
 1598              		.loc 1 504 1 view .LVU507
 1599 0040 EBE7     		b	.L85
 1600              	.L94:
 1601 0042 00BF     		.align	2
 1602              	.L93:
 1603 0044 00000000 		.word	.LANCHOR7
 1604 0048 00000000 		.word	rxHeader
 1605 004c 00000000 		.word	.LANCHOR3
 1606 0050 CDCCCCCC 		.word	-858993459
 1607 0054 00000000 		.word	.LANCHOR4
 1608              		.cfi_endproc
 1609              	.LFE224:
 1611              		.comm	canFilter1,40,4
 1612              		.comm	canFilter0,40,4
 1613              		.global	canRX
 1614              		.comm	rxHeader,28,4
 1615              		.comm	TxData,8,4
 1616              		.comm	txHeader2,24,4
 1617              		.comm	txHeader1,24,4
 1618              		.comm	txHeader0,24,4
 1619              		.comm	TxMailbox,4,4
 1620              		.global	voltageCheckCount
 1621              		.global	lastPrechargeState
 1622              		.global	prechargeState
 1623              		.global	readyToDrive
 1624              		.global	DCDCFault
 1625              		.comm	adc_buf,16344,4
 1626              		.global	RTDButtonPressed
 1627              		.global	DCDCEnable
 1628              		.global	vicoreTemp
 1629              		.global	emusVoltage
 1630              		.global	rinehartVoltage
 1631              		.global	rinehart_send_command_count
 1632              		.comm	htim14,72,4
 1633              		.comm	htim13,72,4
 1634              		.comm	hcan1,40,4
 1635              		.comm	hdma_adc1,96,4
 1636              		.comm	hadc1,72,4
 1637              		.section	.bss.DCDCEnable,"aw",%nobits
 1638              		.align	2
 1641              	DCDCEnable:
 1642 0000 00000000 		.space	4
ARM GAS  /tmp/ccfyujML.s 			page 52


 1643              		.section	.bss.DCDCFault,"aw",%nobits
 1644              		.align	2
 1645              		.set	.LANCHOR5,. + 0
 1648              	DCDCFault:
 1649 0000 00000000 		.space	4
 1650              		.section	.bss.RTDButtonPressed,"aw",%nobits
 1651              		.align	2
 1654              	RTDButtonPressed:
 1655 0000 00000000 		.space	4
 1656              		.section	.bss.canRX,"aw",%nobits
 1657              		.align	2
 1658              		.set	.LANCHOR7,. + 0
 1661              	canRX:
 1662 0000 00000000 		.space	8
 1662      00000000 
 1663              		.section	.bss.emusVoltage,"aw",%nobits
 1664              		.align	2
 1665              		.set	.LANCHOR4,. + 0
 1668              	emusVoltage:
 1669 0000 00000000 		.space	4
 1670              		.section	.bss.lastPrechargeState,"aw",%nobits
 1671              		.set	.LANCHOR2,. + 0
 1674              	lastPrechargeState:
 1675 0000 00       		.space	1
 1676              		.section	.bss.prechargeState,"aw",%nobits
 1677              		.set	.LANCHOR0,. + 0
 1680              	prechargeState:
 1681 0000 00       		.space	1
 1682              		.section	.bss.readyToDrive,"aw",%nobits
 1683              		.align	2
 1684              		.set	.LANCHOR1,. + 0
 1687              	readyToDrive:
 1688 0000 00000000 		.space	4
 1689              		.section	.bss.rinehartVoltage,"aw",%nobits
 1690              		.align	2
 1691              		.set	.LANCHOR3,. + 0
 1694              	rinehartVoltage:
 1695 0000 00000000 		.space	4
 1696              		.section	.bss.rinehart_send_command_count,"aw",%nobits
 1699              	rinehart_send_command_count:
 1700 0000 00       		.space	1
 1701              		.section	.bss.vicoreTemp,"aw",%nobits
 1702              		.align	2
 1703              		.set	.LANCHOR6,. + 0
 1706              	vicoreTemp:
 1707 0000 00000000 		.space	4
 1708              		.section	.bss.voltageCheckCount,"aw",%nobits
 1711              	voltageCheckCount:
 1712 0000 00       		.space	1
 1713              		.text
 1714              	.Letext0:
 1715              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1716              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1717              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1718              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1719              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1720              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
ARM GAS  /tmp/ccfyujML.s 			page 53


 1721              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1722              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1723              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1724              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1725              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1726              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1727              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1728              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1729              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1730              		.file 18 "<built-in>"
ARM GAS  /tmp/ccfyujML.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccfyujML.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccfyujML.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccfyujML.s:151    .text.MX_GPIO_Init:0000000000000080 $d
     /tmp/ccfyujML.s:157    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccfyujML.s:163    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccfyujML.s:212    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccfyujML.s:222    .text.prechargeControl:0000000000000000 $t
     /tmp/ccfyujML.s:229    .text.prechargeControl:0000000000000000 prechargeControl
     /tmp/ccfyujML.s:249    .text.prechargeControl:0000000000000010 $d
     /tmp/ccfyujML.s:253    .text.prechargeControl:0000000000000014 $t
     /tmp/ccfyujML.s:566    .text.prechargeControl:0000000000000188 $d
                            *COM*:0000000000000008 TxData
                            *COM*:0000000000000004 TxMailbox
                            *COM*:0000000000000018 txHeader2
                            *COM*:0000000000000028 hcan1
     /tmp/ccfyujML.s:582    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccfyujML.s:589    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccfyujML.s:678    .text.HAL_TIM_PeriodElapsedCallback:0000000000000050 $d
                            *COM*:0000000000000048 htim14
                            *COM*:0000000000000048 htim13
                            *COM*:0000000000000018 txHeader1
     /tmp/ccfyujML.s:693    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccfyujML.s:700    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccfyujML.s:750    .text.HAL_ADC_ConvCpltCallback:0000000000000028 $d
                            *COM*:0000000000003fd8 adc_buf
     /tmp/ccfyujML.s:757    .text.Error_Handler:0000000000000000 $t
     /tmp/ccfyujML.s:764    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccfyujML.s:796    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccfyujML.s:802    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccfyujML.s:941    .text.MX_CAN1_Init:0000000000000074 $d
                            *COM*:0000000000000028 canFilter0
                            *COM*:0000000000000028 canFilter1
     /tmp/ccfyujML.s:949    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccfyujML.s:955    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccfyujML.s:1062   .text.MX_ADC1_Init:0000000000000060 $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccfyujML.s:1069   .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/ccfyujML.s:1075   .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/ccfyujML.s:1124   .text.MX_TIM14_Init:0000000000000028 $d
     /tmp/ccfyujML.s:1130   .text.MX_TIM13_Init:0000000000000000 $t
     /tmp/ccfyujML.s:1136   .text.MX_TIM13_Init:0000000000000000 MX_TIM13_Init
     /tmp/ccfyujML.s:1185   .text.MX_TIM13_Init:0000000000000028 $d
     /tmp/ccfyujML.s:1191   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccfyujML.s:1198   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccfyujML.s:1349   .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccfyujML.s:1355   .text.main:0000000000000000 $t
     /tmp/ccfyujML.s:1362   .text.main:0000000000000000 main
     /tmp/ccfyujML.s:1492   .text.main:0000000000000080 $d
                            *COM*:0000000000000018 txHeader0
     /tmp/ccfyujML.s:1504   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccfyujML.s:1511   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccfyujML.s:1603   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000044 $d
                            *COM*:000000000000001c rxHeader
     /tmp/ccfyujML.s:1661   .bss.canRX:0000000000000000 canRX
     /tmp/ccfyujML.s:1711   .bss.voltageCheckCount:0000000000000000 voltageCheckCount
ARM GAS  /tmp/ccfyujML.s 			page 55


     /tmp/ccfyujML.s:1674   .bss.lastPrechargeState:0000000000000000 lastPrechargeState
     /tmp/ccfyujML.s:1680   .bss.prechargeState:0000000000000000 prechargeState
     /tmp/ccfyujML.s:1687   .bss.readyToDrive:0000000000000000 readyToDrive
     /tmp/ccfyujML.s:1648   .bss.DCDCFault:0000000000000000 DCDCFault
     /tmp/ccfyujML.s:1654   .bss.RTDButtonPressed:0000000000000000 RTDButtonPressed
     /tmp/ccfyujML.s:1641   .bss.DCDCEnable:0000000000000000 DCDCEnable
     /tmp/ccfyujML.s:1706   .bss.vicoreTemp:0000000000000000 vicoreTemp
     /tmp/ccfyujML.s:1668   .bss.emusVoltage:0000000000000000 emusVoltage
     /tmp/ccfyujML.s:1694   .bss.rinehartVoltage:0000000000000000 rinehartVoltage
     /tmp/ccfyujML.s:1699   .bss.rinehart_send_command_count:0000000000000000 rinehart_send_command_count
                            *COM*:0000000000000060 hdma_adc1
     /tmp/ccfyujML.s:1638   .bss.DCDCEnable:0000000000000000 $d
     /tmp/ccfyujML.s:1644   .bss.DCDCFault:0000000000000000 $d
     /tmp/ccfyujML.s:1651   .bss.RTDButtonPressed:0000000000000000 $d
     /tmp/ccfyujML.s:1657   .bss.canRX:0000000000000000 $d
     /tmp/ccfyujML.s:1664   .bss.emusVoltage:0000000000000000 $d
     /tmp/ccfyujML.s:1675   .bss.lastPrechargeState:0000000000000000 $d
     /tmp/ccfyujML.s:1681   .bss.prechargeState:0000000000000000 $d
     /tmp/ccfyujML.s:1683   .bss.readyToDrive:0000000000000000 $d
     /tmp/ccfyujML.s:1690   .bss.rinehartVoltage:0000000000000000 $d
     /tmp/ccfyujML.s:1700   .bss.rinehart_send_command_count:0000000000000000 $d
     /tmp/ccfyujML.s:1702   .bss.vicoreTemp:0000000000000000 $d
     /tmp/ccfyujML.s:1712   .bss.voltageCheckCount:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_ui2d
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dsub
__aeabi_dcmple
HAL_CAN_AddTxMessage
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start_IT
HAL_ADC_Start_DMA
HAL_CAN_GetRxMessage
