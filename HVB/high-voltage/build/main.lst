ARM GAS  /tmp/cc3ERXfA.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB223:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** /* USER CODE END PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/cc3ERXfA.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** // analog buffer
  35:Core/Src/main.c **** #define ADC_BUF_LEN 4086
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** // precharge
  38:Core/Src/main.c **** #define PRECHARGE_COEFFICIENT       0.95          // 95% complete with precharge so it's probably s
  39:Core/Src/main.c **** #define NUM_COMMAND_MSG             10            // number of command messages we see from rinehar
  40:Core/Src/main.c **** #define NUM_VOLTAGE_CHECKS          500           // since we're checking at 10ms Interrupts, 500 w
  41:Core/Src/main.c ****                                                   // precharge should be done in less than 2 second
  42:Core/Src/main.c **** /* USER CODE END PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PM */
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  50:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** TIM_HandleTypeDef htim13;
  55:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE BEGIN PV */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** // counters for Rinehart message sending in precharge
  60:Core/Src/main.c **** uint8_t rinehart_send_command_count = 0;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** // inputs
  63:Core/Src/main.c **** uint32_t rinehartVoltage = 0;                 // read from CAN
  64:Core/Src/main.c **** uint32_t bmsVoltage = 0;					            // read from CAN
  65:Core/Src/main.c **** int vicoreTemp = 0;					                  // read from DMA, vicore temp
  66:Core/Src/main.c **** int DCDCEnable = 0;                           // dc-dc enable (0 = disabled, 1 = enabled)
  67:Core/Src/main.c **** int RTDButtonPressed = 0;                     // read this from CAN, if it's 1 we can finish precha
  68:Core/Src/main.c **** uint32_t adc_buf[ADC_BUF_LEN];				        // adc read buffer
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** // output
  71:Core/Src/main.c **** int DCDCFault = 0;                            // the dc-dc fault indicator (0 = no fault, 1 = fault
  72:Core/Src/main.c **** int readyToDrive = 0;					                // the car is ready to drive! (0 = not ready, 1 = ready)
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** // precharge states
  75:Core/Src/main.c **** enum prechargeStates
  76:Core/Src/main.c **** {
  77:Core/Src/main.c **** 	PRECHARGE_OFF,
  78:Core/Src/main.c **** 	PRECHARGE_ON,
  79:Core/Src/main.c **** 	PRECHARGE_DONE,
  80:Core/Src/main.c **** 	PRECHARGE_ERROR
  81:Core/Src/main.c **** };
  82:Core/Src/main.c **** uint8_t prechargeState = PRECHARGE_OFF;			  // set initial precharge state to OFF
  83:Core/Src/main.c **** uint8_t lastPrechargeState = PRECHARGE_OFF;
  84:Core/Src/main.c **** uint8_t voltageCheckCount = 0;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** // CAN transmit 
  87:Core/Src/main.c **** uint32_t TxMailbox; 							            // CAN Bus Mail box variable
  88:Core/Src/main.c **** CAN_TxHeaderTypeDef txHeader0; 					      // CAN Bus Transmit Header BASE
ARM GAS  /tmp/cc3ERXfA.s 			page 3


  89:Core/Src/main.c **** CAN_TxHeaderTypeDef txHeader1; 					      // CAN Bus Transmit Header DATA
  90:Core/Src/main.c **** CAN_TxHeaderTypeDef txHeader2; 					      // CAN Bus Transmit Header DATA
  91:Core/Src/main.c **** uint8_t TxData[8];                            // CAN transmit buffer
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** // CAN recive
  94:Core/Src/main.c **** CAN_RxHeaderTypeDef rxHeader; 					      // CAN Bus Receive Header
  95:Core/Src/main.c **** uint8_t canRX[8] = {0, 0, 0, 0, 0, 0, 0, 0}; 	// CAN Bus Receive Buffer
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** CAN_FilterTypeDef canFilter0; 					      // CAN Bus Filter for BMS
  98:Core/Src/main.c **** CAN_FilterTypeDef canFilter1;                 // CAN Bus Filter for Rinehart
  99:Core/Src/main.c **** /* USER CODE END PV */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 102:Core/Src/main.c **** void SystemClock_Config(void);
 103:Core/Src/main.c **** static void MX_GPIO_Init(void);
 104:Core/Src/main.c **** static void MX_CAN1_Init(void);
 105:Core/Src/main.c **** static void MX_DMA_Init(void);
 106:Core/Src/main.c **** static void MX_ADC1_Init(void);
 107:Core/Src/main.c **** static void MX_TIM14_Init(void);
 108:Core/Src/main.c **** static void MX_TIM13_Init(void);
 109:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 110:Core/Src/main.c **** void prechargeControl();
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* USER CODE END PFP */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 115:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 116:Core/Src/main.c **** /* USER CODE END 0 */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c **** /**
 119:Core/Src/main.c ****   * @brief  The application entry point.
 120:Core/Src/main.c ****   * @retval int
 121:Core/Src/main.c ****   */
 122:Core/Src/main.c **** int main(void)
 123:Core/Src/main.c **** {
 124:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE END 1 */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 131:Core/Src/main.c ****   HAL_Init();
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 134:Core/Src/main.c ****   /* USER CODE END Init */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* Configure the system clock */
 137:Core/Src/main.c ****   SystemClock_Config();
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 140:Core/Src/main.c ****   /* USER CODE END SysInit */
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /* Initialize all configured peripherals */
 143:Core/Src/main.c ****   MX_GPIO_Init();
 144:Core/Src/main.c ****   MX_CAN1_Init();
 145:Core/Src/main.c ****   MX_DMA_Init();
ARM GAS  /tmp/cc3ERXfA.s 			page 4


 146:Core/Src/main.c ****   MX_ADC1_Init();
 147:Core/Src/main.c ****   MX_TIM14_Init();
 148:Core/Src/main.c ****   MX_TIM13_Init();
 149:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   // init the CAN mailbox for BASE
 152:Core/Src/main.c ****   txHeader0.DLC = 8; // Number of bites to be transmitted max- 8
 153:Core/Src/main.c ****   txHeader0.IDE = CAN_ID_STD;
 154:Core/Src/main.c ****   txHeader0.RTR = CAN_RTR_DATA;
 155:Core/Src/main.c ****   txHeader0.StdId = 0x086;
 156:Core/Src/main.c ****   txHeader0.ExtId = 0;
 157:Core/Src/main.c ****   txHeader0.TransmitGlobalTime = DISABLE;
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   // init the CAN mailbox for DATA
 160:Core/Src/main.c ****   txHeader1.DLC = 8; // Number of bites to be transmitted max- 8
 161:Core/Src/main.c ****   txHeader1.IDE = CAN_ID_STD;
 162:Core/Src/main.c ****   txHeader1.RTR = CAN_RTR_DATA;
 163:Core/Src/main.c ****   txHeader1.StdId = 0x087;
 164:Core/Src/main.c ****   txHeader1.ExtId = 0;
 165:Core/Src/main.c ****   txHeader1.TransmitGlobalTime = DISABLE;
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   // header for rinehart (Parameter Command Message)
 168:Core/Src/main.c ****   txHeader2.DLC = 8; // Number of bites to be transmitted max- 8
 169:Core/Src/main.c ****   txHeader2.IDE = CAN_ID_STD;
 170:Core/Src/main.c ****   txHeader2.RTR = CAN_RTR_DATA;
 171:Core/Src/main.c ****   txHeader2.StdId = 0x0C1;
 172:Core/Src/main.c ****   txHeader2.ExtId = 0;
 173:Core/Src/main.c ****   txHeader2.TransmitGlobalTime = DISABLE;
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** 	HAL_CAN_Start(&hcan1); // Initialize CAN Bus
 176:Core/Src/main.c **** 	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Inte
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   // start timers
 179:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 180:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** 	// start ADC DMA
 183:Core/Src/main.c **** 	HAL_ADC_Start_DMA(&hadc1, adc_buf, ADC_BUF_LEN);
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* USER CODE END 2 */
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /* Infinite loop */
 188:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 189:Core/Src/main.c ****   while (1)
 190:Core/Src/main.c ****   {
 191:Core/Src/main.c ****     /* USER CODE END WHILE */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 194:Core/Src/main.c ****   }
 195:Core/Src/main.c ****   /* USER CODE END 3 */
 196:Core/Src/main.c **** }
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** /**
 199:Core/Src/main.c ****   * @brief System Clock Configuration
 200:Core/Src/main.c ****   * @retval None
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c **** void SystemClock_Config(void)
ARM GAS  /tmp/cc3ERXfA.s 			page 5


 203:Core/Src/main.c **** {
 204:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 205:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 210:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 211:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 212:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 216:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 224:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 225:Core/Src/main.c ****   {
 226:Core/Src/main.c ****     Error_Handler();
 227:Core/Src/main.c ****   }
 228:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 229:Core/Src/main.c ****   */
 230:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 231:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 232:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 233:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 238:Core/Src/main.c ****   {
 239:Core/Src/main.c ****     Error_Handler();
 240:Core/Src/main.c ****   }
 241:Core/Src/main.c **** }
 242:Core/Src/main.c **** 
 243:Core/Src/main.c **** /**
 244:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 245:Core/Src/main.c ****   * @param None
 246:Core/Src/main.c ****   * @retval None
 247:Core/Src/main.c ****   */
 248:Core/Src/main.c **** static void MX_ADC1_Init(void)
 249:Core/Src/main.c **** {
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 252:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 257:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 258:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 259:Core/Src/main.c ****   */
ARM GAS  /tmp/cc3ERXfA.s 			page 6


 260:Core/Src/main.c ****   hadc1.Instance = ADC1;
 261:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 262:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 263:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 264:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 265:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 266:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 267:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 268:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 269:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 270:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 271:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 272:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 277:Core/Src/main.c ****   */
 278:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
 279:Core/Src/main.c ****   sConfig.Rank = 1;
 280:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 281:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 282:Core/Src/main.c ****   {
 283:Core/Src/main.c ****     Error_Handler();
 284:Core/Src/main.c ****   }
 285:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 286:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 287:Core/Src/main.c **** 
 288:Core/Src/main.c **** }
 289:Core/Src/main.c **** 
 290:Core/Src/main.c **** /**
 291:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 292:Core/Src/main.c ****   * @param None
 293:Core/Src/main.c ****   * @retval None
 294:Core/Src/main.c ****   */
 295:Core/Src/main.c **** static void MX_CAN1_Init(void)
 296:Core/Src/main.c **** {
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 299:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 302:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 303:Core/Src/main.c ****   hcan1.Instance = CAN1;
 304:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 305:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 306:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 307:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 308:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 309:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 310:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 311:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 312:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 313:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 314:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 315:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 316:Core/Src/main.c ****   {
ARM GAS  /tmp/cc3ERXfA.s 			page 7


 317:Core/Src/main.c ****     Error_Handler();
 318:Core/Src/main.c ****   }
 319:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   // init the CAN filter for BMS messages
 322:Core/Src/main.c ****     canFilter0.FilterIdHigh = 0x6B0 << 5;   // Orion ID: 0x6B0
 323:Core/Src/main.c ****   	canFilter0.FilterIdLow = 0x000;
 324:Core/Src/main.c ****     canFilter0.FilterMaskIdHigh = 0x6B0 << 5;
 325:Core/Src/main.c ****   	canFilter0.FilterMaskIdLow = 0x000;
 326:Core/Src/main.c ****     canFilter0.FilterBank = 0;
 327:Core/Src/main.c ****   	canFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 328:Core/Src/main.c ****   	canFilter0.FilterFIFOAssignment = CAN_RX_FIFO0;
 329:Core/Src/main.c ****   	canFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 330:Core/Src/main.c ****   	canFilter0.FilterActivation = ENABLE;
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****     HAL_CAN_ConfigFilter(&hcan1, &canFilter0);
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****     // init the CAN filter for Rinehart messages
 335:Core/Src/main.c ****     canFilter1.FilterIdHigh = 0x0A7 << 5;      // Rinehart IDs: 0xA0 - 0xB1
 336:Core/Src/main.c ****   	canFilter1.FilterIdLow = 0x000;
 337:Core/Src/main.c ****     canFilter1.FilterMaskIdHigh = 0x0A7 << 5;
 338:Core/Src/main.c ****   	canFilter1.FilterMaskIdLow = 0x000;
 339:Core/Src/main.c ****     canFilter1.FilterBank = 1;
 340:Core/Src/main.c ****   	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 341:Core/Src/main.c ****   	canFilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 342:Core/Src/main.c ****   	canFilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 343:Core/Src/main.c ****   	canFilter1.FilterActivation = ENABLE;
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****     HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 348:Core/Src/main.c **** 
 349:Core/Src/main.c **** }
 350:Core/Src/main.c **** 
 351:Core/Src/main.c **** /**
 352:Core/Src/main.c ****   * @brief TIM13 Initialization Function
 353:Core/Src/main.c ****   * @param None
 354:Core/Src/main.c ****   * @retval None
 355:Core/Src/main.c ****   */
 356:Core/Src/main.c **** static void MX_TIM13_Init(void)
 357:Core/Src/main.c **** {
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 0 */
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /* USER CODE END TIM13_Init 0 */
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 1 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE END TIM13_Init 1 */
 366:Core/Src/main.c ****   htim13.Instance = TIM13;
 367:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 368:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 369:Core/Src/main.c ****   htim13.Init.Period = 100-1;
 370:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 371:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 372:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 373:Core/Src/main.c ****   {
ARM GAS  /tmp/cc3ERXfA.s 			page 8


 374:Core/Src/main.c ****     Error_Handler();
 375:Core/Src/main.c ****   }
 376:Core/Src/main.c ****   /* USER CODE BEGIN TIM13_Init 2 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE END TIM13_Init 2 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** }
 381:Core/Src/main.c **** 
 382:Core/Src/main.c **** /**
 383:Core/Src/main.c ****   * @brief TIM14 Initialization Function
 384:Core/Src/main.c ****   * @param None
 385:Core/Src/main.c ****   * @retval None
 386:Core/Src/main.c ****   */
 387:Core/Src/main.c **** static void MX_TIM14_Init(void)
 388:Core/Src/main.c **** {
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
 397:Core/Src/main.c ****   htim14.Instance = TIM14;
 398:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 399:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 400:Core/Src/main.c ****   htim14.Init.Period = 500-1;
 401:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 402:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 403:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 404:Core/Src/main.c ****   {
 405:Core/Src/main.c ****     Error_Handler();
 406:Core/Src/main.c ****   }
 407:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
 410:Core/Src/main.c **** 
 411:Core/Src/main.c **** }
 412:Core/Src/main.c **** 
 413:Core/Src/main.c **** /**
 414:Core/Src/main.c ****   * Enable DMA controller clock
 415:Core/Src/main.c ****   */
 416:Core/Src/main.c **** static void MX_DMA_Init(void)
 417:Core/Src/main.c **** {
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /* DMA controller clock enable */
 420:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****   /* DMA interrupt init */
 423:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 424:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 425:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 426:Core/Src/main.c **** 
 427:Core/Src/main.c **** }
 428:Core/Src/main.c **** 
 429:Core/Src/main.c **** /**
 430:Core/Src/main.c ****   * @brief GPIO Initialization Function
ARM GAS  /tmp/cc3ERXfA.s 			page 9


 431:Core/Src/main.c ****   * @param None
 432:Core/Src/main.c ****   * @retval None
 433:Core/Src/main.c ****   */
 434:Core/Src/main.c **** static void MX_GPIO_Init(void)
 435:Core/Src/main.c **** {
  28              		.loc 1 435 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 56
 436:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 436 3 view .LVU1
  44              		.loc 1 436 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0394     		str	r4, [sp, #12]
  47 0008 0494     		str	r4, [sp, #16]
  48 000a 0594     		str	r4, [sp, #20]
  49 000c 0694     		str	r4, [sp, #24]
  50 000e 0794     		str	r4, [sp, #28]
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 439:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 439 3 is_stmt 1 view .LVU3
  52              	.LBB4:
  53              		.loc 1 439 3 view .LVU4
  54 0010 0194     		str	r4, [sp, #4]
  55              		.loc 1 439 3 view .LVU5
  56 0012 1B4B     		ldr	r3, .L3
  57 0014 1A6B     		ldr	r2, [r3, #48]
  58 0016 42F08002 		orr	r2, r2, #128
  59 001a 1A63     		str	r2, [r3, #48]
  60              		.loc 1 439 3 view .LVU6
  61 001c 1A6B     		ldr	r2, [r3, #48]
  62 001e 02F08002 		and	r2, r2, #128
  63 0022 0192     		str	r2, [sp, #4]
  64              		.loc 1 439 3 view .LVU7
  65 0024 019A     		ldr	r2, [sp, #4]
  66              	.LBE4:
  67              		.loc 1 439 3 view .LVU8
 440:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  68              		.loc 1 440 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 440 3 view .LVU10
  71 0026 0294     		str	r4, [sp, #8]
  72              		.loc 1 440 3 view .LVU11
  73 0028 1A6B     		ldr	r2, [r3, #48]
  74 002a 42F00102 		orr	r2, r2, #1
ARM GAS  /tmp/cc3ERXfA.s 			page 10


  75 002e 1A63     		str	r2, [r3, #48]
  76              		.loc 1 440 3 view .LVU12
  77 0030 1B6B     		ldr	r3, [r3, #48]
  78 0032 03F00103 		and	r3, r3, #1
  79 0036 0293     		str	r3, [sp, #8]
  80              		.loc 1 440 3 view .LVU13
  81 0038 029B     		ldr	r3, [sp, #8]
  82              	.LBE5:
  83              		.loc 1 440 3 view .LVU14
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 443:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
  84              		.loc 1 443 3 view .LVU15
  85 003a 124D     		ldr	r5, .L3+4
  86 003c 2246     		mov	r2, r4
  87 003e 0321     		movs	r1, #3
  88 0040 2846     		mov	r0, r5
  89 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  90              	.LVL0:
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /*Configure GPIO pin : PA0 */
 446:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
  91              		.loc 1 446 3 view .LVU16
  92              		.loc 1 446 23 is_stmt 0 view .LVU17
  93 0046 0126     		movs	r6, #1
  94 0048 0396     		str	r6, [sp, #12]
 447:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  95              		.loc 1 447 3 is_stmt 1 view .LVU18
  96              		.loc 1 447 24 is_stmt 0 view .LVU19
  97 004a 0496     		str	r6, [sp, #16]
 448:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  98              		.loc 1 448 3 is_stmt 1 view .LVU20
  99              		.loc 1 448 24 is_stmt 0 view .LVU21
 100 004c 0227     		movs	r7, #2
 101 004e 0597     		str	r7, [sp, #20]
 449:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 102              		.loc 1 449 3 is_stmt 1 view .LVU22
 103              		.loc 1 449 25 is_stmt 0 view .LVU23
 104 0050 0694     		str	r4, [sp, #24]
 450:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 105              		.loc 1 450 3 is_stmt 1 view .LVU24
 106 0052 03A9     		add	r1, sp, #12
 107 0054 2846     		mov	r0, r5
 108 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 109              	.LVL1:
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /*Configure GPIO pin : PA1 */
 453:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1;
 110              		.loc 1 453 3 view .LVU25
 111              		.loc 1 453 23 is_stmt 0 view .LVU26
 112 005a 0397     		str	r7, [sp, #12]
 454:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 113              		.loc 1 454 3 is_stmt 1 view .LVU27
 114              		.loc 1 454 24 is_stmt 0 view .LVU28
 115 005c 0496     		str	r6, [sp, #16]
 455:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 116              		.loc 1 455 3 is_stmt 1 view .LVU29
ARM GAS  /tmp/cc3ERXfA.s 			page 11


 117              		.loc 1 455 24 is_stmt 0 view .LVU30
 118 005e 0596     		str	r6, [sp, #20]
 456:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 119              		.loc 1 456 3 is_stmt 1 view .LVU31
 120              		.loc 1 456 25 is_stmt 0 view .LVU32
 121 0060 0694     		str	r4, [sp, #24]
 457:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 122              		.loc 1 457 3 is_stmt 1 view .LVU33
 123 0062 03A9     		add	r1, sp, #12
 124 0064 2846     		mov	r0, r5
 125 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 126              	.LVL2:
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   /*Configure GPIO pin : PA2 */
 460:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 127              		.loc 1 460 3 view .LVU34
 128              		.loc 1 460 23 is_stmt 0 view .LVU35
 129 006a 0423     		movs	r3, #4
 130 006c 0393     		str	r3, [sp, #12]
 461:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 131              		.loc 1 461 3 is_stmt 1 view .LVU36
 132              		.loc 1 461 24 is_stmt 0 view .LVU37
 133 006e 0494     		str	r4, [sp, #16]
 462:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 134              		.loc 1 462 3 is_stmt 1 view .LVU38
 135              		.loc 1 462 24 is_stmt 0 view .LVU39
 136 0070 0594     		str	r4, [sp, #20]
 463:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 137              		.loc 1 463 3 is_stmt 1 view .LVU40
 138 0072 03A9     		add	r1, sp, #12
 139 0074 2846     		mov	r0, r5
 140 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL3:
 464:Core/Src/main.c **** 
 465:Core/Src/main.c **** }
 142              		.loc 1 465 1 is_stmt 0 view .LVU41
 143 007a 09B0     		add	sp, sp, #36
 144              	.LCFI2:
 145              		.cfi_def_cfa_offset 20
 146              		@ sp needed
 147 007c F0BD     		pop	{r4, r5, r6, r7, pc}
 148              	.L4:
 149 007e 00BF     		.align	2
 150              	.L3:
 151 0080 00380240 		.word	1073887232
 152 0084 00000240 		.word	1073872896
 153              		.cfi_endproc
 154              	.LFE223:
 156              		.section	.text.MX_DMA_Init,"ax",%progbits
 157              		.align	1
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu fpv4-sp-d16
 163              	MX_DMA_Init:
 164              	.LFB222:
 417:Core/Src/main.c **** 
ARM GAS  /tmp/cc3ERXfA.s 			page 12


 165              		.loc 1 417 1 is_stmt 1 view -0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 8
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169 0000 00B5     		push	{lr}
 170              	.LCFI3:
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 14, -4
 173 0002 83B0     		sub	sp, sp, #12
 174              	.LCFI4:
 175              		.cfi_def_cfa_offset 16
 420:Core/Src/main.c **** 
 176              		.loc 1 420 3 view .LVU43
 177              	.LBB6:
 420:Core/Src/main.c **** 
 178              		.loc 1 420 3 view .LVU44
 179 0004 0021     		movs	r1, #0
 180 0006 0191     		str	r1, [sp, #4]
 420:Core/Src/main.c **** 
 181              		.loc 1 420 3 view .LVU45
 182 0008 094B     		ldr	r3, .L7
 183 000a 1A6B     		ldr	r2, [r3, #48]
 184 000c 42F48002 		orr	r2, r2, #4194304
 185 0010 1A63     		str	r2, [r3, #48]
 420:Core/Src/main.c **** 
 186              		.loc 1 420 3 view .LVU46
 187 0012 1B6B     		ldr	r3, [r3, #48]
 188 0014 03F48003 		and	r3, r3, #4194304
 189 0018 0193     		str	r3, [sp, #4]
 420:Core/Src/main.c **** 
 190              		.loc 1 420 3 view .LVU47
 191 001a 019B     		ldr	r3, [sp, #4]
 192              	.LBE6:
 420:Core/Src/main.c **** 
 193              		.loc 1 420 3 view .LVU48
 424:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 194              		.loc 1 424 3 view .LVU49
 195 001c 0A46     		mov	r2, r1
 196 001e 3820     		movs	r0, #56
 197 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 198              	.LVL4:
 425:Core/Src/main.c **** 
 199              		.loc 1 425 3 view .LVU50
 200 0024 3820     		movs	r0, #56
 201 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 202              	.LVL5:
 427:Core/Src/main.c **** 
 203              		.loc 1 427 1 is_stmt 0 view .LVU51
 204 002a 03B0     		add	sp, sp, #12
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 4
 207              		@ sp needed
 208 002c 5DF804FB 		ldr	pc, [sp], #4
 209              	.L8:
 210              		.align	2
 211              	.L7:
 212 0030 00380240 		.word	1073887232
ARM GAS  /tmp/cc3ERXfA.s 			page 13


 213              		.cfi_endproc
 214              	.LFE222:
 216              		.global	__aeabi_ui2d
 217              		.global	__aeabi_dmul
 218              		.global	__aeabi_dcmpgt
 219              		.section	.text.prechargeControl,"ax",%progbits
 220              		.align	1
 221              		.global	prechargeControl
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu fpv4-sp-d16
 227              	prechargeControl:
 228              	.LFB225:
 466:Core/Src/main.c **** 
 467:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c **** // *** functions *** //
 470:Core/Src/main.c **** 
 471:Core/Src/main.c **** 
 472:Core/Src/main.c **** /**
 473:Core/Src/main.c ****  * overwriting the weak function defined in the includes which is the ISR for the CAN interrupt
 474:Core/Src/main.c ****  */
 475:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
 476:Core/Src/main.c **** {
 477:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 478:Core/Src/main.c ****     Error_Handler();
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   // get rinehart bus voltage
 481:Core/Src/main.c ****   if (rxHeader.StdId == 0x0A7 && rxHeader.DLC == 8)    // sometimes rinehart sends 0 length message
 482:Core/Src/main.c ****   {
 483:Core/Src/main.c ****     // rinehart voltage is spread across the first 2 bytes
 484:Core/Src/main.c **** 	  int rine1 = canRX[0];
 485:Core/Src/main.c ****     int rine2 = canRX[1];
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****     // combine the first two bytes and assign that to the rinehart voltage
 488:Core/Src/main.c ****     rinehartVoltage = (rine2 << 8) | rine1;
 489:Core/Src/main.c ****   }
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   // get BMS total voltages
 492:Core/Src/main.c ****   if (rxHeader.StdId == 0x6B0)
 493:Core/Src/main.c ****   {
 494:Core/Src/main.c ****     // BMS voltage is spread across the first 2 bytes
 495:Core/Src/main.c **** 	  int volt1 = canRX[2];
 496:Core/Src/main.c ****     int volt2 = canRX[3];
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****     // combine the first two bytes and assign that to the BMS voltage
 499:Core/Src/main.c ****     bmsVoltage = (volt1 << 8) | volt2; // orion has a pre-scaller of *10
 500:Core/Src/main.c ****   }
 501:Core/Src/main.c **** }
 502:Core/Src/main.c **** 
 503:Core/Src/main.c **** 
 504:Core/Src/main.c **** /**
 505:Core/Src/main.c ****  * @brief 
 506:Core/Src/main.c ****  * 
 507:Core/Src/main.c ****  */
 508:Core/Src/main.c **** void prechargeControl()
ARM GAS  /tmp/cc3ERXfA.s 			page 14


 509:Core/Src/main.c **** {
 229              		.loc 1 509 1 is_stmt 1 view -0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233 0000 70B5     		push	{r4, r5, r6, lr}
 234              	.LCFI6:
 235              		.cfi_def_cfa_offset 16
 236              		.cfi_offset 4, -16
 237              		.cfi_offset 5, -12
 238              		.cfi_offset 6, -8
 239              		.cfi_offset 14, -4
 510:Core/Src/main.c ****   // NOTE: Weird thing about Rinehart 0x0A7 message: 
 511:Core/Src/main.c ****   //      Sometimes it sends a 0 byte length data. Make sure we're only reading
 512:Core/Src/main.c ****   //      The value if the DLC is 8
 513:Core/Src/main.c **** 	switch (prechargeState)
 240              		.loc 1 513 2 view .LVU53
 241 0002 414B     		ldr	r3, .L20+8
 242 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 243 0006 032B     		cmp	r3, #3
 244 0008 73D8     		bhi	.L10
 245 000a DFE803F0 		tbb	[pc, r3]
 246              	.L12:
 247 000e 02       		.byte	(.L15-.L12)/2
 248 000f 18       		.byte	(.L14-.L12)/2
 249 0010 49       		.byte	(.L13-.L12)/2
 250 0011 5E       		.byte	(.L11-.L12)/2
 251              		.p2align 1
 252              	.L15:
 514:Core/Src/main.c **** 	{
 515:Core/Src/main.c **** 		case (PRECHARGE_OFF):
 516:Core/Src/main.c **** 			// set ready to drive to false
 517:Core/Src/main.c **** 			readyToDrive = 0;
 253              		.loc 1 517 4 view .LVU54
 254              		.loc 1 517 17 is_stmt 0 view .LVU55
 255 0012 0023     		movs	r3, #0
 256 0014 3D4A     		ldr	r2, .L20+12
 257 0016 1360     		str	r3, [r2]
 518:Core/Src/main.c **** 
 519:Core/Src/main.c ****       // this state sends a message to rinehart
 520:Core/Src/main.c ****       // if (lastPrechargeState != prechargeState)
 521:Core/Src/main.c ****       // {
 522:Core/Src/main.c ****         // message is sent to rinehart to turn everything off
 523:Core/Src/main.c ****         TxData[0] = 1;          // parameter address. LSB
 258              		.loc 1 523 9 is_stmt 1 view .LVU56
 259              		.loc 1 523 19 is_stmt 0 view .LVU57
 260 0018 3D4A     		ldr	r2, .L20+16
 261 001a 0124     		movs	r4, #1
 262 001c 1470     		strb	r4, [r2]
 524:Core/Src/main.c ****         TxData[1] = 0;          // parameter address. MSB
 263              		.loc 1 524 9 is_stmt 1 view .LVU58
 264              		.loc 1 524 19 is_stmt 0 view .LVU59
 265 001e 5370     		strb	r3, [r2, #1]
 525:Core/Src/main.c ****         TxData[2] = 1;          // Read / Write. 1 is write
 266              		.loc 1 525 9 is_stmt 1 view .LVU60
 267              		.loc 1 525 19 is_stmt 0 view .LVU61
 268 0020 9470     		strb	r4, [r2, #2]
ARM GAS  /tmp/cc3ERXfA.s 			page 15


 526:Core/Src/main.c ****         TxData[3] = 0;          // N/A
 269              		.loc 1 526 9 is_stmt 1 view .LVU62
 270              		.loc 1 526 19 is_stmt 0 view .LVU63
 271 0022 D370     		strb	r3, [r2, #3]
 527:Core/Src/main.c ****         TxData[4] = 0;          // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 an
 272              		.loc 1 527 9 is_stmt 1 view .LVU64
 273              		.loc 1 527 19 is_stmt 0 view .LVU65
 274 0024 1371     		strb	r3, [r2, #4]
 528:Core/Src/main.c ****         TxData[5] = 0x55;         // 55 means relay control
 275              		.loc 1 528 9 is_stmt 1 view .LVU66
 276              		.loc 1 528 19 is_stmt 0 view .LVU67
 277 0026 5521     		movs	r1, #85
 278 0028 5171     		strb	r1, [r2, #5]
 529:Core/Src/main.c ****         TxData[6] = 0;          // N/A
 279              		.loc 1 529 9 is_stmt 1 view .LVU68
 280              		.loc 1 529 19 is_stmt 0 view .LVU69
 281 002a 9371     		strb	r3, [r2, #6]
 530:Core/Src/main.c ****         TxData[7] = 0;          // N/A
 282              		.loc 1 530 9 is_stmt 1 view .LVU70
 283              		.loc 1 530 19 is_stmt 0 view .LVU71
 284 002c D371     		strb	r3, [r2, #7]
 531:Core/Src/main.c **** 
 532:Core/Src/main.c ****         // send message
 533:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &txHeader2, TxData, &TxMailbox);
 285              		.loc 1 533 9 is_stmt 1 view .LVU72
 286 002e 394B     		ldr	r3, .L20+20
 287 0030 3949     		ldr	r1, .L20+24
 288 0032 3A48     		ldr	r0, .L20+28
 289 0034 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 290              	.LVL6:
 534:Core/Src/main.c ****         
 535:Core/Src/main.c ****         // update last precharge state
 536:Core/Src/main.c ****         // lastPrechargeState = prechargeState;
 537:Core/Src/main.c ****       // }
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****       // move to precharge on
 540:Core/Src/main.c ****       prechargeState = PRECHARGE_ON;
 291              		.loc 1 540 7 view .LVU73
 292              		.loc 1 540 22 is_stmt 0 view .LVU74
 293 0038 334B     		ldr	r3, .L20+8
 294 003a 1C70     		strb	r4, [r3]
 541:Core/Src/main.c **** 		break;
 295              		.loc 1 541 3 is_stmt 1 view .LVU75
 296              	.L9:
 542:Core/Src/main.c **** 
 543:Core/Src/main.c **** 		case (PRECHARGE_ON):
 544:Core/Src/main.c ****       // not ready to drive yet
 545:Core/Src/main.c ****       readyToDrive = 0;
 546:Core/Src/main.c **** 
 547:Core/Src/main.c ****       // turn on precharge relay
 548:Core/Src/main.c ****       // this state sends a message to rinehart to turn 
 549:Core/Src/main.c ****       // if (lastPrechargeState != prechargeState)
 550:Core/Src/main.c ****       // {
 551:Core/Src/main.c ****         // message is sent to rinehart to turn on precharge relay
 552:Core/Src/main.c ****         // precharge relay is on relay 1 from Rinehart
 553:Core/Src/main.c ****         TxData[0] = 1;            // parameter address. LSB
 554:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
ARM GAS  /tmp/cc3ERXfA.s 			page 16


 555:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 556:Core/Src/main.c ****         TxData[3] = 0;            // N/A
 557:Core/Src/main.c ****         TxData[4] = 1;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 558:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 559:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 560:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 561:Core/Src/main.c **** 
 562:Core/Src/main.c ****         // send message
 563:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &txHeader2, TxData, &TxMailbox);
 564:Core/Src/main.c ****         
 565:Core/Src/main.c ****         // update last precharge state
 566:Core/Src/main.c ****         // lastPrechargeState = prechargeState;
 567:Core/Src/main.c ****       // }
 568:Core/Src/main.c ****       
 569:Core/Src/main.c **** 			// ensure voltages are above correct values
 570:Core/Src/main.c **** 			if ((rinehartVoltage > (bmsVoltage * PRECHARGE_COEFFICIENT)) && (bmsVoltage > 220))   // 220 so 
 571:Core/Src/main.c ****       {
 572:Core/Src/main.c ****         prechargeState = PRECHARGE_DONE;
 573:Core/Src/main.c ****       }
 574:Core/Src/main.c **** 
 575:Core/Src/main.c ****       // if we do this for too long, move to error state
 576:Core/Src/main.c ****       // if (voltageCheckCount >= NUM_VOLTAGE_CHECKS)
 577:Core/Src/main.c ****       // {
 578:Core/Src/main.c ****       //   prechargeState = PRECHARGE_ERROR;
 579:Core/Src/main.c ****       // }
 580:Core/Src/main.c ****       
 581:Core/Src/main.c ****       // else
 582:Core/Src/main.c ****       // {
 583:Core/Src/main.c ****       //   voltageCheckCount++; // add to the counter. 
 584:Core/Src/main.c ****       // }
 585:Core/Src/main.c **** 		break;
 586:Core/Src/main.c **** 
 587:Core/Src/main.c **** 		case (PRECHARGE_DONE):
 588:Core/Src/main.c ****       // this state sends a message to rinehart to turn 
 589:Core/Src/main.c ****       // if (lastPrechargeState != prechargeState)
 590:Core/Src/main.c ****       // {
 591:Core/Src/main.c ****         // message is sent to rinehart to turn everything on
 592:Core/Src/main.c ****         // Keep precharge relay on and turn on main contactor
 593:Core/Src/main.c ****         TxData[0] = 1; // parameter address. LSB
 594:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 595:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 596:Core/Src/main.c ****         TxData[3] = 0; // N/A
 597:Core/Src/main.c ****         TxData[4] = 3; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 598:Core/Src/main.c ****         TxData[5] = 0x55; // 55 means relay control
 599:Core/Src/main.c ****         TxData[6] = 0; // N/A
 600:Core/Src/main.c ****         TxData[7] = 0; // N/A
 601:Core/Src/main.c **** 
 602:Core/Src/main.c ****         // send message
 603:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &txHeader2, TxData, &TxMailbox);
 604:Core/Src/main.c **** 
 605:Core/Src/main.c ****         // now that precharge is complete we can drive the car
 606:Core/Src/main.c ****         readyToDrive = 1;
 607:Core/Src/main.c ****           
 608:Core/Src/main.c ****         // update last precharge state
 609:Core/Src/main.c ****         // lastPrechargeState = prechargeState;
 610:Core/Src/main.c ****       // }
 611:Core/Src/main.c **** 
ARM GAS  /tmp/cc3ERXfA.s 			page 17


 612:Core/Src/main.c ****       // if rinehart voltage drops below battery, something's wrong, 
 613:Core/Src/main.c ****       // turn everything off
 614:Core/Src/main.c **** 			// if (rinehartVoltage <= (bmsVoltage * (PRECHARGE_COEFFICIENT)-20)) // 20 is a magic number
 615:Core/Src/main.c ****       // {
 616:Core/Src/main.c ****       //   prechargeState = PRECHARGE_OFF; // something weird happened. Go to error
 617:Core/Src/main.c ****       // }
 618:Core/Src/main.c **** 		break;
 619:Core/Src/main.c **** 
 620:Core/Src/main.c **** 		case (PRECHARGE_ERROR):
 621:Core/Src/main.c **** 			// the car is most definitly not ready to drive
 622:Core/Src/main.c ****       // set ready to drive off 
 623:Core/Src/main.c **** 			readyToDrive = 0;
 624:Core/Src/main.c **** 
 625:Core/Src/main.c ****       // if (lastPrechargeState != prechargeState)
 626:Core/Src/main.c ****       // {
 627:Core/Src/main.c ****         // message is sent to rinehart to turn everything off
 628:Core/Src/main.c ****         TxData[0] = 1;            // parameter address. LSB
 629:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
 630:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 631:Core/Src/main.c ****         TxData[3] = 0;            // N/A
 632:Core/Src/main.c ****         TxData[4] = 0;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 633:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 634:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 635:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 636:Core/Src/main.c **** 
 637:Core/Src/main.c ****         // send message
 638:Core/Src/main.c ****         HAL_CAN_AddTxMessage(&hcan1, &txHeader2, TxData, &TxMailbox);
 639:Core/Src/main.c ****         
 640:Core/Src/main.c ****         // update last precharge state
 641:Core/Src/main.c ****         // lastPrechargeState = prechargeState;
 642:Core/Src/main.c ****       // }
 643:Core/Src/main.c **** 		break;
 644:Core/Src/main.c **** 
 645:Core/Src/main.c **** 		default:
 646:Core/Src/main.c ****       // fall back state, this indicates we did some undefined action that brought us here
 647:Core/Src/main.c ****       // we will move to PRECHARGE_ERROR to ensure readyToDrive stays false :)
 648:Core/Src/main.c **** 			prechargeState = PRECHARGE_ERROR;
 649:Core/Src/main.c **** 		break;
 650:Core/Src/main.c **** 	}
 651:Core/Src/main.c **** }
 297              		.loc 1 651 1 is_stmt 0 view .LVU76
 298 003c 70BD     		pop	{r4, r5, r6, pc}
 299              	.L14:
 545:Core/Src/main.c **** 
 300              		.loc 1 545 7 is_stmt 1 view .LVU77
 545:Core/Src/main.c **** 
 301              		.loc 1 545 20 is_stmt 0 view .LVU78
 302 003e 0023     		movs	r3, #0
 303 0040 324A     		ldr	r2, .L20+12
 304 0042 1360     		str	r3, [r2]
 553:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
 305              		.loc 1 553 9 is_stmt 1 view .LVU79
 553:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
 306              		.loc 1 553 19 is_stmt 0 view .LVU80
 307 0044 324A     		ldr	r2, .L20+16
 308 0046 0121     		movs	r1, #1
 309 0048 1170     		strb	r1, [r2]
ARM GAS  /tmp/cc3ERXfA.s 			page 18


 554:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 310              		.loc 1 554 9 is_stmt 1 view .LVU81
 554:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 311              		.loc 1 554 19 is_stmt 0 view .LVU82
 312 004a 5370     		strb	r3, [r2, #1]
 555:Core/Src/main.c ****         TxData[3] = 0;            // N/A
 313              		.loc 1 555 9 is_stmt 1 view .LVU83
 555:Core/Src/main.c ****         TxData[3] = 0;            // N/A
 314              		.loc 1 555 19 is_stmt 0 view .LVU84
 315 004c 9170     		strb	r1, [r2, #2]
 556:Core/Src/main.c ****         TxData[4] = 1;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 316              		.loc 1 556 9 is_stmt 1 view .LVU85
 556:Core/Src/main.c ****         TxData[4] = 1;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 317              		.loc 1 556 19 is_stmt 0 view .LVU86
 318 004e D370     		strb	r3, [r2, #3]
 557:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 319              		.loc 1 557 9 is_stmt 1 view .LVU87
 557:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 320              		.loc 1 557 19 is_stmt 0 view .LVU88
 321 0050 1171     		strb	r1, [r2, #4]
 558:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 322              		.loc 1 558 9 is_stmt 1 view .LVU89
 558:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 323              		.loc 1 558 19 is_stmt 0 view .LVU90
 324 0052 5521     		movs	r1, #85
 325 0054 5171     		strb	r1, [r2, #5]
 559:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 326              		.loc 1 559 9 is_stmt 1 view .LVU91
 559:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 327              		.loc 1 559 19 is_stmt 0 view .LVU92
 328 0056 9371     		strb	r3, [r2, #6]
 560:Core/Src/main.c **** 
 329              		.loc 1 560 9 is_stmt 1 view .LVU93
 560:Core/Src/main.c **** 
 330              		.loc 1 560 19 is_stmt 0 view .LVU94
 331 0058 D371     		strb	r3, [r2, #7]
 563:Core/Src/main.c ****         
 332              		.loc 1 563 9 is_stmt 1 view .LVU95
 333 005a 2E4B     		ldr	r3, .L20+20
 334 005c 2E49     		ldr	r1, .L20+24
 335 005e 2F48     		ldr	r0, .L20+28
 336 0060 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 337              	.LVL7:
 570:Core/Src/main.c ****       {
 338              		.loc 1 570 4 view .LVU96
 570:Core/Src/main.c ****       {
 339              		.loc 1 570 25 is_stmt 0 view .LVU97
 340 0064 2E4B     		ldr	r3, .L20+32
 341 0066 1868     		ldr	r0, [r3]
 342 0068 FFF7FEFF 		bl	__aeabi_ui2d
 343              	.LVL8:
 344 006c 0446     		mov	r4, r0
 345 006e 0D46     		mov	r5, r1
 570:Core/Src/main.c ****       {
 346              		.loc 1 570 39 view .LVU98
 347 0070 2C4B     		ldr	r3, .L20+36
 348 0072 1E68     		ldr	r6, [r3]
ARM GAS  /tmp/cc3ERXfA.s 			page 19


 349 0074 3046     		mov	r0, r6
 350 0076 FFF7FEFF 		bl	__aeabi_ui2d
 351              	.LVL9:
 352 007a 21A3     		adr	r3, .L20
 353 007c D3E90023 		ldrd	r2, [r3]
 354 0080 FFF7FEFF 		bl	__aeabi_dmul
 355              	.LVL10:
 356 0084 0246     		mov	r2, r0
 357 0086 0B46     		mov	r3, r1
 570:Core/Src/main.c ****       {
 358              		.loc 1 570 7 view .LVU99
 359 0088 2046     		mov	r0, r4
 360 008a 2946     		mov	r1, r5
 361 008c FFF7FEFF 		bl	__aeabi_dcmpgt
 362              	.LVL11:
 363 0090 0028     		cmp	r0, #0
 364 0092 D3D0     		beq	.L9
 570:Core/Src/main.c ****       {
 365              		.loc 1 570 65 discriminator 1 view .LVU100
 366 0094 DC2E     		cmp	r6, #220
 367 0096 D1D9     		bls	.L9
 572:Core/Src/main.c ****       }
 368              		.loc 1 572 9 is_stmt 1 view .LVU101
 572:Core/Src/main.c ****       }
 369              		.loc 1 572 24 is_stmt 0 view .LVU102
 370 0098 1B4B     		ldr	r3, .L20+8
 371 009a 0222     		movs	r2, #2
 372 009c 1A70     		strb	r2, [r3]
 373 009e CDE7     		b	.L9
 374              	.L13:
 593:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 375              		.loc 1 593 9 is_stmt 1 view .LVU103
 593:Core/Src/main.c ****         TxData[1] = 0; // parameter address. MSB
 376              		.loc 1 593 19 is_stmt 0 view .LVU104
 377 00a0 1B4A     		ldr	r2, .L20+16
 378 00a2 0124     		movs	r4, #1
 379 00a4 1470     		strb	r4, [r2]
 594:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 380              		.loc 1 594 9 is_stmt 1 view .LVU105
 594:Core/Src/main.c ****         TxData[2] = 1; // Read / Write. 1 is write
 381              		.loc 1 594 19 is_stmt 0 view .LVU106
 382 00a6 0023     		movs	r3, #0
 383 00a8 5370     		strb	r3, [r2, #1]
 595:Core/Src/main.c ****         TxData[3] = 0; // N/A
 384              		.loc 1 595 9 is_stmt 1 view .LVU107
 595:Core/Src/main.c ****         TxData[3] = 0; // N/A
 385              		.loc 1 595 19 is_stmt 0 view .LVU108
 386 00aa 9470     		strb	r4, [r2, #2]
 596:Core/Src/main.c ****         TxData[4] = 3; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 387              		.loc 1 596 9 is_stmt 1 view .LVU109
 596:Core/Src/main.c ****         TxData[4] = 3; // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 and 2 on
 388              		.loc 1 596 19 is_stmt 0 view .LVU110
 389 00ac D370     		strb	r3, [r2, #3]
 597:Core/Src/main.c ****         TxData[5] = 0x55; // 55 means relay control
 390              		.loc 1 597 9 is_stmt 1 view .LVU111
 597:Core/Src/main.c ****         TxData[5] = 0x55; // 55 means relay control
 391              		.loc 1 597 19 is_stmt 0 view .LVU112
ARM GAS  /tmp/cc3ERXfA.s 			page 20


 392 00ae 0321     		movs	r1, #3
 393 00b0 1171     		strb	r1, [r2, #4]
 598:Core/Src/main.c ****         TxData[6] = 0; // N/A
 394              		.loc 1 598 9 is_stmt 1 view .LVU113
 598:Core/Src/main.c ****         TxData[6] = 0; // N/A
 395              		.loc 1 598 19 is_stmt 0 view .LVU114
 396 00b2 5521     		movs	r1, #85
 397 00b4 5171     		strb	r1, [r2, #5]
 599:Core/Src/main.c ****         TxData[7] = 0; // N/A
 398              		.loc 1 599 9 is_stmt 1 view .LVU115
 599:Core/Src/main.c ****         TxData[7] = 0; // N/A
 399              		.loc 1 599 19 is_stmt 0 view .LVU116
 400 00b6 9371     		strb	r3, [r2, #6]
 600:Core/Src/main.c **** 
 401              		.loc 1 600 9 is_stmt 1 view .LVU117
 600:Core/Src/main.c **** 
 402              		.loc 1 600 19 is_stmt 0 view .LVU118
 403 00b8 D371     		strb	r3, [r2, #7]
 603:Core/Src/main.c **** 
 404              		.loc 1 603 9 is_stmt 1 view .LVU119
 405 00ba 164B     		ldr	r3, .L20+20
 406 00bc 1649     		ldr	r1, .L20+24
 407 00be 1748     		ldr	r0, .L20+28
 408 00c0 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 409              	.LVL12:
 606:Core/Src/main.c ****           
 410              		.loc 1 606 9 view .LVU120
 606:Core/Src/main.c ****           
 411              		.loc 1 606 22 is_stmt 0 view .LVU121
 412 00c4 114B     		ldr	r3, .L20+12
 413 00c6 1C60     		str	r4, [r3]
 618:Core/Src/main.c **** 
 414              		.loc 1 618 3 is_stmt 1 view .LVU122
 415 00c8 B8E7     		b	.L9
 416              	.L11:
 623:Core/Src/main.c **** 
 417              		.loc 1 623 4 view .LVU123
 623:Core/Src/main.c **** 
 418              		.loc 1 623 17 is_stmt 0 view .LVU124
 419 00ca 0023     		movs	r3, #0
 420 00cc 0F4A     		ldr	r2, .L20+12
 421 00ce 1360     		str	r3, [r2]
 628:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
 422              		.loc 1 628 9 is_stmt 1 view .LVU125
 628:Core/Src/main.c ****         TxData[1] = 0;            // parameter address. MSB
 423              		.loc 1 628 19 is_stmt 0 view .LVU126
 424 00d0 0F4A     		ldr	r2, .L20+16
 425 00d2 0121     		movs	r1, #1
 426 00d4 1170     		strb	r1, [r2]
 629:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 427              		.loc 1 629 9 is_stmt 1 view .LVU127
 629:Core/Src/main.c ****         TxData[2] = 1;            // Read / Write. 1 is write
 428              		.loc 1 629 19 is_stmt 0 view .LVU128
 429 00d6 5370     		strb	r3, [r2, #1]
 630:Core/Src/main.c ****         TxData[3] = 0;            // N/A
 430              		.loc 1 630 9 is_stmt 1 view .LVU129
 630:Core/Src/main.c ****         TxData[3] = 0;            // N/A
ARM GAS  /tmp/cc3ERXfA.s 			page 21


 431              		.loc 1 630 19 is_stmt 0 view .LVU130
 432 00d8 9170     		strb	r1, [r2, #2]
 631:Core/Src/main.c ****         TxData[4] = 0;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 433              		.loc 1 631 9 is_stmt 1 view .LVU131
 631:Core/Src/main.c ****         TxData[4] = 0;            // Data. "0" off, "1": relay 1 on, "2": relay 2 on, "3": relay 1 
 434              		.loc 1 631 19 is_stmt 0 view .LVU132
 435 00da D370     		strb	r3, [r2, #3]
 632:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 436              		.loc 1 632 9 is_stmt 1 view .LVU133
 632:Core/Src/main.c ****         TxData[5] = 0x55;           // 55 means relay control
 437              		.loc 1 632 19 is_stmt 0 view .LVU134
 438 00dc 1371     		strb	r3, [r2, #4]
 633:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 439              		.loc 1 633 9 is_stmt 1 view .LVU135
 633:Core/Src/main.c ****         TxData[6] = 0;            // N/A
 440              		.loc 1 633 19 is_stmt 0 view .LVU136
 441 00de 5521     		movs	r1, #85
 442 00e0 5171     		strb	r1, [r2, #5]
 634:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 443              		.loc 1 634 9 is_stmt 1 view .LVU137
 634:Core/Src/main.c ****         TxData[7] = 0;            // N/A
 444              		.loc 1 634 19 is_stmt 0 view .LVU138
 445 00e2 9371     		strb	r3, [r2, #6]
 635:Core/Src/main.c **** 
 446              		.loc 1 635 9 is_stmt 1 view .LVU139
 635:Core/Src/main.c **** 
 447              		.loc 1 635 19 is_stmt 0 view .LVU140
 448 00e4 D371     		strb	r3, [r2, #7]
 638:Core/Src/main.c ****         
 449              		.loc 1 638 9 is_stmt 1 view .LVU141
 450 00e6 0B4B     		ldr	r3, .L20+20
 451 00e8 0B49     		ldr	r1, .L20+24
 452 00ea 0C48     		ldr	r0, .L20+28
 453 00ec FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 454              	.LVL13:
 643:Core/Src/main.c **** 
 455              		.loc 1 643 3 view .LVU142
 456 00f0 A4E7     		b	.L9
 457              	.L10:
 648:Core/Src/main.c **** 		break;
 458              		.loc 1 648 4 view .LVU143
 648:Core/Src/main.c **** 		break;
 459              		.loc 1 648 19 is_stmt 0 view .LVU144
 460 00f2 054B     		ldr	r3, .L20+8
 461 00f4 0322     		movs	r2, #3
 462 00f6 1A70     		strb	r2, [r3]
 649:Core/Src/main.c **** 	}
 463              		.loc 1 649 3 is_stmt 1 view .LVU145
 464              		.loc 1 651 1 is_stmt 0 view .LVU146
 465 00f8 A0E7     		b	.L9
 466              	.L21:
 467 00fa 00BFAFF3 		.align	3
 467      0080
 468              	.L20:
 469 0100 66666666 		.word	1717986918
 470 0104 6666EE3F 		.word	1072588390
 471 0108 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/cc3ERXfA.s 			page 22


 472 010c 00000000 		.word	.LANCHOR1
 473 0110 00000000 		.word	TxData
 474 0114 00000000 		.word	TxMailbox
 475 0118 00000000 		.word	txHeader2
 476 011c 00000000 		.word	hcan1
 477 0120 00000000 		.word	.LANCHOR2
 478 0124 00000000 		.word	.LANCHOR3
 479              		.cfi_endproc
 480              	.LFE225:
 482              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 483              		.align	1
 484              		.global	HAL_TIM_PeriodElapsedCallback
 485              		.syntax unified
 486              		.thumb
 487              		.thumb_func
 488              		.fpu fpv4-sp-d16
 490              	HAL_TIM_PeriodElapsedCallback:
 491              	.LVL14:
 492              	.LFB226:
 652:Core/Src/main.c **** 
 653:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 654:Core/Src/main.c **** {
 493              		.loc 1 654 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497              		.loc 1 654 1 is_stmt 0 view .LVU148
 498 0000 10B5     		push	{r4, lr}
 499              	.LCFI7:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 503 0002 0446     		mov	r4, r0
 655:Core/Src/main.c ****   // on __Hz interval
 656:Core/Src/main.c ****   if (htim == &htim14)
 504              		.loc 1 656 3 is_stmt 1 view .LVU149
 505              		.loc 1 656 6 is_stmt 0 view .LVU150
 506 0004 134B     		ldr	r3, .L28
 507 0006 9842     		cmp	r0, r3
 508 0008 03D0     		beq	.L26
 509              	.LVL15:
 510              	.L23:
 657:Core/Src/main.c ****   {
 658:Core/Src/main.c ****     // build message for _____
 659:Core/Src/main.c ****     TxData[0] = readyToDrive;               // controled by precharge
 660:Core/Src/main.c ****     TxData[1] = DCDCFault;                  // 0 for now TODO: implement fault detection
 661:Core/Src/main.c ****     TxData[2] = vicoreTemp;                 // DMA update
 662:Core/Src/main.c ****     TxData[3] = rinehartVoltage & 0xFF;     // update on CAN message LSB
 663:Core/Src/main.c ****     TxData[4] = rinehartVoltage >> 8;       // update on CAN message MSB
 664:Core/Src/main.c ****     TxData[5] = bmsVoltage & 0xFF;          // update on CAN message LSB
 665:Core/Src/main.c ****     TxData[6] = bmsVoltage >> 8;            // update on CAN message MSB
 666:Core/Src/main.c ****     TxData[7] = prechargeState;             // show which state of precharge / driving we're in, 0:
 667:Core/Src/main.c **** 
 668:Core/Src/main.c ****     // send message
 669:Core/Src/main.c ****     HAL_CAN_AddTxMessage(&hcan1, &txHeader1, TxData, &TxMailbox);
 670:Core/Src/main.c ****   }
 671:Core/Src/main.c **** 
ARM GAS  /tmp/cc3ERXfA.s 			page 23


 672:Core/Src/main.c ****   // on __Hz interval 
 673:Core/Src/main.c ****   if(htim == &htim13)
 511              		.loc 1 673 3 is_stmt 1 view .LVU151
 512              		.loc 1 673 5 is_stmt 0 view .LVU152
 513 000a 134B     		ldr	r3, .L28+4
 514 000c 9C42     		cmp	r4, r3
 515 000e 1DD0     		beq	.L27
 516              	.L22:
 674:Core/Src/main.c ****   {
 675:Core/Src/main.c ****     // check precharge status
 676:Core/Src/main.c ****     prechargeControl();
 677:Core/Src/main.c ****   }
 678:Core/Src/main.c **** }
 517              		.loc 1 678 1 view .LVU153
 518 0010 10BD     		pop	{r4, pc}
 519              	.LVL16:
 520              	.L26:
 659:Core/Src/main.c ****     TxData[1] = DCDCFault;                  // 0 for now TODO: implement fault detection
 521              		.loc 1 659 5 is_stmt 1 view .LVU154
 659:Core/Src/main.c ****     TxData[1] = DCDCFault;                  // 0 for now TODO: implement fault detection
 522              		.loc 1 659 15 is_stmt 0 view .LVU155
 523 0012 124A     		ldr	r2, .L28+8
 524 0014 124B     		ldr	r3, .L28+12
 525 0016 1B68     		ldr	r3, [r3]
 526 0018 1370     		strb	r3, [r2]
 660:Core/Src/main.c ****     TxData[2] = vicoreTemp;                 // DMA update
 527              		.loc 1 660 5 is_stmt 1 view .LVU156
 660:Core/Src/main.c ****     TxData[2] = vicoreTemp;                 // DMA update
 528              		.loc 1 660 15 is_stmt 0 view .LVU157
 529 001a 124B     		ldr	r3, .L28+16
 530 001c 1B68     		ldr	r3, [r3]
 531 001e 5370     		strb	r3, [r2, #1]
 661:Core/Src/main.c ****     TxData[3] = rinehartVoltage & 0xFF;     // update on CAN message LSB
 532              		.loc 1 661 5 is_stmt 1 view .LVU158
 661:Core/Src/main.c ****     TxData[3] = rinehartVoltage & 0xFF;     // update on CAN message LSB
 533              		.loc 1 661 15 is_stmt 0 view .LVU159
 534 0020 114B     		ldr	r3, .L28+20
 535 0022 1B68     		ldr	r3, [r3]
 536 0024 9370     		strb	r3, [r2, #2]
 662:Core/Src/main.c ****     TxData[4] = rinehartVoltage >> 8;       // update on CAN message MSB
 537              		.loc 1 662 5 is_stmt 1 view .LVU160
 662:Core/Src/main.c ****     TxData[4] = rinehartVoltage >> 8;       // update on CAN message MSB
 538              		.loc 1 662 15 is_stmt 0 view .LVU161
 539 0026 114B     		ldr	r3, .L28+24
 540 0028 1B68     		ldr	r3, [r3]
 541 002a D370     		strb	r3, [r2, #3]
 663:Core/Src/main.c ****     TxData[5] = bmsVoltage & 0xFF;          // update on CAN message LSB
 542              		.loc 1 663 5 is_stmt 1 view .LVU162
 663:Core/Src/main.c ****     TxData[5] = bmsVoltage & 0xFF;          // update on CAN message LSB
 543              		.loc 1 663 33 is_stmt 0 view .LVU163
 544 002c 1B0A     		lsrs	r3, r3, #8
 663:Core/Src/main.c ****     TxData[5] = bmsVoltage & 0xFF;          // update on CAN message LSB
 545              		.loc 1 663 15 view .LVU164
 546 002e 1371     		strb	r3, [r2, #4]
 664:Core/Src/main.c ****     TxData[6] = bmsVoltage >> 8;            // update on CAN message MSB
 547              		.loc 1 664 5 is_stmt 1 view .LVU165
 664:Core/Src/main.c ****     TxData[6] = bmsVoltage >> 8;            // update on CAN message MSB
ARM GAS  /tmp/cc3ERXfA.s 			page 24


 548              		.loc 1 664 15 is_stmt 0 view .LVU166
 549 0030 0F4B     		ldr	r3, .L28+28
 550 0032 1B68     		ldr	r3, [r3]
 551 0034 5371     		strb	r3, [r2, #5]
 665:Core/Src/main.c ****     TxData[7] = prechargeState;             // show which state of precharge / driving we're in, 0:
 552              		.loc 1 665 5 is_stmt 1 view .LVU167
 665:Core/Src/main.c ****     TxData[7] = prechargeState;             // show which state of precharge / driving we're in, 0:
 553              		.loc 1 665 28 is_stmt 0 view .LVU168
 554 0036 1B0A     		lsrs	r3, r3, #8
 665:Core/Src/main.c ****     TxData[7] = prechargeState;             // show which state of precharge / driving we're in, 0:
 555              		.loc 1 665 15 view .LVU169
 556 0038 9371     		strb	r3, [r2, #6]
 666:Core/Src/main.c **** 
 557              		.loc 1 666 5 is_stmt 1 view .LVU170
 666:Core/Src/main.c **** 
 558              		.loc 1 666 15 is_stmt 0 view .LVU171
 559 003a 0E4B     		ldr	r3, .L28+32
 560 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 561 003e D371     		strb	r3, [r2, #7]
 669:Core/Src/main.c ****   }
 562              		.loc 1 669 5 is_stmt 1 view .LVU172
 563 0040 0D4B     		ldr	r3, .L28+36
 564 0042 0E49     		ldr	r1, .L28+40
 565 0044 0E48     		ldr	r0, .L28+44
 566              	.LVL17:
 669:Core/Src/main.c ****   }
 567              		.loc 1 669 5 is_stmt 0 view .LVU173
 568 0046 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 569              	.LVL18:
 570 004a DEE7     		b	.L23
 571              	.L27:
 676:Core/Src/main.c ****   }
 572              		.loc 1 676 5 is_stmt 1 view .LVU174
 573 004c FFF7FEFF 		bl	prechargeControl
 574              	.LVL19:
 575              		.loc 1 678 1 is_stmt 0 view .LVU175
 576 0050 DEE7     		b	.L22
 577              	.L29:
 578 0052 00BF     		.align	2
 579              	.L28:
 580 0054 00000000 		.word	htim14
 581 0058 00000000 		.word	htim13
 582 005c 00000000 		.word	TxData
 583 0060 00000000 		.word	.LANCHOR1
 584 0064 00000000 		.word	.LANCHOR4
 585 0068 00000000 		.word	.LANCHOR5
 586 006c 00000000 		.word	.LANCHOR2
 587 0070 00000000 		.word	.LANCHOR3
 588 0074 00000000 		.word	.LANCHOR0
 589 0078 00000000 		.word	TxMailbox
 590 007c 00000000 		.word	txHeader1
 591 0080 00000000 		.word	hcan1
 592              		.cfi_endproc
 593              	.LFE226:
 595              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 596              		.align	1
 597              		.global	HAL_ADC_ConvCpltCallback
ARM GAS  /tmp/cc3ERXfA.s 			page 25


 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	HAL_ADC_ConvCpltCallback:
 604              	.LVL20:
 605              	.LFB227:
 679:Core/Src/main.c **** 
 680:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 681:Core/Src/main.c **** {
 606              		.loc 1 681 1 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              		.loc 1 681 1 is_stmt 0 view .LVU177
 611 0000 08B5     		push	{r3, lr}
 612              	.LCFI8:
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 3, -8
 615              		.cfi_offset 14, -4
 682:Core/Src/main.c ****   // TODO: check analog values for the temperature conversion
 683:Core/Src/main.c ****   // Define threshold for when the fan should turn on
 684:Core/Src/main.c **** 
 685:Core/Src/main.c ****   // update vicor temp
 686:Core/Src/main.c ****   vicoreTemp = adc_buf[0];
 616              		.loc 1 686 3 is_stmt 1 view .LVU178
 617              		.loc 1 686 23 is_stmt 0 view .LVU179
 618 0002 094B     		ldr	r3, .L34
 619 0004 1B68     		ldr	r3, [r3]
 620              		.loc 1 686 14 view .LVU180
 621 0006 094A     		ldr	r2, .L34+4
 622 0008 1360     		str	r3, [r2]
 687:Core/Src/main.c **** 
 688:Core/Src/main.c ****   // set fan based on value
 689:Core/Src/main.c ****   if (vicoreTemp >= 2048)
 623              		.loc 1 689 3 is_stmt 1 view .LVU181
 624              		.loc 1 689 6 is_stmt 0 view .LVU182
 625 000a B3F5006F 		cmp	r3, #2048
 626 000e 05DB     		blt	.L31
 690:Core/Src/main.c ****   {
 691:Core/Src/main.c ****     // set the fan high
 692:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 627              		.loc 1 692 5 is_stmt 1 view .LVU183
 628 0010 0122     		movs	r2, #1
 629 0012 1146     		mov	r1, r2
 630 0014 0648     		ldr	r0, .L34+8
 631              	.LVL21:
 632              		.loc 1 692 5 is_stmt 0 view .LVU184
 633 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 634              	.LVL22:
 635              	.L30:
 693:Core/Src/main.c ****   }
 694:Core/Src/main.c **** 
 695:Core/Src/main.c ****   else
 696:Core/Src/main.c ****   {
 697:Core/Src/main.c ****     // set fan low
 698:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
ARM GAS  /tmp/cc3ERXfA.s 			page 26


 699:Core/Src/main.c ****   }
 700:Core/Src/main.c **** }
 636              		.loc 1 700 1 view .LVU185
 637 001a 08BD     		pop	{r3, pc}
 638              	.LVL23:
 639              	.L31:
 698:Core/Src/main.c ****   }
 640              		.loc 1 698 5 is_stmt 1 view .LVU186
 641 001c 0022     		movs	r2, #0
 642 001e 0121     		movs	r1, #1
 643 0020 0348     		ldr	r0, .L34+8
 644              	.LVL24:
 698:Core/Src/main.c ****   }
 645              		.loc 1 698 5 is_stmt 0 view .LVU187
 646 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 647              	.LVL25:
 648              		.loc 1 700 1 view .LVU188
 649 0026 F8E7     		b	.L30
 650              	.L35:
 651              		.align	2
 652              	.L34:
 653 0028 00000000 		.word	adc_buf
 654 002c 00000000 		.word	.LANCHOR5
 655 0030 00000240 		.word	1073872896
 656              		.cfi_endproc
 657              	.LFE227:
 659              		.section	.text.Error_Handler,"ax",%progbits
 660              		.align	1
 661              		.global	Error_Handler
 662              		.syntax unified
 663              		.thumb
 664              		.thumb_func
 665              		.fpu fpv4-sp-d16
 667              	Error_Handler:
 668              	.LFB228:
 701:Core/Src/main.c **** 
 702:Core/Src/main.c **** /* USER CODE END 4 */
 703:Core/Src/main.c **** 
 704:Core/Src/main.c **** /**
 705:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 706:Core/Src/main.c ****   * @retval None
 707:Core/Src/main.c ****   */
 708:Core/Src/main.c **** void Error_Handler(void)
 709:Core/Src/main.c **** {
 669              		.loc 1 709 1 is_stmt 1 view -0
 670              		.cfi_startproc
 671              		@ Volatile: function does not return.
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674              		@ link register save eliminated.
 710:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 711:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 712:Core/Src/main.c ****   __disable_irq();
 675              		.loc 1 712 3 view .LVU190
 676              	.LBB7:
 677              	.LBI7:
 678              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
ARM GAS  /tmp/cc3ERXfA.s 			page 27


   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc3ERXfA.s 			page 28


  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
ARM GAS  /tmp/cc3ERXfA.s 			page 29


 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 679              		.loc 2 140 27 view .LVU191
 680              	.LBB8:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 681              		.loc 2 142 3 view .LVU192
 682              		.syntax unified
 683              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 684 0000 72B6     		cpsid i
 685              	@ 0 "" 2
 686              		.thumb
 687              		.syntax unified
 688              	.L37:
 689              	.LBE8:
 690              	.LBE7:
 713:Core/Src/main.c ****   while (1)
 691              		.loc 1 713 3 discriminator 1 view .LVU193
 714:Core/Src/main.c ****   {
 715:Core/Src/main.c ****   }
 692              		.loc 1 715 3 discriminator 1 view .LVU194
 713:Core/Src/main.c ****   while (1)
 693              		.loc 1 713 9 discriminator 1 view .LVU195
 694 0002 FEE7     		b	.L37
 695              		.cfi_endproc
 696              	.LFE228:
 698              		.section	.text.MX_CAN1_Init,"ax",%progbits
 699              		.align	1
 700              		.syntax unified
 701              		.thumb
 702              		.thumb_func
 703              		.fpu fpv4-sp-d16
 705              	MX_CAN1_Init:
ARM GAS  /tmp/cc3ERXfA.s 			page 30


 706              	.LFB219:
 296:Core/Src/main.c **** 
 707              		.loc 1 296 1 view -0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711 0000 70B5     		push	{r4, r5, r6, lr}
 712              	.LCFI9:
 713              		.cfi_def_cfa_offset 16
 714              		.cfi_offset 4, -16
 715              		.cfi_offset 5, -12
 716              		.cfi_offset 6, -8
 717              		.cfi_offset 14, -4
 303:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 718              		.loc 1 303 3 view .LVU197
 303:Core/Src/main.c ****   hcan1.Init.Prescaler = 18;
 719              		.loc 1 303 18 is_stmt 0 view .LVU198
 720 0002 1D48     		ldr	r0, .L42
 721 0004 1D4B     		ldr	r3, .L42+4
 722 0006 0360     		str	r3, [r0]
 304:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 723              		.loc 1 304 3 is_stmt 1 view .LVU199
 304:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 724              		.loc 1 304 24 is_stmt 0 view .LVU200
 725 0008 1223     		movs	r3, #18
 726 000a 4360     		str	r3, [r0, #4]
 305:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 727              		.loc 1 305 3 is_stmt 1 view .LVU201
 305:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 728              		.loc 1 305 19 is_stmt 0 view .LVU202
 729 000c 0023     		movs	r3, #0
 730 000e 8360     		str	r3, [r0, #8]
 306:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 731              		.loc 1 306 3 is_stmt 1 view .LVU203
 306:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 732              		.loc 1 306 28 is_stmt 0 view .LVU204
 733 0010 C360     		str	r3, [r0, #12]
 307:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 734              		.loc 1 307 3 is_stmt 1 view .LVU205
 307:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 735              		.loc 1 307 23 is_stmt 0 view .LVU206
 736 0012 4FF40032 		mov	r2, #131072
 737 0016 0261     		str	r2, [r0, #16]
 308:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 738              		.loc 1 308 3 is_stmt 1 view .LVU207
 308:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 739              		.loc 1 308 23 is_stmt 0 view .LVU208
 740 0018 4361     		str	r3, [r0, #20]
 309:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 741              		.loc 1 309 3 is_stmt 1 view .LVU209
 309:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 742              		.loc 1 309 32 is_stmt 0 view .LVU210
 743 001a 0376     		strb	r3, [r0, #24]
 310:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 744              		.loc 1 310 3 is_stmt 1 view .LVU211
 310:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 745              		.loc 1 310 25 is_stmt 0 view .LVU212
ARM GAS  /tmp/cc3ERXfA.s 			page 31


 746 001c 0122     		movs	r2, #1
 747 001e 4276     		strb	r2, [r0, #25]
 311:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 748              		.loc 1 311 3 is_stmt 1 view .LVU213
 311:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = ENABLE;
 749              		.loc 1 311 25 is_stmt 0 view .LVU214
 750 0020 8376     		strb	r3, [r0, #26]
 312:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 751              		.loc 1 312 3 is_stmt 1 view .LVU215
 312:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 752              		.loc 1 312 33 is_stmt 0 view .LVU216
 753 0022 C276     		strb	r2, [r0, #27]
 313:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 754              		.loc 1 313 3 is_stmt 1 view .LVU217
 313:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 755              		.loc 1 313 32 is_stmt 0 view .LVU218
 756 0024 0377     		strb	r3, [r0, #28]
 314:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 757              		.loc 1 314 3 is_stmt 1 view .LVU219
 314:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 758              		.loc 1 314 35 is_stmt 0 view .LVU220
 759 0026 4377     		strb	r3, [r0, #29]
 315:Core/Src/main.c ****   {
 760              		.loc 1 315 3 is_stmt 1 view .LVU221
 315:Core/Src/main.c ****   {
 761              		.loc 1 315 7 is_stmt 0 view .LVU222
 762 0028 FFF7FEFF 		bl	HAL_CAN_Init
 763              	.LVL26:
 315:Core/Src/main.c ****   {
 764              		.loc 1 315 6 view .LVU223
 765 002c 08BB     		cbnz	r0, .L41
 322:Core/Src/main.c ****   	canFilter0.FilterIdLow = 0x000;
 766              		.loc 1 322 5 is_stmt 1 view .LVU224
 322:Core/Src/main.c ****   	canFilter0.FilterIdLow = 0x000;
 767              		.loc 1 322 29 is_stmt 0 view .LVU225
 768 002e 1449     		ldr	r1, .L42+8
 769 0030 4FF45643 		mov	r3, #54784
 770 0034 0B60     		str	r3, [r1]
 323:Core/Src/main.c ****     canFilter0.FilterMaskIdHigh = 0x6B0 << 5;
 771              		.loc 1 323 4 is_stmt 1 view .LVU226
 323:Core/Src/main.c ****     canFilter0.FilterMaskIdHigh = 0x6B0 << 5;
 772              		.loc 1 323 27 is_stmt 0 view .LVU227
 773 0036 0024     		movs	r4, #0
 774 0038 4C60     		str	r4, [r1, #4]
 324:Core/Src/main.c ****   	canFilter0.FilterMaskIdLow = 0x000;
 775              		.loc 1 324 5 is_stmt 1 view .LVU228
 324:Core/Src/main.c ****   	canFilter0.FilterMaskIdLow = 0x000;
 776              		.loc 1 324 33 is_stmt 0 view .LVU229
 777 003a 8B60     		str	r3, [r1, #8]
 325:Core/Src/main.c ****     canFilter0.FilterBank = 0;
 778              		.loc 1 325 4 is_stmt 1 view .LVU230
 325:Core/Src/main.c ****     canFilter0.FilterBank = 0;
 779              		.loc 1 325 31 is_stmt 0 view .LVU231
 780 003c CC60     		str	r4, [r1, #12]
 326:Core/Src/main.c ****   	canFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 781              		.loc 1 326 5 is_stmt 1 view .LVU232
 326:Core/Src/main.c ****   	canFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
ARM GAS  /tmp/cc3ERXfA.s 			page 32


 782              		.loc 1 326 27 is_stmt 0 view .LVU233
 783 003e 4C61     		str	r4, [r1, #20]
 327:Core/Src/main.c ****   	canFilter0.FilterFIFOAssignment = CAN_RX_FIFO0;
 784              		.loc 1 327 4 is_stmt 1 view .LVU234
 327:Core/Src/main.c ****   	canFilter0.FilterFIFOAssignment = CAN_RX_FIFO0;
 785              		.loc 1 327 26 is_stmt 0 view .LVU235
 786 0040 8C61     		str	r4, [r1, #24]
 328:Core/Src/main.c ****   	canFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 787              		.loc 1 328 4 is_stmt 1 view .LVU236
 328:Core/Src/main.c ****   	canFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 788              		.loc 1 328 36 is_stmt 0 view .LVU237
 789 0042 0C61     		str	r4, [r1, #16]
 329:Core/Src/main.c ****   	canFilter0.FilterActivation = ENABLE;
 790              		.loc 1 329 4 is_stmt 1 view .LVU238
 329:Core/Src/main.c ****   	canFilter0.FilterActivation = ENABLE;
 791              		.loc 1 329 27 is_stmt 0 view .LVU239
 792 0044 0125     		movs	r5, #1
 793 0046 CD61     		str	r5, [r1, #28]
 330:Core/Src/main.c **** 
 794              		.loc 1 330 4 is_stmt 1 view .LVU240
 330:Core/Src/main.c **** 
 795              		.loc 1 330 32 is_stmt 0 view .LVU241
 796 0048 0D62     		str	r5, [r1, #32]
 332:Core/Src/main.c **** 
 797              		.loc 1 332 5 is_stmt 1 view .LVU242
 798 004a 0B4E     		ldr	r6, .L42
 799 004c 3046     		mov	r0, r6
 800 004e FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 801              	.LVL27:
 335:Core/Src/main.c ****   	canFilter1.FilterIdLow = 0x000;
 802              		.loc 1 335 5 view .LVU243
 335:Core/Src/main.c ****   	canFilter1.FilterIdLow = 0x000;
 803              		.loc 1 335 29 is_stmt 0 view .LVU244
 804 0052 0C49     		ldr	r1, .L42+12
 805 0054 4FF4A753 		mov	r3, #5344
 806 0058 0B60     		str	r3, [r1]
 336:Core/Src/main.c ****     canFilter1.FilterMaskIdHigh = 0x0A7 << 5;
 807              		.loc 1 336 4 is_stmt 1 view .LVU245
 336:Core/Src/main.c ****     canFilter1.FilterMaskIdHigh = 0x0A7 << 5;
 808              		.loc 1 336 27 is_stmt 0 view .LVU246
 809 005a 4C60     		str	r4, [r1, #4]
 337:Core/Src/main.c ****   	canFilter1.FilterMaskIdLow = 0x000;
 810              		.loc 1 337 5 is_stmt 1 view .LVU247
 337:Core/Src/main.c ****   	canFilter1.FilterMaskIdLow = 0x000;
 811              		.loc 1 337 33 is_stmt 0 view .LVU248
 812 005c 8B60     		str	r3, [r1, #8]
 338:Core/Src/main.c ****     canFilter1.FilterBank = 1;
 813              		.loc 1 338 4 is_stmt 1 view .LVU249
 338:Core/Src/main.c ****     canFilter1.FilterBank = 1;
 814              		.loc 1 338 31 is_stmt 0 view .LVU250
 815 005e CC60     		str	r4, [r1, #12]
 339:Core/Src/main.c ****   	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 816              		.loc 1 339 5 is_stmt 1 view .LVU251
 339:Core/Src/main.c ****   	canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 817              		.loc 1 339 27 is_stmt 0 view .LVU252
 818 0060 4D61     		str	r5, [r1, #20]
 340:Core/Src/main.c ****   	canFilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
ARM GAS  /tmp/cc3ERXfA.s 			page 33


 819              		.loc 1 340 4 is_stmt 1 view .LVU253
 340:Core/Src/main.c ****   	canFilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 820              		.loc 1 340 26 is_stmt 0 view .LVU254
 821 0062 8C61     		str	r4, [r1, #24]
 341:Core/Src/main.c ****   	canFilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 822              		.loc 1 341 4 is_stmt 1 view .LVU255
 341:Core/Src/main.c ****   	canFilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 823              		.loc 1 341 36 is_stmt 0 view .LVU256
 824 0064 0C61     		str	r4, [r1, #16]
 342:Core/Src/main.c ****   	canFilter1.FilterActivation = ENABLE;
 825              		.loc 1 342 4 is_stmt 1 view .LVU257
 342:Core/Src/main.c ****   	canFilter1.FilterActivation = ENABLE;
 826              		.loc 1 342 27 is_stmt 0 view .LVU258
 827 0066 CD61     		str	r5, [r1, #28]
 343:Core/Src/main.c **** 
 828              		.loc 1 343 4 is_stmt 1 view .LVU259
 343:Core/Src/main.c **** 
 829              		.loc 1 343 32 is_stmt 0 view .LVU260
 830 0068 0D62     		str	r5, [r1, #32]
 345:Core/Src/main.c **** 
 831              		.loc 1 345 5 is_stmt 1 view .LVU261
 832 006a 3046     		mov	r0, r6
 833 006c FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 834              	.LVL28:
 349:Core/Src/main.c **** 
 835              		.loc 1 349 1 is_stmt 0 view .LVU262
 836 0070 70BD     		pop	{r4, r5, r6, pc}
 837              	.L41:
 317:Core/Src/main.c ****   }
 838              		.loc 1 317 5 is_stmt 1 view .LVU263
 839 0072 FFF7FEFF 		bl	Error_Handler
 840              	.LVL29:
 841              	.L43:
 842 0076 00BF     		.align	2
 843              	.L42:
 844 0078 00000000 		.word	hcan1
 845 007c 00640040 		.word	1073767424
 846 0080 00000000 		.word	canFilter0
 847 0084 00000000 		.word	canFilter1
 848              		.cfi_endproc
 849              	.LFE219:
 851              		.section	.text.MX_ADC1_Init,"ax",%progbits
 852              		.align	1
 853              		.syntax unified
 854              		.thumb
 855              		.thumb_func
 856              		.fpu fpv4-sp-d16
 858              	MX_ADC1_Init:
 859              	.LFB218:
 249:Core/Src/main.c **** 
 860              		.loc 1 249 1 view -0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 16
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864 0000 00B5     		push	{lr}
 865              	.LCFI10:
 866              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc3ERXfA.s 			page 34


 867              		.cfi_offset 14, -4
 868 0002 85B0     		sub	sp, sp, #20
 869              	.LCFI11:
 870              		.cfi_def_cfa_offset 24
 254:Core/Src/main.c **** 
 871              		.loc 1 254 3 view .LVU265
 254:Core/Src/main.c **** 
 872              		.loc 1 254 26 is_stmt 0 view .LVU266
 873 0004 0023     		movs	r3, #0
 874 0006 0093     		str	r3, [sp]
 875 0008 0193     		str	r3, [sp, #4]
 876 000a 0293     		str	r3, [sp, #8]
 877 000c 0393     		str	r3, [sp, #12]
 260:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 878              		.loc 1 260 3 is_stmt 1 view .LVU267
 260:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 879              		.loc 1 260 18 is_stmt 0 view .LVU268
 880 000e 1448     		ldr	r0, .L50
 881 0010 144A     		ldr	r2, .L50+4
 882 0012 0260     		str	r2, [r0]
 261:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 883              		.loc 1 261 3 is_stmt 1 view .LVU269
 261:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 884              		.loc 1 261 29 is_stmt 0 view .LVU270
 885 0014 4FF48032 		mov	r2, #65536
 886 0018 4260     		str	r2, [r0, #4]
 262:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 887              		.loc 1 262 3 is_stmt 1 view .LVU271
 262:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 888              		.loc 1 262 25 is_stmt 0 view .LVU272
 889 001a 8360     		str	r3, [r0, #8]
 263:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 890              		.loc 1 263 3 is_stmt 1 view .LVU273
 263:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 891              		.loc 1 263 27 is_stmt 0 view .LVU274
 892 001c 0361     		str	r3, [r0, #16]
 264:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 893              		.loc 1 264 3 is_stmt 1 view .LVU275
 264:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 894              		.loc 1 264 33 is_stmt 0 view .LVU276
 895 001e 0122     		movs	r2, #1
 896 0020 0276     		strb	r2, [r0, #24]
 265:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 897              		.loc 1 265 3 is_stmt 1 view .LVU277
 265:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 898              		.loc 1 265 36 is_stmt 0 view .LVU278
 899 0022 80F82030 		strb	r3, [r0, #32]
 266:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 900              		.loc 1 266 3 is_stmt 1 view .LVU279
 266:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 901              		.loc 1 266 35 is_stmt 0 view .LVU280
 902 0026 C362     		str	r3, [r0, #44]
 267:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 903              		.loc 1 267 3 is_stmt 1 view .LVU281
 267:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 904              		.loc 1 267 31 is_stmt 0 view .LVU282
 905 0028 0F49     		ldr	r1, .L50+8
ARM GAS  /tmp/cc3ERXfA.s 			page 35


 906 002a 8162     		str	r1, [r0, #40]
 268:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 907              		.loc 1 268 3 is_stmt 1 view .LVU283
 268:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 908              		.loc 1 268 24 is_stmt 0 view .LVU284
 909 002c C360     		str	r3, [r0, #12]
 269:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 910              		.loc 1 269 3 is_stmt 1 view .LVU285
 269:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 911              		.loc 1 269 30 is_stmt 0 view .LVU286
 912 002e C261     		str	r2, [r0, #28]
 270:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 913              		.loc 1 270 3 is_stmt 1 view .LVU287
 270:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 914              		.loc 1 270 36 is_stmt 0 view .LVU288
 915 0030 80F83020 		strb	r2, [r0, #48]
 271:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 916              		.loc 1 271 3 is_stmt 1 view .LVU289
 271:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 917              		.loc 1 271 27 is_stmt 0 view .LVU290
 918 0034 4261     		str	r2, [r0, #20]
 272:Core/Src/main.c ****   {
 919              		.loc 1 272 3 is_stmt 1 view .LVU291
 272:Core/Src/main.c ****   {
 920              		.loc 1 272 7 is_stmt 0 view .LVU292
 921 0036 FFF7FEFF 		bl	HAL_ADC_Init
 922              	.LVL30:
 272:Core/Src/main.c ****   {
 923              		.loc 1 272 6 view .LVU293
 924 003a 68B9     		cbnz	r0, .L48
 278:Core/Src/main.c ****   sConfig.Rank = 1;
 925              		.loc 1 278 3 is_stmt 1 view .LVU294
 278:Core/Src/main.c ****   sConfig.Rank = 1;
 926              		.loc 1 278 19 is_stmt 0 view .LVU295
 927 003c 0723     		movs	r3, #7
 928 003e 0093     		str	r3, [sp]
 279:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 929              		.loc 1 279 3 is_stmt 1 view .LVU296
 279:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 930              		.loc 1 279 16 is_stmt 0 view .LVU297
 931 0040 0123     		movs	r3, #1
 932 0042 0193     		str	r3, [sp, #4]
 280:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 933              		.loc 1 280 3 is_stmt 1 view .LVU298
 280:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 934              		.loc 1 280 24 is_stmt 0 view .LVU299
 935 0044 0023     		movs	r3, #0
 936 0046 0293     		str	r3, [sp, #8]
 281:Core/Src/main.c ****   {
 937              		.loc 1 281 3 is_stmt 1 view .LVU300
 281:Core/Src/main.c ****   {
 938              		.loc 1 281 7 is_stmt 0 view .LVU301
 939 0048 6946     		mov	r1, sp
 940 004a 0548     		ldr	r0, .L50
 941 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 942              	.LVL31:
 281:Core/Src/main.c ****   {
ARM GAS  /tmp/cc3ERXfA.s 			page 36


 943              		.loc 1 281 6 view .LVU302
 944 0050 20B9     		cbnz	r0, .L49
 288:Core/Src/main.c **** 
 945              		.loc 1 288 1 view .LVU303
 946 0052 05B0     		add	sp, sp, #20
 947              	.LCFI12:
 948              		.cfi_remember_state
 949              		.cfi_def_cfa_offset 4
 950              		@ sp needed
 951 0054 5DF804FB 		ldr	pc, [sp], #4
 952              	.L48:
 953              	.LCFI13:
 954              		.cfi_restore_state
 274:Core/Src/main.c ****   }
 955              		.loc 1 274 5 is_stmt 1 view .LVU304
 956 0058 FFF7FEFF 		bl	Error_Handler
 957              	.LVL32:
 958              	.L49:
 283:Core/Src/main.c ****   }
 959              		.loc 1 283 5 view .LVU305
 960 005c FFF7FEFF 		bl	Error_Handler
 961              	.LVL33:
 962              	.L51:
 963              		.align	2
 964              	.L50:
 965 0060 00000000 		.word	hadc1
 966 0064 00200140 		.word	1073815552
 967 0068 0100000F 		.word	251658241
 968              		.cfi_endproc
 969              	.LFE218:
 971              		.section	.text.MX_TIM14_Init,"ax",%progbits
 972              		.align	1
 973              		.syntax unified
 974              		.thumb
 975              		.thumb_func
 976              		.fpu fpv4-sp-d16
 978              	MX_TIM14_Init:
 979              	.LFB221:
 388:Core/Src/main.c **** 
 980              		.loc 1 388 1 view -0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 0
 983              		@ frame_needed = 0, uses_anonymous_args = 0
 984 0000 08B5     		push	{r3, lr}
 985              	.LCFI14:
 986              		.cfi_def_cfa_offset 8
 987              		.cfi_offset 3, -8
 988              		.cfi_offset 14, -4
 397:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 989              		.loc 1 397 3 view .LVU307
 397:Core/Src/main.c ****   htim14.Init.Prescaler = 9000-1;
 990              		.loc 1 397 19 is_stmt 0 view .LVU308
 991 0002 0948     		ldr	r0, .L56
 992 0004 094B     		ldr	r3, .L56+4
 993 0006 0360     		str	r3, [r0]
 398:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 994              		.loc 1 398 3 is_stmt 1 view .LVU309
ARM GAS  /tmp/cc3ERXfA.s 			page 37


 398:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 995              		.loc 1 398 25 is_stmt 0 view .LVU310
 996 0008 42F22733 		movw	r3, #8999
 997 000c 4360     		str	r3, [r0, #4]
 399:Core/Src/main.c ****   htim14.Init.Period = 500-1;
 998              		.loc 1 399 3 is_stmt 1 view .LVU311
 399:Core/Src/main.c ****   htim14.Init.Period = 500-1;
 999              		.loc 1 399 27 is_stmt 0 view .LVU312
 1000 000e 0023     		movs	r3, #0
 1001 0010 8360     		str	r3, [r0, #8]
 400:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1002              		.loc 1 400 3 is_stmt 1 view .LVU313
 400:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1003              		.loc 1 400 22 is_stmt 0 view .LVU314
 1004 0012 40F2F312 		movw	r2, #499
 1005 0016 C260     		str	r2, [r0, #12]
 401:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1006              		.loc 1 401 3 is_stmt 1 view .LVU315
 401:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1007              		.loc 1 401 29 is_stmt 0 view .LVU316
 1008 0018 0361     		str	r3, [r0, #16]
 402:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1009              		.loc 1 402 3 is_stmt 1 view .LVU317
 402:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 1010              		.loc 1 402 33 is_stmt 0 view .LVU318
 1011 001a 8361     		str	r3, [r0, #24]
 403:Core/Src/main.c ****   {
 1012              		.loc 1 403 3 is_stmt 1 view .LVU319
 403:Core/Src/main.c ****   {
 1013              		.loc 1 403 7 is_stmt 0 view .LVU320
 1014 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1015              	.LVL34:
 403:Core/Src/main.c ****   {
 1016              		.loc 1 403 6 view .LVU321
 1017 0020 00B9     		cbnz	r0, .L55
 411:Core/Src/main.c **** 
 1018              		.loc 1 411 1 view .LVU322
 1019 0022 08BD     		pop	{r3, pc}
 1020              	.L55:
 405:Core/Src/main.c ****   }
 1021              		.loc 1 405 5 is_stmt 1 view .LVU323
 1022 0024 FFF7FEFF 		bl	Error_Handler
 1023              	.LVL35:
 1024              	.L57:
 1025              		.align	2
 1026              	.L56:
 1027 0028 00000000 		.word	htim14
 1028 002c 00200040 		.word	1073750016
 1029              		.cfi_endproc
 1030              	.LFE221:
 1032              		.section	.text.MX_TIM13_Init,"ax",%progbits
 1033              		.align	1
 1034              		.syntax unified
 1035              		.thumb
 1036              		.thumb_func
 1037              		.fpu fpv4-sp-d16
 1039              	MX_TIM13_Init:
ARM GAS  /tmp/cc3ERXfA.s 			page 38


 1040              	.LFB220:
 357:Core/Src/main.c **** 
 1041              		.loc 1 357 1 view -0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 0
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045 0000 08B5     		push	{r3, lr}
 1046              	.LCFI15:
 1047              		.cfi_def_cfa_offset 8
 1048              		.cfi_offset 3, -8
 1049              		.cfi_offset 14, -4
 366:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1050              		.loc 1 366 3 view .LVU325
 366:Core/Src/main.c ****   htim13.Init.Prescaler = 9000-1;
 1051              		.loc 1 366 19 is_stmt 0 view .LVU326
 1052 0002 0948     		ldr	r0, .L62
 1053 0004 094B     		ldr	r3, .L62+4
 1054 0006 0360     		str	r3, [r0]
 367:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1055              		.loc 1 367 3 is_stmt 1 view .LVU327
 367:Core/Src/main.c ****   htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 1056              		.loc 1 367 25 is_stmt 0 view .LVU328
 1057 0008 42F22733 		movw	r3, #8999
 1058 000c 4360     		str	r3, [r0, #4]
 368:Core/Src/main.c ****   htim13.Init.Period = 100-1;
 1059              		.loc 1 368 3 is_stmt 1 view .LVU329
 368:Core/Src/main.c ****   htim13.Init.Period = 100-1;
 1060              		.loc 1 368 27 is_stmt 0 view .LVU330
 1061 000e 0023     		movs	r3, #0
 1062 0010 8360     		str	r3, [r0, #8]
 369:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1063              		.loc 1 369 3 is_stmt 1 view .LVU331
 369:Core/Src/main.c ****   htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1064              		.loc 1 369 22 is_stmt 0 view .LVU332
 1065 0012 6322     		movs	r2, #99
 1066 0014 C260     		str	r2, [r0, #12]
 370:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1067              		.loc 1 370 3 is_stmt 1 view .LVU333
 370:Core/Src/main.c ****   htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1068              		.loc 1 370 29 is_stmt 0 view .LVU334
 1069 0016 0361     		str	r3, [r0, #16]
 371:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1070              		.loc 1 371 3 is_stmt 1 view .LVU335
 371:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 1071              		.loc 1 371 33 is_stmt 0 view .LVU336
 1072 0018 8361     		str	r3, [r0, #24]
 372:Core/Src/main.c ****   {
 1073              		.loc 1 372 3 is_stmt 1 view .LVU337
 372:Core/Src/main.c ****   {
 1074              		.loc 1 372 7 is_stmt 0 view .LVU338
 1075 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1076              	.LVL36:
 372:Core/Src/main.c ****   {
 1077              		.loc 1 372 6 view .LVU339
 1078 001e 00B9     		cbnz	r0, .L61
 380:Core/Src/main.c **** 
 1079              		.loc 1 380 1 view .LVU340
ARM GAS  /tmp/cc3ERXfA.s 			page 39


 1080 0020 08BD     		pop	{r3, pc}
 1081              	.L61:
 374:Core/Src/main.c ****   }
 1082              		.loc 1 374 5 is_stmt 1 view .LVU341
 1083 0022 FFF7FEFF 		bl	Error_Handler
 1084              	.LVL37:
 1085              	.L63:
 1086 0026 00BF     		.align	2
 1087              	.L62:
 1088 0028 00000000 		.word	htim13
 1089 002c 001C0040 		.word	1073748992
 1090              		.cfi_endproc
 1091              	.LFE220:
 1093              		.section	.text.SystemClock_Config,"ax",%progbits
 1094              		.align	1
 1095              		.global	SystemClock_Config
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu fpv4-sp-d16
 1101              	SystemClock_Config:
 1102              	.LFB217:
 203:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1103              		.loc 1 203 1 view -0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 80
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107 0000 00B5     		push	{lr}
 1108              	.LCFI16:
 1109              		.cfi_def_cfa_offset 4
 1110              		.cfi_offset 14, -4
 1111 0002 95B0     		sub	sp, sp, #84
 1112              	.LCFI17:
 1113              		.cfi_def_cfa_offset 88
 204:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1114              		.loc 1 204 3 view .LVU343
 204:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1115              		.loc 1 204 22 is_stmt 0 view .LVU344
 1116 0004 3422     		movs	r2, #52
 1117 0006 0021     		movs	r1, #0
 1118 0008 07A8     		add	r0, sp, #28
 1119 000a FFF7FEFF 		bl	memset
 1120              	.LVL38:
 205:Core/Src/main.c **** 
 1121              		.loc 1 205 3 is_stmt 1 view .LVU345
 205:Core/Src/main.c **** 
 1122              		.loc 1 205 22 is_stmt 0 view .LVU346
 1123 000e 0023     		movs	r3, #0
 1124 0010 0293     		str	r3, [sp, #8]
 1125 0012 0393     		str	r3, [sp, #12]
 1126 0014 0493     		str	r3, [sp, #16]
 1127 0016 0593     		str	r3, [sp, #20]
 1128 0018 0693     		str	r3, [sp, #24]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1129              		.loc 1 209 3 is_stmt 1 view .LVU347
 1130              	.LBB9:
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
ARM GAS  /tmp/cc3ERXfA.s 			page 40


 1131              		.loc 1 209 3 view .LVU348
 1132 001a 0093     		str	r3, [sp]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1133              		.loc 1 209 3 view .LVU349
 1134 001c 1E4A     		ldr	r2, .L70
 1135 001e 116C     		ldr	r1, [r2, #64]
 1136 0020 41F08051 		orr	r1, r1, #268435456
 1137 0024 1164     		str	r1, [r2, #64]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1138              		.loc 1 209 3 view .LVU350
 1139 0026 126C     		ldr	r2, [r2, #64]
 1140 0028 02F08052 		and	r2, r2, #268435456
 1141 002c 0092     		str	r2, [sp]
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1142              		.loc 1 209 3 view .LVU351
 1143 002e 009A     		ldr	r2, [sp]
 1144              	.LBE9:
 209:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1145              		.loc 1 209 3 view .LVU352
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1146              		.loc 1 210 3 view .LVU353
 1147              	.LBB10:
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1148              		.loc 1 210 3 view .LVU354
 1149 0030 0193     		str	r3, [sp, #4]
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1150              		.loc 1 210 3 view .LVU355
 1151 0032 1A4A     		ldr	r2, .L70+4
 1152 0034 1168     		ldr	r1, [r2]
 1153 0036 41F44041 		orr	r1, r1, #49152
 1154 003a 1160     		str	r1, [r2]
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1155              		.loc 1 210 3 view .LVU356
 1156 003c 1268     		ldr	r2, [r2]
 1157 003e 02F44042 		and	r2, r2, #49152
 1158 0042 0192     		str	r2, [sp, #4]
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1159              		.loc 1 210 3 view .LVU357
 1160 0044 019A     		ldr	r2, [sp, #4]
 1161              	.LBE10:
 210:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1162              		.loc 1 210 3 view .LVU358
 214:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1163              		.loc 1 214 3 view .LVU359
 214:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1164              		.loc 1 214 36 is_stmt 0 view .LVU360
 1165 0046 0222     		movs	r2, #2
 1166 0048 0792     		str	r2, [sp, #28]
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1167              		.loc 1 215 3 is_stmt 1 view .LVU361
 215:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1168              		.loc 1 215 30 is_stmt 0 view .LVU362
 1169 004a 0121     		movs	r1, #1
 1170 004c 0A91     		str	r1, [sp, #40]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1171              		.loc 1 216 3 is_stmt 1 view .LVU363
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/cc3ERXfA.s 			page 41


 1172              		.loc 1 216 41 is_stmt 0 view .LVU364
 1173 004e 1021     		movs	r1, #16
 1174 0050 0B91     		str	r1, [sp, #44]
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1175              		.loc 1 217 3 is_stmt 1 view .LVU365
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1176              		.loc 1 217 34 is_stmt 0 view .LVU366
 1177 0052 0D92     		str	r2, [sp, #52]
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1178              		.loc 1 218 3 is_stmt 1 view .LVU367
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1179              		.loc 1 218 35 is_stmt 0 view .LVU368
 1180 0054 0E93     		str	r3, [sp, #56]
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1181              		.loc 1 219 3 is_stmt 1 view .LVU369
 219:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1182              		.loc 1 219 30 is_stmt 0 view .LVU370
 1183 0056 0823     		movs	r3, #8
 1184 0058 0F93     		str	r3, [sp, #60]
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1185              		.loc 1 220 3 is_stmt 1 view .LVU371
 220:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1186              		.loc 1 220 30 is_stmt 0 view .LVU372
 1187 005a 5A23     		movs	r3, #90
 1188 005c 1093     		str	r3, [sp, #64]
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1189              		.loc 1 221 3 is_stmt 1 view .LVU373
 221:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1190              		.loc 1 221 30 is_stmt 0 view .LVU374
 1191 005e 1192     		str	r2, [sp, #68]
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1192              		.loc 1 222 3 is_stmt 1 view .LVU375
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1193              		.loc 1 222 30 is_stmt 0 view .LVU376
 1194 0060 1292     		str	r2, [sp, #72]
 223:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1195              		.loc 1 223 3 is_stmt 1 view .LVU377
 223:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1196              		.loc 1 223 30 is_stmt 0 view .LVU378
 1197 0062 1392     		str	r2, [sp, #76]
 224:Core/Src/main.c ****   {
 1198              		.loc 1 224 3 is_stmt 1 view .LVU379
 224:Core/Src/main.c ****   {
 1199              		.loc 1 224 7 is_stmt 0 view .LVU380
 1200 0064 07A8     		add	r0, sp, #28
 1201 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1202              	.LVL39:
 224:Core/Src/main.c ****   {
 1203              		.loc 1 224 6 view .LVU381
 1204 006a 88B9     		cbnz	r0, .L68
 230:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1205              		.loc 1 230 3 is_stmt 1 view .LVU382
 230:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1206              		.loc 1 230 31 is_stmt 0 view .LVU383
 1207 006c 0F23     		movs	r3, #15
 1208 006e 0293     		str	r3, [sp, #8]
 232:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/cc3ERXfA.s 			page 42


 1209              		.loc 1 232 3 is_stmt 1 view .LVU384
 232:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1210              		.loc 1 232 34 is_stmt 0 view .LVU385
 1211 0070 0223     		movs	r3, #2
 1212 0072 0393     		str	r3, [sp, #12]
 233:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1213              		.loc 1 233 3 is_stmt 1 view .LVU386
 233:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1214              		.loc 1 233 35 is_stmt 0 view .LVU387
 1215 0074 0023     		movs	r3, #0
 1216 0076 0493     		str	r3, [sp, #16]
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1217              		.loc 1 234 3 is_stmt 1 view .LVU388
 234:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1218              		.loc 1 234 36 is_stmt 0 view .LVU389
 1219 0078 4FF48052 		mov	r2, #4096
 1220 007c 0592     		str	r2, [sp, #20]
 235:Core/Src/main.c **** 
 1221              		.loc 1 235 3 is_stmt 1 view .LVU390
 235:Core/Src/main.c **** 
 1222              		.loc 1 235 36 is_stmt 0 view .LVU391
 1223 007e 0693     		str	r3, [sp, #24]
 237:Core/Src/main.c ****   {
 1224              		.loc 1 237 3 is_stmt 1 view .LVU392
 237:Core/Src/main.c ****   {
 1225              		.loc 1 237 7 is_stmt 0 view .LVU393
 1226 0080 0321     		movs	r1, #3
 1227 0082 02A8     		add	r0, sp, #8
 1228 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1229              	.LVL40:
 237:Core/Src/main.c ****   {
 1230              		.loc 1 237 6 view .LVU394
 1231 0088 20B9     		cbnz	r0, .L69
 241:Core/Src/main.c **** 
 1232              		.loc 1 241 1 view .LVU395
 1233 008a 15B0     		add	sp, sp, #84
 1234              	.LCFI18:
 1235              		.cfi_remember_state
 1236              		.cfi_def_cfa_offset 4
 1237              		@ sp needed
 1238 008c 5DF804FB 		ldr	pc, [sp], #4
 1239              	.L68:
 1240              	.LCFI19:
 1241              		.cfi_restore_state
 226:Core/Src/main.c ****   }
 1242              		.loc 1 226 5 is_stmt 1 view .LVU396
 1243 0090 FFF7FEFF 		bl	Error_Handler
 1244              	.LVL41:
 1245              	.L69:
 239:Core/Src/main.c ****   }
 1246              		.loc 1 239 5 view .LVU397
 1247 0094 FFF7FEFF 		bl	Error_Handler
 1248              	.LVL42:
 1249              	.L71:
 1250              		.align	2
 1251              	.L70:
 1252 0098 00380240 		.word	1073887232
ARM GAS  /tmp/cc3ERXfA.s 			page 43


 1253 009c 00700040 		.word	1073770496
 1254              		.cfi_endproc
 1255              	.LFE217:
 1257              		.section	.text.main,"ax",%progbits
 1258              		.align	1
 1259              		.global	main
 1260              		.syntax unified
 1261              		.thumb
 1262              		.thumb_func
 1263              		.fpu fpv4-sp-d16
 1265              	main:
 1266              	.LFB216:
 123:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1267              		.loc 1 123 1 view -0
 1268              		.cfi_startproc
 1269              		@ Volatile: function does not return.
 1270              		@ args = 0, pretend = 0, frame = 0
 1271              		@ frame_needed = 0, uses_anonymous_args = 0
 1272 0000 08B5     		push	{r3, lr}
 1273              	.LCFI20:
 1274              		.cfi_def_cfa_offset 8
 1275              		.cfi_offset 3, -8
 1276              		.cfi_offset 14, -4
 131:Core/Src/main.c **** 
 1277              		.loc 1 131 3 view .LVU399
 1278 0002 FFF7FEFF 		bl	HAL_Init
 1279              	.LVL43:
 137:Core/Src/main.c **** 
 1280              		.loc 1 137 3 view .LVU400
 1281 0006 FFF7FEFF 		bl	SystemClock_Config
 1282              	.LVL44:
 143:Core/Src/main.c ****   MX_CAN1_Init();
 1283              		.loc 1 143 3 view .LVU401
 1284 000a FFF7FEFF 		bl	MX_GPIO_Init
 1285              	.LVL45:
 144:Core/Src/main.c ****   MX_DMA_Init();
 1286              		.loc 1 144 3 view .LVU402
 1287 000e FFF7FEFF 		bl	MX_CAN1_Init
 1288              	.LVL46:
 145:Core/Src/main.c ****   MX_ADC1_Init();
 1289              		.loc 1 145 3 view .LVU403
 1290 0012 FFF7FEFF 		bl	MX_DMA_Init
 1291              	.LVL47:
 146:Core/Src/main.c ****   MX_TIM14_Init();
 1292              		.loc 1 146 3 view .LVU404
 1293 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1294              	.LVL48:
 147:Core/Src/main.c ****   MX_TIM13_Init();
 1295              		.loc 1 147 3 view .LVU405
 1296 001a FFF7FEFF 		bl	MX_TIM14_Init
 1297              	.LVL49:
 148:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1298              		.loc 1 148 3 view .LVU406
 1299 001e FFF7FEFF 		bl	MX_TIM13_Init
 1300              	.LVL50:
 152:Core/Src/main.c ****   txHeader0.IDE = CAN_ID_STD;
 1301              		.loc 1 152 3 view .LVU407
ARM GAS  /tmp/cc3ERXfA.s 			page 44


 152:Core/Src/main.c ****   txHeader0.IDE = CAN_ID_STD;
 1302              		.loc 1 152 17 is_stmt 0 view .LVU408
 1303 0022 174A     		ldr	r2, .L75
 1304 0024 0821     		movs	r1, #8
 1305 0026 1161     		str	r1, [r2, #16]
 153:Core/Src/main.c ****   txHeader0.RTR = CAN_RTR_DATA;
 1306              		.loc 1 153 3 is_stmt 1 view .LVU409
 153:Core/Src/main.c ****   txHeader0.RTR = CAN_RTR_DATA;
 1307              		.loc 1 153 17 is_stmt 0 view .LVU410
 1308 0028 0023     		movs	r3, #0
 1309 002a 9360     		str	r3, [r2, #8]
 154:Core/Src/main.c ****   txHeader0.StdId = 0x086;
 1310              		.loc 1 154 3 is_stmt 1 view .LVU411
 154:Core/Src/main.c ****   txHeader0.StdId = 0x086;
 1311              		.loc 1 154 17 is_stmt 0 view .LVU412
 1312 002c D360     		str	r3, [r2, #12]
 155:Core/Src/main.c ****   txHeader0.ExtId = 0;
 1313              		.loc 1 155 3 is_stmt 1 view .LVU413
 155:Core/Src/main.c ****   txHeader0.ExtId = 0;
 1314              		.loc 1 155 19 is_stmt 0 view .LVU414
 1315 002e 8620     		movs	r0, #134
 1316 0030 1060     		str	r0, [r2]
 156:Core/Src/main.c ****   txHeader0.TransmitGlobalTime = DISABLE;
 1317              		.loc 1 156 3 is_stmt 1 view .LVU415
 156:Core/Src/main.c ****   txHeader0.TransmitGlobalTime = DISABLE;
 1318              		.loc 1 156 19 is_stmt 0 view .LVU416
 1319 0032 5360     		str	r3, [r2, #4]
 157:Core/Src/main.c **** 
 1320              		.loc 1 157 3 is_stmt 1 view .LVU417
 157:Core/Src/main.c **** 
 1321              		.loc 1 157 32 is_stmt 0 view .LVU418
 1322 0034 1375     		strb	r3, [r2, #20]
 160:Core/Src/main.c ****   txHeader1.IDE = CAN_ID_STD;
 1323              		.loc 1 160 3 is_stmt 1 view .LVU419
 160:Core/Src/main.c ****   txHeader1.IDE = CAN_ID_STD;
 1324              		.loc 1 160 17 is_stmt 0 view .LVU420
 1325 0036 134A     		ldr	r2, .L75+4
 1326 0038 1161     		str	r1, [r2, #16]
 161:Core/Src/main.c ****   txHeader1.RTR = CAN_RTR_DATA;
 1327              		.loc 1 161 3 is_stmt 1 view .LVU421
 161:Core/Src/main.c ****   txHeader1.RTR = CAN_RTR_DATA;
 1328              		.loc 1 161 17 is_stmt 0 view .LVU422
 1329 003a 9360     		str	r3, [r2, #8]
 162:Core/Src/main.c ****   txHeader1.StdId = 0x087;
 1330              		.loc 1 162 3 is_stmt 1 view .LVU423
 162:Core/Src/main.c ****   txHeader1.StdId = 0x087;
 1331              		.loc 1 162 17 is_stmt 0 view .LVU424
 1332 003c D360     		str	r3, [r2, #12]
 163:Core/Src/main.c ****   txHeader1.ExtId = 0;
 1333              		.loc 1 163 3 is_stmt 1 view .LVU425
 163:Core/Src/main.c ****   txHeader1.ExtId = 0;
 1334              		.loc 1 163 19 is_stmt 0 view .LVU426
 1335 003e 8720     		movs	r0, #135
 1336 0040 1060     		str	r0, [r2]
 164:Core/Src/main.c ****   txHeader1.TransmitGlobalTime = DISABLE;
 1337              		.loc 1 164 3 is_stmt 1 view .LVU427
 164:Core/Src/main.c ****   txHeader1.TransmitGlobalTime = DISABLE;
ARM GAS  /tmp/cc3ERXfA.s 			page 45


 1338              		.loc 1 164 19 is_stmt 0 view .LVU428
 1339 0042 5360     		str	r3, [r2, #4]
 165:Core/Src/main.c **** 
 1340              		.loc 1 165 3 is_stmt 1 view .LVU429
 165:Core/Src/main.c **** 
 1341              		.loc 1 165 32 is_stmt 0 view .LVU430
 1342 0044 1375     		strb	r3, [r2, #20]
 168:Core/Src/main.c ****   txHeader2.IDE = CAN_ID_STD;
 1343              		.loc 1 168 3 is_stmt 1 view .LVU431
 168:Core/Src/main.c ****   txHeader2.IDE = CAN_ID_STD;
 1344              		.loc 1 168 17 is_stmt 0 view .LVU432
 1345 0046 104A     		ldr	r2, .L75+8
 1346 0048 1161     		str	r1, [r2, #16]
 169:Core/Src/main.c ****   txHeader2.RTR = CAN_RTR_DATA;
 1347              		.loc 1 169 3 is_stmt 1 view .LVU433
 169:Core/Src/main.c ****   txHeader2.RTR = CAN_RTR_DATA;
 1348              		.loc 1 169 17 is_stmt 0 view .LVU434
 1349 004a 9360     		str	r3, [r2, #8]
 170:Core/Src/main.c ****   txHeader2.StdId = 0x0C1;
 1350              		.loc 1 170 3 is_stmt 1 view .LVU435
 170:Core/Src/main.c ****   txHeader2.StdId = 0x0C1;
 1351              		.loc 1 170 17 is_stmt 0 view .LVU436
 1352 004c D360     		str	r3, [r2, #12]
 171:Core/Src/main.c ****   txHeader2.ExtId = 0;
 1353              		.loc 1 171 3 is_stmt 1 view .LVU437
 171:Core/Src/main.c ****   txHeader2.ExtId = 0;
 1354              		.loc 1 171 19 is_stmt 0 view .LVU438
 1355 004e C121     		movs	r1, #193
 1356 0050 1160     		str	r1, [r2]
 172:Core/Src/main.c ****   txHeader2.TransmitGlobalTime = DISABLE;
 1357              		.loc 1 172 3 is_stmt 1 view .LVU439
 172:Core/Src/main.c ****   txHeader2.TransmitGlobalTime = DISABLE;
 1358              		.loc 1 172 19 is_stmt 0 view .LVU440
 1359 0052 5360     		str	r3, [r2, #4]
 173:Core/Src/main.c **** 
 1360              		.loc 1 173 3 is_stmt 1 view .LVU441
 173:Core/Src/main.c **** 
 1361              		.loc 1 173 32 is_stmt 0 view .LVU442
 1362 0054 1375     		strb	r3, [r2, #20]
 175:Core/Src/main.c **** 	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);   // Initialize CAN Bus Rx Inte
 1363              		.loc 1 175 2 is_stmt 1 view .LVU443
 1364 0056 0D4C     		ldr	r4, .L75+12
 1365 0058 2046     		mov	r0, r4
 1366 005a FFF7FEFF 		bl	HAL_CAN_Start
 1367              	.LVL51:
 176:Core/Src/main.c **** 
 1368              		.loc 1 176 2 view .LVU444
 1369 005e 0221     		movs	r1, #2
 1370 0060 2046     		mov	r0, r4
 1371 0062 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1372              	.LVL52:
 179:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim13);
 1373              		.loc 1 179 3 view .LVU445
 1374 0066 0A48     		ldr	r0, .L75+16
 1375 0068 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1376              	.LVL53:
 180:Core/Src/main.c **** 
ARM GAS  /tmp/cc3ERXfA.s 			page 46


 1377              		.loc 1 180 3 view .LVU446
 1378 006c 0948     		ldr	r0, .L75+20
 1379 006e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1380              	.LVL54:
 183:Core/Src/main.c **** 
 1381              		.loc 1 183 2 view .LVU447
 1382 0072 40F6F672 		movw	r2, #4086
 1383 0076 0849     		ldr	r1, .L75+24
 1384 0078 0848     		ldr	r0, .L75+28
 1385 007a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1386              	.LVL55:
 1387              	.L73:
 189:Core/Src/main.c ****   {
 1388              		.loc 1 189 3 discriminator 1 view .LVU448
 194:Core/Src/main.c ****   /* USER CODE END 3 */
 1389              		.loc 1 194 3 discriminator 1 view .LVU449
 189:Core/Src/main.c ****   {
 1390              		.loc 1 189 9 discriminator 1 view .LVU450
 1391 007e FEE7     		b	.L73
 1392              	.L76:
 1393              		.align	2
 1394              	.L75:
 1395 0080 00000000 		.word	txHeader0
 1396 0084 00000000 		.word	txHeader1
 1397 0088 00000000 		.word	txHeader2
 1398 008c 00000000 		.word	hcan1
 1399 0090 00000000 		.word	htim14
 1400 0094 00000000 		.word	htim13
 1401 0098 00000000 		.word	adc_buf
 1402 009c 00000000 		.word	hadc1
 1403              		.cfi_endproc
 1404              	.LFE216:
 1406              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1407              		.align	1
 1408              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 1409              		.syntax unified
 1410              		.thumb
 1411              		.thumb_func
 1412              		.fpu fpv4-sp-d16
 1414              	HAL_CAN_RxFifo0MsgPendingCallback:
 1415              	.LVL56:
 1416              	.LFB224:
 476:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 1417              		.loc 1 476 1 view -0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 0, uses_anonymous_args = 0
 476:Core/Src/main.c ****   if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 1421              		.loc 1 476 1 is_stmt 0 view .LVU452
 1422 0000 08B5     		push	{r3, lr}
 1423              	.LCFI21:
 1424              		.cfi_def_cfa_offset 8
 1425              		.cfi_offset 3, -8
 1426              		.cfi_offset 14, -4
 477:Core/Src/main.c ****     Error_Handler();
 1427              		.loc 1 477 3 is_stmt 1 view .LVU453
 477:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/cc3ERXfA.s 			page 47


 1428              		.loc 1 477 7 is_stmt 0 view .LVU454
 1429 0002 124B     		ldr	r3, .L85
 1430 0004 124A     		ldr	r2, .L85+4
 1431 0006 0021     		movs	r1, #0
 1432 0008 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1433              	.LVL57:
 477:Core/Src/main.c ****     Error_Handler();
 1434              		.loc 1 477 6 view .LVU455
 1435 000c 38B9     		cbnz	r0, .L82
 481:Core/Src/main.c ****   {
 1436              		.loc 1 481 3 is_stmt 1 view .LVU456
 481:Core/Src/main.c ****   {
 1437              		.loc 1 481 15 is_stmt 0 view .LVU457
 1438 000e 104B     		ldr	r3, .L85+4
 1439 0010 1B68     		ldr	r3, [r3]
 481:Core/Src/main.c ****   {
 1440              		.loc 1 481 6 view .LVU458
 1441 0012 A72B     		cmp	r3, #167
 1442 0014 05D0     		beq	.L83
 1443              	.L79:
 492:Core/Src/main.c ****   {
 1444              		.loc 1 492 3 is_stmt 1 view .LVU459
 492:Core/Src/main.c ****   {
 1445              		.loc 1 492 6 is_stmt 0 view .LVU460
 1446 0016 B3F5D66F 		cmp	r3, #1712
 1447 001a 0ED0     		beq	.L84
 1448              	.L77:
 501:Core/Src/main.c **** 
 1449              		.loc 1 501 1 view .LVU461
 1450 001c 08BD     		pop	{r3, pc}
 1451              	.L82:
 478:Core/Src/main.c **** 
 1452              		.loc 1 478 5 is_stmt 1 view .LVU462
 1453 001e FFF7FEFF 		bl	Error_Handler
 1454              	.LVL58:
 1455              	.L83:
 481:Core/Src/main.c ****   {
 1456              		.loc 1 481 42 is_stmt 0 discriminator 1 view .LVU463
 1457 0022 0B4A     		ldr	r2, .L85+4
 1458 0024 1269     		ldr	r2, [r2, #16]
 481:Core/Src/main.c ****   {
 1459              		.loc 1 481 31 discriminator 1 view .LVU464
 1460 0026 082A     		cmp	r2, #8
 1461 0028 F5D1     		bne	.L79
 1462              	.LBB11:
 484:Core/Src/main.c ****     int rine2 = canRX[1];
 1463              		.loc 1 484 4 is_stmt 1 view .LVU465
 484:Core/Src/main.c ****     int rine2 = canRX[1];
 1464              		.loc 1 484 21 is_stmt 0 view .LVU466
 1465 002a 0849     		ldr	r1, .L85
 1466 002c 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 1467              	.LVL59:
 485:Core/Src/main.c **** 
 1468              		.loc 1 485 5 is_stmt 1 view .LVU467
 485:Core/Src/main.c **** 
 1469              		.loc 1 485 22 is_stmt 0 view .LVU468
 1470 002e 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
ARM GAS  /tmp/cc3ERXfA.s 			page 48


 1471              	.LVL60:
 488:Core/Src/main.c ****   }
 1472              		.loc 1 488 5 is_stmt 1 view .LVU469
 488:Core/Src/main.c ****   }
 1473              		.loc 1 488 36 is_stmt 0 view .LVU470
 1474 0030 42EA0122 		orr	r2, r2, r1, lsl #8
 1475              	.LVL61:
 488:Core/Src/main.c ****   }
 1476              		.loc 1 488 21 view .LVU471
 1477 0034 0749     		ldr	r1, .L85+8
 1478              	.LVL62:
 488:Core/Src/main.c ****   }
 1479              		.loc 1 488 21 view .LVU472
 1480 0036 0A60     		str	r2, [r1]
 1481 0038 EDE7     		b	.L79
 1482              	.LVL63:
 1483              	.L84:
 488:Core/Src/main.c ****   }
 1484              		.loc 1 488 21 view .LVU473
 1485              	.LBE11:
 1486              	.LBB12:
 495:Core/Src/main.c ****     int volt2 = canRX[3];
 1487              		.loc 1 495 4 is_stmt 1 view .LVU474
 495:Core/Src/main.c ****     int volt2 = canRX[3];
 1488              		.loc 1 495 21 is_stmt 0 view .LVU475
 1489 003a 044A     		ldr	r2, .L85
 1490 003c 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 1491              	.LVL64:
 496:Core/Src/main.c **** 
 1492              		.loc 1 496 5 is_stmt 1 view .LVU476
 496:Core/Src/main.c **** 
 1493              		.loc 1 496 22 is_stmt 0 view .LVU477
 1494 003e D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 1495              	.LVL65:
 499:Core/Src/main.c ****   }
 1496              		.loc 1 499 5 is_stmt 1 view .LVU478
 499:Core/Src/main.c ****   }
 1497              		.loc 1 499 31 is_stmt 0 view .LVU479
 1498 0040 43EA0123 		orr	r3, r3, r1, lsl #8
 1499              	.LVL66:
 499:Core/Src/main.c ****   }
 1500              		.loc 1 499 16 view .LVU480
 1501 0044 044A     		ldr	r2, .L85+12
 1502 0046 1360     		str	r3, [r2]
 1503              	.LBE12:
 501:Core/Src/main.c **** 
 1504              		.loc 1 501 1 view .LVU481
 1505 0048 E8E7     		b	.L77
 1506              	.L86:
 1507 004a 00BF     		.align	2
 1508              	.L85:
 1509 004c 00000000 		.word	.LANCHOR6
 1510 0050 00000000 		.word	rxHeader
 1511 0054 00000000 		.word	.LANCHOR2
 1512 0058 00000000 		.word	.LANCHOR3
 1513              		.cfi_endproc
 1514              	.LFE224:
ARM GAS  /tmp/cc3ERXfA.s 			page 49


 1516              		.comm	canFilter1,40,4
 1517              		.comm	canFilter0,40,4
 1518              		.global	canRX
 1519              		.comm	rxHeader,28,4
 1520              		.comm	TxData,8,4
 1521              		.comm	txHeader2,24,4
 1522              		.comm	txHeader1,24,4
 1523              		.comm	txHeader0,24,4
 1524              		.comm	TxMailbox,4,4
 1525              		.global	voltageCheckCount
 1526              		.global	lastPrechargeState
 1527              		.global	prechargeState
 1528              		.global	readyToDrive
 1529              		.global	DCDCFault
 1530              		.comm	adc_buf,16344,4
 1531              		.global	RTDButtonPressed
 1532              		.global	DCDCEnable
 1533              		.global	vicoreTemp
 1534              		.global	bmsVoltage
 1535              		.global	rinehartVoltage
 1536              		.global	rinehart_send_command_count
 1537              		.comm	htim14,72,4
 1538              		.comm	htim13,72,4
 1539              		.comm	hcan1,40,4
 1540              		.comm	hdma_adc1,96,4
 1541              		.comm	hadc1,72,4
 1542              		.section	.bss.DCDCEnable,"aw",%nobits
 1543              		.align	2
 1546              	DCDCEnable:
 1547 0000 00000000 		.space	4
 1548              		.section	.bss.DCDCFault,"aw",%nobits
 1549              		.align	2
 1550              		.set	.LANCHOR4,. + 0
 1553              	DCDCFault:
 1554 0000 00000000 		.space	4
 1555              		.section	.bss.RTDButtonPressed,"aw",%nobits
 1556              		.align	2
 1559              	RTDButtonPressed:
 1560 0000 00000000 		.space	4
 1561              		.section	.bss.bmsVoltage,"aw",%nobits
 1562              		.align	2
 1563              		.set	.LANCHOR3,. + 0
 1566              	bmsVoltage:
 1567 0000 00000000 		.space	4
 1568              		.section	.bss.canRX,"aw",%nobits
 1569              		.align	2
 1570              		.set	.LANCHOR6,. + 0
 1573              	canRX:
 1574 0000 00000000 		.space	8
 1574      00000000 
 1575              		.section	.bss.lastPrechargeState,"aw",%nobits
 1578              	lastPrechargeState:
 1579 0000 00       		.space	1
 1580              		.section	.bss.prechargeState,"aw",%nobits
 1581              		.set	.LANCHOR0,. + 0
 1584              	prechargeState:
 1585 0000 00       		.space	1
ARM GAS  /tmp/cc3ERXfA.s 			page 50


 1586              		.section	.bss.readyToDrive,"aw",%nobits
 1587              		.align	2
 1588              		.set	.LANCHOR1,. + 0
 1591              	readyToDrive:
 1592 0000 00000000 		.space	4
 1593              		.section	.bss.rinehartVoltage,"aw",%nobits
 1594              		.align	2
 1595              		.set	.LANCHOR2,. + 0
 1598              	rinehartVoltage:
 1599 0000 00000000 		.space	4
 1600              		.section	.bss.rinehart_send_command_count,"aw",%nobits
 1603              	rinehart_send_command_count:
 1604 0000 00       		.space	1
 1605              		.section	.bss.vicoreTemp,"aw",%nobits
 1606              		.align	2
 1607              		.set	.LANCHOR5,. + 0
 1610              	vicoreTemp:
 1611 0000 00000000 		.space	4
 1612              		.section	.bss.voltageCheckCount,"aw",%nobits
 1615              	voltageCheckCount:
 1616 0000 00       		.space	1
 1617              		.text
 1618              	.Letext0:
 1619              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1620              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1621              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1622              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1623              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1624              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1625              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1626              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1627              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1628              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1629              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1630              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1631              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1632              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1633              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1634              		.file 18 "<built-in>"
ARM GAS  /tmp/cc3ERXfA.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc3ERXfA.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc3ERXfA.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc3ERXfA.s:151    .text.MX_GPIO_Init:0000000000000080 $d
     /tmp/cc3ERXfA.s:157    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc3ERXfA.s:163    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc3ERXfA.s:212    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc3ERXfA.s:220    .text.prechargeControl:0000000000000000 $t
     /tmp/cc3ERXfA.s:227    .text.prechargeControl:0000000000000000 prechargeControl
     /tmp/cc3ERXfA.s:247    .text.prechargeControl:000000000000000e $d
     /tmp/cc3ERXfA.s:251    .text.prechargeControl:0000000000000012 $t
     /tmp/cc3ERXfA.s:469    .text.prechargeControl:0000000000000100 $d
                            *COM*:0000000000000008 TxData
                            *COM*:0000000000000004 TxMailbox
                            *COM*:0000000000000018 txHeader2
                            *COM*:0000000000000028 hcan1
     /tmp/cc3ERXfA.s:483    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc3ERXfA.s:490    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc3ERXfA.s:580    .text.HAL_TIM_PeriodElapsedCallback:0000000000000054 $d
                            *COM*:0000000000000048 htim14
                            *COM*:0000000000000048 htim13
                            *COM*:0000000000000018 txHeader1
     /tmp/cc3ERXfA.s:596    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc3ERXfA.s:603    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc3ERXfA.s:653    .text.HAL_ADC_ConvCpltCallback:0000000000000028 $d
                            *COM*:0000000000003fd8 adc_buf
     /tmp/cc3ERXfA.s:660    .text.Error_Handler:0000000000000000 $t
     /tmp/cc3ERXfA.s:667    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc3ERXfA.s:699    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cc3ERXfA.s:705    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cc3ERXfA.s:844    .text.MX_CAN1_Init:0000000000000078 $d
                            *COM*:0000000000000028 canFilter0
                            *COM*:0000000000000028 canFilter1
     /tmp/cc3ERXfA.s:852    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc3ERXfA.s:858    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc3ERXfA.s:965    .text.MX_ADC1_Init:0000000000000060 $d
                            *COM*:0000000000000048 hadc1
     /tmp/cc3ERXfA.s:972    .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/cc3ERXfA.s:978    .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/cc3ERXfA.s:1027   .text.MX_TIM14_Init:0000000000000028 $d
     /tmp/cc3ERXfA.s:1033   .text.MX_TIM13_Init:0000000000000000 $t
     /tmp/cc3ERXfA.s:1039   .text.MX_TIM13_Init:0000000000000000 MX_TIM13_Init
     /tmp/cc3ERXfA.s:1088   .text.MX_TIM13_Init:0000000000000028 $d
     /tmp/cc3ERXfA.s:1094   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc3ERXfA.s:1101   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc3ERXfA.s:1252   .text.SystemClock_Config:0000000000000098 $d
     /tmp/cc3ERXfA.s:1258   .text.main:0000000000000000 $t
     /tmp/cc3ERXfA.s:1265   .text.main:0000000000000000 main
     /tmp/cc3ERXfA.s:1395   .text.main:0000000000000080 $d
                            *COM*:0000000000000018 txHeader0
     /tmp/cc3ERXfA.s:1407   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cc3ERXfA.s:1414   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cc3ERXfA.s:1509   .text.HAL_CAN_RxFifo0MsgPendingCallback:000000000000004c $d
                            *COM*:000000000000001c rxHeader
     /tmp/cc3ERXfA.s:1573   .bss.canRX:0000000000000000 canRX
     /tmp/cc3ERXfA.s:1615   .bss.voltageCheckCount:0000000000000000 voltageCheckCount
ARM GAS  /tmp/cc3ERXfA.s 			page 52


     /tmp/cc3ERXfA.s:1578   .bss.lastPrechargeState:0000000000000000 lastPrechargeState
     /tmp/cc3ERXfA.s:1584   .bss.prechargeState:0000000000000000 prechargeState
     /tmp/cc3ERXfA.s:1591   .bss.readyToDrive:0000000000000000 readyToDrive
     /tmp/cc3ERXfA.s:1553   .bss.DCDCFault:0000000000000000 DCDCFault
     /tmp/cc3ERXfA.s:1559   .bss.RTDButtonPressed:0000000000000000 RTDButtonPressed
     /tmp/cc3ERXfA.s:1546   .bss.DCDCEnable:0000000000000000 DCDCEnable
     /tmp/cc3ERXfA.s:1610   .bss.vicoreTemp:0000000000000000 vicoreTemp
     /tmp/cc3ERXfA.s:1566   .bss.bmsVoltage:0000000000000000 bmsVoltage
     /tmp/cc3ERXfA.s:1598   .bss.rinehartVoltage:0000000000000000 rinehartVoltage
     /tmp/cc3ERXfA.s:1603   .bss.rinehart_send_command_count:0000000000000000 rinehart_send_command_count
                            *COM*:0000000000000060 hdma_adc1
     /tmp/cc3ERXfA.s:1543   .bss.DCDCEnable:0000000000000000 $d
     /tmp/cc3ERXfA.s:1549   .bss.DCDCFault:0000000000000000 $d
     /tmp/cc3ERXfA.s:1556   .bss.RTDButtonPressed:0000000000000000 $d
     /tmp/cc3ERXfA.s:1562   .bss.bmsVoltage:0000000000000000 $d
     /tmp/cc3ERXfA.s:1569   .bss.canRX:0000000000000000 $d
     /tmp/cc3ERXfA.s:1579   .bss.lastPrechargeState:0000000000000000 $d
     /tmp/cc3ERXfA.s:1585   .bss.prechargeState:0000000000000000 $d
     /tmp/cc3ERXfA.s:1587   .bss.readyToDrive:0000000000000000 $d
     /tmp/cc3ERXfA.s:1594   .bss.rinehartVoltage:0000000000000000 $d
     /tmp/cc3ERXfA.s:1604   .bss.rinehart_send_command_count:0000000000000000 $d
     /tmp/cc3ERXfA.s:1606   .bss.vicoreTemp:0000000000000000 $d
     /tmp/cc3ERXfA.s:1616   .bss.voltageCheckCount:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_ui2d
__aeabi_dmul
__aeabi_dcmpgt
HAL_CAN_AddTxMessage
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start_IT
HAL_ADC_Start_DMA
HAL_CAN_GetRxMessage
